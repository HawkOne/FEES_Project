/***************************************************************************************************
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *												   												   *
 *      FFFFFFFFFFFFFFFFFFFFFFEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE   SSSSSSSSSSSSSSS       *
 *      F::::::::::::::::::::FE::::::::::::::::::::EE::::::::::::::::::::E SS:::::::::::::::S      *
 *      F::::::::::::::::::::FE::::::::::::::::::::EE::::::::::::::::::::ES:::::SSSSSS::::::S      *
 *      FF::::::FFFFFFFFF::::FEE::::::EEEEEEEEE::::EEE::::::EEEEEEEEE::::ES:::::S     SSSSSSS      *
 *        F:::::F       FFFFFF  E:::::E       EEEEEE  E:::::E       EEEEEES:::::S                  *
 *        F:::::F               E:::::E               E:::::E             S:::::S                  *
 *        F::::::FFFFFFFFFF     E::::::EEEEEEEEEE     E::::::EEEEEEEEEE    S::::SSSS               *
 * ----   F:::::::::::::::F     E:::::::::::::::E     E:::::::::::::::E     SS::::::SSSSS     ---- *
 * -::-   F:::::::::::::::F     E:::::::::::::::E     E:::::::::::::::E       SSS::::::::SS   -::- *
 * ----   F::::::FFFFFFFFFF     E::::::EEEEEEEEEE     E::::::EEEEEEEEEE          SSSSSS::::S  ---- *
 *        F:::::F               E:::::E               E:::::E                         S:::::S      *
 *        F:::::F               E:::::E       EEEEEE  E:::::E       EEEEEE            S:::::S      *
 *      FF:::::::FF           EE::::::EEEEEEEE:::::EEE::::::EEEEEEEE:::::ESSSSSSS     S:::::S      *
 *      F::::::::FF           E::::::::::::::::::::EE::::::::::::::::::::ES::::::SSSSSS:::::S      *
 *      F::::::::FF           E::::::::::::::::::::EE::::::::::::::::::::ES:::::::::::::::SS       *
 *      FFFFFFFFFFF           EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE SSSSSSSSSSSSSSS         *
 *												   												   *
 *                  __    __     __     __   __    __  __ __       __    ___                       *
 *                 |_ |  |_ \_/||__)|  |_   |_ \_/|__)|_ |__)||\/||_ |\ | |  /\ |                  *
 *                 |  |__|__/ \||__)|__|__  |__/ \|   |__| \ ||  ||__| \| | /--\|__                *
 *                    __     __  __ __  __  __ __    __   ___ __       ___ __                      *
 *                   |_ |\/||__)|_ |  \|  \|_ |  \  (_  /\ | |_ |  |  | | |_                       *
 *                   |__|  ||__)|__|__/|__/|__|__/  __)/--\| |__|__|__| | |__                      *
 *                                                                                                 *
 *												    											   *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *												   												   *
 *											FEES Project			 					           *
 *		    			URL: https://github.com/ferrandi/DEIB-DAER-project		                   *
 *				 					Politecnico di Milano - DEIB                                   *
 *			    						   Stefano Ampolo	    			                       *
 *		 			  ***********************************************************                  *
 *        		 	   		Copyright (c) 2018-2019 Politecnico di Milano				   		   *
 *                                                                                                 *
 *     This file is part of the FEES framework.                                                    *
 *                                                                                                 *
 *     The FEES framework is free software; you can redistribute it and/or modify                  *
 *     it under the terms of the GNU General Public License as published by                        *
 *     the Free Software Foundation; either version 3 of the License, or                           *
 *     (at your option) any later version.                                                         *
 *                                                                                                 *
 *     This program is distributed in the hope that it will be useful,                             *
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of                              *
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                               *
 *     GNU General Public License for more details.                                                *
 *                                                                                                 *
 *     You should have received a copy of the GNU General Public License                           *
 *     along with this program.  If not, see <http://www.gnu.org/licenses/>.                       *
 *                                                                                                 *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 * FILE: 2_Threads&Handlers.cpp  - Former GpiosAndFunctions
 * DESCRIPTION: This file(s) Define and describe the core of the Housekeeping of the FEES System
 *
 *  Created on: 14 mar 2019
 *      Author: Stefano Ampolo
 */


#include "1_Hardware&Drivers.hpp"
#include "2_Threads&Handlers.hpp"
#include "3_Application&FSM.hpp"

#include <iostream>
#include <cstdint>
#include <thread>

using namespace std;


bool GPIO[34];

bool Flag_Telecom_Active=0;
bool Flag_Analog_Active=0;
bool Flag_GPS_Active=0;
bool Flag_Iridium_Active=0;
bool Flag_Radex_Active=0;
bool Flag_RaspberryPi_WD_Active=0;
bool Flag_ADCS_Active=0;
bool Flag_BatteryManagement_Active=0;
bool Flag_Hardware_Watchdog_Active=0;
bool Flag_Transmission_Watchdog_Active=0;


void GpioSet(GPIO_TypeDef* GPIO_PORT , uint16_t GPIO_PIN , int pin){
	GPIO[pin]=1;  // Update of the GPIO Status Array

#ifdef BAREMETAL
	HAL_GPIO_WritePin(GPIO_PORT, GPIO_PIN, 1);
#endif // BAREMETAL

#ifdef CHIBIOS
	palSetPad(GPIO_PORT, GPIO_PIN)
#endif // CHIBIOS

#ifdef ARDUPILOT
	hal.gpio->write(pin, 1 );	//Ardupilot Hal Function
#endif // ARDUPILOT

#ifdef FREERTOS

#endif // CHIBIOS

	//STUB FUNCTION PRINT
	//cout << " GPIO N " << pin << " set to HIGH - 1 \n";
}
void GpioReset(GPIO_TypeDef* GPIO_PORT , uint16_t GPIO_PIN , int pin){
	GPIO[pin]=0;  // Update of the GPIO Status Array

#ifdef BAREMETAL
	HAL_GPIO_WritePin(GPIO_PORT, GPIO_PIN, 0);
#endif // BAREMETAL

#ifdef CHIBIOS
	palClearPad(GPIO_PORT, GPIO_PIN)
#endif // CHIBIOS

#ifdef ARDUPILOT
	hal.gpio->write(pin, 0 );	//Ardupilot Hal Function
#endif // ARDUPILOT

#ifdef FREERTOS

	#endif // CHIBIOS

	//STUB FUNCTION PRINT
	//cout << " GPIO N " << pin << " set to LOW - 0 \n";
}



void Update_Pin_Mask(state_t NewState){
	switch(NewState){

	    case RECOVER_PREV_STATE:
	    	Pin_Mask_All_OFF();
	    	break;

	    case IN_VECTOR:
	    	Pin_Mask_InVector();
	    	break;

	    case WAIT_FIRST_TIMER:
	    	Pin_Mask_Wait();
	    	break;

	    case DETUMBLE_SECOND_TIMER:
   	    	Pin_Mask_Detumble();
	    	 break;

	    case NOMINAL:
	    	Pin_Mask_Nominal();
	    	break;

	    case TRANSMISSION:
	    	Pin_Mask_Transmission();
	    	break;

	    case RADEX_MODE:
	    	Pin_Mask_RADEX();
	    	break;

	    default:
	    	Pin_Mask_All_OFF();
	    	break;
	}
	return;
}

void Pin_Mask_All_OFF(){

	//	PAYLOAD CONTROL

	/******************************| TELECOM DEVICE-PAYLOAD       (PC13)*(GPIO 0 )   ******/
	//TELECOM_PowerON();
	TELECOM_PowerOFF();
	//TELECOM_PowerRESET();

	/******************************| Analog_DEVICES-PAYLOAD       (PE0)*(GPIO 2 )    ********/
	//Analog_PowerON();
	Analog_PowerOFF();
	//Analog_PowerRESET();

	/******************************| GPS DEVICE-PAYLOAD           (PE2)*( GPIO 1 )   *******/
	//GPS_PowerON();
	GPS_PowerOFF();
	//GPS_PowerRESET();

	/******************************| Iridium Trasmitter PAYLOAD   (PE3)*(GPIO 29)    ******/
	//Iridium_PowerON();
	Iridium_PowerOFF();
	//Iridium_PowerRESET();

	// IRIDIUM	CONTROL
	GpioReset(SBD_PWR_ON_GPIO_Port, SBD_PWR_ON_Pin , SDB_PWR_ON); // Iridium Pwr On

	GpioReset(SBD_SER_DCD_GPIO_PORT, SBD_SER_DCD_Pin, SBD_SER_DCD );
	GpioReset(SBD_SER_DSR_GPIO_PORT, SBD_SER_DSR_Pin, SBD_SER_DSR );
	GpioReset(SBD_SER_DTR_GPIO_PORT, SBD_SER_DTR_Pin, SBD_SER_DTR );
	GpioReset(SBD_SER_CTS_GPIO_PORT, SBD_SER_CTS_Pin, SBD_SER_CTS );
	GpioReset(SBD_SER_RTS_GPIO_PORT, SBD_SER_RTS_Pin, SBD_SER_RTS );
	GpioReset(SBD_SER_ON_OFF_GPIO_PORT, SBD_SER_ON_OFF_Pin, SBD_SER_ON_OFF );
	GpioReset(SBD_SER_RI_GPIO_PORT, SBD_SER_RI_Pin, SBD_SER_RI );
	GpioReset(SBD_SER_NET_GPIO_PORT, SBD_SER_NET_Pin, SBD_SER_NET );
	
	// RADEX SIGNAL
	//Radex One-Wire Temp-Signal
	Gpio_HAL_Reset(RADFET_OWB_GPIO_PORT, RADFET_OWB_Pin , RADFET_OWB );	

	/******************************| RAD-Experiment PAYLOAD    (PE1)*( GPIO 5 )  ******/
	//Radex_PowerON();
	Radex_PowerOFF();
	//Radex_PowerRESET();

	//Radex_SignalRESET();   // Signal GPIO 6 - This RESETS THE 32BitAdc

	/*********************************** RASPBERRY-Pi CONTROL - (GPIO 3 - 4)  ******/
	//RaspberryPi_PowerON();
	RaspberryPi_PowerOFF();
	//RaspberryPi_PowerRESET();
	//GpioReset(RSBY_ON_GPIO_Port, RSBY_ON_Pin, RSBY_ON);   // GPIO 3
	//GpioReset(RSBY_KEEP_EN_GPIO_Port, RSBY_KEEP_EN_Pin, RSBY_KEEP_EN ); 	//KeepON(AliveSignal)  - GPIO 4

	/******************************	MagnetoTorquerControl - ADCS SYSTEM   	*******/
	//ADCS_ON();
	ADCS_OFF();
	/*
	// PWM - GPIO  CONTROL
	GpioReset(PWM_X_COIL_GPIO_Port, PWM_X_COIL_Pin, PWM_X_COIL);
	GpioReset(PWM_Y_COIL_GPIO_PORT, PWM_Y_COIL_Pin, PWM_Y_COIL);
	GpioReset(PWM_Z_COIL_GPIO_Port, PWM_Z_COIL_Pin, PWM_Z_COIL);
	// PWM DIRECTION CONTROL
	GpioReset(DIR_X_COIL_GPIO_Port, DIR_X_COIL_Pin, DIR_X_COIL);
	GpioReset(DIR_Y_COIL_GPIO_Port, DIR_Y_COIL_Pin, DIR_Y_COIL);
	GpioReset(DIR_Z_COIL_GPIO_Port, DIR_Z_COIL_Pin, DIR_Z_COIL);
	*/

	/******************************	BATTERY THERMAL Control SYSTEM  (PWM 4)(GPIO 14)*/
	// BATTERY HEATER PWM - GPIO 14
	//BatteryThermal_Management_ON();
	BatteryThermal_Management_OFF();
	//GpioReset(PWM_HEATER_GPIO_PORT, PWM_HEATER_Pin, PWM_HEATER);

	/******************************	WatchDog  Control 	***************************/
	GpioReset(WATCHDOG_GPIO_PORT, WATCHDOG_Pin, WATCHDOG);

	/******************************	EXTERNAL GPIO  Control ************************/
	//GpioSet(EX_GPIO_1_GPIO_PORT, EX_GPIO_1_Pin, EX_GPIO_1);
	GpioReset(EX_GPIO_1_GPIO_PORT, EX_GPIO_1_Pin, EX_GPIO_1);

	//GpioSet(EX_GPIO_2_GPIO_PORT, EX_GPIO_2_Pin, EX_GPIO_2);
	GpioReset(EX_GPIO_2_GPIO_PORT, EX_GPIO_2_Pin, EX_GPIO_2);

	//GpioSet(EX_GPIO_3_GPIO_PORT, EX_GPIO_3_Pin, EX_GPIO_3);
	GpioReset(EX_GPIO_3_GPIO_PORT, EX_GPIO_3_Pin, EX_GPIO_3);

	//GpioSet(EX_GPIO_4_GPIO_PORT, EX_GPIO_4_Pin, EX_GPIO_4);
	GpioReset(EX_GPIO_4_GPIO_PORT, EX_GPIO_4_Pin, EX_GPIO_4);


	/******************************	LED - TELECOM WATCHDOG  Control  (GPIO 19) ****/
	GpioReset(TMTC_MCU_WD_GPIO_PORT, TMTC_MCU_WD_Pin , TMTC_MCU_WD ); // Led - Attivo Basso
	

	/******************************	PSD SELECTOR  Control  ******************* ****/
	GpioReset(PSD1_SEL0_GPIO_PORT, PSD1_SEL0_Pin, PSD1_SEL0);
	GpioReset(PSD1_SEL1_GPIO_PORT, PSD1_SEL1_Pin, PSD1_SEL1);
	GpioReset(PSD2_SEL0_GPIO_PORT, PSD2_SEL0_Pin, PSD2_SEL0);
	GpioReset(PSD2_SEL1_GPIO_Port, PSD2_SEL1_Pin, PSD2_SEL1);

}