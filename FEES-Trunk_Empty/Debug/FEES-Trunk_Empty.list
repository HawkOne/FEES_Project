
FEES-Trunk_Empty.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a84c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003cc  0800a9dc  0800a9dc  0001a9dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ada8  0800ada8  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800ada8  0800ada8  0001ada8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800adb0  0800adb0  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800adb0  0800adb0  0001adb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800adb4  0800adb4  0001adb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800adb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006224  200001e4  0800af9c  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006408  0800af9c  00026408  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000265e4  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004355  00000000  00000000  000467f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001e98  00000000  00000000  0004ab50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001cd8  00000000  00000000  0004c9e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026557  00000000  00000000  0004e6c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00017b18  00000000  00000000  00074c17  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e11ce  00000000  00000000  0008c72f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016d8fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008b7c  00000000  00000000  0016d978  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a9c4 	.word	0x0800a9c4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	0800a9c4 	.word	0x0800a9c4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <FEES_SOS>:

#include <string.h>



void FEES_SOS(int delay){
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
	  HAL_GPIO_WritePin(GPIOD_BASE, GPIO_PIN_12, GPIO_PIN_SET);
 8000578:	2201      	movs	r2, #1
 800057a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800057e:	485a      	ldr	r0, [pc, #360]	; (80006e8 <FEES_SOS+0x178>)
 8000580:	f002 fbd0 	bl	8002d24 <HAL_GPIO_WritePin>

	  // S = . . .
	  HAL_GPIO_TogglePin(GPIOD_BASE, GPIO_PIN_12); 	HAL_Delay(delay); 	  	HAL_GPIO_TogglePin(GPIOD_BASE, GPIO_PIN_12);	  HAL_Delay(delay);
 8000584:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000588:	4857      	ldr	r0, [pc, #348]	; (80006e8 <FEES_SOS+0x178>)
 800058a:	f002 fbe4 	bl	8002d56 <HAL_GPIO_TogglePin>
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	4618      	mov	r0, r3
 8000592:	f001 fea5 	bl	80022e0 <HAL_Delay>
 8000596:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800059a:	4853      	ldr	r0, [pc, #332]	; (80006e8 <FEES_SOS+0x178>)
 800059c:	f002 fbdb 	bl	8002d56 <HAL_GPIO_TogglePin>
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	4618      	mov	r0, r3
 80005a4:	f001 fe9c 	bl	80022e0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOD_BASE, GPIO_PIN_12); 	HAL_Delay(delay); 	  	HAL_GPIO_TogglePin(GPIOD_BASE, GPIO_PIN_12);	  HAL_Delay(delay);
 80005a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005ac:	484e      	ldr	r0, [pc, #312]	; (80006e8 <FEES_SOS+0x178>)
 80005ae:	f002 fbd2 	bl	8002d56 <HAL_GPIO_TogglePin>
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	4618      	mov	r0, r3
 80005b6:	f001 fe93 	bl	80022e0 <HAL_Delay>
 80005ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005be:	484a      	ldr	r0, [pc, #296]	; (80006e8 <FEES_SOS+0x178>)
 80005c0:	f002 fbc9 	bl	8002d56 <HAL_GPIO_TogglePin>
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	4618      	mov	r0, r3
 80005c8:	f001 fe8a 	bl	80022e0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOD_BASE, GPIO_PIN_12); 	HAL_Delay(delay); 	  	HAL_GPIO_TogglePin(GPIOD_BASE, GPIO_PIN_12);	  HAL_Delay(delay);
 80005cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005d0:	4845      	ldr	r0, [pc, #276]	; (80006e8 <FEES_SOS+0x178>)
 80005d2:	f002 fbc0 	bl	8002d56 <HAL_GPIO_TogglePin>
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	4618      	mov	r0, r3
 80005da:	f001 fe81 	bl	80022e0 <HAL_Delay>
 80005de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005e2:	4841      	ldr	r0, [pc, #260]	; (80006e8 <FEES_SOS+0x178>)
 80005e4:	f002 fbb7 	bl	8002d56 <HAL_GPIO_TogglePin>
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	4618      	mov	r0, r3
 80005ec:	f001 fe78 	bl	80022e0 <HAL_Delay>
	  // O = - - -
	  HAL_GPIO_TogglePin(GPIOD_BASE, GPIO_PIN_12);	HAL_Delay(delay*2); 	HAL_GPIO_TogglePin(GPIOD_BASE, GPIO_PIN_12);	  HAL_Delay(delay*2);
 80005f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005f4:	483c      	ldr	r0, [pc, #240]	; (80006e8 <FEES_SOS+0x178>)
 80005f6:	f002 fbae 	bl	8002d56 <HAL_GPIO_TogglePin>
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	005b      	lsls	r3, r3, #1
 80005fe:	4618      	mov	r0, r3
 8000600:	f001 fe6e 	bl	80022e0 <HAL_Delay>
 8000604:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000608:	4837      	ldr	r0, [pc, #220]	; (80006e8 <FEES_SOS+0x178>)
 800060a:	f002 fba4 	bl	8002d56 <HAL_GPIO_TogglePin>
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	005b      	lsls	r3, r3, #1
 8000612:	4618      	mov	r0, r3
 8000614:	f001 fe64 	bl	80022e0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOD_BASE, GPIO_PIN_12);	HAL_Delay(delay*2); 	HAL_GPIO_TogglePin(GPIOD_BASE, GPIO_PIN_12);	  HAL_Delay(delay*2);
 8000618:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800061c:	4832      	ldr	r0, [pc, #200]	; (80006e8 <FEES_SOS+0x178>)
 800061e:	f002 fb9a 	bl	8002d56 <HAL_GPIO_TogglePin>
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	005b      	lsls	r3, r3, #1
 8000626:	4618      	mov	r0, r3
 8000628:	f001 fe5a 	bl	80022e0 <HAL_Delay>
 800062c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000630:	482d      	ldr	r0, [pc, #180]	; (80006e8 <FEES_SOS+0x178>)
 8000632:	f002 fb90 	bl	8002d56 <HAL_GPIO_TogglePin>
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	005b      	lsls	r3, r3, #1
 800063a:	4618      	mov	r0, r3
 800063c:	f001 fe50 	bl	80022e0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOD_BASE, GPIO_PIN_12);	HAL_Delay(delay*2); 	HAL_GPIO_TogglePin(GPIOD_BASE, GPIO_PIN_12);	  HAL_Delay(delay*2);
 8000640:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000644:	4828      	ldr	r0, [pc, #160]	; (80006e8 <FEES_SOS+0x178>)
 8000646:	f002 fb86 	bl	8002d56 <HAL_GPIO_TogglePin>
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	005b      	lsls	r3, r3, #1
 800064e:	4618      	mov	r0, r3
 8000650:	f001 fe46 	bl	80022e0 <HAL_Delay>
 8000654:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000658:	4823      	ldr	r0, [pc, #140]	; (80006e8 <FEES_SOS+0x178>)
 800065a:	f002 fb7c 	bl	8002d56 <HAL_GPIO_TogglePin>
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	005b      	lsls	r3, r3, #1
 8000662:	4618      	mov	r0, r3
 8000664:	f001 fe3c 	bl	80022e0 <HAL_Delay>
	  // S = . . .
	  HAL_GPIO_TogglePin(GPIOD_BASE, GPIO_PIN_12); 	HAL_Delay(delay); 	  	HAL_GPIO_TogglePin(GPIOD_BASE, GPIO_PIN_12);	  HAL_Delay(delay);
 8000668:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800066c:	481e      	ldr	r0, [pc, #120]	; (80006e8 <FEES_SOS+0x178>)
 800066e:	f002 fb72 	bl	8002d56 <HAL_GPIO_TogglePin>
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	4618      	mov	r0, r3
 8000676:	f001 fe33 	bl	80022e0 <HAL_Delay>
 800067a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800067e:	481a      	ldr	r0, [pc, #104]	; (80006e8 <FEES_SOS+0x178>)
 8000680:	f002 fb69 	bl	8002d56 <HAL_GPIO_TogglePin>
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	4618      	mov	r0, r3
 8000688:	f001 fe2a 	bl	80022e0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOD_BASE, GPIO_PIN_12); 	HAL_Delay(delay); 	  	HAL_GPIO_TogglePin(GPIOD_BASE, GPIO_PIN_12);	  HAL_Delay(delay);
 800068c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000690:	4815      	ldr	r0, [pc, #84]	; (80006e8 <FEES_SOS+0x178>)
 8000692:	f002 fb60 	bl	8002d56 <HAL_GPIO_TogglePin>
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	4618      	mov	r0, r3
 800069a:	f001 fe21 	bl	80022e0 <HAL_Delay>
 800069e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006a2:	4811      	ldr	r0, [pc, #68]	; (80006e8 <FEES_SOS+0x178>)
 80006a4:	f002 fb57 	bl	8002d56 <HAL_GPIO_TogglePin>
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	4618      	mov	r0, r3
 80006ac:	f001 fe18 	bl	80022e0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOD_BASE, GPIO_PIN_12); 	HAL_Delay(delay); 	  	HAL_GPIO_TogglePin(GPIOD_BASE, GPIO_PIN_12);	  HAL_Delay(delay);
 80006b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006b4:	480c      	ldr	r0, [pc, #48]	; (80006e8 <FEES_SOS+0x178>)
 80006b6:	f002 fb4e 	bl	8002d56 <HAL_GPIO_TogglePin>
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	4618      	mov	r0, r3
 80006be:	f001 fe0f 	bl	80022e0 <HAL_Delay>
 80006c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006c6:	4808      	ldr	r0, [pc, #32]	; (80006e8 <FEES_SOS+0x178>)
 80006c8:	f002 fb45 	bl	8002d56 <HAL_GPIO_TogglePin>
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	4618      	mov	r0, r3
 80006d0:	f001 fe06 	bl	80022e0 <HAL_Delay>

	  HAL_GPIO_WritePin(GPIOD_BASE, GPIO_PIN_12, GPIO_PIN_SET);
 80006d4:	2201      	movs	r2, #1
 80006d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006da:	4803      	ldr	r0, [pc, #12]	; (80006e8 <FEES_SOS+0x178>)
 80006dc:	f002 fb22 	bl	8002d24 <HAL_GPIO_WritePin>
}
 80006e0:	bf00      	nop
 80006e2:	3708      	adds	r7, #8
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	40020c00 	.word	0x40020c00

080006ec <led_on>:
	  HAL_GPIO_WritePin(GPIOD_BASE, GPIO_PIN_12, GPIO_PIN_SET);
}



void led_on()	{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart3, (uint8_t *)  "ACCENDO!\n\r", 10, 100);
 80006f0:	2364      	movs	r3, #100	; 0x64
 80006f2:	220a      	movs	r2, #10
 80006f4:	4905      	ldr	r1, [pc, #20]	; (800070c <led_on+0x20>)
 80006f6:	4806      	ldr	r0, [pc, #24]	; (8000710 <led_on+0x24>)
 80006f8:	f005 f853 	bl	80057a2 <HAL_UART_Transmit>
	HAL_GPIO_WritePin(GPIOD_BASE, GPIO_PIN_12, GPIO_PIN_RESET);
 80006fc:	2200      	movs	r2, #0
 80006fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000702:	4804      	ldr	r0, [pc, #16]	; (8000714 <led_on+0x28>)
 8000704:	f002 fb0e 	bl	8002d24 <HAL_GPIO_WritePin>
}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}
 800070c:	0800a9dc 	.word	0x0800a9dc
 8000710:	200051e8 	.word	0x200051e8
 8000714:	40020c00 	.word	0x40020c00

08000718 <led_off>:
void led_off(){
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart3, (uint8_t *)  "SPENGO!\n\r", 9, 100);
 800071c:	2364      	movs	r3, #100	; 0x64
 800071e:	2209      	movs	r2, #9
 8000720:	4905      	ldr	r1, [pc, #20]	; (8000738 <led_off+0x20>)
 8000722:	4806      	ldr	r0, [pc, #24]	; (800073c <led_off+0x24>)
 8000724:	f005 f83d 	bl	80057a2 <HAL_UART_Transmit>
	HAL_GPIO_WritePin(GPIOD_BASE, GPIO_PIN_12, GPIO_PIN_SET);
 8000728:	2201      	movs	r2, #1
 800072a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800072e:	4804      	ldr	r0, [pc, #16]	; (8000740 <led_off+0x28>)
 8000730:	f002 faf8 	bl	8002d24 <HAL_GPIO_WritePin>
}
 8000734:	bf00      	nop
 8000736:	bd80      	pop	{r7, pc}
 8000738:	0800a9e8 	.word	0x0800a9e8
 800073c:	200051e8 	.word	0x200051e8
 8000740:	40020c00 	.word	0x40020c00

08000744 <State_Updater>:


void State_Updater(){
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
	int a = atoi(rx_buffer);
 800074a:	4821      	ldr	r0, [pc, #132]	; (80007d0 <State_Updater+0x8c>)
 800074c:	f009 f95e 	bl	8009a0c <atoi>
 8000750:	6078      	str	r0, [r7, #4]

	if(a == 00) led_off();
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d101      	bne.n	800075c <State_Updater+0x18>
 8000758:	f7ff ffde 	bl	8000718 <led_off>

	if(a == 01) led_on() ;
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	2b01      	cmp	r3, #1
 8000760:	d101      	bne.n	8000766 <State_Updater+0x22>
 8000762:	f7ff ffc3 	bl	80006ec <led_on>
	if(a == 02) led_off() ;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	2b02      	cmp	r3, #2
 800076a:	d101      	bne.n	8000770 <State_Updater+0x2c>
 800076c:	f7ff ffd4 	bl	8000718 <led_off>

	if(a == 03) led_on() ;//FEES_test(200) ;
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	2b03      	cmp	r3, #3
 8000774:	d101      	bne.n	800077a <State_Updater+0x36>
 8000776:	f7ff ffb9 	bl	80006ec <led_on>
	if(a == 04) led_off() ;
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	2b04      	cmp	r3, #4
 800077e:	d101      	bne.n	8000784 <State_Updater+0x40>
 8000780:	f7ff ffca 	bl	8000718 <led_off>

	if(a == 05) FLAG=1 ;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	2b05      	cmp	r3, #5
 8000788:	d102      	bne.n	8000790 <State_Updater+0x4c>
 800078a:	4b12      	ldr	r3, [pc, #72]	; (80007d4 <State_Updater+0x90>)
 800078c:	2201      	movs	r2, #1
 800078e:	601a      	str	r2, [r3, #0]
	if(a == 06) FLAG=0 ;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	2b06      	cmp	r3, #6
 8000794:	d102      	bne.n	800079c <State_Updater+0x58>
 8000796:	4b0f      	ldr	r3, [pc, #60]	; (80007d4 <State_Updater+0x90>)
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]

	if(a == 07) TESTING=1 ;
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	2b07      	cmp	r3, #7
 80007a0:	d102      	bne.n	80007a8 <State_Updater+0x64>
 80007a2:	4b0d      	ldr	r3, [pc, #52]	; (80007d8 <State_Updater+0x94>)
 80007a4:	2201      	movs	r2, #1
 80007a6:	601a      	str	r2, [r3, #0]
	if(a == 8) TESTING= 0 ;
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	2b08      	cmp	r3, #8
 80007ac:	d102      	bne.n	80007b4 <State_Updater+0x70>
 80007ae:	4b0a      	ldr	r3, [pc, #40]	; (80007d8 <State_Updater+0x94>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]

	if(a == 9) led_on() ;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	2b09      	cmp	r3, #9
 80007b8:	d101      	bne.n	80007be <State_Updater+0x7a>
 80007ba:	f7ff ff97 	bl	80006ec <led_on>
	if(a == 10) led_off() ;//FEES_TEST(1) ;
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	2b0a      	cmp	r3, #10
 80007c2:	d101      	bne.n	80007c8 <State_Updater+0x84>
 80007c4:	f7ff ffa8 	bl	8000718 <led_off>


}
 80007c8:	bf00      	nop
 80007ca:	3708      	adds	r7, #8
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	20004b24 	.word	0x20004b24
 80007d4:	20000000 	.word	0x20000000
 80007d8:	20000200 	.word	0x20000200

080007dc <FEES_Init>:


void FEES_Init(){
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0

	// TEST I2C Busses
	HAL_I2C_Init(&hi2c1);
 80007e0:	488c      	ldr	r0, [pc, #560]	; (8000a14 <FEES_Init+0x238>)
 80007e2:	f002 fad3 	bl	8002d8c <HAL_I2C_Init>
	HAL_I2C_Init(&hi2c2);
 80007e6:	488c      	ldr	r0, [pc, #560]	; (8000a18 <FEES_Init+0x23c>)
 80007e8:	f002 fad0 	bl	8002d8c <HAL_I2C_Init>

	// TEST SPI
	HAL_SPI_Init(&hspi1);
 80007ec:	488b      	ldr	r0, [pc, #556]	; (8000a1c <FEES_Init+0x240>)
 80007ee:	f003 ffc9 	bl	8004784 <HAL_SPI_Init>
	HAL_SPI_Init(&hspi2);
 80007f2:	488b      	ldr	r0, [pc, #556]	; (8000a20 <FEES_Init+0x244>)
 80007f4:	f003 ffc6 	bl	8004784 <HAL_SPI_Init>
	HAL_SPI_Init(&hspi3);
 80007f8:	488a      	ldr	r0, [pc, #552]	; (8000a24 <FEES_Init+0x248>)
 80007fa:	f003 ffc3 	bl	8004784 <HAL_SPI_Init>

    // Battery Heater PWM
    PWM_HEATER.PORT__BASE = GPIOC ;
 80007fe:	4b8a      	ldr	r3, [pc, #552]	; (8000a28 <FEES_Init+0x24c>)
 8000800:	4a8a      	ldr	r2, [pc, #552]	; (8000a2c <FEES_Init+0x250>)
 8000802:	601a      	str	r2, [r3, #0]
    PWM_HEATER.pin_number =  8;
 8000804:	4b88      	ldr	r3, [pc, #544]	; (8000a28 <FEES_Init+0x24c>)
 8000806:	2208      	movs	r2, #8
 8000808:	605a      	str	r2, [r3, #4]

    // PWM COILS - MagnetoTorquers
    PWM_X_COIL.PORT__BASE = GPIOA ;
 800080a:	4b89      	ldr	r3, [pc, #548]	; (8000a30 <FEES_Init+0x254>)
 800080c:	4a89      	ldr	r2, [pc, #548]	; (8000a34 <FEES_Init+0x258>)
 800080e:	601a      	str	r2, [r3, #0]
    PWM_X_COIL.pin_number =  0;
 8000810:	4b87      	ldr	r3, [pc, #540]	; (8000a30 <FEES_Init+0x254>)
 8000812:	2200      	movs	r2, #0
 8000814:	605a      	str	r2, [r3, #4]

    PWM_Y_COIL.PORT__BASE = GPIOA ;
 8000816:	4b88      	ldr	r3, [pc, #544]	; (8000a38 <FEES_Init+0x25c>)
 8000818:	4a86      	ldr	r2, [pc, #536]	; (8000a34 <FEES_Init+0x258>)
 800081a:	601a      	str	r2, [r3, #0]
    PWM_Y_COIL.pin_number =  1;
 800081c:	4b86      	ldr	r3, [pc, #536]	; (8000a38 <FEES_Init+0x25c>)
 800081e:	2201      	movs	r2, #1
 8000820:	605a      	str	r2, [r3, #4]

    PWM_Z_COIL.PORT__BASE = GPIOA ;
 8000822:	4b86      	ldr	r3, [pc, #536]	; (8000a3c <FEES_Init+0x260>)
 8000824:	4a83      	ldr	r2, [pc, #524]	; (8000a34 <FEES_Init+0x258>)
 8000826:	601a      	str	r2, [r3, #0]
    PWM_Z_COIL.pin_number =  2;
 8000828:	4b84      	ldr	r3, [pc, #528]	; (8000a3c <FEES_Init+0x260>)
 800082a:	2202      	movs	r2, #2
 800082c:	605a      	str	r2, [r3, #4]

    // Direction PWM Magnetometers
    DIR_X_COIL.PORT__BASE = GPIOE ;
 800082e:	4b84      	ldr	r3, [pc, #528]	; (8000a40 <FEES_Init+0x264>)
 8000830:	4a84      	ldr	r2, [pc, #528]	; (8000a44 <FEES_Init+0x268>)
 8000832:	601a      	str	r2, [r3, #0]
    DIR_X_COIL.pin_number =  7;
 8000834:	4b82      	ldr	r3, [pc, #520]	; (8000a40 <FEES_Init+0x264>)
 8000836:	2207      	movs	r2, #7
 8000838:	605a      	str	r2, [r3, #4]

    DIR_Y_COIL.PORT__BASE = GPIOE ;
 800083a:	4b83      	ldr	r3, [pc, #524]	; (8000a48 <FEES_Init+0x26c>)
 800083c:	4a81      	ldr	r2, [pc, #516]	; (8000a44 <FEES_Init+0x268>)
 800083e:	601a      	str	r2, [r3, #0]
    DIR_Y_COIL.pin_number =  8;
 8000840:	4b81      	ldr	r3, [pc, #516]	; (8000a48 <FEES_Init+0x26c>)
 8000842:	2208      	movs	r2, #8
 8000844:	605a      	str	r2, [r3, #4]

    DIR_Z_COIL.PORT__BASE = GPIOE ;
 8000846:	4b81      	ldr	r3, [pc, #516]	; (8000a4c <FEES_Init+0x270>)
 8000848:	4a7e      	ldr	r2, [pc, #504]	; (8000a44 <FEES_Init+0x268>)
 800084a:	601a      	str	r2, [r3, #0]
    DIR_Z_COIL.pin_number =  9;
 800084c:	4b7f      	ldr	r3, [pc, #508]	; (8000a4c <FEES_Init+0x270>)
 800084e:	2209      	movs	r2, #9
 8000850:	605a      	str	r2, [r3, #4]

    //GPIO DI CONTROLLO E WATCHDOG
    WATCHDOG.PORT__BASE = GPIOB ;
 8000852:	4b7f      	ldr	r3, [pc, #508]	; (8000a50 <FEES_Init+0x274>)
 8000854:	4a7f      	ldr	r2, [pc, #508]	; (8000a54 <FEES_Init+0x278>)
 8000856:	601a      	str	r2, [r3, #0]
    WATCHDOG.pin_number =  5;
 8000858:	4b7d      	ldr	r3, [pc, #500]	; (8000a50 <FEES_Init+0x274>)
 800085a:	2205      	movs	r2, #5
 800085c:	605a      	str	r2, [r3, #4]

    UHF_RESET.PORT__BASE = GPIOC ;
 800085e:	4b7e      	ldr	r3, [pc, #504]	; (8000a58 <FEES_Init+0x27c>)
 8000860:	4a72      	ldr	r2, [pc, #456]	; (8000a2c <FEES_Init+0x250>)
 8000862:	601a      	str	r2, [r3, #0]
    UHF_RESET.pin_number =  13;
 8000864:	4b7c      	ldr	r3, [pc, #496]	; (8000a58 <FEES_Init+0x27c>)
 8000866:	220d      	movs	r2, #13
 8000868:	605a      	str	r2, [r3, #4]

    RAD_RESET.PORT__BASE = GPIOC ;
 800086a:	4b7c      	ldr	r3, [pc, #496]	; (8000a5c <FEES_Init+0x280>)
 800086c:	4a6f      	ldr	r2, [pc, #444]	; (8000a2c <FEES_Init+0x250>)
 800086e:	601a      	str	r2, [r3, #0]
    RAD_RESET.pin_number =  15;
 8000870:	4b7a      	ldr	r3, [pc, #488]	; (8000a5c <FEES_Init+0x280>)
 8000872:	220f      	movs	r2, #15
 8000874:	605a      	str	r2, [r3, #4]

    TMTC_WD.PORT__BASE = GPIOD ;
 8000876:	4b7a      	ldr	r3, [pc, #488]	; (8000a60 <FEES_Init+0x284>)
 8000878:	4a7a      	ldr	r2, [pc, #488]	; (8000a64 <FEES_Init+0x288>)
 800087a:	601a      	str	r2, [r3, #0]
    TMTC_WD.pin_number =  12;
 800087c:	4b78      	ldr	r3, [pc, #480]	; (8000a60 <FEES_Init+0x284>)
 800087e:	220c      	movs	r2, #12
 8000880:	605a      	str	r2, [r3, #4]

    RSBY_KEEP_EN.PORT__BASE = GPIOB ;
 8000882:	4b79      	ldr	r3, [pc, #484]	; (8000a68 <FEES_Init+0x28c>)
 8000884:	4a73      	ldr	r2, [pc, #460]	; (8000a54 <FEES_Init+0x278>)
 8000886:	601a      	str	r2, [r3, #0]
    RSBY_KEEP_EN.pin_number =  0;
 8000888:	4b77      	ldr	r3, [pc, #476]	; (8000a68 <FEES_Init+0x28c>)
 800088a:	2200      	movs	r2, #0
 800088c:	605a      	str	r2, [r3, #4]


    //GPIO DI CONTROLLO Alimentazione (Power Control)
    ANA_PWR_ON.PORT__BASE = GPIOE ;
 800088e:	4b77      	ldr	r3, [pc, #476]	; (8000a6c <FEES_Init+0x290>)
 8000890:	4a6c      	ldr	r2, [pc, #432]	; (8000a44 <FEES_Init+0x268>)
 8000892:	601a      	str	r2, [r3, #0]
    ANA_PWR_ON.pin_number =  0;
 8000894:	4b75      	ldr	r3, [pc, #468]	; (8000a6c <FEES_Init+0x290>)
 8000896:	2200      	movs	r2, #0
 8000898:	605a      	str	r2, [r3, #4]

    RAD_PWR_ON.PORT__BASE = GPIOE ;
 800089a:	4b75      	ldr	r3, [pc, #468]	; (8000a70 <FEES_Init+0x294>)
 800089c:	4a69      	ldr	r2, [pc, #420]	; (8000a44 <FEES_Init+0x268>)
 800089e:	601a      	str	r2, [r3, #0]
    RAD_PWR_ON.pin_number =  1;
 80008a0:	4b73      	ldr	r3, [pc, #460]	; (8000a70 <FEES_Init+0x294>)
 80008a2:	2201      	movs	r2, #1
 80008a4:	605a      	str	r2, [r3, #4]

    GPS_PWR_ON.PORT__BASE = GPIOE ;
 80008a6:	4b73      	ldr	r3, [pc, #460]	; (8000a74 <FEES_Init+0x298>)
 80008a8:	4a66      	ldr	r2, [pc, #408]	; (8000a44 <FEES_Init+0x268>)
 80008aa:	601a      	str	r2, [r3, #0]
    GPS_PWR_ON.pin_number =  2;
 80008ac:	4b71      	ldr	r3, [pc, #452]	; (8000a74 <FEES_Init+0x298>)
 80008ae:	2202      	movs	r2, #2
 80008b0:	605a      	str	r2, [r3, #4]

    SBD_PWR_ON.PORT__BASE = GPIOE ;
 80008b2:	4b71      	ldr	r3, [pc, #452]	; (8000a78 <FEES_Init+0x29c>)
 80008b4:	4a63      	ldr	r2, [pc, #396]	; (8000a44 <FEES_Init+0x268>)
 80008b6:	601a      	str	r2, [r3, #0]
    SBD_PWR_ON.pin_number =  3;
 80008b8:	4b6f      	ldr	r3, [pc, #444]	; (8000a78 <FEES_Init+0x29c>)
 80008ba:	2203      	movs	r2, #3
 80008bc:	605a      	str	r2, [r3, #4]

    RSBY_PWR_ON.PORT__BASE = GPIOE ;
 80008be:	4b6f      	ldr	r3, [pc, #444]	; (8000a7c <FEES_Init+0x2a0>)
 80008c0:	4a60      	ldr	r2, [pc, #384]	; (8000a44 <FEES_Init+0x268>)
 80008c2:	601a      	str	r2, [r3, #0]
    RSBY_PWR_ON.pin_number =  6;
 80008c4:	4b6d      	ldr	r3, [pc, #436]	; (8000a7c <FEES_Init+0x2a0>)
 80008c6:	2206      	movs	r2, #6
 80008c8:	605a      	str	r2, [r3, #4]


    // SPI SMART PINS - Sensors
    CS_NAND.PORT__BASE = GPIOE ;
 80008ca:	4b6d      	ldr	r3, [pc, #436]	; (8000a80 <FEES_Init+0x2a4>)
 80008cc:	4a5d      	ldr	r2, [pc, #372]	; (8000a44 <FEES_Init+0x268>)
 80008ce:	601a      	str	r2, [r3, #0]
    CS_NAND.pin_number =  4;
 80008d0:	4b6b      	ldr	r3, [pc, #428]	; (8000a80 <FEES_Init+0x2a4>)
 80008d2:	2204      	movs	r2, #4
 80008d4:	605a      	str	r2, [r3, #4]

    CS_LORA.PORT__BASE = GPIOE ;
 80008d6:	4b6b      	ldr	r3, [pc, #428]	; (8000a84 <FEES_Init+0x2a8>)
 80008d8:	4a5a      	ldr	r2, [pc, #360]	; (8000a44 <FEES_Init+0x268>)
 80008da:	601a      	str	r2, [r3, #0]
    CS_LORA.pin_number =  5;
 80008dc:	4b69      	ldr	r3, [pc, #420]	; (8000a84 <FEES_Init+0x2a8>)
 80008de:	2205      	movs	r2, #5
 80008e0:	605a      	str	r2, [r3, #4]

    CS_RADFET.PORT__BASE = GPIOA ;
 80008e2:	4b69      	ldr	r3, [pc, #420]	; (8000a88 <FEES_Init+0x2ac>)
 80008e4:	4a53      	ldr	r2, [pc, #332]	; (8000a34 <FEES_Init+0x258>)
 80008e6:	601a      	str	r2, [r3, #0]
    CS_RADFET.pin_number = 4 ;
 80008e8:	4b67      	ldr	r3, [pc, #412]	; (8000a88 <FEES_Init+0x2ac>)
 80008ea:	2204      	movs	r2, #4
 80008ec:	605a      	str	r2, [r3, #4]

    CS_EEPROM.PORT__BASE = GPIOD;
 80008ee:	4b67      	ldr	r3, [pc, #412]	; (8000a8c <FEES_Init+0x2b0>)
 80008f0:	4a5c      	ldr	r2, [pc, #368]	; (8000a64 <FEES_Init+0x288>)
 80008f2:	601a      	str	r2, [r3, #0]
    CS_EEPROM.pin_number =  10;
 80008f4:	4b65      	ldr	r3, [pc, #404]	; (8000a8c <FEES_Init+0x2b0>)
 80008f6:	220a      	movs	r2, #10
 80008f8:	605a      	str	r2, [r3, #4]

    CS_FRAM.PORT__BASE =  GPIOD;
 80008fa:	4b65      	ldr	r3, [pc, #404]	; (8000a90 <FEES_Init+0x2b4>)
 80008fc:	4a59      	ldr	r2, [pc, #356]	; (8000a64 <FEES_Init+0x288>)
 80008fe:	601a      	str	r2, [r3, #0]
    CS_FRAM.pin_number =  11;
 8000900:	4b63      	ldr	r3, [pc, #396]	; (8000a90 <FEES_Init+0x2b4>)
 8000902:	220b      	movs	r2, #11
 8000904:	605a      	str	r2, [r3, #4]

    CS_PSD1_AMP.PORT__BASE = GPIOC  ;
 8000906:	4b63      	ldr	r3, [pc, #396]	; (8000a94 <FEES_Init+0x2b8>)
 8000908:	4a48      	ldr	r2, [pc, #288]	; (8000a2c <FEES_Init+0x250>)
 800090a:	601a      	str	r2, [r3, #0]
    CS_PSD1_AMP.pin_number =  4;
 800090c:	4b61      	ldr	r3, [pc, #388]	; (8000a94 <FEES_Init+0x2b8>)
 800090e:	2204      	movs	r2, #4
 8000910:	605a      	str	r2, [r3, #4]

    CS_PSD2_AMP.PORT__BASE =  GPIOC;
 8000912:	4b61      	ldr	r3, [pc, #388]	; (8000a98 <FEES_Init+0x2bc>)
 8000914:	4a45      	ldr	r2, [pc, #276]	; (8000a2c <FEES_Init+0x250>)
 8000916:	601a      	str	r2, [r3, #0]
    CS_PSD2_AMP.pin_number =  5;
 8000918:	4b5f      	ldr	r3, [pc, #380]	; (8000a98 <FEES_Init+0x2bc>)
 800091a:	2205      	movs	r2, #5
 800091c:	605a      	str	r2, [r3, #4]

    CS_GYRO.PORT__BASE =  GPIOE;
 800091e:	4b5f      	ldr	r3, [pc, #380]	; (8000a9c <FEES_Init+0x2c0>)
 8000920:	4a48      	ldr	r2, [pc, #288]	; (8000a44 <FEES_Init+0x268>)
 8000922:	601a      	str	r2, [r3, #0]
    CS_GYRO.pin_number =  10;
 8000924:	4b5d      	ldr	r3, [pc, #372]	; (8000a9c <FEES_Init+0x2c0>)
 8000926:	220a      	movs	r2, #10
 8000928:	605a      	str	r2, [r3, #4]

    CS_GYRO2.PORT__BASE =  GPIOD;
 800092a:	4b5d      	ldr	r3, [pc, #372]	; (8000aa0 <FEES_Init+0x2c4>)
 800092c:	4a4d      	ldr	r2, [pc, #308]	; (8000a64 <FEES_Init+0x288>)
 800092e:	601a      	str	r2, [r3, #0]
    CS_GYRO2.pin_number =  14;
 8000930:	4b5b      	ldr	r3, [pc, #364]	; (8000aa0 <FEES_Init+0x2c4>)
 8000932:	220e      	movs	r2, #14
 8000934:	605a      	str	r2, [r3, #4]

    EN_ADC1.PORT__BASE = GPIOE ;
 8000936:	4b5b      	ldr	r3, [pc, #364]	; (8000aa4 <FEES_Init+0x2c8>)
 8000938:	4a42      	ldr	r2, [pc, #264]	; (8000a44 <FEES_Init+0x268>)
 800093a:	601a      	str	r2, [r3, #0]
    EN_ADC1.pin_number =  11;
 800093c:	4b59      	ldr	r3, [pc, #356]	; (8000aa4 <FEES_Init+0x2c8>)
 800093e:	220b      	movs	r2, #11
 8000940:	605a      	str	r2, [r3, #4]

    EN_ADC2.PORT__BASE = GPIOE ;
 8000942:	4b59      	ldr	r3, [pc, #356]	; (8000aa8 <FEES_Init+0x2cc>)
 8000944:	4a3f      	ldr	r2, [pc, #252]	; (8000a44 <FEES_Init+0x268>)
 8000946:	601a      	str	r2, [r3, #0]
    EN_ADC2.pin_number =  13 ;
 8000948:	4b57      	ldr	r3, [pc, #348]	; (8000aa8 <FEES_Init+0x2cc>)
 800094a:	220d      	movs	r2, #13
 800094c:	605a      	str	r2, [r3, #4]

    EN_ADC3.PORT__BASE = GPIOE ;
 800094e:	4b57      	ldr	r3, [pc, #348]	; (8000aac <FEES_Init+0x2d0>)
 8000950:	4a3c      	ldr	r2, [pc, #240]	; (8000a44 <FEES_Init+0x268>)
 8000952:	601a      	str	r2, [r3, #0]
    EN_ADC3.pin_number =  12 ;
 8000954:	4b55      	ldr	r3, [pc, #340]	; (8000aac <FEES_Init+0x2d0>)
 8000956:	220c      	movs	r2, #12
 8000958:	605a      	str	r2, [r3, #4]

    EXT_SPI_EN.PORT__BASE = GPIOC ;
 800095a:	4b55      	ldr	r3, [pc, #340]	; (8000ab0 <FEES_Init+0x2d4>)
 800095c:	4a33      	ldr	r2, [pc, #204]	; (8000a2c <FEES_Init+0x250>)
 800095e:	601a      	str	r2, [r3, #0]
    EXT_SPI_EN.pin_number =  9 ;
 8000960:	4b53      	ldr	r3, [pc, #332]	; (8000ab0 <FEES_Init+0x2d4>)
 8000962:	2209      	movs	r2, #9
 8000964:	605a      	str	r2, [r3, #4]

    // GPIO EXTRA
    EX_GPIO1.PORT__BASE = GPIOB;
 8000966:	4b53      	ldr	r3, [pc, #332]	; (8000ab4 <FEES_Init+0x2d8>)
 8000968:	4a3a      	ldr	r2, [pc, #232]	; (8000a54 <FEES_Init+0x278>)
 800096a:	601a      	str	r2, [r3, #0]
    EX_GPIO1.pin_number =  1;
 800096c:	4b51      	ldr	r3, [pc, #324]	; (8000ab4 <FEES_Init+0x2d8>)
 800096e:	2201      	movs	r2, #1
 8000970:	605a      	str	r2, [r3, #4]

    EX_GPIO2.PORT__BASE =  GPIOB;
 8000972:	4b51      	ldr	r3, [pc, #324]	; (8000ab8 <FEES_Init+0x2dc>)
 8000974:	4a37      	ldr	r2, [pc, #220]	; (8000a54 <FEES_Init+0x278>)
 8000976:	601a      	str	r2, [r3, #0]
    EX_GPIO2.pin_number =  12;
 8000978:	4b4f      	ldr	r3, [pc, #316]	; (8000ab8 <FEES_Init+0x2dc>)
 800097a:	220c      	movs	r2, #12
 800097c:	605a      	str	r2, [r3, #4]

    EX_GPIO3.PORT__BASE =  GPIOA;
 800097e:	4b4f      	ldr	r3, [pc, #316]	; (8000abc <FEES_Init+0x2e0>)
 8000980:	4a2c      	ldr	r2, [pc, #176]	; (8000a34 <FEES_Init+0x258>)
 8000982:	601a      	str	r2, [r3, #0]
    EX_GPIO3.pin_number =  3;
 8000984:	4b4d      	ldr	r3, [pc, #308]	; (8000abc <FEES_Init+0x2e0>)
 8000986:	2203      	movs	r2, #3
 8000988:	605a      	str	r2, [r3, #4]

    EX_GPIO4.PORT__BASE =  GPIOA;
 800098a:	4b4d      	ldr	r3, [pc, #308]	; (8000ac0 <FEES_Init+0x2e4>)
 800098c:	4a29      	ldr	r2, [pc, #164]	; (8000a34 <FEES_Init+0x258>)
 800098e:	601a      	str	r2, [r3, #0]
    EX_GPIO4.pin_number =  10;
 8000990:	4b4b      	ldr	r3, [pc, #300]	; (8000ac0 <FEES_Init+0x2e4>)
 8000992:	220a      	movs	r2, #10
 8000994:	605a      	str	r2, [r3, #4]


  		// Select
    PSD1_SEL0.PORT__BASE = GPIOC ;
 8000996:	4b4b      	ldr	r3, [pc, #300]	; (8000ac4 <FEES_Init+0x2e8>)
 8000998:	4a24      	ldr	r2, [pc, #144]	; (8000a2c <FEES_Init+0x250>)
 800099a:	601a      	str	r2, [r3, #0]
    PSD1_SEL0.pin_number = 1 ;
 800099c:	4b49      	ldr	r3, [pc, #292]	; (8000ac4 <FEES_Init+0x2e8>)
 800099e:	2201      	movs	r2, #1
 80009a0:	605a      	str	r2, [r3, #4]

    PSD1_SEL1.PORT__BASE = GPIOC ;
 80009a2:	4b49      	ldr	r3, [pc, #292]	; (8000ac8 <FEES_Init+0x2ec>)
 80009a4:	4a21      	ldr	r2, [pc, #132]	; (8000a2c <FEES_Init+0x250>)
 80009a6:	601a      	str	r2, [r3, #0]
    PSD1_SEL1.pin_number = 0 ;
 80009a8:	4b47      	ldr	r3, [pc, #284]	; (8000ac8 <FEES_Init+0x2ec>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	605a      	str	r2, [r3, #4]

    PSD2_SEL0.PORT__BASE = GPIOC ;
 80009ae:	4b47      	ldr	r3, [pc, #284]	; (8000acc <FEES_Init+0x2f0>)
 80009b0:	4a1e      	ldr	r2, [pc, #120]	; (8000a2c <FEES_Init+0x250>)
 80009b2:	601a      	str	r2, [r3, #0]
    PSD2_SEL0.pin_number = 3 ;
 80009b4:	4b45      	ldr	r3, [pc, #276]	; (8000acc <FEES_Init+0x2f0>)
 80009b6:	2203      	movs	r2, #3
 80009b8:	605a      	str	r2, [r3, #4]

    PSD2_SEL1.PORT__BASE = GPIOC ;
 80009ba:	4b45      	ldr	r3, [pc, #276]	; (8000ad0 <FEES_Init+0x2f4>)
 80009bc:	4a1b      	ldr	r2, [pc, #108]	; (8000a2c <FEES_Init+0x250>)
 80009be:	601a      	str	r2, [r3, #0]
    PSD2_SEL1.pin_number = 2 ;
 80009c0:	4b43      	ldr	r3, [pc, #268]	; (8000ad0 <FEES_Init+0x2f4>)
 80009c2:	2202      	movs	r2, #2
 80009c4:	605a      	str	r2, [r3, #4]

 		// IMU
    INT_GYRO1.PORT__BASE = GPIOD ;
 80009c6:	4b43      	ldr	r3, [pc, #268]	; (8000ad4 <FEES_Init+0x2f8>)
 80009c8:	4a26      	ldr	r2, [pc, #152]	; (8000a64 <FEES_Init+0x288>)
 80009ca:	601a      	str	r2, [r3, #0]
    INT_GYRO1.pin_number = 13 ;
 80009cc:	4b41      	ldr	r3, [pc, #260]	; (8000ad4 <FEES_Init+0x2f8>)
 80009ce:	220d      	movs	r2, #13
 80009d0:	605a      	str	r2, [r3, #4]

    INT_GYRO2.PORT__BASE = GPIOD;
 80009d2:	4b41      	ldr	r3, [pc, #260]	; (8000ad8 <FEES_Init+0x2fc>)
 80009d4:	4a23      	ldr	r2, [pc, #140]	; (8000a64 <FEES_Init+0x288>)
 80009d6:	601a      	str	r2, [r3, #0]
    INT_GYRO2.pin_number = 15 ;
 80009d8:	4b3f      	ldr	r3, [pc, #252]	; (8000ad8 <FEES_Init+0x2fc>)
 80009da:	220f      	movs	r2, #15
 80009dc:	605a      	str	r2, [r3, #4]
  		// Radex
    RAD_RESET.PORT__BASE = GPIOC  ;
 80009de:	4b1f      	ldr	r3, [pc, #124]	; (8000a5c <FEES_Init+0x280>)
 80009e0:	4a12      	ldr	r2, [pc, #72]	; (8000a2c <FEES_Init+0x250>)
 80009e2:	601a      	str	r2, [r3, #0]
    RAD_RESET.pin_number = 15 ;
 80009e4:	4b1d      	ldr	r3, [pc, #116]	; (8000a5c <FEES_Init+0x280>)
 80009e6:	220f      	movs	r2, #15
 80009e8:	605a      	str	r2, [r3, #4]

    RADFET_OWB.PORT__BASE = GPIOC ;
 80009ea:	4b3c      	ldr	r3, [pc, #240]	; (8000adc <FEES_Init+0x300>)
 80009ec:	4a0f      	ldr	r2, [pc, #60]	; (8000a2c <FEES_Init+0x250>)
 80009ee:	601a      	str	r2, [r3, #0]
    RADFET_OWB.pin_number = 14 ;
 80009f0:	4b3a      	ldr	r3, [pc, #232]	; (8000adc <FEES_Init+0x300>)
 80009f2:	220e      	movs	r2, #14
 80009f4:	605a      	str	r2, [r3, #4]
  		//SDB
    SDB_ON_OFF.PORT__BASE = GPIOD ;
 80009f6:	4b3a      	ldr	r3, [pc, #232]	; (8000ae0 <FEES_Init+0x304>)
 80009f8:	4a1a      	ldr	r2, [pc, #104]	; (8000a64 <FEES_Init+0x288>)
 80009fa:	601a      	str	r2, [r3, #0]
    SDB_ON_OFF.pin_number =  7;
 80009fc:	4b38      	ldr	r3, [pc, #224]	; (8000ae0 <FEES_Init+0x304>)
 80009fe:	2207      	movs	r2, #7
 8000a00:	605a      	str	r2, [r3, #4]

    SDB_SER_RI.PORT__BASE = GPIOE ;
 8000a02:	4b38      	ldr	r3, [pc, #224]	; (8000ae4 <FEES_Init+0x308>)
 8000a04:	4a0f      	ldr	r2, [pc, #60]	; (8000a44 <FEES_Init+0x268>)
 8000a06:	601a      	str	r2, [r3, #0]
    SDB_SER_RI.pin_number = 14 ;
 8000a08:	4b36      	ldr	r3, [pc, #216]	; (8000ae4 <FEES_Init+0x308>)
 8000a0a:	220e      	movs	r2, #14
 8000a0c:	605a      	str	r2, [r3, #4]

    SDB_SER_NET.PORT__BASE = GPIOE ;
 8000a0e:	4b36      	ldr	r3, [pc, #216]	; (8000ae8 <FEES_Init+0x30c>)
 8000a10:	e06c      	b.n	8000aec <FEES_Init+0x310>
 8000a12:	bf00      	nop
 8000a14:	20005234 	.word	0x20005234
 8000a18:	20005708 	.word	0x20005708
 8000a1c:	20006248 	.word	0x20006248
 8000a20:	20004b6c 	.word	0x20004b6c
 8000a24:	200057f0 	.word	0x200057f0
 8000a28:	2000575c 	.word	0x2000575c
 8000a2c:	40020800 	.word	0x40020800
 8000a30:	20005ad4 	.word	0x20005ad4
 8000a34:	40020000 	.word	0x40020000
 8000a38:	200057a4 	.word	0x200057a4
 8000a3c:	20005848 	.word	0x20005848
 8000a40:	20006338 	.word	0x20006338
 8000a44:	40021000 	.word	0x40021000
 8000a48:	20005798 	.word	0x20005798
 8000a4c:	20005cec 	.word	0x20005cec
 8000a50:	20006368 	.word	0x20006368
 8000a54:	40020400 	.word	0x40020400
 8000a58:	20005a68 	.word	0x20005a68
 8000a5c:	20005854 	.word	0x20005854
 8000a60:	200051d0 	.word	0x200051d0
 8000a64:	40020c00 	.word	0x40020c00
 8000a68:	200059a4 	.word	0x200059a4
 8000a6c:	20005abc 	.word	0x20005abc
 8000a70:	20004b2c 	.word	0x20004b2c
 8000a74:	20005910 	.word	0x20005910
 8000a78:	20005228 	.word	0x20005228
 8000a7c:	20005768 	.word	0x20005768
 8000a80:	20005a74 	.word	0x20005a74
 8000a84:	20004b48 	.word	0x20004b48
 8000a88:	200059f0 	.word	0x200059f0
 8000a8c:	20006374 	.word	0x20006374
 8000a90:	20005d04 	.word	0x20005d04
 8000a94:	20004b54 	.word	0x20004b54
 8000a98:	200051c4 	.word	0x200051c4
 8000a9c:	20005988 	.word	0x20005988
 8000aa0:	20005a5c 	.word	0x20005a5c
 8000aa4:	20005aa4 	.word	0x20005aa4
 8000aa8:	2000578c 	.word	0x2000578c
 8000aac:	2000569c 	.word	0x2000569c
 8000ab0:	20004b60 	.word	0x20004b60
 8000ab4:	20005d70 	.word	0x20005d70
 8000ab8:	20004b3c 	.word	0x20004b3c
 8000abc:	20005780 	.word	0x20005780
 8000ac0:	20005a98 	.word	0x20005a98
 8000ac4:	20005998 	.word	0x20005998
 8000ac8:	200051dc 	.word	0x200051dc
 8000acc:	2000632c 	.word	0x2000632c
 8000ad0:	20005a80 	.word	0x20005a80
 8000ad4:	20005cf8 	.word	0x20005cf8
 8000ad8:	20005774 	.word	0x20005774
 8000adc:	20006344 	.word	0x20006344
 8000ae0:	20005ac8 	.word	0x20005ac8
 8000ae4:	20005fdc 	.word	0x20005fdc
 8000ae8:	20005a8c 	.word	0x20005a8c
 8000aec:	4a18      	ldr	r2, [pc, #96]	; (8000b50 <FEES_Init+0x374>)
 8000aee:	601a      	str	r2, [r3, #0]
    SDB_SER_NET.pin_number = 15 ;
 8000af0:	4b18      	ldr	r3, [pc, #96]	; (8000b54 <FEES_Init+0x378>)
 8000af2:	220f      	movs	r2, #15
 8000af4:	605a      	str	r2, [r3, #4]

    SDB_SER_DCD.PORT__BASE = GPIOD ;
 8000af6:	4b18      	ldr	r3, [pc, #96]	; (8000b58 <FEES_Init+0x37c>)
 8000af8:	4a18      	ldr	r2, [pc, #96]	; (8000b5c <FEES_Init+0x380>)
 8000afa:	601a      	str	r2, [r3, #0]
    SDB_SER_DCD.pin_number = 0 ;
 8000afc:	4b16      	ldr	r3, [pc, #88]	; (8000b58 <FEES_Init+0x37c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	605a      	str	r2, [r3, #4]

    SDB_SER_DSR.PORT__BASE = GPIOD ;
 8000b02:	4b17      	ldr	r3, [pc, #92]	; (8000b60 <FEES_Init+0x384>)
 8000b04:	4a15      	ldr	r2, [pc, #84]	; (8000b5c <FEES_Init+0x380>)
 8000b06:	601a      	str	r2, [r3, #0]
    SDB_SER_DSR.pin_number = 1;
 8000b08:	4b15      	ldr	r3, [pc, #84]	; (8000b60 <FEES_Init+0x384>)
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	605a      	str	r2, [r3, #4]

    SDB_SER_DTR.PORT__BASE = GPIOD ;
 8000b0e:	4b15      	ldr	r3, [pc, #84]	; (8000b64 <FEES_Init+0x388>)
 8000b10:	4a12      	ldr	r2, [pc, #72]	; (8000b5c <FEES_Init+0x380>)
 8000b12:	601a      	str	r2, [r3, #0]
    SDB_SER_DTR.pin_number = 2 ;
 8000b14:	4b13      	ldr	r3, [pc, #76]	; (8000b64 <FEES_Init+0x388>)
 8000b16:	2202      	movs	r2, #2
 8000b18:	605a      	str	r2, [r3, #4]

    USB_VBUS.PORT__BASE = GPIOA ;
 8000b1a:	4b13      	ldr	r3, [pc, #76]	; (8000b68 <FEES_Init+0x38c>)
 8000b1c:	4a13      	ldr	r2, [pc, #76]	; (8000b6c <FEES_Init+0x390>)
 8000b1e:	601a      	str	r2, [r3, #0]
    USB_VBUS.pin_number = 9 ;
 8000b20:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <FEES_Init+0x38c>)
 8000b22:	2209      	movs	r2, #9
 8000b24:	605a      	str	r2, [r3, #4]
  		// Other
    PGOOD.PORT__BASE = GPIOA ;
 8000b26:	4b12      	ldr	r3, [pc, #72]	; (8000b70 <FEES_Init+0x394>)
 8000b28:	4a10      	ldr	r2, [pc, #64]	; (8000b6c <FEES_Init+0x390>)
 8000b2a:	601a      	str	r2, [r3, #0]
    PGOOD.pin_number = 8 ;
 8000b2c:	4b10      	ldr	r3, [pc, #64]	; (8000b70 <FEES_Init+0x394>)
 8000b2e:	2208      	movs	r2, #8
 8000b30:	605a      	str	r2, [r3, #4]

    JTAG_TMS.PORT__BASE = GPIOA ;
 8000b32:	4b10      	ldr	r3, [pc, #64]	; (8000b74 <FEES_Init+0x398>)
 8000b34:	4a0d      	ldr	r2, [pc, #52]	; (8000b6c <FEES_Init+0x390>)
 8000b36:	601a      	str	r2, [r3, #0]
    JTAG_TMS.pin_number = 13 ;
 8000b38:	4b0e      	ldr	r3, [pc, #56]	; (8000b74 <FEES_Init+0x398>)
 8000b3a:	220d      	movs	r2, #13
 8000b3c:	605a      	str	r2, [r3, #4]

    JTAG_TCK.PORT__BASE = GPIOA ;
 8000b3e:	4b0e      	ldr	r3, [pc, #56]	; (8000b78 <FEES_Init+0x39c>)
 8000b40:	4a0a      	ldr	r2, [pc, #40]	; (8000b6c <FEES_Init+0x390>)
 8000b42:	601a      	str	r2, [r3, #0]
    JTAG_TCK.pin_number = 14 ;
 8000b44:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <FEES_Init+0x39c>)
 8000b46:	220e      	movs	r2, #14
 8000b48:	605a      	str	r2, [r3, #4]

}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40021000 	.word	0x40021000
 8000b54:	20005a8c 	.word	0x20005a8c
 8000b58:	20005ae0 	.word	0x20005ae0
 8000b5c:	40020c00 	.word	0x40020c00
 8000b60:	20005ab0 	.word	0x20005ab0
 8000b64:	2000635c 	.word	0x2000635c
 8000b68:	20005d7c 	.word	0x20005d7c
 8000b6c:	40020000 	.word	0x40020000
 8000b70:	20006350 	.word	0x20006350
 8000b74:	20005f88 	.word	0x20005f88
 8000b78:	2000597c 	.word	0x2000597c

08000b7c <FEES_Startup_PWM_BATTERY>:
		  HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
		  osDelay(1000);*/
	}
}

void FEES_Startup_PWM_BATTERY(){
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b08a      	sub	sp, #40	; 0x28
 8000b80:	af00      	add	r7, sp, #0
	  int i=1;
 8000b82:	2301      	movs	r3, #1
 8000b84:	627b      	str	r3, [r7, #36]	; 0x24
	  while(i<11){
 8000b86:	e08c      	b.n	8000ca2 <FEES_Startup_PWM_BATTERY+0x126>
		  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b88:	f107 031c 	add.w	r3, r7, #28
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
 8000b90:	605a      	str	r2, [r3, #4]
		  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b92:	463b      	mov	r3, r7
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]
 8000b9e:	611a      	str	r2, [r3, #16]
 8000ba0:	615a      	str	r2, [r3, #20]
 8000ba2:	619a      	str	r2, [r3, #24]
		  htim3.Instance = TIM3;
 8000ba4:	4b45      	ldr	r3, [pc, #276]	; (8000cbc <FEES_Startup_PWM_BATTERY+0x140>)
 8000ba6:	4a46      	ldr	r2, [pc, #280]	; (8000cc0 <FEES_Startup_PWM_BATTERY+0x144>)
 8000ba8:	601a      	str	r2, [r3, #0]
		  if(i==1){htim3.Init.Prescaler  = 160-1;}
 8000baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	d102      	bne.n	8000bb6 <FEES_Startup_PWM_BATTERY+0x3a>
 8000bb0:	4b42      	ldr	r3, [pc, #264]	; (8000cbc <FEES_Startup_PWM_BATTERY+0x140>)
 8000bb2:	229f      	movs	r2, #159	; 0x9f
 8000bb4:	605a      	str	r2, [r3, #4]
		  if(i==2){htim3.Init.Prescaler  = 150-1;}
 8000bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bb8:	2b02      	cmp	r3, #2
 8000bba:	d102      	bne.n	8000bc2 <FEES_Startup_PWM_BATTERY+0x46>
 8000bbc:	4b3f      	ldr	r3, [pc, #252]	; (8000cbc <FEES_Startup_PWM_BATTERY+0x140>)
 8000bbe:	2295      	movs	r2, #149	; 0x95
 8000bc0:	605a      	str	r2, [r3, #4]
		  if(i==3){htim3.Init.Prescaler  = 140-1;}
 8000bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bc4:	2b03      	cmp	r3, #3
 8000bc6:	d102      	bne.n	8000bce <FEES_Startup_PWM_BATTERY+0x52>
 8000bc8:	4b3c      	ldr	r3, [pc, #240]	; (8000cbc <FEES_Startup_PWM_BATTERY+0x140>)
 8000bca:	228b      	movs	r2, #139	; 0x8b
 8000bcc:	605a      	str	r2, [r3, #4]
		  if(i==4){htim3.Init.Prescaler  = 130-1;}
 8000bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd0:	2b04      	cmp	r3, #4
 8000bd2:	d102      	bne.n	8000bda <FEES_Startup_PWM_BATTERY+0x5e>
 8000bd4:	4b39      	ldr	r3, [pc, #228]	; (8000cbc <FEES_Startup_PWM_BATTERY+0x140>)
 8000bd6:	2281      	movs	r2, #129	; 0x81
 8000bd8:	605a      	str	r2, [r3, #4]
		  if(i==5){htim3.Init.Prescaler  = 120-1;}
 8000bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bdc:	2b05      	cmp	r3, #5
 8000bde:	d102      	bne.n	8000be6 <FEES_Startup_PWM_BATTERY+0x6a>
 8000be0:	4b36      	ldr	r3, [pc, #216]	; (8000cbc <FEES_Startup_PWM_BATTERY+0x140>)
 8000be2:	2277      	movs	r2, #119	; 0x77
 8000be4:	605a      	str	r2, [r3, #4]
		  if(i==6){htim3.Init.Prescaler  = 110-1;}
 8000be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be8:	2b06      	cmp	r3, #6
 8000bea:	d102      	bne.n	8000bf2 <FEES_Startup_PWM_BATTERY+0x76>
 8000bec:	4b33      	ldr	r3, [pc, #204]	; (8000cbc <FEES_Startup_PWM_BATTERY+0x140>)
 8000bee:	226d      	movs	r2, #109	; 0x6d
 8000bf0:	605a      	str	r2, [r3, #4]
		  if(i==7){htim3.Init.Prescaler  = 100-1;}
 8000bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf4:	2b07      	cmp	r3, #7
 8000bf6:	d102      	bne.n	8000bfe <FEES_Startup_PWM_BATTERY+0x82>
 8000bf8:	4b30      	ldr	r3, [pc, #192]	; (8000cbc <FEES_Startup_PWM_BATTERY+0x140>)
 8000bfa:	2263      	movs	r2, #99	; 0x63
 8000bfc:	605a      	str	r2, [r3, #4]
		  if(i==8){htim3.Init.Prescaler  = 90-1;}
 8000bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c00:	2b08      	cmp	r3, #8
 8000c02:	d102      	bne.n	8000c0a <FEES_Startup_PWM_BATTERY+0x8e>
 8000c04:	4b2d      	ldr	r3, [pc, #180]	; (8000cbc <FEES_Startup_PWM_BATTERY+0x140>)
 8000c06:	2259      	movs	r2, #89	; 0x59
 8000c08:	605a      	str	r2, [r3, #4]
		  if(i==9){htim3.Init.Prescaler  = 80-1;}
 8000c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c0c:	2b09      	cmp	r3, #9
 8000c0e:	d102      	bne.n	8000c16 <FEES_Startup_PWM_BATTERY+0x9a>
 8000c10:	4b2a      	ldr	r3, [pc, #168]	; (8000cbc <FEES_Startup_PWM_BATTERY+0x140>)
 8000c12:	224f      	movs	r2, #79	; 0x4f
 8000c14:	605a      	str	r2, [r3, #4]
		  if(i==10){htim3.Init.Prescaler = 70-1;}
 8000c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c18:	2b0a      	cmp	r3, #10
 8000c1a:	d102      	bne.n	8000c22 <FEES_Startup_PWM_BATTERY+0xa6>
 8000c1c:	4b27      	ldr	r3, [pc, #156]	; (8000cbc <FEES_Startup_PWM_BATTERY+0x140>)
 8000c1e:	2245      	movs	r2, #69	; 0x45
 8000c20:	605a      	str	r2, [r3, #4]

		  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c22:	4b26      	ldr	r3, [pc, #152]	; (8000cbc <FEES_Startup_PWM_BATTERY+0x140>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	609a      	str	r2, [r3, #8]
		  htim3.Init.Period = 100-1;
 8000c28:	4b24      	ldr	r3, [pc, #144]	; (8000cbc <FEES_Startup_PWM_BATTERY+0x140>)
 8000c2a:	2263      	movs	r2, #99	; 0x63
 8000c2c:	60da      	str	r2, [r3, #12]
		  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c2e:	4b23      	ldr	r3, [pc, #140]	; (8000cbc <FEES_Startup_PWM_BATTERY+0x140>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	611a      	str	r2, [r3, #16]
		  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c34:	4b21      	ldr	r3, [pc, #132]	; (8000cbc <FEES_Startup_PWM_BATTERY+0x140>)
 8000c36:	2280      	movs	r2, #128	; 0x80
 8000c38:	619a      	str	r2, [r3, #24]
		  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK){Error_Handler();}
 8000c3a:	4820      	ldr	r0, [pc, #128]	; (8000cbc <FEES_Startup_PWM_BATTERY+0x140>)
 8000c3c:	f003 fe55 	bl	80048ea <HAL_TIM_PWM_Init>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <FEES_Startup_PWM_BATTERY+0xce>
 8000c46:	f000 fe1b 	bl	8001880 <Error_Handler>

		  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
		  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	623b      	str	r3, [r7, #32]
		  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK){ Error_Handler();}
 8000c52:	f107 031c 	add.w	r3, r7, #28
 8000c56:	4619      	mov	r1, r3
 8000c58:	4818      	ldr	r0, [pc, #96]	; (8000cbc <FEES_Startup_PWM_BATTERY+0x140>)
 8000c5a:	f004 fcc5 	bl	80055e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <FEES_Startup_PWM_BATTERY+0xec>
 8000c64:	f000 fe0c 	bl	8001880 <Error_Handler>

		  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c68:	2360      	movs	r3, #96	; 0x60
 8000c6a:	603b      	str	r3, [r7, #0]
		  sConfigOC.Pulse = 50-1;
 8000c6c:	2331      	movs	r3, #49	; 0x31
 8000c6e:	607b      	str	r3, [r7, #4]
		  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c70:	2300      	movs	r3, #0
 8000c72:	60bb      	str	r3, [r7, #8]
		  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c74:	2300      	movs	r3, #0
 8000c76:	613b      	str	r3, [r7, #16]
		  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK){ Error_Handler();}
 8000c78:	463b      	mov	r3, r7
 8000c7a:	2208      	movs	r2, #8
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	480f      	ldr	r0, [pc, #60]	; (8000cbc <FEES_Startup_PWM_BATTERY+0x140>)
 8000c80:	f003 fffc 	bl	8004c7c <HAL_TIM_PWM_ConfigChannel>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <FEES_Startup_PWM_BATTERY+0x112>
 8000c8a:	f000 fdf9 	bl	8001880 <Error_Handler>
		  i++;
 8000c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c90:	3301      	adds	r3, #1
 8000c92:	627b      	str	r3, [r7, #36]	; 0x24
		  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000c94:	2108      	movs	r1, #8
 8000c96:	4809      	ldr	r0, [pc, #36]	; (8000cbc <FEES_Startup_PWM_BATTERY+0x140>)
 8000c98:	f003 fe52 	bl	8004940 <HAL_TIM_PWM_Start>
		  HAL_Delay(50);
 8000c9c:	2032      	movs	r0, #50	; 0x32
 8000c9e:	f001 fb1f 	bl	80022e0 <HAL_Delay>
	  while(i<11){
 8000ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca4:	2b0a      	cmp	r3, #10
 8000ca6:	f77f af6f 	ble.w	8000b88 <FEES_Startup_PWM_BATTERY+0xc>
		  }
	  HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 8000caa:	2108      	movs	r1, #8
 8000cac:	4803      	ldr	r0, [pc, #12]	; (8000cbc <FEES_Startup_PWM_BATTERY+0x140>)
 8000cae:	f003 fe85 	bl	80049bc <HAL_TIM_PWM_Stop>
}
 8000cb2:	bf00      	nop
 8000cb4:	3728      	adds	r7, #40	; 0x28
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	200057b0 	.word	0x200057b0
 8000cc0:	40000400 	.word	0x40000400

08000cc4 <BUONGIORNO_PORCODIOSO>:
 */

#include "PORCODIO.h"


void BUONGIORNO_PORCODIOSO(){
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0

	int a = 100;
 8000cca:	2364      	movs	r3, #100	; 0x64
 8000ccc:	60fb      	str	r3, [r7, #12]
	int b = 50;
 8000cce:	2332      	movs	r3, #50	; 0x32
 8000cd0:	60bb      	str	r3, [r7, #8]

	int c ;
	c= a + b;
 8000cd2:	68fa      	ldr	r2, [r7, #12]
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	607b      	str	r3, [r7, #4]

	printf( " C= %d " , c);
 8000cda:	6879      	ldr	r1, [r7, #4]
 8000cdc:	4803      	ldr	r0, [pc, #12]	; (8000cec <BUONGIORNO_PORCODIOSO+0x28>)
 8000cde:	f008 fed7 	bl	8009a90 <iprintf>


}
 8000ce2:	bf00      	nop
 8000ce4:	3710      	adds	r7, #16
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	0800aa54 	.word	0x0800aa54

08000cf0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cf0:	b5b0      	push	{r4, r5, r7, lr}
 8000cf2:	b086      	sub	sp, #24
 8000cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */


	BUONGIORNO_PORCODIOSO();
 8000cf6:	f7ff ffe5 	bl	8000cc4 <BUONGIORNO_PORCODIOSO>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cfa:	f001 faaf 	bl	800225c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cfe:	f000 f8a3 	bl	8000e48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d02:	f000 fc19 	bl	8001538 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000d06:	f000 f959 	bl	8000fbc <MX_I2C1_Init>
  MX_I2C2_Init();
 8000d0a:	f000 f985 	bl	8001018 <MX_I2C2_Init>
  MX_SPI1_Init();
 8000d0e:	f000 f9b1 	bl	8001074 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000d12:	f000 f9e5 	bl	80010e0 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000d16:	f000 fa19 	bl	800114c <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000d1a:	f000 fb37 	bl	800138c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000d1e:	f000 fb89 	bl	8001434 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8000d22:	f000 fbb1 	bl	8001488 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8000d26:	f000 f8f7 	bl	8000f18 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000d2a:	f000 fb59 	bl	80013e0 <MX_USART2_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000d2e:	f000 fbd5 	bl	80014dc <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 8000d32:	f000 fa41 	bl	80011b8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000d36:	f000 facf 	bl	80012d8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  FEES_Init();
 8000d3a:	f7ff fd4f 	bl	80007dc <FEES_Init>

  //HAL_GPIO_WritePin(GPIOD_BASE, GPIO_PIN_12, GPIO_PIN_SET);

  HAL_UART_Receive_IT(&huart3, (uint8_t *) rx_buffer, 2);	// Enable the USART2 in RX mode under Interrupt  2Characters
 8000d3e:	2202      	movs	r2, #2
 8000d40:	4929      	ldr	r1, [pc, #164]	; (8000de8 <main+0xf8>)
 8000d42:	482a      	ldr	r0, [pc, #168]	; (8000dec <main+0xfc>)
 8000d44:	f004 fdc6 	bl	80058d4 <HAL_UART_Receive_IT>


   char StringInit[]= "== Accenzione == \n\r";
 8000d48:	4b29      	ldr	r3, [pc, #164]	; (8000df0 <main+0x100>)
 8000d4a:	1d3c      	adds	r4, r7, #4
 8000d4c:	461d      	mov	r5, r3
 8000d4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d52:	682b      	ldr	r3, [r5, #0]
 8000d54:	6023      	str	r3, [r4, #0]
   HAL_UART_Transmit(&huart3, (uint8_t *)  StringInit, sizeof(StringInit)-1, 100);
 8000d56:	1d39      	adds	r1, r7, #4
 8000d58:	2364      	movs	r3, #100	; 0x64
 8000d5a:	2213      	movs	r2, #19
 8000d5c:	4823      	ldr	r0, [pc, #140]	; (8000dec <main+0xfc>)
 8000d5e:	f004 fd20 	bl	80057a2 <HAL_UART_Transmit>

   // Init Procedure
   FEES_SOS(50);
 8000d62:	2032      	movs	r0, #50	; 0x32
 8000d64:	f7ff fc04 	bl	8000570 <FEES_SOS>

   FEES_Startup_PWM_BATTERY(50); // STARTUP ALERT
 8000d68:	2032      	movs	r0, #50	; 0x32
 8000d6a:	f7ff ff07 	bl	8000b7c <FEES_Startup_PWM_BATTERY>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000d6e:	f006 f90b 	bl	8006f88 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000d72:	4a20      	ldr	r2, [pc, #128]	; (8000df4 <main+0x104>)
 8000d74:	2100      	movs	r1, #0
 8000d76:	4820      	ldr	r0, [pc, #128]	; (8000df8 <main+0x108>)
 8000d78:	f006 f970 	bl	800705c <osThreadNew>
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	4b1f      	ldr	r3, [pc, #124]	; (8000dfc <main+0x10c>)
 8000d80:	601a      	str	r2, [r3, #0]

  /* creation of Task1 */
  Task1Handle = osThreadNew(Task01, NULL, &Task1_attributes);
 8000d82:	4a1f      	ldr	r2, [pc, #124]	; (8000e00 <main+0x110>)
 8000d84:	2100      	movs	r1, #0
 8000d86:	481f      	ldr	r0, [pc, #124]	; (8000e04 <main+0x114>)
 8000d88:	f006 f968 	bl	800705c <osThreadNew>
 8000d8c:	4602      	mov	r2, r0
 8000d8e:	4b1e      	ldr	r3, [pc, #120]	; (8000e08 <main+0x118>)
 8000d90:	601a      	str	r2, [r3, #0]

  /* creation of Task2 */
  Task2Handle = osThreadNew(Task02, NULL, &Task2_attributes);
 8000d92:	4a1e      	ldr	r2, [pc, #120]	; (8000e0c <main+0x11c>)
 8000d94:	2100      	movs	r1, #0
 8000d96:	481e      	ldr	r0, [pc, #120]	; (8000e10 <main+0x120>)
 8000d98:	f006 f960 	bl	800705c <osThreadNew>
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	4b1d      	ldr	r3, [pc, #116]	; (8000e14 <main+0x124>)
 8000da0:	601a      	str	r2, [r3, #0]

  /* creation of Task3 */
  Task3Handle = osThreadNew(Task03, NULL, &Task3_attributes);
 8000da2:	4a1d      	ldr	r2, [pc, #116]	; (8000e18 <main+0x128>)
 8000da4:	2100      	movs	r1, #0
 8000da6:	481d      	ldr	r0, [pc, #116]	; (8000e1c <main+0x12c>)
 8000da8:	f006 f958 	bl	800705c <osThreadNew>
 8000dac:	4602      	mov	r2, r0
 8000dae:	4b1c      	ldr	r3, [pc, #112]	; (8000e20 <main+0x130>)
 8000db0:	601a      	str	r2, [r3, #0]

  /* creation of Task4 */
  Task4Handle = osThreadNew(Task04, NULL, &Task4_attributes);
 8000db2:	4a1c      	ldr	r2, [pc, #112]	; (8000e24 <main+0x134>)
 8000db4:	2100      	movs	r1, #0
 8000db6:	481c      	ldr	r0, [pc, #112]	; (8000e28 <main+0x138>)
 8000db8:	f006 f950 	bl	800705c <osThreadNew>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	4b1b      	ldr	r3, [pc, #108]	; (8000e2c <main+0x13c>)
 8000dc0:	601a      	str	r2, [r3, #0]

  /* creation of Task5 */
  Task5Handle = osThreadNew(Task05, NULL, &Task5_attributes);
 8000dc2:	4a1b      	ldr	r2, [pc, #108]	; (8000e30 <main+0x140>)
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	481b      	ldr	r0, [pc, #108]	; (8000e34 <main+0x144>)
 8000dc8:	f006 f948 	bl	800705c <osThreadNew>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	4b1a      	ldr	r3, [pc, #104]	; (8000e38 <main+0x148>)
 8000dd0:	601a      	str	r2, [r3, #0]

  /* creation of Task6 */
  Task6Handle = osThreadNew(Task06, NULL, &Task6_attributes);
 8000dd2:	4a1a      	ldr	r2, [pc, #104]	; (8000e3c <main+0x14c>)
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	481a      	ldr	r0, [pc, #104]	; (8000e40 <main+0x150>)
 8000dd8:	f006 f940 	bl	800705c <osThreadNew>
 8000ddc:	4602      	mov	r2, r0
 8000dde:	4b19      	ldr	r3, [pc, #100]	; (8000e44 <main+0x154>)
 8000de0:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000de2:	f006 f905 	bl	8006ff0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000de6:	e7fe      	b.n	8000de6 <main+0xf6>
 8000de8:	20004b24 	.word	0x20004b24
 8000dec:	200051e8 	.word	0x200051e8
 8000df0:	0800aa98 	.word	0x0800aa98
 8000df4:	0800aaf0 	.word	0x0800aaf0
 8000df8:	0800178d 	.word	0x0800178d
 8000dfc:	20004b38 	.word	0x20004b38
 8000e00:	0800ab14 	.word	0x0800ab14
 8000e04:	080017cd 	.word	0x080017cd
 8000e08:	200058c4 	.word	0x200058c4
 8000e0c:	0800ab38 	.word	0x0800ab38
 8000e10:	08001809 	.word	0x08001809
 8000e14:	20005fd8 	.word	0x20005fd8
 8000e18:	0800ab5c 	.word	0x0800ab5c
 8000e1c:	08001819 	.word	0x08001819
 8000e20:	20005fd4 	.word	0x20005fd4
 8000e24:	0800ab80 	.word	0x0800ab80
 8000e28:	0800182b 	.word	0x0800182b
 8000e2c:	20005994 	.word	0x20005994
 8000e30:	0800aba4 	.word	0x0800aba4
 8000e34:	0800183d 	.word	0x0800183d
 8000e38:	20004b28 	.word	0x20004b28
 8000e3c:	0800abc8 	.word	0x0800abc8
 8000e40:	0800184d 	.word	0x0800184d
 8000e44:	200058c0 	.word	0x200058c0

08000e48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b094      	sub	sp, #80	; 0x50
 8000e4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e4e:	f107 0320 	add.w	r3, r7, #32
 8000e52:	2230      	movs	r2, #48	; 0x30
 8000e54:	2100      	movs	r1, #0
 8000e56:	4618      	mov	r0, r3
 8000e58:	f008 fe11 	bl	8009a7e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e5c:	f107 030c 	add.w	r3, r7, #12
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	605a      	str	r2, [r3, #4]
 8000e66:	609a      	str	r2, [r3, #8]
 8000e68:	60da      	str	r2, [r3, #12]
 8000e6a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	60bb      	str	r3, [r7, #8]
 8000e70:	4b27      	ldr	r3, [pc, #156]	; (8000f10 <SystemClock_Config+0xc8>)
 8000e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e74:	4a26      	ldr	r2, [pc, #152]	; (8000f10 <SystemClock_Config+0xc8>)
 8000e76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e7a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e7c:	4b24      	ldr	r3, [pc, #144]	; (8000f10 <SystemClock_Config+0xc8>)
 8000e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e84:	60bb      	str	r3, [r7, #8]
 8000e86:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e88:	2300      	movs	r3, #0
 8000e8a:	607b      	str	r3, [r7, #4]
 8000e8c:	4b21      	ldr	r3, [pc, #132]	; (8000f14 <SystemClock_Config+0xcc>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a20      	ldr	r2, [pc, #128]	; (8000f14 <SystemClock_Config+0xcc>)
 8000e92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e96:	6013      	str	r3, [r2, #0]
 8000e98:	4b1e      	ldr	r3, [pc, #120]	; (8000f14 <SystemClock_Config+0xcc>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ea0:	607b      	str	r3, [r7, #4]
 8000ea2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ea8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000eac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000eb2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000eb8:	2304      	movs	r3, #4
 8000eba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000ebc:	2360      	movs	r3, #96	; 0x60
 8000ebe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8000ec0:	2306      	movs	r3, #6
 8000ec2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ec4:	2304      	movs	r3, #4
 8000ec6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ec8:	f107 0320 	add.w	r3, r7, #32
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f002 ffc5 	bl	8003e5c <HAL_RCC_OscConfig>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ed8:	f000 fcd2 	bl	8001880 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000edc:	230f      	movs	r3, #15
 8000ede:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000ee4:	2380      	movs	r3, #128	; 0x80
 8000ee6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eec:	2300      	movs	r3, #0
 8000eee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ef0:	f107 030c 	add.w	r3, r7, #12
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f003 fa20 	bl	800433c <HAL_RCC_ClockConfig>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000f02:	f000 fcbd 	bl	8001880 <Error_Handler>
  }
}
 8000f06:	bf00      	nop
 8000f08:	3750      	adds	r7, #80	; 0x50
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40023800 	.word	0x40023800
 8000f14:	40007000 	.word	0x40007000

08000f18 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f1e:	463b      	mov	r3, r7
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f2a:	4b21      	ldr	r3, [pc, #132]	; (8000fb0 <MX_ADC1_Init+0x98>)
 8000f2c:	4a21      	ldr	r2, [pc, #132]	; (8000fb4 <MX_ADC1_Init+0x9c>)
 8000f2e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000f30:	4b1f      	ldr	r3, [pc, #124]	; (8000fb0 <MX_ADC1_Init+0x98>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f36:	4b1e      	ldr	r3, [pc, #120]	; (8000fb0 <MX_ADC1_Init+0x98>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000f3c:	4b1c      	ldr	r3, [pc, #112]	; (8000fb0 <MX_ADC1_Init+0x98>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f42:	4b1b      	ldr	r3, [pc, #108]	; (8000fb0 <MX_ADC1_Init+0x98>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f48:	4b19      	ldr	r3, [pc, #100]	; (8000fb0 <MX_ADC1_Init+0x98>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f50:	4b17      	ldr	r3, [pc, #92]	; (8000fb0 <MX_ADC1_Init+0x98>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f56:	4b16      	ldr	r3, [pc, #88]	; (8000fb0 <MX_ADC1_Init+0x98>)
 8000f58:	4a17      	ldr	r2, [pc, #92]	; (8000fb8 <MX_ADC1_Init+0xa0>)
 8000f5a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f5c:	4b14      	ldr	r3, [pc, #80]	; (8000fb0 <MX_ADC1_Init+0x98>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f62:	4b13      	ldr	r3, [pc, #76]	; (8000fb0 <MX_ADC1_Init+0x98>)
 8000f64:	2201      	movs	r2, #1
 8000f66:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f68:	4b11      	ldr	r3, [pc, #68]	; (8000fb0 <MX_ADC1_Init+0x98>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f70:	4b0f      	ldr	r3, [pc, #60]	; (8000fb0 <MX_ADC1_Init+0x98>)
 8000f72:	2201      	movs	r2, #1
 8000f74:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f76:	480e      	ldr	r0, [pc, #56]	; (8000fb0 <MX_ADC1_Init+0x98>)
 8000f78:	f001 f9d4 	bl	8002324 <HAL_ADC_Init>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000f82:	f000 fc7d 	bl	8001880 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000f86:	2310      	movs	r3, #16
 8000f88:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f92:	463b      	mov	r3, r7
 8000f94:	4619      	mov	r1, r3
 8000f96:	4806      	ldr	r0, [pc, #24]	; (8000fb0 <MX_ADC1_Init+0x98>)
 8000f98:	f001 fa08 	bl	80023ac <HAL_ADC_ConfigChannel>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000fa2:	f000 fc6d 	bl	8001880 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fa6:	bf00      	nop
 8000fa8:	3710      	adds	r7, #16
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	200058c8 	.word	0x200058c8
 8000fb4:	40012000 	.word	0x40012000
 8000fb8:	0f000001 	.word	0x0f000001

08000fbc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fc0:	4b12      	ldr	r3, [pc, #72]	; (800100c <MX_I2C1_Init+0x50>)
 8000fc2:	4a13      	ldr	r2, [pc, #76]	; (8001010 <MX_I2C1_Init+0x54>)
 8000fc4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000fc6:	4b11      	ldr	r3, [pc, #68]	; (800100c <MX_I2C1_Init+0x50>)
 8000fc8:	4a12      	ldr	r2, [pc, #72]	; (8001014 <MX_I2C1_Init+0x58>)
 8000fca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fcc:	4b0f      	ldr	r3, [pc, #60]	; (800100c <MX_I2C1_Init+0x50>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000fd2:	4b0e      	ldr	r3, [pc, #56]	; (800100c <MX_I2C1_Init+0x50>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fd8:	4b0c      	ldr	r3, [pc, #48]	; (800100c <MX_I2C1_Init+0x50>)
 8000fda:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fde:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fe0:	4b0a      	ldr	r3, [pc, #40]	; (800100c <MX_I2C1_Init+0x50>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000fe6:	4b09      	ldr	r3, [pc, #36]	; (800100c <MX_I2C1_Init+0x50>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fec:	4b07      	ldr	r3, [pc, #28]	; (800100c <MX_I2C1_Init+0x50>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ff2:	4b06      	ldr	r3, [pc, #24]	; (800100c <MX_I2C1_Init+0x50>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ff8:	4804      	ldr	r0, [pc, #16]	; (800100c <MX_I2C1_Init+0x50>)
 8000ffa:	f001 fec7 	bl	8002d8c <HAL_I2C_Init>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001004:	f000 fc3c 	bl	8001880 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001008:	bf00      	nop
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20005234 	.word	0x20005234
 8001010:	40005400 	.word	0x40005400
 8001014:	000186a0 	.word	0x000186a0

08001018 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800101c:	4b12      	ldr	r3, [pc, #72]	; (8001068 <MX_I2C2_Init+0x50>)
 800101e:	4a13      	ldr	r2, [pc, #76]	; (800106c <MX_I2C2_Init+0x54>)
 8001020:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001022:	4b11      	ldr	r3, [pc, #68]	; (8001068 <MX_I2C2_Init+0x50>)
 8001024:	4a12      	ldr	r2, [pc, #72]	; (8001070 <MX_I2C2_Init+0x58>)
 8001026:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001028:	4b0f      	ldr	r3, [pc, #60]	; (8001068 <MX_I2C2_Init+0x50>)
 800102a:	2200      	movs	r2, #0
 800102c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800102e:	4b0e      	ldr	r3, [pc, #56]	; (8001068 <MX_I2C2_Init+0x50>)
 8001030:	2200      	movs	r2, #0
 8001032:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001034:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <MX_I2C2_Init+0x50>)
 8001036:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800103a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800103c:	4b0a      	ldr	r3, [pc, #40]	; (8001068 <MX_I2C2_Init+0x50>)
 800103e:	2200      	movs	r2, #0
 8001040:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001042:	4b09      	ldr	r3, [pc, #36]	; (8001068 <MX_I2C2_Init+0x50>)
 8001044:	2200      	movs	r2, #0
 8001046:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001048:	4b07      	ldr	r3, [pc, #28]	; (8001068 <MX_I2C2_Init+0x50>)
 800104a:	2200      	movs	r2, #0
 800104c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800104e:	4b06      	ldr	r3, [pc, #24]	; (8001068 <MX_I2C2_Init+0x50>)
 8001050:	2200      	movs	r2, #0
 8001052:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001054:	4804      	ldr	r0, [pc, #16]	; (8001068 <MX_I2C2_Init+0x50>)
 8001056:	f001 fe99 	bl	8002d8c <HAL_I2C_Init>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001060:	f000 fc0e 	bl	8001880 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001064:	bf00      	nop
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20005708 	.word	0x20005708
 800106c:	40005800 	.word	0x40005800
 8001070:	000186a0 	.word	0x000186a0

08001074 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001078:	4b17      	ldr	r3, [pc, #92]	; (80010d8 <MX_SPI1_Init+0x64>)
 800107a:	4a18      	ldr	r2, [pc, #96]	; (80010dc <MX_SPI1_Init+0x68>)
 800107c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800107e:	4b16      	ldr	r3, [pc, #88]	; (80010d8 <MX_SPI1_Init+0x64>)
 8001080:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001084:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001086:	4b14      	ldr	r3, [pc, #80]	; (80010d8 <MX_SPI1_Init+0x64>)
 8001088:	2200      	movs	r2, #0
 800108a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800108c:	4b12      	ldr	r3, [pc, #72]	; (80010d8 <MX_SPI1_Init+0x64>)
 800108e:	2200      	movs	r2, #0
 8001090:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001092:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <MX_SPI1_Init+0x64>)
 8001094:	2200      	movs	r2, #0
 8001096:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001098:	4b0f      	ldr	r3, [pc, #60]	; (80010d8 <MX_SPI1_Init+0x64>)
 800109a:	2200      	movs	r2, #0
 800109c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800109e:	4b0e      	ldr	r3, [pc, #56]	; (80010d8 <MX_SPI1_Init+0x64>)
 80010a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010a4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80010a6:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <MX_SPI1_Init+0x64>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010ac:	4b0a      	ldr	r3, [pc, #40]	; (80010d8 <MX_SPI1_Init+0x64>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010b2:	4b09      	ldr	r3, [pc, #36]	; (80010d8 <MX_SPI1_Init+0x64>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010b8:	4b07      	ldr	r3, [pc, #28]	; (80010d8 <MX_SPI1_Init+0x64>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80010be:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <MX_SPI1_Init+0x64>)
 80010c0:	220a      	movs	r2, #10
 80010c2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010c4:	4804      	ldr	r0, [pc, #16]	; (80010d8 <MX_SPI1_Init+0x64>)
 80010c6:	f003 fb5d 	bl	8004784 <HAL_SPI_Init>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80010d0:	f000 fbd6 	bl	8001880 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20006248 	.word	0x20006248
 80010dc:	40013000 	.word	0x40013000

080010e0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80010e4:	4b17      	ldr	r3, [pc, #92]	; (8001144 <MX_SPI2_Init+0x64>)
 80010e6:	4a18      	ldr	r2, [pc, #96]	; (8001148 <MX_SPI2_Init+0x68>)
 80010e8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80010ea:	4b16      	ldr	r3, [pc, #88]	; (8001144 <MX_SPI2_Init+0x64>)
 80010ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010f0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80010f2:	4b14      	ldr	r3, [pc, #80]	; (8001144 <MX_SPI2_Init+0x64>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80010f8:	4b12      	ldr	r3, [pc, #72]	; (8001144 <MX_SPI2_Init+0x64>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010fe:	4b11      	ldr	r3, [pc, #68]	; (8001144 <MX_SPI2_Init+0x64>)
 8001100:	2200      	movs	r2, #0
 8001102:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001104:	4b0f      	ldr	r3, [pc, #60]	; (8001144 <MX_SPI2_Init+0x64>)
 8001106:	2200      	movs	r2, #0
 8001108:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800110a:	4b0e      	ldr	r3, [pc, #56]	; (8001144 <MX_SPI2_Init+0x64>)
 800110c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001110:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001112:	4b0c      	ldr	r3, [pc, #48]	; (8001144 <MX_SPI2_Init+0x64>)
 8001114:	2200      	movs	r2, #0
 8001116:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001118:	4b0a      	ldr	r3, [pc, #40]	; (8001144 <MX_SPI2_Init+0x64>)
 800111a:	2200      	movs	r2, #0
 800111c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800111e:	4b09      	ldr	r3, [pc, #36]	; (8001144 <MX_SPI2_Init+0x64>)
 8001120:	2200      	movs	r2, #0
 8001122:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001124:	4b07      	ldr	r3, [pc, #28]	; (8001144 <MX_SPI2_Init+0x64>)
 8001126:	2200      	movs	r2, #0
 8001128:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800112a:	4b06      	ldr	r3, [pc, #24]	; (8001144 <MX_SPI2_Init+0x64>)
 800112c:	220a      	movs	r2, #10
 800112e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001130:	4804      	ldr	r0, [pc, #16]	; (8001144 <MX_SPI2_Init+0x64>)
 8001132:	f003 fb27 	bl	8004784 <HAL_SPI_Init>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800113c:	f000 fba0 	bl	8001880 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001140:	bf00      	nop
 8001142:	bd80      	pop	{r7, pc}
 8001144:	20004b6c 	.word	0x20004b6c
 8001148:	40003800 	.word	0x40003800

0800114c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001150:	4b17      	ldr	r3, [pc, #92]	; (80011b0 <MX_SPI3_Init+0x64>)
 8001152:	4a18      	ldr	r2, [pc, #96]	; (80011b4 <MX_SPI3_Init+0x68>)
 8001154:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001156:	4b16      	ldr	r3, [pc, #88]	; (80011b0 <MX_SPI3_Init+0x64>)
 8001158:	f44f 7282 	mov.w	r2, #260	; 0x104
 800115c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800115e:	4b14      	ldr	r3, [pc, #80]	; (80011b0 <MX_SPI3_Init+0x64>)
 8001160:	2200      	movs	r2, #0
 8001162:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001164:	4b12      	ldr	r3, [pc, #72]	; (80011b0 <MX_SPI3_Init+0x64>)
 8001166:	2200      	movs	r2, #0
 8001168:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800116a:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <MX_SPI3_Init+0x64>)
 800116c:	2200      	movs	r2, #0
 800116e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001170:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <MX_SPI3_Init+0x64>)
 8001172:	2200      	movs	r2, #0
 8001174:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001176:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <MX_SPI3_Init+0x64>)
 8001178:	f44f 7200 	mov.w	r2, #512	; 0x200
 800117c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800117e:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <MX_SPI3_Init+0x64>)
 8001180:	2200      	movs	r2, #0
 8001182:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001184:	4b0a      	ldr	r3, [pc, #40]	; (80011b0 <MX_SPI3_Init+0x64>)
 8001186:	2200      	movs	r2, #0
 8001188:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800118a:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <MX_SPI3_Init+0x64>)
 800118c:	2200      	movs	r2, #0
 800118e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001190:	4b07      	ldr	r3, [pc, #28]	; (80011b0 <MX_SPI3_Init+0x64>)
 8001192:	2200      	movs	r2, #0
 8001194:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001196:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <MX_SPI3_Init+0x64>)
 8001198:	220a      	movs	r2, #10
 800119a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800119c:	4804      	ldr	r0, [pc, #16]	; (80011b0 <MX_SPI3_Init+0x64>)
 800119e:	f003 faf1 	bl	8004784 <HAL_SPI_Init>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80011a8:	f000 fb6a 	bl	8001880 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80011ac:	bf00      	nop
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	200057f0 	.word	0x200057f0
 80011b4:	40003c00 	.word	0x40003c00

080011b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b08e      	sub	sp, #56	; 0x38
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]
 80011c8:	609a      	str	r2, [r3, #8]
 80011ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011cc:	f107 0320 	add.w	r3, r7, #32
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011d6:	1d3b      	adds	r3, r7, #4
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	605a      	str	r2, [r3, #4]
 80011de:	609a      	str	r2, [r3, #8]
 80011e0:	60da      	str	r2, [r3, #12]
 80011e2:	611a      	str	r2, [r3, #16]
 80011e4:	615a      	str	r2, [r3, #20]
 80011e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011e8:	4b3a      	ldr	r3, [pc, #232]	; (80012d4 <MX_TIM2_Init+0x11c>)
 80011ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1600-1;
 80011f0:	4b38      	ldr	r3, [pc, #224]	; (80012d4 <MX_TIM2_Init+0x11c>)
 80011f2:	f240 623f 	movw	r2, #1599	; 0x63f
 80011f6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011f8:	4b36      	ldr	r3, [pc, #216]	; (80012d4 <MX_TIM2_Init+0x11c>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80011fe:	4b35      	ldr	r3, [pc, #212]	; (80012d4 <MX_TIM2_Init+0x11c>)
 8001200:	2263      	movs	r2, #99	; 0x63
 8001202:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001204:	4b33      	ldr	r3, [pc, #204]	; (80012d4 <MX_TIM2_Init+0x11c>)
 8001206:	2200      	movs	r2, #0
 8001208:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800120a:	4b32      	ldr	r3, [pc, #200]	; (80012d4 <MX_TIM2_Init+0x11c>)
 800120c:	2280      	movs	r2, #128	; 0x80
 800120e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001210:	4830      	ldr	r0, [pc, #192]	; (80012d4 <MX_TIM2_Init+0x11c>)
 8001212:	f003 fb1b 	bl	800484c <HAL_TIM_Base_Init>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800121c:	f000 fb30 	bl	8001880 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001220:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001224:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001226:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800122a:	4619      	mov	r1, r3
 800122c:	4829      	ldr	r0, [pc, #164]	; (80012d4 <MX_TIM2_Init+0x11c>)
 800122e:	f003 fdeb 	bl	8004e08 <HAL_TIM_ConfigClockSource>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001238:	f000 fb22 	bl	8001880 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800123c:	4825      	ldr	r0, [pc, #148]	; (80012d4 <MX_TIM2_Init+0x11c>)
 800123e:	f003 fb54 	bl	80048ea <HAL_TIM_PWM_Init>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001248:	f000 fb1a 	bl	8001880 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800124c:	2300      	movs	r3, #0
 800124e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001250:	2300      	movs	r3, #0
 8001252:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001254:	f107 0320 	add.w	r3, r7, #32
 8001258:	4619      	mov	r1, r3
 800125a:	481e      	ldr	r0, [pc, #120]	; (80012d4 <MX_TIM2_Init+0x11c>)
 800125c:	f004 f9c4 	bl	80055e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001266:	f000 fb0b 	bl	8001880 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800126a:	2360      	movs	r3, #96	; 0x60
 800126c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50-1;
 800126e:	2331      	movs	r3, #49	; 0x31
 8001270:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001272:	2300      	movs	r3, #0
 8001274:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001276:	2300      	movs	r3, #0
 8001278:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800127a:	1d3b      	adds	r3, r7, #4
 800127c:	2200      	movs	r2, #0
 800127e:	4619      	mov	r1, r3
 8001280:	4814      	ldr	r0, [pc, #80]	; (80012d4 <MX_TIM2_Init+0x11c>)
 8001282:	f003 fcfb 	bl	8004c7c <HAL_TIM_PWM_ConfigChannel>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800128c:	f000 faf8 	bl	8001880 <Error_Handler>
  }
  sConfigOC.Pulse = 25-1;
 8001290:	2318      	movs	r3, #24
 8001292:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001294:	1d3b      	adds	r3, r7, #4
 8001296:	2204      	movs	r2, #4
 8001298:	4619      	mov	r1, r3
 800129a:	480e      	ldr	r0, [pc, #56]	; (80012d4 <MX_TIM2_Init+0x11c>)
 800129c:	f003 fcee 	bl	8004c7c <HAL_TIM_PWM_ConfigChannel>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 80012a6:	f000 faeb 	bl	8001880 <Error_Handler>
  }
  sConfigOC.Pulse = 750-1;
 80012aa:	f240 23ed 	movw	r3, #749	; 0x2ed
 80012ae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80012b0:	1d3b      	adds	r3, r7, #4
 80012b2:	2208      	movs	r2, #8
 80012b4:	4619      	mov	r1, r3
 80012b6:	4807      	ldr	r0, [pc, #28]	; (80012d4 <MX_TIM2_Init+0x11c>)
 80012b8:	f003 fce0 	bl	8004c7c <HAL_TIM_PWM_ConfigChannel>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_TIM2_Init+0x10e>
  {
    Error_Handler();
 80012c2:	f000 fadd 	bl	8001880 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80012c6:	4803      	ldr	r0, [pc, #12]	; (80012d4 <MX_TIM2_Init+0x11c>)
 80012c8:	f000 fca2 	bl	8001c10 <HAL_TIM_MspPostInit>

}
 80012cc:	bf00      	nop
 80012ce:	3738      	adds	r7, #56	; 0x38
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	200062a0 	.word	0x200062a0

080012d8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08a      	sub	sp, #40	; 0x28
 80012dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012de:	f107 0320 	add.w	r3, r7, #32
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012e8:	1d3b      	adds	r3, r7, #4
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	609a      	str	r2, [r3, #8]
 80012f2:	60da      	str	r2, [r3, #12]
 80012f4:	611a      	str	r2, [r3, #16]
 80012f6:	615a      	str	r2, [r3, #20]
 80012f8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012fa:	4b22      	ldr	r3, [pc, #136]	; (8001384 <MX_TIM3_Init+0xac>)
 80012fc:	4a22      	ldr	r2, [pc, #136]	; (8001388 <MX_TIM3_Init+0xb0>)
 80012fe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1600-1;
 8001300:	4b20      	ldr	r3, [pc, #128]	; (8001384 <MX_TIM3_Init+0xac>)
 8001302:	f240 623f 	movw	r2, #1599	; 0x63f
 8001306:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001308:	4b1e      	ldr	r3, [pc, #120]	; (8001384 <MX_TIM3_Init+0xac>)
 800130a:	2200      	movs	r2, #0
 800130c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 800130e:	4b1d      	ldr	r3, [pc, #116]	; (8001384 <MX_TIM3_Init+0xac>)
 8001310:	2263      	movs	r2, #99	; 0x63
 8001312:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001314:	4b1b      	ldr	r3, [pc, #108]	; (8001384 <MX_TIM3_Init+0xac>)
 8001316:	2200      	movs	r2, #0
 8001318:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800131a:	4b1a      	ldr	r3, [pc, #104]	; (8001384 <MX_TIM3_Init+0xac>)
 800131c:	2280      	movs	r2, #128	; 0x80
 800131e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001320:	4818      	ldr	r0, [pc, #96]	; (8001384 <MX_TIM3_Init+0xac>)
 8001322:	f003 fae2 	bl	80048ea <HAL_TIM_PWM_Init>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800132c:	f000 faa8 	bl	8001880 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001330:	2300      	movs	r3, #0
 8001332:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001334:	2300      	movs	r3, #0
 8001336:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001338:	f107 0320 	add.w	r3, r7, #32
 800133c:	4619      	mov	r1, r3
 800133e:	4811      	ldr	r0, [pc, #68]	; (8001384 <MX_TIM3_Init+0xac>)
 8001340:	f004 f952 	bl	80055e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800134a:	f000 fa99 	bl	8001880 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800134e:	2360      	movs	r3, #96	; 0x60
 8001350:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50-1;
 8001352:	2331      	movs	r3, #49	; 0x31
 8001354:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001356:	2300      	movs	r3, #0
 8001358:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800135a:	2300      	movs	r3, #0
 800135c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800135e:	1d3b      	adds	r3, r7, #4
 8001360:	2208      	movs	r2, #8
 8001362:	4619      	mov	r1, r3
 8001364:	4807      	ldr	r0, [pc, #28]	; (8001384 <MX_TIM3_Init+0xac>)
 8001366:	f003 fc89 	bl	8004c7c <HAL_TIM_PWM_ConfigChannel>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001370:	f000 fa86 	bl	8001880 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001374:	4803      	ldr	r0, [pc, #12]	; (8001384 <MX_TIM3_Init+0xac>)
 8001376:	f000 fc4b 	bl	8001c10 <HAL_TIM_MspPostInit>

}
 800137a:	bf00      	nop
 800137c:	3728      	adds	r7, #40	; 0x28
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	200057b0 	.word	0x200057b0
 8001388:	40000400 	.word	0x40000400

0800138c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001390:	4b11      	ldr	r3, [pc, #68]	; (80013d8 <MX_USART1_UART_Init+0x4c>)
 8001392:	4a12      	ldr	r2, [pc, #72]	; (80013dc <MX_USART1_UART_Init+0x50>)
 8001394:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001396:	4b10      	ldr	r3, [pc, #64]	; (80013d8 <MX_USART1_UART_Init+0x4c>)
 8001398:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800139c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800139e:	4b0e      	ldr	r3, [pc, #56]	; (80013d8 <MX_USART1_UART_Init+0x4c>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013a4:	4b0c      	ldr	r3, [pc, #48]	; (80013d8 <MX_USART1_UART_Init+0x4c>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013aa:	4b0b      	ldr	r3, [pc, #44]	; (80013d8 <MX_USART1_UART_Init+0x4c>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013b0:	4b09      	ldr	r3, [pc, #36]	; (80013d8 <MX_USART1_UART_Init+0x4c>)
 80013b2:	220c      	movs	r2, #12
 80013b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013b6:	4b08      	ldr	r3, [pc, #32]	; (80013d8 <MX_USART1_UART_Init+0x4c>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013bc:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <MX_USART1_UART_Init+0x4c>)
 80013be:	2200      	movs	r2, #0
 80013c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013c2:	4805      	ldr	r0, [pc, #20]	; (80013d8 <MX_USART1_UART_Init+0x4c>)
 80013c4:	f004 f9a0 	bl	8005708 <HAL_UART_Init>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80013ce:	f000 fa57 	bl	8001880 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	200059b0 	.word	0x200059b0
 80013dc:	40011000 	.word	0x40011000

080013e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013e4:	4b11      	ldr	r3, [pc, #68]	; (800142c <MX_USART2_UART_Init+0x4c>)
 80013e6:	4a12      	ldr	r2, [pc, #72]	; (8001430 <MX_USART2_UART_Init+0x50>)
 80013e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013ea:	4b10      	ldr	r3, [pc, #64]	; (800142c <MX_USART2_UART_Init+0x4c>)
 80013ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013f2:	4b0e      	ldr	r3, [pc, #56]	; (800142c <MX_USART2_UART_Init+0x4c>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013f8:	4b0c      	ldr	r3, [pc, #48]	; (800142c <MX_USART2_UART_Init+0x4c>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013fe:	4b0b      	ldr	r3, [pc, #44]	; (800142c <MX_USART2_UART_Init+0x4c>)
 8001400:	2200      	movs	r2, #0
 8001402:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001404:	4b09      	ldr	r3, [pc, #36]	; (800142c <MX_USART2_UART_Init+0x4c>)
 8001406:	220c      	movs	r2, #12
 8001408:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800140a:	4b08      	ldr	r3, [pc, #32]	; (800142c <MX_USART2_UART_Init+0x4c>)
 800140c:	2200      	movs	r2, #0
 800140e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001410:	4b06      	ldr	r3, [pc, #24]	; (800142c <MX_USART2_UART_Init+0x4c>)
 8001412:	2200      	movs	r2, #0
 8001414:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001416:	4805      	ldr	r0, [pc, #20]	; (800142c <MX_USART2_UART_Init+0x4c>)
 8001418:	f004 f976 	bl	8005708 <HAL_UART_Init>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001422:	f000 fa2d 	bl	8001880 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	200062ec 	.word	0x200062ec
 8001430:	40004400 	.word	0x40004400

08001434 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001438:	4b11      	ldr	r3, [pc, #68]	; (8001480 <MX_USART3_UART_Init+0x4c>)
 800143a:	4a12      	ldr	r2, [pc, #72]	; (8001484 <MX_USART3_UART_Init+0x50>)
 800143c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 57600;
 800143e:	4b10      	ldr	r3, [pc, #64]	; (8001480 <MX_USART3_UART_Init+0x4c>)
 8001440:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001444:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001446:	4b0e      	ldr	r3, [pc, #56]	; (8001480 <MX_USART3_UART_Init+0x4c>)
 8001448:	2200      	movs	r2, #0
 800144a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800144c:	4b0c      	ldr	r3, [pc, #48]	; (8001480 <MX_USART3_UART_Init+0x4c>)
 800144e:	2200      	movs	r2, #0
 8001450:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001452:	4b0b      	ldr	r3, [pc, #44]	; (8001480 <MX_USART3_UART_Init+0x4c>)
 8001454:	2200      	movs	r2, #0
 8001456:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001458:	4b09      	ldr	r3, [pc, #36]	; (8001480 <MX_USART3_UART_Init+0x4c>)
 800145a:	220c      	movs	r2, #12
 800145c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800145e:	4b08      	ldr	r3, [pc, #32]	; (8001480 <MX_USART3_UART_Init+0x4c>)
 8001460:	2200      	movs	r2, #0
 8001462:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001464:	4b06      	ldr	r3, [pc, #24]	; (8001480 <MX_USART3_UART_Init+0x4c>)
 8001466:	2200      	movs	r2, #0
 8001468:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800146a:	4805      	ldr	r0, [pc, #20]	; (8001480 <MX_USART3_UART_Init+0x4c>)
 800146c:	f004 f94c 	bl	8005708 <HAL_UART_Init>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001476:	f000 fa03 	bl	8001880 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	200051e8 	.word	0x200051e8
 8001484:	40004800 	.word	0x40004800

08001488 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800148c:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <MX_USART6_UART_Init+0x4c>)
 800148e:	4a12      	ldr	r2, [pc, #72]	; (80014d8 <MX_USART6_UART_Init+0x50>)
 8001490:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001492:	4b10      	ldr	r3, [pc, #64]	; (80014d4 <MX_USART6_UART_Init+0x4c>)
 8001494:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001498:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800149a:	4b0e      	ldr	r3, [pc, #56]	; (80014d4 <MX_USART6_UART_Init+0x4c>)
 800149c:	2200      	movs	r2, #0
 800149e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80014a0:	4b0c      	ldr	r3, [pc, #48]	; (80014d4 <MX_USART6_UART_Init+0x4c>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80014a6:	4b0b      	ldr	r3, [pc, #44]	; (80014d4 <MX_USART6_UART_Init+0x4c>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80014ac:	4b09      	ldr	r3, [pc, #36]	; (80014d4 <MX_USART6_UART_Init+0x4c>)
 80014ae:	220c      	movs	r2, #12
 80014b0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014b2:	4b08      	ldr	r3, [pc, #32]	; (80014d4 <MX_USART6_UART_Init+0x4c>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80014b8:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <MX_USART6_UART_Init+0x4c>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80014be:	4805      	ldr	r0, [pc, #20]	; (80014d4 <MX_USART6_UART_Init+0x4c>)
 80014c0:	f004 f922 	bl	8005708 <HAL_UART_Init>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80014ca:	f000 f9d9 	bl	8001880 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20005f94 	.word	0x20005f94
 80014d8:	40011400 	.word	0x40011400

080014dc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80014e0:	4b14      	ldr	r3, [pc, #80]	; (8001534 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014e2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80014e6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80014e8:	4b12      	ldr	r3, [pc, #72]	; (8001534 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014ea:	2204      	movs	r2, #4
 80014ec:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80014ee:	4b11      	ldr	r3, [pc, #68]	; (8001534 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014f0:	2202      	movs	r2, #2
 80014f2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80014f4:	4b0f      	ldr	r3, [pc, #60]	; (8001534 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80014fa:	4b0e      	ldr	r3, [pc, #56]	; (8001534 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014fc:	2202      	movs	r2, #2
 80014fe:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001500:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001502:	2200      	movs	r2, #0
 8001504:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001506:	4b0b      	ldr	r3, [pc, #44]	; (8001534 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001508:	2200      	movs	r2, #0
 800150a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800150c:	4b09      	ldr	r3, [pc, #36]	; (8001534 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800150e:	2200      	movs	r2, #0
 8001510:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001512:	4b08      	ldr	r3, [pc, #32]	; (8001534 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001514:	2201      	movs	r2, #1
 8001516:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001518:	4b06      	ldr	r3, [pc, #24]	; (8001534 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800151a:	2200      	movs	r2, #0
 800151c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800151e:	4805      	ldr	r0, [pc, #20]	; (8001534 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001520:	f001 fd6c 	bl	8002ffc <HAL_PCD_Init>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800152a:	f000 f9a9 	bl	8001880 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	20005294 	.word	0x20005294

08001538 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b08c      	sub	sp, #48	; 0x30
 800153c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800153e:	f107 031c 	add.w	r3, r7, #28
 8001542:	2200      	movs	r2, #0
 8001544:	601a      	str	r2, [r3, #0]
 8001546:	605a      	str	r2, [r3, #4]
 8001548:	609a      	str	r2, [r3, #8]
 800154a:	60da      	str	r2, [r3, #12]
 800154c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	61bb      	str	r3, [r7, #24]
 8001552:	4b6e      	ldr	r3, [pc, #440]	; (800170c <MX_GPIO_Init+0x1d4>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	4a6d      	ldr	r2, [pc, #436]	; (800170c <MX_GPIO_Init+0x1d4>)
 8001558:	f043 0310 	orr.w	r3, r3, #16
 800155c:	6313      	str	r3, [r2, #48]	; 0x30
 800155e:	4b6b      	ldr	r3, [pc, #428]	; (800170c <MX_GPIO_Init+0x1d4>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	f003 0310 	and.w	r3, r3, #16
 8001566:	61bb      	str	r3, [r7, #24]
 8001568:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	617b      	str	r3, [r7, #20]
 800156e:	4b67      	ldr	r3, [pc, #412]	; (800170c <MX_GPIO_Init+0x1d4>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	4a66      	ldr	r2, [pc, #408]	; (800170c <MX_GPIO_Init+0x1d4>)
 8001574:	f043 0304 	orr.w	r3, r3, #4
 8001578:	6313      	str	r3, [r2, #48]	; 0x30
 800157a:	4b64      	ldr	r3, [pc, #400]	; (800170c <MX_GPIO_Init+0x1d4>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	f003 0304 	and.w	r3, r3, #4
 8001582:	617b      	str	r3, [r7, #20]
 8001584:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	613b      	str	r3, [r7, #16]
 800158a:	4b60      	ldr	r3, [pc, #384]	; (800170c <MX_GPIO_Init+0x1d4>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	4a5f      	ldr	r2, [pc, #380]	; (800170c <MX_GPIO_Init+0x1d4>)
 8001590:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001594:	6313      	str	r3, [r2, #48]	; 0x30
 8001596:	4b5d      	ldr	r3, [pc, #372]	; (800170c <MX_GPIO_Init+0x1d4>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800159e:	613b      	str	r3, [r7, #16]
 80015a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	60fb      	str	r3, [r7, #12]
 80015a6:	4b59      	ldr	r3, [pc, #356]	; (800170c <MX_GPIO_Init+0x1d4>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	4a58      	ldr	r2, [pc, #352]	; (800170c <MX_GPIO_Init+0x1d4>)
 80015ac:	f043 0301 	orr.w	r3, r3, #1
 80015b0:	6313      	str	r3, [r2, #48]	; 0x30
 80015b2:	4b56      	ldr	r3, [pc, #344]	; (800170c <MX_GPIO_Init+0x1d4>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015be:	2300      	movs	r3, #0
 80015c0:	60bb      	str	r3, [r7, #8]
 80015c2:	4b52      	ldr	r3, [pc, #328]	; (800170c <MX_GPIO_Init+0x1d4>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	4a51      	ldr	r2, [pc, #324]	; (800170c <MX_GPIO_Init+0x1d4>)
 80015c8:	f043 0302 	orr.w	r3, r3, #2
 80015cc:	6313      	str	r3, [r2, #48]	; 0x30
 80015ce:	4b4f      	ldr	r3, [pc, #316]	; (800170c <MX_GPIO_Init+0x1d4>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	f003 0302 	and.w	r3, r3, #2
 80015d6:	60bb      	str	r3, [r7, #8]
 80015d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	607b      	str	r3, [r7, #4]
 80015de:	4b4b      	ldr	r3, [pc, #300]	; (800170c <MX_GPIO_Init+0x1d4>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	4a4a      	ldr	r2, [pc, #296]	; (800170c <MX_GPIO_Init+0x1d4>)
 80015e4:	f043 0308 	orr.w	r3, r3, #8
 80015e8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ea:	4b48      	ldr	r3, [pc, #288]	; (800170c <MX_GPIO_Init+0x1d4>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	f003 0308 	and.w	r3, r3, #8
 80015f2:	607b      	str	r3, [r7, #4]
 80015f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPS_PWR_ON_Pin|SBD_PWR_ON_Pin|CS_NAND_Pin|CS_LORA_Pin
 80015f6:	2200      	movs	r2, #0
 80015f8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80015fc:	4844      	ldr	r0, [pc, #272]	; (8001710 <MX_GPIO_Init+0x1d8>)
 80015fe:	f001 fb91 	bl	8002d24 <HAL_GPIO_WritePin>
                          |RSBY_ON_Pin|DIR_COIL_X_Pin|DIR_COIL_Y_Pin|DIR_COIL_Z_Pin
                          |CS_GYRO_Pin|EN_ADC1_Pin|EN_ADC3_Pin|EN_ADC2_Pin
                          |SBD_SER_RI_Pin|SBD_SER_NET_Pin|ANA_PWR_ON_Pin|RAD_PWR_ON_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, UHF_RESET_Pin|RADFET_OWB_Pin|RAD_RESET_Pin|PSD1_SEL0_Pin
 8001602:	2200      	movs	r2, #0
 8001604:	f24e 213e 	movw	r1, #57918	; 0xe23e
 8001608:	4842      	ldr	r0, [pc, #264]	; (8001714 <MX_GPIO_Init+0x1dc>)
 800160a:	f001 fb8b 	bl	8002d24 <HAL_GPIO_WritePin>
                          |PSD2_SEL1_Pin|PSD2_SEL0_Pin|PSD1_AMP_CS_Pin|PSD2_AMP_CS_Pin
                          |EX_SPI_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PSD1_SEL1_GPIO_Port, PSD1_SEL1_Pin, GPIO_PIN_SET);
 800160e:	2201      	movs	r2, #1
 8001610:	2101      	movs	r1, #1
 8001612:	4840      	ldr	r0, [pc, #256]	; (8001714 <MX_GPIO_Init+0x1dc>)
 8001614:	f001 fb86 	bl	8002d24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EX_GPIO3_Pin|CS_RADFET_Pin|EX_GPIO4_Pin, GPIO_PIN_RESET);
 8001618:	2200      	movs	r2, #0
 800161a:	f44f 6183 	mov.w	r1, #1048	; 0x418
 800161e:	483e      	ldr	r0, [pc, #248]	; (8001718 <MX_GPIO_Init+0x1e0>)
 8001620:	f001 fb80 	bl	8002d24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RSBY_KEEP_EN_Pin|EX_GPIO1_Pin|EX_GPIO2_Pin|WATCHDOG_Pin, GPIO_PIN_RESET);
 8001624:	2200      	movs	r2, #0
 8001626:	f241 0123 	movw	r1, #4131	; 0x1023
 800162a:	483c      	ldr	r0, [pc, #240]	; (800171c <MX_GPIO_Init+0x1e4>)
 800162c:	f001 fb7a 	bl	8002d24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CS_EEPROM_Pin|CS_FRAM_Pin|CS_GYROD12_Pin|INT_GYRO_Pin
 8001630:	2200      	movs	r2, #0
 8001632:	f64f 419f 	movw	r1, #64671	; 0xfc9f
 8001636:	483a      	ldr	r0, [pc, #232]	; (8001720 <MX_GPIO_Init+0x1e8>)
 8001638:	f001 fb74 	bl	8002d24 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GPS_PWR_ON_Pin SBD_PWR_ON_Pin CS_NAND_Pin CS_LORA_Pin
                           RSBY_ON_Pin DIR_COIL_X_Pin DIR_COIL_Y_Pin DIR_COIL_Z_Pin
                           CS_GYRO_Pin EN_ADC1_Pin EN_ADC3_Pin EN_ADC2_Pin
                           SBD_SER_RI_Pin SBD_SER_NET_Pin ANA_PWR_ON_Pin RAD_PWR_ON_Pin */
  GPIO_InitStruct.Pin = GPS_PWR_ON_Pin|SBD_PWR_ON_Pin|CS_NAND_Pin|CS_LORA_Pin
 800163c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001640:	61fb      	str	r3, [r7, #28]
                          |RSBY_ON_Pin|DIR_COIL_X_Pin|DIR_COIL_Y_Pin|DIR_COIL_Z_Pin
                          |CS_GYRO_Pin|EN_ADC1_Pin|EN_ADC3_Pin|EN_ADC2_Pin
                          |SBD_SER_RI_Pin|SBD_SER_NET_Pin|ANA_PWR_ON_Pin|RAD_PWR_ON_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001642:	2301      	movs	r3, #1
 8001644:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001646:	2300      	movs	r3, #0
 8001648:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164a:	2300      	movs	r3, #0
 800164c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800164e:	f107 031c 	add.w	r3, r7, #28
 8001652:	4619      	mov	r1, r3
 8001654:	482e      	ldr	r0, [pc, #184]	; (8001710 <MX_GPIO_Init+0x1d8>)
 8001656:	f001 f9cb 	bl	80029f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : UHF_RESET_Pin RADFET_OWB_Pin RAD_RESET_Pin PSD1_SEL1_Pin
                           PSD1_SEL0_Pin PSD2_SEL1_Pin PSD2_SEL0_Pin PSD1_AMP_CS_Pin
                           PSD2_AMP_CS_Pin EX_SPI_EN_Pin */
  GPIO_InitStruct.Pin = UHF_RESET_Pin|RADFET_OWB_Pin|RAD_RESET_Pin|PSD1_SEL1_Pin
 800165a:	f24e 233f 	movw	r3, #57919	; 0xe23f
 800165e:	61fb      	str	r3, [r7, #28]
                          |PSD1_SEL0_Pin|PSD2_SEL1_Pin|PSD2_SEL0_Pin|PSD1_AMP_CS_Pin
                          |PSD2_AMP_CS_Pin|EX_SPI_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001660:	2301      	movs	r3, #1
 8001662:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001664:	2300      	movs	r3, #0
 8001666:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001668:	2300      	movs	r3, #0
 800166a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800166c:	f107 031c 	add.w	r3, r7, #28
 8001670:	4619      	mov	r1, r3
 8001672:	4828      	ldr	r0, [pc, #160]	; (8001714 <MX_GPIO_Init+0x1dc>)
 8001674:	f001 f9bc 	bl	80029f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : EX_GPIO3_Pin CS_RADFET_Pin EX_GPIO4_Pin */
  GPIO_InitStruct.Pin = EX_GPIO3_Pin|CS_RADFET_Pin|EX_GPIO4_Pin;
 8001678:	f44f 6383 	mov.w	r3, #1048	; 0x418
 800167c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800167e:	2301      	movs	r3, #1
 8001680:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001682:	2300      	movs	r3, #0
 8001684:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001686:	2300      	movs	r3, #0
 8001688:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800168a:	f107 031c 	add.w	r3, r7, #28
 800168e:	4619      	mov	r1, r3
 8001690:	4821      	ldr	r0, [pc, #132]	; (8001718 <MX_GPIO_Init+0x1e0>)
 8001692:	f001 f9ad 	bl	80029f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RSBY_KEEP_EN_Pin EX_GPIO1_Pin EX_GPIO2_Pin WATCHDOG_Pin */
  GPIO_InitStruct.Pin = RSBY_KEEP_EN_Pin|EX_GPIO1_Pin|EX_GPIO2_Pin|WATCHDOG_Pin;
 8001696:	f241 0323 	movw	r3, #4131	; 0x1023
 800169a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800169c:	2301      	movs	r3, #1
 800169e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a0:	2300      	movs	r3, #0
 80016a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a4:	2300      	movs	r3, #0
 80016a6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016a8:	f107 031c 	add.w	r3, r7, #28
 80016ac:	4619      	mov	r1, r3
 80016ae:	481b      	ldr	r0, [pc, #108]	; (800171c <MX_GPIO_Init+0x1e4>)
 80016b0:	f001 f99e 	bl	80029f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80016b4:	2304      	movs	r3, #4
 80016b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016b8:	2300      	movs	r3, #0
 80016ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016bc:	2300      	movs	r3, #0
 80016be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80016c0:	f107 031c 	add.w	r3, r7, #28
 80016c4:	4619      	mov	r1, r3
 80016c6:	4815      	ldr	r0, [pc, #84]	; (800171c <MX_GPIO_Init+0x1e4>)
 80016c8:	f001 f992 	bl	80029f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_EEPROM_Pin CS_FRAM_Pin CS_GYROD12_Pin INT_GYRO_Pin
                           CS_GYRO2_Pin INT_GYRO2_Pin SBD_SER_DCD_Pin SBD_SER_DSR_Pin
                           SBD_SER_DTR_Pin SBD_SER_CTS_Pin SBD_SER_RTS_Pin SBD_ON_OFF_Pin */
  GPIO_InitStruct.Pin = CS_EEPROM_Pin|CS_FRAM_Pin|CS_GYROD12_Pin|INT_GYRO_Pin
 80016cc:	f64f 439f 	movw	r3, #64671	; 0xfc9f
 80016d0:	61fb      	str	r3, [r7, #28]
                          |CS_GYRO2_Pin|INT_GYRO2_Pin|SBD_SER_DCD_Pin|SBD_SER_DSR_Pin
                          |SBD_SER_DTR_Pin|SBD_SER_CTS_Pin|SBD_SER_RTS_Pin|SBD_ON_OFF_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016d2:	2301      	movs	r3, #1
 80016d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d6:	2300      	movs	r3, #0
 80016d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016da:	2300      	movs	r3, #0
 80016dc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016de:	f107 031c 	add.w	r3, r7, #28
 80016e2:	4619      	mov	r1, r3
 80016e4:	480e      	ldr	r0, [pc, #56]	; (8001720 <MX_GPIO_Init+0x1e8>)
 80016e6:	f001 f983 	bl	80029f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PGOOD_Pin */
  GPIO_InitStruct.Pin = PGOOD_Pin;
 80016ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016f0:	2300      	movs	r3, #0
 80016f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f4:	2300      	movs	r3, #0
 80016f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PGOOD_GPIO_Port, &GPIO_InitStruct);
 80016f8:	f107 031c 	add.w	r3, r7, #28
 80016fc:	4619      	mov	r1, r3
 80016fe:	4806      	ldr	r0, [pc, #24]	; (8001718 <MX_GPIO_Init+0x1e0>)
 8001700:	f001 f976 	bl	80029f0 <HAL_GPIO_Init>

}
 8001704:	bf00      	nop
 8001706:	3730      	adds	r7, #48	; 0x30
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	40023800 	.word	0x40023800
 8001710:	40021000 	.word	0x40021000
 8001714:	40020800 	.word	0x40020800
 8001718:	40020000 	.word	0x40020000
 800171c:	40020400 	.word	0x40020400
 8001720:	40020c00 	.word	0x40020c00

08001724 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

// RX char from USART3 in Interrupt mode
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
	  RxData=TRUE;
 800172c:	4b12      	ldr	r3, [pc, #72]	; (8001778 <HAL_UART_RxCpltCallback+0x54>)
 800172e:	2201      	movs	r2, #1
 8001730:	601a      	str	r2, [r3, #0]
	  HAL_UART_Transmit(&huart3,  (uint8_t *) newline, sizeof(newline), 100);
 8001732:	2364      	movs	r3, #100	; 0x64
 8001734:	2204      	movs	r2, #4
 8001736:	4911      	ldr	r1, [pc, #68]	; (800177c <HAL_UART_RxCpltCallback+0x58>)
 8001738:	4811      	ldr	r0, [pc, #68]	; (8001780 <HAL_UART_RxCpltCallback+0x5c>)
 800173a:	f004 f832 	bl	80057a2 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart3,  (uint8_t *) " - I RECEIVED : ", 16 , 100);
 800173e:	2364      	movs	r3, #100	; 0x64
 8001740:	2210      	movs	r2, #16
 8001742:	4910      	ldr	r1, [pc, #64]	; (8001784 <HAL_UART_RxCpltCallback+0x60>)
 8001744:	480e      	ldr	r0, [pc, #56]	; (8001780 <HAL_UART_RxCpltCallback+0x5c>)
 8001746:	f004 f82c 	bl	80057a2 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart3,  (uint8_t *) rx_buffer, sizeof(rx_buffer), 100);
 800174a:	2364      	movs	r3, #100	; 0x64
 800174c:	2202      	movs	r2, #2
 800174e:	490e      	ldr	r1, [pc, #56]	; (8001788 <HAL_UART_RxCpltCallback+0x64>)
 8001750:	480b      	ldr	r0, [pc, #44]	; (8001780 <HAL_UART_RxCpltCallback+0x5c>)
 8001752:	f004 f826 	bl	80057a2 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart3,  (uint8_t *) newline, sizeof(newline), 100);
 8001756:	2364      	movs	r3, #100	; 0x64
 8001758:	2204      	movs	r2, #4
 800175a:	4908      	ldr	r1, [pc, #32]	; (800177c <HAL_UART_RxCpltCallback+0x58>)
 800175c:	4808      	ldr	r0, [pc, #32]	; (8001780 <HAL_UART_RxCpltCallback+0x5c>)
 800175e:	f004 f820 	bl	80057a2 <HAL_UART_Transmit>

	 // if(huart2.Instance->RDR != 13) huart2.Instance->RDR = 13;

  // Restart USART in Rx in Interrupt mode
  HAL_UART_Receive_IT(&huart3, (uint8_t *)  rx_buffer, sizeof(rx_buffer));
 8001762:	2202      	movs	r2, #2
 8001764:	4908      	ldr	r1, [pc, #32]	; (8001788 <HAL_UART_RxCpltCallback+0x64>)
 8001766:	4806      	ldr	r0, [pc, #24]	; (8001780 <HAL_UART_RxCpltCallback+0x5c>)
 8001768:	f004 f8b4 	bl	80058d4 <HAL_UART_Receive_IT>

  State_Updater();
 800176c:	f7fe ffea 	bl	8000744 <State_Updater>
}
 8001770:	bf00      	nop
 8001772:	3708      	adds	r7, #8
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	20000204 	.word	0x20000204
 800177c:	0800aaec 	.word	0x0800aaec
 8001780:	200051e8 	.word	0x200051e8
 8001784:	0800aaac 	.word	0x0800aaac
 8001788:	20004b24 	.word	0x20004b24

0800178c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800178c:	b5b0      	push	{r4, r5, r7, lr}
 800178e:	b088      	sub	sp, #32
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  char StringBuffer[]= "== Sono Vivo == \n\r";
 8001794:	4b0b      	ldr	r3, [pc, #44]	; (80017c4 <StartDefaultTask+0x38>)
 8001796:	f107 040c 	add.w	r4, r7, #12
 800179a:	461d      	mov	r5, r3
 800179c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800179e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017a0:	682b      	ldr	r3, [r5, #0]
 80017a2:	461a      	mov	r2, r3
 80017a4:	8022      	strh	r2, [r4, #0]
 80017a6:	3402      	adds	r4, #2
 80017a8:	0c1b      	lsrs	r3, r3, #16
 80017aa:	7023      	strb	r3, [r4, #0]
	  HAL_UART_Transmit(&huart3, (uint8_t *)  StringBuffer, sizeof(StringBuffer)-1, 100);
 80017ac:	f107 010c 	add.w	r1, r7, #12
 80017b0:	2364      	movs	r3, #100	; 0x64
 80017b2:	2212      	movs	r2, #18
 80017b4:	4804      	ldr	r0, [pc, #16]	; (80017c8 <StartDefaultTask+0x3c>)
 80017b6:	f003 fff4 	bl	80057a2 <HAL_UART_Transmit>

    osDelay(1000);
 80017ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017be:	f005 fcf3 	bl	80071a8 <osDelay>
  {
 80017c2:	e7e7      	b.n	8001794 <StartDefaultTask+0x8>
 80017c4:	0800aac0 	.word	0x0800aac0
 80017c8:	200051e8 	.word	0x200051e8

080017cc <Task01>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task01 */
void Task01(void *argument)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task01 */
  /* Infinite loop */
  for(;;)
  {
	 // BATTERY_PID_FUNCTION();
	  osDelay(100);
 80017d4:	2064      	movs	r0, #100	; 0x64
 80017d6:	f005 fce7 	bl	80071a8 <osDelay>

	// FEES_Pin_Toggle('d',15);  	// CS_NAND - Led BLU ( D 5 )
	  int delayvar=100;
 80017da:	2364      	movs	r3, #100	; 0x64
 80017dc:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_WritePin(WATCHDOG_GPIO_Port,WATCHDOG_Pin, 1);
 80017de:	2201      	movs	r2, #1
 80017e0:	2120      	movs	r1, #32
 80017e2:	4808      	ldr	r0, [pc, #32]	; (8001804 <Task01+0x38>)
 80017e4:	f001 fa9e 	bl	8002d24 <HAL_GPIO_WritePin>
	  osDelay(delayvar);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	4618      	mov	r0, r3
 80017ec:	f005 fcdc 	bl	80071a8 <osDelay>
	  HAL_GPIO_WritePin(WATCHDOG_GPIO_Port,WATCHDOG_Pin, 0);
 80017f0:	2200      	movs	r2, #0
 80017f2:	2120      	movs	r1, #32
 80017f4:	4803      	ldr	r0, [pc, #12]	; (8001804 <Task01+0x38>)
 80017f6:	f001 fa95 	bl	8002d24 <HAL_GPIO_WritePin>
	  osDelay(delayvar);
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f005 fcd3 	bl	80071a8 <osDelay>
  {
 8001802:	e7e7      	b.n	80017d4 <Task01+0x8>
 8001804:	40020400 	.word	0x40020400

08001808 <Task02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task02 */
void Task02(void *argument)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]

	  //HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);	// X-Coil PWM
	  //HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);	// Y-Coil PWM
	  //HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);	// Z-Coil PWM

	  osDelay(100);
 8001810:	2064      	movs	r0, #100	; 0x64
 8001812:	f005 fcc9 	bl	80071a8 <osDelay>
 8001816:	e7fb      	b.n	8001810 <Task02+0x8>

08001818 <Task03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task03 */
void Task03(void *argument)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task03 */
  /* Infinite loop */
  for(;;)
  {

	  osDelay(1000);
 8001820:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001824:	f005 fcc0 	bl	80071a8 <osDelay>
 8001828:	e7fa      	b.n	8001820 <Task03+0x8>

0800182a <Task04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task04 */
void Task04(void *argument)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b082      	sub	sp, #8
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task04 */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(1000);
 8001832:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001836:	f005 fcb7 	bl	80071a8 <osDelay>
 800183a:	e7fa      	b.n	8001832 <Task04+0x8>

0800183c <Task05>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task05 */
void Task05(void *argument)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {

	  //FEES_Pin_Toggle('d',12, 20); 	// TMTC_WD
	  osDelay(50);
 8001844:	2032      	movs	r0, #50	; 0x32
 8001846:	f005 fcaf 	bl	80071a8 <osDelay>
 800184a:	e7fb      	b.n	8001844 <Task05+0x8>

0800184c <Task06>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task06 */
void Task06(void *argument)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b086      	sub	sp, #24
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
	for(;;)
	  {


		osDelay(100);
 8001854:	2064      	movs	r0, #100	; 0x64
 8001856:	f005 fca7 	bl	80071a8 <osDelay>
 800185a:	e7fb      	b.n	8001854 <Task06+0x8>

0800185c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a04      	ldr	r2, [pc, #16]	; (800187c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d101      	bne.n	8001872 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800186e:	f000 fd17 	bl	80022a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001872:	bf00      	nop
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40001000 	.word	0x40001000

08001880 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001884:	bf00      	nop
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
	...

08001890 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	607b      	str	r3, [r7, #4]
 800189a:	4b10      	ldr	r3, [pc, #64]	; (80018dc <HAL_MspInit+0x4c>)
 800189c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800189e:	4a0f      	ldr	r2, [pc, #60]	; (80018dc <HAL_MspInit+0x4c>)
 80018a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018a4:	6453      	str	r3, [r2, #68]	; 0x44
 80018a6:	4b0d      	ldr	r3, [pc, #52]	; (80018dc <HAL_MspInit+0x4c>)
 80018a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018ae:	607b      	str	r3, [r7, #4]
 80018b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	603b      	str	r3, [r7, #0]
 80018b6:	4b09      	ldr	r3, [pc, #36]	; (80018dc <HAL_MspInit+0x4c>)
 80018b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ba:	4a08      	ldr	r2, [pc, #32]	; (80018dc <HAL_MspInit+0x4c>)
 80018bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018c0:	6413      	str	r3, [r2, #64]	; 0x40
 80018c2:	4b06      	ldr	r3, [pc, #24]	; (80018dc <HAL_MspInit+0x4c>)
 80018c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ca:	603b      	str	r3, [r7, #0]
 80018cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ce:	bf00      	nop
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	40023800 	.word	0x40023800

080018e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a0b      	ldr	r2, [pc, #44]	; (800191c <HAL_ADC_MspInit+0x3c>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d10d      	bne.n	800190e <HAL_ADC_MspInit+0x2e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80018f2:	2300      	movs	r3, #0
 80018f4:	60fb      	str	r3, [r7, #12]
 80018f6:	4b0a      	ldr	r3, [pc, #40]	; (8001920 <HAL_ADC_MspInit+0x40>)
 80018f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018fa:	4a09      	ldr	r2, [pc, #36]	; (8001920 <HAL_ADC_MspInit+0x40>)
 80018fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001900:	6453      	str	r3, [r2, #68]	; 0x44
 8001902:	4b07      	ldr	r3, [pc, #28]	; (8001920 <HAL_ADC_MspInit+0x40>)
 8001904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800190a:	60fb      	str	r3, [r7, #12]
 800190c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800190e:	bf00      	nop
 8001910:	3714      	adds	r7, #20
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	40012000 	.word	0x40012000
 8001920:	40023800 	.word	0x40023800

08001924 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b08c      	sub	sp, #48	; 0x30
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800192c:	f107 031c 	add.w	r3, r7, #28
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	605a      	str	r2, [r3, #4]
 8001936:	609a      	str	r2, [r3, #8]
 8001938:	60da      	str	r2, [r3, #12]
 800193a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a33      	ldr	r2, [pc, #204]	; (8001a10 <HAL_I2C_MspInit+0xec>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d12d      	bne.n	80019a2 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	61bb      	str	r3, [r7, #24]
 800194a:	4b32      	ldr	r3, [pc, #200]	; (8001a14 <HAL_I2C_MspInit+0xf0>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194e:	4a31      	ldr	r2, [pc, #196]	; (8001a14 <HAL_I2C_MspInit+0xf0>)
 8001950:	f043 0302 	orr.w	r3, r3, #2
 8001954:	6313      	str	r3, [r2, #48]	; 0x30
 8001956:	4b2f      	ldr	r3, [pc, #188]	; (8001a14 <HAL_I2C_MspInit+0xf0>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	61bb      	str	r3, [r7, #24]
 8001960:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001962:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001966:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001968:	2312      	movs	r3, #18
 800196a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800196c:	2301      	movs	r3, #1
 800196e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001970:	2303      	movs	r3, #3
 8001972:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001974:	2304      	movs	r3, #4
 8001976:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001978:	f107 031c 	add.w	r3, r7, #28
 800197c:	4619      	mov	r1, r3
 800197e:	4826      	ldr	r0, [pc, #152]	; (8001a18 <HAL_I2C_MspInit+0xf4>)
 8001980:	f001 f836 	bl	80029f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001984:	2300      	movs	r3, #0
 8001986:	617b      	str	r3, [r7, #20]
 8001988:	4b22      	ldr	r3, [pc, #136]	; (8001a14 <HAL_I2C_MspInit+0xf0>)
 800198a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198c:	4a21      	ldr	r2, [pc, #132]	; (8001a14 <HAL_I2C_MspInit+0xf0>)
 800198e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001992:	6413      	str	r3, [r2, #64]	; 0x40
 8001994:	4b1f      	ldr	r3, [pc, #124]	; (8001a14 <HAL_I2C_MspInit+0xf0>)
 8001996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001998:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800199c:	617b      	str	r3, [r7, #20]
 800199e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80019a0:	e031      	b.n	8001a06 <HAL_I2C_MspInit+0xe2>
  else if(hi2c->Instance==I2C2)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a1d      	ldr	r2, [pc, #116]	; (8001a1c <HAL_I2C_MspInit+0xf8>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d12c      	bne.n	8001a06 <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ac:	2300      	movs	r3, #0
 80019ae:	613b      	str	r3, [r7, #16]
 80019b0:	4b18      	ldr	r3, [pc, #96]	; (8001a14 <HAL_I2C_MspInit+0xf0>)
 80019b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b4:	4a17      	ldr	r2, [pc, #92]	; (8001a14 <HAL_I2C_MspInit+0xf0>)
 80019b6:	f043 0302 	orr.w	r3, r3, #2
 80019ba:	6313      	str	r3, [r2, #48]	; 0x30
 80019bc:	4b15      	ldr	r3, [pc, #84]	; (8001a14 <HAL_I2C_MspInit+0xf0>)
 80019be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c0:	f003 0302 	and.w	r3, r3, #2
 80019c4:	613b      	str	r3, [r7, #16]
 80019c6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80019c8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80019cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019ce:	2312      	movs	r3, #18
 80019d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019d2:	2301      	movs	r3, #1
 80019d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019d6:	2303      	movs	r3, #3
 80019d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80019da:	2304      	movs	r3, #4
 80019dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019de:	f107 031c 	add.w	r3, r7, #28
 80019e2:	4619      	mov	r1, r3
 80019e4:	480c      	ldr	r0, [pc, #48]	; (8001a18 <HAL_I2C_MspInit+0xf4>)
 80019e6:	f001 f803 	bl	80029f0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80019ea:	2300      	movs	r3, #0
 80019ec:	60fb      	str	r3, [r7, #12]
 80019ee:	4b09      	ldr	r3, [pc, #36]	; (8001a14 <HAL_I2C_MspInit+0xf0>)
 80019f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f2:	4a08      	ldr	r2, [pc, #32]	; (8001a14 <HAL_I2C_MspInit+0xf0>)
 80019f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80019f8:	6413      	str	r3, [r2, #64]	; 0x40
 80019fa:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <HAL_I2C_MspInit+0xf0>)
 80019fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	68fb      	ldr	r3, [r7, #12]
}
 8001a06:	bf00      	nop
 8001a08:	3730      	adds	r7, #48	; 0x30
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	40005400 	.word	0x40005400
 8001a14:	40023800 	.word	0x40023800
 8001a18:	40020400 	.word	0x40020400
 8001a1c:	40005800 	.word	0x40005800

08001a20 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b08e      	sub	sp, #56	; 0x38
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	605a      	str	r2, [r3, #4]
 8001a32:	609a      	str	r2, [r3, #8]
 8001a34:	60da      	str	r2, [r3, #12]
 8001a36:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a4c      	ldr	r2, [pc, #304]	; (8001b70 <HAL_SPI_MspInit+0x150>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d12c      	bne.n	8001a9c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	623b      	str	r3, [r7, #32]
 8001a46:	4b4b      	ldr	r3, [pc, #300]	; (8001b74 <HAL_SPI_MspInit+0x154>)
 8001a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4a:	4a4a      	ldr	r2, [pc, #296]	; (8001b74 <HAL_SPI_MspInit+0x154>)
 8001a4c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a50:	6453      	str	r3, [r2, #68]	; 0x44
 8001a52:	4b48      	ldr	r3, [pc, #288]	; (8001b74 <HAL_SPI_MspInit+0x154>)
 8001a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a5a:	623b      	str	r3, [r7, #32]
 8001a5c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a5e:	2300      	movs	r3, #0
 8001a60:	61fb      	str	r3, [r7, #28]
 8001a62:	4b44      	ldr	r3, [pc, #272]	; (8001b74 <HAL_SPI_MspInit+0x154>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a66:	4a43      	ldr	r2, [pc, #268]	; (8001b74 <HAL_SPI_MspInit+0x154>)
 8001a68:	f043 0301 	orr.w	r3, r3, #1
 8001a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a6e:	4b41      	ldr	r3, [pc, #260]	; (8001b74 <HAL_SPI_MspInit+0x154>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	f003 0301 	and.w	r3, r3, #1
 8001a76:	61fb      	str	r3, [r7, #28]
 8001a78:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001a7a:	23e0      	movs	r3, #224	; 0xe0
 8001a7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7e:	2302      	movs	r3, #2
 8001a80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a82:	2300      	movs	r3, #0
 8001a84:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a86:	2303      	movs	r3, #3
 8001a88:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a8a:	2305      	movs	r3, #5
 8001a8c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a92:	4619      	mov	r1, r3
 8001a94:	4838      	ldr	r0, [pc, #224]	; (8001b78 <HAL_SPI_MspInit+0x158>)
 8001a96:	f000 ffab 	bl	80029f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001a9a:	e064      	b.n	8001b66 <HAL_SPI_MspInit+0x146>
  else if(hspi->Instance==SPI2)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a36      	ldr	r2, [pc, #216]	; (8001b7c <HAL_SPI_MspInit+0x15c>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d12d      	bne.n	8001b02 <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	61bb      	str	r3, [r7, #24]
 8001aaa:	4b32      	ldr	r3, [pc, #200]	; (8001b74 <HAL_SPI_MspInit+0x154>)
 8001aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aae:	4a31      	ldr	r2, [pc, #196]	; (8001b74 <HAL_SPI_MspInit+0x154>)
 8001ab0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ab4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ab6:	4b2f      	ldr	r3, [pc, #188]	; (8001b74 <HAL_SPI_MspInit+0x154>)
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001abe:	61bb      	str	r3, [r7, #24]
 8001ac0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	617b      	str	r3, [r7, #20]
 8001ac6:	4b2b      	ldr	r3, [pc, #172]	; (8001b74 <HAL_SPI_MspInit+0x154>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aca:	4a2a      	ldr	r2, [pc, #168]	; (8001b74 <HAL_SPI_MspInit+0x154>)
 8001acc:	f043 0302 	orr.w	r3, r3, #2
 8001ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad2:	4b28      	ldr	r3, [pc, #160]	; (8001b74 <HAL_SPI_MspInit+0x154>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	617b      	str	r3, [r7, #20]
 8001adc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001ade:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001ae2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aec:	2303      	movs	r3, #3
 8001aee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001af0:	2305      	movs	r3, #5
 8001af2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001af4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001af8:	4619      	mov	r1, r3
 8001afa:	4821      	ldr	r0, [pc, #132]	; (8001b80 <HAL_SPI_MspInit+0x160>)
 8001afc:	f000 ff78 	bl	80029f0 <HAL_GPIO_Init>
}
 8001b00:	e031      	b.n	8001b66 <HAL_SPI_MspInit+0x146>
  else if(hspi->Instance==SPI3)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a1f      	ldr	r2, [pc, #124]	; (8001b84 <HAL_SPI_MspInit+0x164>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d12c      	bne.n	8001b66 <HAL_SPI_MspInit+0x146>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	613b      	str	r3, [r7, #16]
 8001b10:	4b18      	ldr	r3, [pc, #96]	; (8001b74 <HAL_SPI_MspInit+0x154>)
 8001b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b14:	4a17      	ldr	r2, [pc, #92]	; (8001b74 <HAL_SPI_MspInit+0x154>)
 8001b16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b1a:	6413      	str	r3, [r2, #64]	; 0x40
 8001b1c:	4b15      	ldr	r3, [pc, #84]	; (8001b74 <HAL_SPI_MspInit+0x154>)
 8001b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b24:	613b      	str	r3, [r7, #16]
 8001b26:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b28:	2300      	movs	r3, #0
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	4b11      	ldr	r3, [pc, #68]	; (8001b74 <HAL_SPI_MspInit+0x154>)
 8001b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b30:	4a10      	ldr	r2, [pc, #64]	; (8001b74 <HAL_SPI_MspInit+0x154>)
 8001b32:	f043 0304 	orr.w	r3, r3, #4
 8001b36:	6313      	str	r3, [r2, #48]	; 0x30
 8001b38:	4b0e      	ldr	r3, [pc, #56]	; (8001b74 <HAL_SPI_MspInit+0x154>)
 8001b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3c:	f003 0304 	and.w	r3, r3, #4
 8001b40:	60fb      	str	r3, [r7, #12]
 8001b42:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001b44:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001b48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b52:	2303      	movs	r3, #3
 8001b54:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001b56:	2306      	movs	r3, #6
 8001b58:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4809      	ldr	r0, [pc, #36]	; (8001b88 <HAL_SPI_MspInit+0x168>)
 8001b62:	f000 ff45 	bl	80029f0 <HAL_GPIO_Init>
}
 8001b66:	bf00      	nop
 8001b68:	3738      	adds	r7, #56	; 0x38
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	40013000 	.word	0x40013000
 8001b74:	40023800 	.word	0x40023800
 8001b78:	40020000 	.word	0x40020000
 8001b7c:	40003800 	.word	0x40003800
 8001b80:	40020400 	.word	0x40020400
 8001b84:	40003c00 	.word	0x40003c00
 8001b88:	40020800 	.word	0x40020800

08001b8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b9c:	d10d      	bne.n	8001bba <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	60fb      	str	r3, [r7, #12]
 8001ba2:	4b09      	ldr	r3, [pc, #36]	; (8001bc8 <HAL_TIM_Base_MspInit+0x3c>)
 8001ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba6:	4a08      	ldr	r2, [pc, #32]	; (8001bc8 <HAL_TIM_Base_MspInit+0x3c>)
 8001ba8:	f043 0301 	orr.w	r3, r3, #1
 8001bac:	6413      	str	r3, [r2, #64]	; 0x40
 8001bae:	4b06      	ldr	r3, [pc, #24]	; (8001bc8 <HAL_TIM_Base_MspInit+0x3c>)
 8001bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb2:	f003 0301 	and.w	r3, r3, #1
 8001bb6:	60fb      	str	r3, [r7, #12]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001bba:	bf00      	nop
 8001bbc:	3714      	adds	r7, #20
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	40023800 	.word	0x40023800

08001bcc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b085      	sub	sp, #20
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a0b      	ldr	r2, [pc, #44]	; (8001c08 <HAL_TIM_PWM_MspInit+0x3c>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d10d      	bne.n	8001bfa <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001bde:	2300      	movs	r3, #0
 8001be0:	60fb      	str	r3, [r7, #12]
 8001be2:	4b0a      	ldr	r3, [pc, #40]	; (8001c0c <HAL_TIM_PWM_MspInit+0x40>)
 8001be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be6:	4a09      	ldr	r2, [pc, #36]	; (8001c0c <HAL_TIM_PWM_MspInit+0x40>)
 8001be8:	f043 0302 	orr.w	r3, r3, #2
 8001bec:	6413      	str	r3, [r2, #64]	; 0x40
 8001bee:	4b07      	ldr	r3, [pc, #28]	; (8001c0c <HAL_TIM_PWM_MspInit+0x40>)
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf2:	f003 0302 	and.w	r3, r3, #2
 8001bf6:	60fb      	str	r3, [r7, #12]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001bfa:	bf00      	nop
 8001bfc:	3714      	adds	r7, #20
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	40000400 	.word	0x40000400
 8001c0c:	40023800 	.word	0x40023800

08001c10 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b08a      	sub	sp, #40	; 0x28
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c18:	f107 0314 	add.w	r3, r7, #20
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]
 8001c20:	605a      	str	r2, [r3, #4]
 8001c22:	609a      	str	r2, [r3, #8]
 8001c24:	60da      	str	r2, [r3, #12]
 8001c26:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c30:	d11e      	bne.n	8001c70 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c32:	2300      	movs	r3, #0
 8001c34:	613b      	str	r3, [r7, #16]
 8001c36:	4b22      	ldr	r3, [pc, #136]	; (8001cc0 <HAL_TIM_MspPostInit+0xb0>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3a:	4a21      	ldr	r2, [pc, #132]	; (8001cc0 <HAL_TIM_MspPostInit+0xb0>)
 8001c3c:	f043 0301 	orr.w	r3, r3, #1
 8001c40:	6313      	str	r3, [r2, #48]	; 0x30
 8001c42:	4b1f      	ldr	r3, [pc, #124]	; (8001cc0 <HAL_TIM_MspPostInit+0xb0>)
 8001c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c46:	f003 0301 	and.w	r3, r3, #1
 8001c4a:	613b      	str	r3, [r7, #16]
 8001c4c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|PWM_Y_COIL_Pin|PWM_Z_COIL_Pin;
 8001c4e:	2307      	movs	r3, #7
 8001c50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c52:	2302      	movs	r3, #2
 8001c54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c56:	2300      	movs	r3, #0
 8001c58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c62:	f107 0314 	add.w	r3, r7, #20
 8001c66:	4619      	mov	r1, r3
 8001c68:	4816      	ldr	r0, [pc, #88]	; (8001cc4 <HAL_TIM_MspPostInit+0xb4>)
 8001c6a:	f000 fec1 	bl	80029f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001c6e:	e023      	b.n	8001cb8 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a14      	ldr	r2, [pc, #80]	; (8001cc8 <HAL_TIM_MspPostInit+0xb8>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d11e      	bne.n	8001cb8 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60fb      	str	r3, [r7, #12]
 8001c7e:	4b10      	ldr	r3, [pc, #64]	; (8001cc0 <HAL_TIM_MspPostInit+0xb0>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c82:	4a0f      	ldr	r2, [pc, #60]	; (8001cc0 <HAL_TIM_MspPostInit+0xb0>)
 8001c84:	f043 0304 	orr.w	r3, r3, #4
 8001c88:	6313      	str	r3, [r2, #48]	; 0x30
 8001c8a:	4b0d      	ldr	r3, [pc, #52]	; (8001cc0 <HAL_TIM_MspPostInit+0xb0>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8e:	f003 0304 	and.w	r3, r3, #4
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_HEATER_Pin;
 8001c96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ca8:	2302      	movs	r3, #2
 8001caa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_HEATER_GPIO_Port, &GPIO_InitStruct);
 8001cac:	f107 0314 	add.w	r3, r7, #20
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	4806      	ldr	r0, [pc, #24]	; (8001ccc <HAL_TIM_MspPostInit+0xbc>)
 8001cb4:	f000 fe9c 	bl	80029f0 <HAL_GPIO_Init>
}
 8001cb8:	bf00      	nop
 8001cba:	3728      	adds	r7, #40	; 0x28
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	40023800 	.word	0x40023800
 8001cc4:	40020000 	.word	0x40020000
 8001cc8:	40000400 	.word	0x40000400
 8001ccc:	40020800 	.word	0x40020800

08001cd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b090      	sub	sp, #64	; 0x40
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	605a      	str	r2, [r3, #4]
 8001ce2:	609a      	str	r2, [r3, #8]
 8001ce4:	60da      	str	r2, [r3, #12]
 8001ce6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a68      	ldr	r2, [pc, #416]	; (8001e90 <HAL_UART_MspInit+0x1c0>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d12c      	bne.n	8001d4c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cf6:	4b67      	ldr	r3, [pc, #412]	; (8001e94 <HAL_UART_MspInit+0x1c4>)
 8001cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfa:	4a66      	ldr	r2, [pc, #408]	; (8001e94 <HAL_UART_MspInit+0x1c4>)
 8001cfc:	f043 0310 	orr.w	r3, r3, #16
 8001d00:	6453      	str	r3, [r2, #68]	; 0x44
 8001d02:	4b64      	ldr	r3, [pc, #400]	; (8001e94 <HAL_UART_MspInit+0x1c4>)
 8001d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d06:	f003 0310 	and.w	r3, r3, #16
 8001d0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d0e:	2300      	movs	r3, #0
 8001d10:	627b      	str	r3, [r7, #36]	; 0x24
 8001d12:	4b60      	ldr	r3, [pc, #384]	; (8001e94 <HAL_UART_MspInit+0x1c4>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d16:	4a5f      	ldr	r2, [pc, #380]	; (8001e94 <HAL_UART_MspInit+0x1c4>)
 8001d18:	f043 0302 	orr.w	r3, r3, #2
 8001d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d1e:	4b5d      	ldr	r3, [pc, #372]	; (8001e94 <HAL_UART_MspInit+0x1c4>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	f003 0302 	and.w	r3, r3, #2
 8001d26:	627b      	str	r3, [r7, #36]	; 0x24
 8001d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d2a:	23c0      	movs	r3, #192	; 0xc0
 8001d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d2e:	2302      	movs	r3, #2
 8001d30:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d32:	2300      	movs	r3, #0
 8001d34:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d36:	2303      	movs	r3, #3
 8001d38:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d3a:	2307      	movs	r3, #7
 8001d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d42:	4619      	mov	r1, r3
 8001d44:	4854      	ldr	r0, [pc, #336]	; (8001e98 <HAL_UART_MspInit+0x1c8>)
 8001d46:	f000 fe53 	bl	80029f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001d4a:	e09d      	b.n	8001e88 <HAL_UART_MspInit+0x1b8>
  else if(huart->Instance==USART2)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a52      	ldr	r2, [pc, #328]	; (8001e9c <HAL_UART_MspInit+0x1cc>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d12c      	bne.n	8001db0 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d56:	2300      	movs	r3, #0
 8001d58:	623b      	str	r3, [r7, #32]
 8001d5a:	4b4e      	ldr	r3, [pc, #312]	; (8001e94 <HAL_UART_MspInit+0x1c4>)
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5e:	4a4d      	ldr	r2, [pc, #308]	; (8001e94 <HAL_UART_MspInit+0x1c4>)
 8001d60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d64:	6413      	str	r3, [r2, #64]	; 0x40
 8001d66:	4b4b      	ldr	r3, [pc, #300]	; (8001e94 <HAL_UART_MspInit+0x1c4>)
 8001d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d6e:	623b      	str	r3, [r7, #32]
 8001d70:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	61fb      	str	r3, [r7, #28]
 8001d76:	4b47      	ldr	r3, [pc, #284]	; (8001e94 <HAL_UART_MspInit+0x1c4>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	4a46      	ldr	r2, [pc, #280]	; (8001e94 <HAL_UART_MspInit+0x1c4>)
 8001d7c:	f043 0308 	orr.w	r3, r3, #8
 8001d80:	6313      	str	r3, [r2, #48]	; 0x30
 8001d82:	4b44      	ldr	r3, [pc, #272]	; (8001e94 <HAL_UART_MspInit+0x1c4>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	f003 0308 	and.w	r3, r3, #8
 8001d8a:	61fb      	str	r3, [r7, #28]
 8001d8c:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001d8e:	2360      	movs	r3, #96	; 0x60
 8001d90:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d92:	2302      	movs	r3, #2
 8001d94:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d96:	2300      	movs	r3, #0
 8001d98:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d9e:	2307      	movs	r3, #7
 8001da0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001da2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001da6:	4619      	mov	r1, r3
 8001da8:	483d      	ldr	r0, [pc, #244]	; (8001ea0 <HAL_UART_MspInit+0x1d0>)
 8001daa:	f000 fe21 	bl	80029f0 <HAL_GPIO_Init>
}
 8001dae:	e06b      	b.n	8001e88 <HAL_UART_MspInit+0x1b8>
  else if(huart->Instance==USART3)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a3b      	ldr	r2, [pc, #236]	; (8001ea4 <HAL_UART_MspInit+0x1d4>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d135      	bne.n	8001e26 <HAL_UART_MspInit+0x156>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001dba:	2300      	movs	r3, #0
 8001dbc:	61bb      	str	r3, [r7, #24]
 8001dbe:	4b35      	ldr	r3, [pc, #212]	; (8001e94 <HAL_UART_MspInit+0x1c4>)
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc2:	4a34      	ldr	r2, [pc, #208]	; (8001e94 <HAL_UART_MspInit+0x1c4>)
 8001dc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dc8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dca:	4b32      	ldr	r3, [pc, #200]	; (8001e94 <HAL_UART_MspInit+0x1c4>)
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dd2:	61bb      	str	r3, [r7, #24]
 8001dd4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	617b      	str	r3, [r7, #20]
 8001dda:	4b2e      	ldr	r3, [pc, #184]	; (8001e94 <HAL_UART_MspInit+0x1c4>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dde:	4a2d      	ldr	r2, [pc, #180]	; (8001e94 <HAL_UART_MspInit+0x1c4>)
 8001de0:	f043 0308 	orr.w	r3, r3, #8
 8001de4:	6313      	str	r3, [r2, #48]	; 0x30
 8001de6:	4b2b      	ldr	r3, [pc, #172]	; (8001e94 <HAL_UART_MspInit+0x1c4>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dea:	f003 0308 	and.w	r3, r3, #8
 8001dee:	617b      	str	r3, [r7, #20]
 8001df0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001df2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001df6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df8:	2302      	movs	r3, #2
 8001dfa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e00:	2303      	movs	r3, #3
 8001e02:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001e04:	2307      	movs	r3, #7
 8001e06:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	4824      	ldr	r0, [pc, #144]	; (8001ea0 <HAL_UART_MspInit+0x1d0>)
 8001e10:	f000 fdee 	bl	80029f0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001e14:	2200      	movs	r2, #0
 8001e16:	2100      	movs	r1, #0
 8001e18:	2027      	movs	r0, #39	; 0x27
 8001e1a:	f000 fd9d 	bl	8002958 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001e1e:	2027      	movs	r0, #39	; 0x27
 8001e20:	f000 fdb6 	bl	8002990 <HAL_NVIC_EnableIRQ>
}
 8001e24:	e030      	b.n	8001e88 <HAL_UART_MspInit+0x1b8>
  else if(huart->Instance==USART6)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a1f      	ldr	r2, [pc, #124]	; (8001ea8 <HAL_UART_MspInit+0x1d8>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d12b      	bne.n	8001e88 <HAL_UART_MspInit+0x1b8>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001e30:	2300      	movs	r3, #0
 8001e32:	613b      	str	r3, [r7, #16]
 8001e34:	4b17      	ldr	r3, [pc, #92]	; (8001e94 <HAL_UART_MspInit+0x1c4>)
 8001e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e38:	4a16      	ldr	r2, [pc, #88]	; (8001e94 <HAL_UART_MspInit+0x1c4>)
 8001e3a:	f043 0320 	orr.w	r3, r3, #32
 8001e3e:	6453      	str	r3, [r2, #68]	; 0x44
 8001e40:	4b14      	ldr	r3, [pc, #80]	; (8001e94 <HAL_UART_MspInit+0x1c4>)
 8001e42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e44:	f003 0320 	and.w	r3, r3, #32
 8001e48:	613b      	str	r3, [r7, #16]
 8001e4a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	60fb      	str	r3, [r7, #12]
 8001e50:	4b10      	ldr	r3, [pc, #64]	; (8001e94 <HAL_UART_MspInit+0x1c4>)
 8001e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e54:	4a0f      	ldr	r2, [pc, #60]	; (8001e94 <HAL_UART_MspInit+0x1c4>)
 8001e56:	f043 0304 	orr.w	r3, r3, #4
 8001e5a:	6313      	str	r3, [r2, #48]	; 0x30
 8001e5c:	4b0d      	ldr	r3, [pc, #52]	; (8001e94 <HAL_UART_MspInit+0x1c4>)
 8001e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e60:	f003 0304 	and.w	r3, r3, #4
 8001e64:	60fb      	str	r3, [r7, #12]
 8001e66:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e68:	23c0      	movs	r3, #192	; 0xc0
 8001e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e70:	2300      	movs	r3, #0
 8001e72:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e74:	2303      	movs	r3, #3
 8001e76:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001e78:	2308      	movs	r3, #8
 8001e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e80:	4619      	mov	r1, r3
 8001e82:	480a      	ldr	r0, [pc, #40]	; (8001eac <HAL_UART_MspInit+0x1dc>)
 8001e84:	f000 fdb4 	bl	80029f0 <HAL_GPIO_Init>
}
 8001e88:	bf00      	nop
 8001e8a:	3740      	adds	r7, #64	; 0x40
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	40011000 	.word	0x40011000
 8001e94:	40023800 	.word	0x40023800
 8001e98:	40020400 	.word	0x40020400
 8001e9c:	40004400 	.word	0x40004400
 8001ea0:	40020c00 	.word	0x40020c00
 8001ea4:	40004800 	.word	0x40004800
 8001ea8:	40011400 	.word	0x40011400
 8001eac:	40020800 	.word	0x40020800

08001eb0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b08a      	sub	sp, #40	; 0x28
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb8:	f107 0314 	add.w	r3, r7, #20
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]
 8001ec0:	605a      	str	r2, [r3, #4]
 8001ec2:	609a      	str	r2, [r3, #8]
 8001ec4:	60da      	str	r2, [r3, #12]
 8001ec6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ed0:	d147      	bne.n	8001f62 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	613b      	str	r3, [r7, #16]
 8001ed6:	4b25      	ldr	r3, [pc, #148]	; (8001f6c <HAL_PCD_MspInit+0xbc>)
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eda:	4a24      	ldr	r2, [pc, #144]	; (8001f6c <HAL_PCD_MspInit+0xbc>)
 8001edc:	f043 0301 	orr.w	r3, r3, #1
 8001ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ee2:	4b22      	ldr	r3, [pc, #136]	; (8001f6c <HAL_PCD_MspInit+0xbc>)
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee6:	f003 0301 	and.w	r3, r3, #1
 8001eea:	613b      	str	r3, [r7, #16]
 8001eec:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001eee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ef2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001efc:	f107 0314 	add.w	r3, r7, #20
 8001f00:	4619      	mov	r1, r3
 8001f02:	481b      	ldr	r0, [pc, #108]	; (8001f70 <HAL_PCD_MspInit+0xc0>)
 8001f04:	f000 fd74 	bl	80029f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8001f08:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001f0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f0e:	2302      	movs	r3, #2
 8001f10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f12:	2300      	movs	r3, #0
 8001f14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f16:	2300      	movs	r3, #0
 8001f18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001f1a:	230a      	movs	r3, #10
 8001f1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f1e:	f107 0314 	add.w	r3, r7, #20
 8001f22:	4619      	mov	r1, r3
 8001f24:	4812      	ldr	r0, [pc, #72]	; (8001f70 <HAL_PCD_MspInit+0xc0>)
 8001f26:	f000 fd63 	bl	80029f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001f2a:	4b10      	ldr	r3, [pc, #64]	; (8001f6c <HAL_PCD_MspInit+0xbc>)
 8001f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f2e:	4a0f      	ldr	r2, [pc, #60]	; (8001f6c <HAL_PCD_MspInit+0xbc>)
 8001f30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f34:	6353      	str	r3, [r2, #52]	; 0x34
 8001f36:	2300      	movs	r3, #0
 8001f38:	60fb      	str	r3, [r7, #12]
 8001f3a:	4b0c      	ldr	r3, [pc, #48]	; (8001f6c <HAL_PCD_MspInit+0xbc>)
 8001f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3e:	4a0b      	ldr	r2, [pc, #44]	; (8001f6c <HAL_PCD_MspInit+0xbc>)
 8001f40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f44:	6453      	str	r3, [r2, #68]	; 0x44
 8001f46:	4b09      	ldr	r3, [pc, #36]	; (8001f6c <HAL_PCD_MspInit+0xbc>)
 8001f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f4e:	60fb      	str	r3, [r7, #12]
 8001f50:	68fb      	ldr	r3, [r7, #12]
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8001f52:	2200      	movs	r2, #0
 8001f54:	2100      	movs	r1, #0
 8001f56:	2043      	movs	r0, #67	; 0x43
 8001f58:	f000 fcfe 	bl	8002958 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8001f5c:	2043      	movs	r0, #67	; 0x43
 8001f5e:	f000 fd17 	bl	8002990 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001f62:	bf00      	nop
 8001f64:	3728      	adds	r7, #40	; 0x28
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	40023800 	.word	0x40023800
 8001f70:	40020000 	.word	0x40020000

08001f74 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b08c      	sub	sp, #48	; 0x30
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001f80:	2300      	movs	r3, #0
 8001f82:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001f84:	2200      	movs	r2, #0
 8001f86:	6879      	ldr	r1, [r7, #4]
 8001f88:	2036      	movs	r0, #54	; 0x36
 8001f8a:	f000 fce5 	bl	8002958 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001f8e:	2036      	movs	r0, #54	; 0x36
 8001f90:	f000 fcfe 	bl	8002990 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001f94:	2300      	movs	r3, #0
 8001f96:	60fb      	str	r3, [r7, #12]
 8001f98:	4b1e      	ldr	r3, [pc, #120]	; (8002014 <HAL_InitTick+0xa0>)
 8001f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9c:	4a1d      	ldr	r2, [pc, #116]	; (8002014 <HAL_InitTick+0xa0>)
 8001f9e:	f043 0310 	orr.w	r3, r3, #16
 8001fa2:	6413      	str	r3, [r2, #64]	; 0x40
 8001fa4:	4b1b      	ldr	r3, [pc, #108]	; (8002014 <HAL_InitTick+0xa0>)
 8001fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa8:	f003 0310 	and.w	r3, r3, #16
 8001fac:	60fb      	str	r3, [r7, #12]
 8001fae:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001fb0:	f107 0210 	add.w	r2, r7, #16
 8001fb4:	f107 0314 	add.w	r3, r7, #20
 8001fb8:	4611      	mov	r1, r2
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f002 fbb0 	bl	8004720 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001fc0:	f002 fb86 	bl	80046d0 <HAL_RCC_GetPCLK1Freq>
 8001fc4:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fc8:	4a13      	ldr	r2, [pc, #76]	; (8002018 <HAL_InitTick+0xa4>)
 8001fca:	fba2 2303 	umull	r2, r3, r2, r3
 8001fce:	0c9b      	lsrs	r3, r3, #18
 8001fd0:	3b01      	subs	r3, #1
 8001fd2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001fd4:	4b11      	ldr	r3, [pc, #68]	; (800201c <HAL_InitTick+0xa8>)
 8001fd6:	4a12      	ldr	r2, [pc, #72]	; (8002020 <HAL_InitTick+0xac>)
 8001fd8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8001fda:	4b10      	ldr	r3, [pc, #64]	; (800201c <HAL_InitTick+0xa8>)
 8001fdc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001fe0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001fe2:	4a0e      	ldr	r2, [pc, #56]	; (800201c <HAL_InitTick+0xa8>)
 8001fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fe6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001fe8:	4b0c      	ldr	r3, [pc, #48]	; (800201c <HAL_InitTick+0xa8>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fee:	4b0b      	ldr	r3, [pc, #44]	; (800201c <HAL_InitTick+0xa8>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001ff4:	4809      	ldr	r0, [pc, #36]	; (800201c <HAL_InitTick+0xa8>)
 8001ff6:	f002 fc29 	bl	800484c <HAL_TIM_Base_Init>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d104      	bne.n	800200a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002000:	4806      	ldr	r0, [pc, #24]	; (800201c <HAL_InitTick+0xa8>)
 8002002:	f002 fc4e 	bl	80048a2 <HAL_TIM_Base_Start_IT>
 8002006:	4603      	mov	r3, r0
 8002008:	e000      	b.n	800200c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
}
 800200c:	4618      	mov	r0, r3
 800200e:	3730      	adds	r7, #48	; 0x30
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	40023800 	.word	0x40023800
 8002018:	431bde83 	.word	0x431bde83
 800201c:	20006380 	.word	0x20006380
 8002020:	40001000 	.word	0x40001000

08002024 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002028:	bf00      	nop
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr

08002032 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002032:	b480      	push	{r7}
 8002034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002036:	e7fe      	b.n	8002036 <HardFault_Handler+0x4>

08002038 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800203c:	e7fe      	b.n	800203c <MemManage_Handler+0x4>

0800203e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800203e:	b480      	push	{r7}
 8002040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002042:	e7fe      	b.n	8002042 <BusFault_Handler+0x4>

08002044 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002048:	e7fe      	b.n	8002048 <UsageFault_Handler+0x4>

0800204a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800204a:	b480      	push	{r7}
 800204c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800204e:	bf00      	nop
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800205c:	4802      	ldr	r0, [pc, #8]	; (8002068 <USART3_IRQHandler+0x10>)
 800205e:	f003 fc8f 	bl	8005980 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002062:	bf00      	nop
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	200051e8 	.word	0x200051e8

0800206c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002070:	4802      	ldr	r0, [pc, #8]	; (800207c <TIM6_DAC_IRQHandler+0x10>)
 8002072:	f002 fcfb 	bl	8004a6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002076:	bf00      	nop
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	20006380 	.word	0x20006380

08002080 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002084:	4802      	ldr	r0, [pc, #8]	; (8002090 <OTG_FS_IRQHandler+0x10>)
 8002086:	f001 f8d6 	bl	8003236 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800208a:	bf00      	nop
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	20005294 	.word	0x20005294

08002094 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b086      	sub	sp, #24
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	60b9      	str	r1, [r7, #8]
 800209e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020a0:	2300      	movs	r3, #0
 80020a2:	617b      	str	r3, [r7, #20]
 80020a4:	e00a      	b.n	80020bc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80020a6:	f3af 8000 	nop.w
 80020aa:	4601      	mov	r1, r0
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	1c5a      	adds	r2, r3, #1
 80020b0:	60ba      	str	r2, [r7, #8]
 80020b2:	b2ca      	uxtb	r2, r1
 80020b4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	3301      	adds	r3, #1
 80020ba:	617b      	str	r3, [r7, #20]
 80020bc:	697a      	ldr	r2, [r7, #20]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	dbf0      	blt.n	80020a6 <_read+0x12>
	}

return len;
 80020c4:	687b      	ldr	r3, [r7, #4]
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3718      	adds	r7, #24
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}

080020ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b086      	sub	sp, #24
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	60f8      	str	r0, [r7, #12]
 80020d6:	60b9      	str	r1, [r7, #8]
 80020d8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020da:	2300      	movs	r3, #0
 80020dc:	617b      	str	r3, [r7, #20]
 80020de:	e009      	b.n	80020f4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	1c5a      	adds	r2, r3, #1
 80020e4:	60ba      	str	r2, [r7, #8]
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	4618      	mov	r0, r3
 80020ea:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	3301      	adds	r3, #1
 80020f2:	617b      	str	r3, [r7, #20]
 80020f4:	697a      	ldr	r2, [r7, #20]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	dbf1      	blt.n	80020e0 <_write+0x12>
	}
	return len;
 80020fc:	687b      	ldr	r3, [r7, #4]
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3718      	adds	r7, #24
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <_close>:

int _close(int file)
{
 8002106:	b480      	push	{r7}
 8002108:	b083      	sub	sp, #12
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
	return -1;
 800210e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002112:	4618      	mov	r0, r3
 8002114:	370c      	adds	r7, #12
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr

0800211e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800211e:	b480      	push	{r7}
 8002120:	b083      	sub	sp, #12
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
 8002126:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800212e:	605a      	str	r2, [r3, #4]
	return 0;
 8002130:	2300      	movs	r3, #0
}
 8002132:	4618      	mov	r0, r3
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr

0800213e <_isatty>:

int _isatty(int file)
{
 800213e:	b480      	push	{r7}
 8002140:	b083      	sub	sp, #12
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
	return 1;
 8002146:	2301      	movs	r3, #1
}
 8002148:	4618      	mov	r0, r3
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002154:	b480      	push	{r7}
 8002156:	b085      	sub	sp, #20
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	607a      	str	r2, [r7, #4]
	return 0;
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	3714      	adds	r7, #20
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
	...

08002170 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b086      	sub	sp, #24
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002178:	4a14      	ldr	r2, [pc, #80]	; (80021cc <_sbrk+0x5c>)
 800217a:	4b15      	ldr	r3, [pc, #84]	; (80021d0 <_sbrk+0x60>)
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002184:	4b13      	ldr	r3, [pc, #76]	; (80021d4 <_sbrk+0x64>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d102      	bne.n	8002192 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800218c:	4b11      	ldr	r3, [pc, #68]	; (80021d4 <_sbrk+0x64>)
 800218e:	4a12      	ldr	r2, [pc, #72]	; (80021d8 <_sbrk+0x68>)
 8002190:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002192:	4b10      	ldr	r3, [pc, #64]	; (80021d4 <_sbrk+0x64>)
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4413      	add	r3, r2
 800219a:	693a      	ldr	r2, [r7, #16]
 800219c:	429a      	cmp	r2, r3
 800219e:	d207      	bcs.n	80021b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021a0:	f007 fc38 	bl	8009a14 <__errno>
 80021a4:	4602      	mov	r2, r0
 80021a6:	230c      	movs	r3, #12
 80021a8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80021aa:	f04f 33ff 	mov.w	r3, #4294967295
 80021ae:	e009      	b.n	80021c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021b0:	4b08      	ldr	r3, [pc, #32]	; (80021d4 <_sbrk+0x64>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021b6:	4b07      	ldr	r3, [pc, #28]	; (80021d4 <_sbrk+0x64>)
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4413      	add	r3, r2
 80021be:	4a05      	ldr	r2, [pc, #20]	; (80021d4 <_sbrk+0x64>)
 80021c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021c2:	68fb      	ldr	r3, [r7, #12]
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3718      	adds	r7, #24
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	20020000 	.word	0x20020000
 80021d0:	00000400 	.word	0x00000400
 80021d4:	20000208 	.word	0x20000208
 80021d8:	20006408 	.word	0x20006408

080021dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021e0:	4b08      	ldr	r3, [pc, #32]	; (8002204 <SystemInit+0x28>)
 80021e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021e6:	4a07      	ldr	r2, [pc, #28]	; (8002204 <SystemInit+0x28>)
 80021e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80021f0:	4b04      	ldr	r3, [pc, #16]	; (8002204 <SystemInit+0x28>)
 80021f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80021f6:	609a      	str	r2, [r3, #8]
#endif
}
 80021f8:	bf00      	nop
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	e000ed00 	.word	0xe000ed00

08002208 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002208:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002240 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800220c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800220e:	e003      	b.n	8002218 <LoopCopyDataInit>

08002210 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002210:	4b0c      	ldr	r3, [pc, #48]	; (8002244 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002212:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002214:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002216:	3104      	adds	r1, #4

08002218 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002218:	480b      	ldr	r0, [pc, #44]	; (8002248 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800221a:	4b0c      	ldr	r3, [pc, #48]	; (800224c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800221c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800221e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002220:	d3f6      	bcc.n	8002210 <CopyDataInit>
  ldr  r2, =_sbss
 8002222:	4a0b      	ldr	r2, [pc, #44]	; (8002250 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002224:	e002      	b.n	800222c <LoopFillZerobss>

08002226 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002226:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002228:	f842 3b04 	str.w	r3, [r2], #4

0800222c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800222c:	4b09      	ldr	r3, [pc, #36]	; (8002254 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800222e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002230:	d3f9      	bcc.n	8002226 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002232:	f7ff ffd3 	bl	80021dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002236:	f007 fbf3 	bl	8009a20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800223a:	f7fe fd59 	bl	8000cf0 <main>
  bx  lr    
 800223e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002240:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002244:	0800adb8 	.word	0x0800adb8
  ldr  r0, =_sdata
 8002248:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800224c:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8002250:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 8002254:	20006408 	.word	0x20006408

08002258 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002258:	e7fe      	b.n	8002258 <ADC_IRQHandler>
	...

0800225c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002260:	4b0e      	ldr	r3, [pc, #56]	; (800229c <HAL_Init+0x40>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a0d      	ldr	r2, [pc, #52]	; (800229c <HAL_Init+0x40>)
 8002266:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800226a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800226c:	4b0b      	ldr	r3, [pc, #44]	; (800229c <HAL_Init+0x40>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a0a      	ldr	r2, [pc, #40]	; (800229c <HAL_Init+0x40>)
 8002272:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002276:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002278:	4b08      	ldr	r3, [pc, #32]	; (800229c <HAL_Init+0x40>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a07      	ldr	r2, [pc, #28]	; (800229c <HAL_Init+0x40>)
 800227e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002282:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002284:	2003      	movs	r0, #3
 8002286:	f000 fb5c 	bl	8002942 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800228a:	2000      	movs	r0, #0
 800228c:	f7ff fe72 	bl	8001f74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002290:	f7ff fafe 	bl	8001890 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	40023c00 	.word	0x40023c00

080022a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022a4:	4b06      	ldr	r3, [pc, #24]	; (80022c0 <HAL_IncTick+0x20>)
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	461a      	mov	r2, r3
 80022aa:	4b06      	ldr	r3, [pc, #24]	; (80022c4 <HAL_IncTick+0x24>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4413      	add	r3, r2
 80022b0:	4a04      	ldr	r2, [pc, #16]	; (80022c4 <HAL_IncTick+0x24>)
 80022b2:	6013      	str	r3, [r2, #0]
}
 80022b4:	bf00      	nop
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	2000000c 	.word	0x2000000c
 80022c4:	200063c0 	.word	0x200063c0

080022c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
  return uwTick;
 80022cc:	4b03      	ldr	r3, [pc, #12]	; (80022dc <HAL_GetTick+0x14>)
 80022ce:	681b      	ldr	r3, [r3, #0]
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	200063c0 	.word	0x200063c0

080022e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022e8:	f7ff ffee 	bl	80022c8 <HAL_GetTick>
 80022ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022f8:	d005      	beq.n	8002306 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022fa:	4b09      	ldr	r3, [pc, #36]	; (8002320 <HAL_Delay+0x40>)
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	461a      	mov	r2, r3
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	4413      	add	r3, r2
 8002304:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002306:	bf00      	nop
 8002308:	f7ff ffde 	bl	80022c8 <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	68fa      	ldr	r2, [r7, #12]
 8002314:	429a      	cmp	r2, r3
 8002316:	d8f7      	bhi.n	8002308 <HAL_Delay+0x28>
  {
  }
}
 8002318:	bf00      	nop
 800231a:	3710      	adds	r7, #16
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	2000000c 	.word	0x2000000c

08002324 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800232c:	2300      	movs	r3, #0
 800232e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d101      	bne.n	800233a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e033      	b.n	80023a2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233e:	2b00      	cmp	r3, #0
 8002340:	d109      	bne.n	8002356 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f7ff facc 	bl	80018e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2200      	movs	r2, #0
 800234c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235a:	f003 0310 	and.w	r3, r3, #16
 800235e:	2b00      	cmp	r3, #0
 8002360:	d118      	bne.n	8002394 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002366:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800236a:	f023 0302 	bic.w	r3, r3, #2
 800236e:	f043 0202 	orr.w	r2, r3, #2
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f000 f93a 	bl	80025f0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002386:	f023 0303 	bic.w	r3, r3, #3
 800238a:	f043 0201 	orr.w	r2, r3, #1
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	641a      	str	r2, [r3, #64]	; 0x40
 8002392:	e001      	b.n	8002398 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80023a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3710      	adds	r7, #16
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
	...

080023ac <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b085      	sub	sp, #20
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80023b6:	2300      	movs	r3, #0
 80023b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d101      	bne.n	80023c8 <HAL_ADC_ConfigChannel+0x1c>
 80023c4:	2302      	movs	r3, #2
 80023c6:	e105      	b.n	80025d4 <HAL_ADC_ConfigChannel+0x228>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2201      	movs	r2, #1
 80023cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2b09      	cmp	r3, #9
 80023d6:	d925      	bls.n	8002424 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	68d9      	ldr	r1, [r3, #12]
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	461a      	mov	r2, r3
 80023e6:	4613      	mov	r3, r2
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	4413      	add	r3, r2
 80023ec:	3b1e      	subs	r3, #30
 80023ee:	2207      	movs	r2, #7
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	43da      	mvns	r2, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	400a      	ands	r2, r1
 80023fc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	68d9      	ldr	r1, [r3, #12]
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	689a      	ldr	r2, [r3, #8]
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	b29b      	uxth	r3, r3
 800240e:	4618      	mov	r0, r3
 8002410:	4603      	mov	r3, r0
 8002412:	005b      	lsls	r3, r3, #1
 8002414:	4403      	add	r3, r0
 8002416:	3b1e      	subs	r3, #30
 8002418:	409a      	lsls	r2, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	430a      	orrs	r2, r1
 8002420:	60da      	str	r2, [r3, #12]
 8002422:	e022      	b.n	800246a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	6919      	ldr	r1, [r3, #16]
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	b29b      	uxth	r3, r3
 8002430:	461a      	mov	r2, r3
 8002432:	4613      	mov	r3, r2
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	4413      	add	r3, r2
 8002438:	2207      	movs	r2, #7
 800243a:	fa02 f303 	lsl.w	r3, r2, r3
 800243e:	43da      	mvns	r2, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	400a      	ands	r2, r1
 8002446:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	6919      	ldr	r1, [r3, #16]
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	689a      	ldr	r2, [r3, #8]
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	b29b      	uxth	r3, r3
 8002458:	4618      	mov	r0, r3
 800245a:	4603      	mov	r3, r0
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	4403      	add	r3, r0
 8002460:	409a      	lsls	r2, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	430a      	orrs	r2, r1
 8002468:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	2b06      	cmp	r3, #6
 8002470:	d824      	bhi.n	80024bc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685a      	ldr	r2, [r3, #4]
 800247c:	4613      	mov	r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	4413      	add	r3, r2
 8002482:	3b05      	subs	r3, #5
 8002484:	221f      	movs	r2, #31
 8002486:	fa02 f303 	lsl.w	r3, r2, r3
 800248a:	43da      	mvns	r2, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	400a      	ands	r2, r1
 8002492:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	b29b      	uxth	r3, r3
 80024a0:	4618      	mov	r0, r3
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685a      	ldr	r2, [r3, #4]
 80024a6:	4613      	mov	r3, r2
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	4413      	add	r3, r2
 80024ac:	3b05      	subs	r3, #5
 80024ae:	fa00 f203 	lsl.w	r2, r0, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	430a      	orrs	r2, r1
 80024b8:	635a      	str	r2, [r3, #52]	; 0x34
 80024ba:	e04c      	b.n	8002556 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	2b0c      	cmp	r3, #12
 80024c2:	d824      	bhi.n	800250e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685a      	ldr	r2, [r3, #4]
 80024ce:	4613      	mov	r3, r2
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	4413      	add	r3, r2
 80024d4:	3b23      	subs	r3, #35	; 0x23
 80024d6:	221f      	movs	r2, #31
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	43da      	mvns	r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	400a      	ands	r2, r1
 80024e4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	4618      	mov	r0, r3
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685a      	ldr	r2, [r3, #4]
 80024f8:	4613      	mov	r3, r2
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	4413      	add	r3, r2
 80024fe:	3b23      	subs	r3, #35	; 0x23
 8002500:	fa00 f203 	lsl.w	r2, r0, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	430a      	orrs	r2, r1
 800250a:	631a      	str	r2, [r3, #48]	; 0x30
 800250c:	e023      	b.n	8002556 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685a      	ldr	r2, [r3, #4]
 8002518:	4613      	mov	r3, r2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	4413      	add	r3, r2
 800251e:	3b41      	subs	r3, #65	; 0x41
 8002520:	221f      	movs	r2, #31
 8002522:	fa02 f303 	lsl.w	r3, r2, r3
 8002526:	43da      	mvns	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	400a      	ands	r2, r1
 800252e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	b29b      	uxth	r3, r3
 800253c:	4618      	mov	r0, r3
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	685a      	ldr	r2, [r3, #4]
 8002542:	4613      	mov	r3, r2
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	4413      	add	r3, r2
 8002548:	3b41      	subs	r3, #65	; 0x41
 800254a:	fa00 f203 	lsl.w	r2, r0, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	430a      	orrs	r2, r1
 8002554:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002556:	4b22      	ldr	r3, [pc, #136]	; (80025e0 <HAL_ADC_ConfigChannel+0x234>)
 8002558:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a21      	ldr	r2, [pc, #132]	; (80025e4 <HAL_ADC_ConfigChannel+0x238>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d109      	bne.n	8002578 <HAL_ADC_ConfigChannel+0x1cc>
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2b12      	cmp	r3, #18
 800256a:	d105      	bne.n	8002578 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a19      	ldr	r2, [pc, #100]	; (80025e4 <HAL_ADC_ConfigChannel+0x238>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d123      	bne.n	80025ca <HAL_ADC_ConfigChannel+0x21e>
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2b10      	cmp	r3, #16
 8002588:	d003      	beq.n	8002592 <HAL_ADC_ConfigChannel+0x1e6>
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2b11      	cmp	r3, #17
 8002590:	d11b      	bne.n	80025ca <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2b10      	cmp	r3, #16
 80025a4:	d111      	bne.n	80025ca <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80025a6:	4b10      	ldr	r3, [pc, #64]	; (80025e8 <HAL_ADC_ConfigChannel+0x23c>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a10      	ldr	r2, [pc, #64]	; (80025ec <HAL_ADC_ConfigChannel+0x240>)
 80025ac:	fba2 2303 	umull	r2, r3, r2, r3
 80025b0:	0c9a      	lsrs	r2, r3, #18
 80025b2:	4613      	mov	r3, r2
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	4413      	add	r3, r2
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80025bc:	e002      	b.n	80025c4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	3b01      	subs	r3, #1
 80025c2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d1f9      	bne.n	80025be <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80025d2:	2300      	movs	r3, #0
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3714      	adds	r7, #20
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr
 80025e0:	40012300 	.word	0x40012300
 80025e4:	40012000 	.word	0x40012000
 80025e8:	20000004 	.word	0x20000004
 80025ec:	431bde83 	.word	0x431bde83

080025f0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b085      	sub	sp, #20
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025f8:	4b79      	ldr	r3, [pc, #484]	; (80027e0 <ADC_Init+0x1f0>)
 80025fa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	685a      	ldr	r2, [r3, #4]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	431a      	orrs	r2, r3
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	685a      	ldr	r2, [r3, #4]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002624:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	6859      	ldr	r1, [r3, #4]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	691b      	ldr	r3, [r3, #16]
 8002630:	021a      	lsls	r2, r3, #8
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	430a      	orrs	r2, r1
 8002638:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	685a      	ldr	r2, [r3, #4]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002648:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	6859      	ldr	r1, [r3, #4]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	689a      	ldr	r2, [r3, #8]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	430a      	orrs	r2, r1
 800265a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	689a      	ldr	r2, [r3, #8]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800266a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	6899      	ldr	r1, [r3, #8]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	68da      	ldr	r2, [r3, #12]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	430a      	orrs	r2, r1
 800267c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002682:	4a58      	ldr	r2, [pc, #352]	; (80027e4 <ADC_Init+0x1f4>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d022      	beq.n	80026ce <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	689a      	ldr	r2, [r3, #8]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002696:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	6899      	ldr	r1, [r3, #8]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	430a      	orrs	r2, r1
 80026a8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	689a      	ldr	r2, [r3, #8]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80026b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	6899      	ldr	r1, [r3, #8]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	430a      	orrs	r2, r1
 80026ca:	609a      	str	r2, [r3, #8]
 80026cc:	e00f      	b.n	80026ee <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	689a      	ldr	r2, [r3, #8]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80026dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	689a      	ldr	r2, [r3, #8]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80026ec:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	689a      	ldr	r2, [r3, #8]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f022 0202 	bic.w	r2, r2, #2
 80026fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	6899      	ldr	r1, [r3, #8]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	7e1b      	ldrb	r3, [r3, #24]
 8002708:	005a      	lsls	r2, r3, #1
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	430a      	orrs	r2, r1
 8002710:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d01b      	beq.n	8002754 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	685a      	ldr	r2, [r3, #4]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800272a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	685a      	ldr	r2, [r3, #4]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800273a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	6859      	ldr	r1, [r3, #4]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002746:	3b01      	subs	r3, #1
 8002748:	035a      	lsls	r2, r3, #13
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	430a      	orrs	r2, r1
 8002750:	605a      	str	r2, [r3, #4]
 8002752:	e007      	b.n	8002764 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	685a      	ldr	r2, [r3, #4]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002762:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002772:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	69db      	ldr	r3, [r3, #28]
 800277e:	3b01      	subs	r3, #1
 8002780:	051a      	lsls	r2, r3, #20
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	430a      	orrs	r2, r1
 8002788:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	689a      	ldr	r2, [r3, #8]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002798:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	6899      	ldr	r1, [r3, #8]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80027a6:	025a      	lsls	r2, r3, #9
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	430a      	orrs	r2, r1
 80027ae:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	689a      	ldr	r2, [r3, #8]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	6899      	ldr	r1, [r3, #8]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	695b      	ldr	r3, [r3, #20]
 80027ca:	029a      	lsls	r2, r3, #10
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	430a      	orrs	r2, r1
 80027d2:	609a      	str	r2, [r3, #8]
}
 80027d4:	bf00      	nop
 80027d6:	3714      	adds	r7, #20
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr
 80027e0:	40012300 	.word	0x40012300
 80027e4:	0f000001 	.word	0x0f000001

080027e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b085      	sub	sp, #20
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f003 0307 	and.w	r3, r3, #7
 80027f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027f8:	4b0c      	ldr	r3, [pc, #48]	; (800282c <__NVIC_SetPriorityGrouping+0x44>)
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027fe:	68ba      	ldr	r2, [r7, #8]
 8002800:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002804:	4013      	ands	r3, r2
 8002806:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002810:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002814:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002818:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800281a:	4a04      	ldr	r2, [pc, #16]	; (800282c <__NVIC_SetPriorityGrouping+0x44>)
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	60d3      	str	r3, [r2, #12]
}
 8002820:	bf00      	nop
 8002822:	3714      	adds	r7, #20
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr
 800282c:	e000ed00 	.word	0xe000ed00

08002830 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002834:	4b04      	ldr	r3, [pc, #16]	; (8002848 <__NVIC_GetPriorityGrouping+0x18>)
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	0a1b      	lsrs	r3, r3, #8
 800283a:	f003 0307 	and.w	r3, r3, #7
}
 800283e:	4618      	mov	r0, r3
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr
 8002848:	e000ed00 	.word	0xe000ed00

0800284c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	4603      	mov	r3, r0
 8002854:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800285a:	2b00      	cmp	r3, #0
 800285c:	db0b      	blt.n	8002876 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800285e:	79fb      	ldrb	r3, [r7, #7]
 8002860:	f003 021f 	and.w	r2, r3, #31
 8002864:	4907      	ldr	r1, [pc, #28]	; (8002884 <__NVIC_EnableIRQ+0x38>)
 8002866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800286a:	095b      	lsrs	r3, r3, #5
 800286c:	2001      	movs	r0, #1
 800286e:	fa00 f202 	lsl.w	r2, r0, r2
 8002872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002876:	bf00      	nop
 8002878:	370c      	adds	r7, #12
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	e000e100 	.word	0xe000e100

08002888 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	4603      	mov	r3, r0
 8002890:	6039      	str	r1, [r7, #0]
 8002892:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002894:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002898:	2b00      	cmp	r3, #0
 800289a:	db0a      	blt.n	80028b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	b2da      	uxtb	r2, r3
 80028a0:	490c      	ldr	r1, [pc, #48]	; (80028d4 <__NVIC_SetPriority+0x4c>)
 80028a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a6:	0112      	lsls	r2, r2, #4
 80028a8:	b2d2      	uxtb	r2, r2
 80028aa:	440b      	add	r3, r1
 80028ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028b0:	e00a      	b.n	80028c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	b2da      	uxtb	r2, r3
 80028b6:	4908      	ldr	r1, [pc, #32]	; (80028d8 <__NVIC_SetPriority+0x50>)
 80028b8:	79fb      	ldrb	r3, [r7, #7]
 80028ba:	f003 030f 	and.w	r3, r3, #15
 80028be:	3b04      	subs	r3, #4
 80028c0:	0112      	lsls	r2, r2, #4
 80028c2:	b2d2      	uxtb	r2, r2
 80028c4:	440b      	add	r3, r1
 80028c6:	761a      	strb	r2, [r3, #24]
}
 80028c8:	bf00      	nop
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr
 80028d4:	e000e100 	.word	0xe000e100
 80028d8:	e000ed00 	.word	0xe000ed00

080028dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028dc:	b480      	push	{r7}
 80028de:	b089      	sub	sp, #36	; 0x24
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f003 0307 	and.w	r3, r3, #7
 80028ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	f1c3 0307 	rsb	r3, r3, #7
 80028f6:	2b04      	cmp	r3, #4
 80028f8:	bf28      	it	cs
 80028fa:	2304      	movcs	r3, #4
 80028fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	3304      	adds	r3, #4
 8002902:	2b06      	cmp	r3, #6
 8002904:	d902      	bls.n	800290c <NVIC_EncodePriority+0x30>
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	3b03      	subs	r3, #3
 800290a:	e000      	b.n	800290e <NVIC_EncodePriority+0x32>
 800290c:	2300      	movs	r3, #0
 800290e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002910:	f04f 32ff 	mov.w	r2, #4294967295
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	fa02 f303 	lsl.w	r3, r2, r3
 800291a:	43da      	mvns	r2, r3
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	401a      	ands	r2, r3
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002924:	f04f 31ff 	mov.w	r1, #4294967295
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	fa01 f303 	lsl.w	r3, r1, r3
 800292e:	43d9      	mvns	r1, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002934:	4313      	orrs	r3, r2
         );
}
 8002936:	4618      	mov	r0, r3
 8002938:	3724      	adds	r7, #36	; 0x24
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr

08002942 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002942:	b580      	push	{r7, lr}
 8002944:	b082      	sub	sp, #8
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f7ff ff4c 	bl	80027e8 <__NVIC_SetPriorityGrouping>
}
 8002950:	bf00      	nop
 8002952:	3708      	adds	r7, #8
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}

08002958 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002958:	b580      	push	{r7, lr}
 800295a:	b086      	sub	sp, #24
 800295c:	af00      	add	r7, sp, #0
 800295e:	4603      	mov	r3, r0
 8002960:	60b9      	str	r1, [r7, #8]
 8002962:	607a      	str	r2, [r7, #4]
 8002964:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002966:	2300      	movs	r3, #0
 8002968:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800296a:	f7ff ff61 	bl	8002830 <__NVIC_GetPriorityGrouping>
 800296e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	68b9      	ldr	r1, [r7, #8]
 8002974:	6978      	ldr	r0, [r7, #20]
 8002976:	f7ff ffb1 	bl	80028dc <NVIC_EncodePriority>
 800297a:	4602      	mov	r2, r0
 800297c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002980:	4611      	mov	r1, r2
 8002982:	4618      	mov	r0, r3
 8002984:	f7ff ff80 	bl	8002888 <__NVIC_SetPriority>
}
 8002988:	bf00      	nop
 800298a:	3718      	adds	r7, #24
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	4603      	mov	r3, r0
 8002998:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800299a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800299e:	4618      	mov	r0, r3
 80029a0:	f7ff ff54 	bl	800284c <__NVIC_EnableIRQ>
}
 80029a4:	bf00      	nop
 80029a6:	3708      	adds	r7, #8
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}

080029ac <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d004      	beq.n	80029ca <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2280      	movs	r2, #128	; 0x80
 80029c4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e00c      	b.n	80029e4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2205      	movs	r2, #5
 80029ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f022 0201 	bic.w	r2, r2, #1
 80029e0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80029e2:	2300      	movs	r3, #0
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr

080029f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b089      	sub	sp, #36	; 0x24
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029fa:	2300      	movs	r3, #0
 80029fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029fe:	2300      	movs	r3, #0
 8002a00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a02:	2300      	movs	r3, #0
 8002a04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a06:	2300      	movs	r3, #0
 8002a08:	61fb      	str	r3, [r7, #28]
 8002a0a:	e16b      	b.n	8002ce4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	fa02 f303 	lsl.w	r3, r2, r3
 8002a14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	697a      	ldr	r2, [r7, #20]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a20:	693a      	ldr	r2, [r7, #16]
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	f040 815a 	bne.w	8002cde <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d00b      	beq.n	8002a4a <HAL_GPIO_Init+0x5a>
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d007      	beq.n	8002a4a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a3e:	2b11      	cmp	r3, #17
 8002a40:	d003      	beq.n	8002a4a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	2b12      	cmp	r3, #18
 8002a48:	d130      	bne.n	8002aac <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	005b      	lsls	r3, r3, #1
 8002a54:	2203      	movs	r2, #3
 8002a56:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5a:	43db      	mvns	r3, r3
 8002a5c:	69ba      	ldr	r2, [r7, #24]
 8002a5e:	4013      	ands	r3, r2
 8002a60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	68da      	ldr	r2, [r3, #12]
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	005b      	lsls	r3, r3, #1
 8002a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6e:	69ba      	ldr	r2, [r7, #24]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	69ba      	ldr	r2, [r7, #24]
 8002a78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a80:	2201      	movs	r2, #1
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	fa02 f303 	lsl.w	r3, r2, r3
 8002a88:	43db      	mvns	r3, r3
 8002a8a:	69ba      	ldr	r2, [r7, #24]
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	091b      	lsrs	r3, r3, #4
 8002a96:	f003 0201 	and.w	r2, r3, #1
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	005b      	lsls	r3, r3, #1
 8002ab6:	2203      	movs	r2, #3
 8002ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8002abc:	43db      	mvns	r3, r3
 8002abe:	69ba      	ldr	r2, [r7, #24]
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	689a      	ldr	r2, [r3, #8]
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	005b      	lsls	r3, r3, #1
 8002acc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	d003      	beq.n	8002aec <HAL_GPIO_Init+0xfc>
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	2b12      	cmp	r3, #18
 8002aea:	d123      	bne.n	8002b34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	08da      	lsrs	r2, r3, #3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	3208      	adds	r2, #8
 8002af4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002af8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	f003 0307 	and.w	r3, r3, #7
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	220f      	movs	r2, #15
 8002b04:	fa02 f303 	lsl.w	r3, r2, r3
 8002b08:	43db      	mvns	r3, r3
 8002b0a:	69ba      	ldr	r2, [r7, #24]
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	691a      	ldr	r2, [r3, #16]
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	f003 0307 	and.w	r3, r3, #7
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	08da      	lsrs	r2, r3, #3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	3208      	adds	r2, #8
 8002b2e:	69b9      	ldr	r1, [r7, #24]
 8002b30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	005b      	lsls	r3, r3, #1
 8002b3e:	2203      	movs	r2, #3
 8002b40:	fa02 f303 	lsl.w	r3, r2, r3
 8002b44:	43db      	mvns	r3, r3
 8002b46:	69ba      	ldr	r2, [r7, #24]
 8002b48:	4013      	ands	r3, r2
 8002b4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f003 0203 	and.w	r2, r3, #3
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	f000 80b4 	beq.w	8002cde <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b76:	2300      	movs	r3, #0
 8002b78:	60fb      	str	r3, [r7, #12]
 8002b7a:	4b5f      	ldr	r3, [pc, #380]	; (8002cf8 <HAL_GPIO_Init+0x308>)
 8002b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b7e:	4a5e      	ldr	r2, [pc, #376]	; (8002cf8 <HAL_GPIO_Init+0x308>)
 8002b80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b84:	6453      	str	r3, [r2, #68]	; 0x44
 8002b86:	4b5c      	ldr	r3, [pc, #368]	; (8002cf8 <HAL_GPIO_Init+0x308>)
 8002b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b8e:	60fb      	str	r3, [r7, #12]
 8002b90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b92:	4a5a      	ldr	r2, [pc, #360]	; (8002cfc <HAL_GPIO_Init+0x30c>)
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	089b      	lsrs	r3, r3, #2
 8002b98:	3302      	adds	r3, #2
 8002b9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	f003 0303 	and.w	r3, r3, #3
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	220f      	movs	r2, #15
 8002baa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bae:	43db      	mvns	r3, r3
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a51      	ldr	r2, [pc, #324]	; (8002d00 <HAL_GPIO_Init+0x310>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d02b      	beq.n	8002c16 <HAL_GPIO_Init+0x226>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a50      	ldr	r2, [pc, #320]	; (8002d04 <HAL_GPIO_Init+0x314>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d025      	beq.n	8002c12 <HAL_GPIO_Init+0x222>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a4f      	ldr	r2, [pc, #316]	; (8002d08 <HAL_GPIO_Init+0x318>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d01f      	beq.n	8002c0e <HAL_GPIO_Init+0x21e>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a4e      	ldr	r2, [pc, #312]	; (8002d0c <HAL_GPIO_Init+0x31c>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d019      	beq.n	8002c0a <HAL_GPIO_Init+0x21a>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a4d      	ldr	r2, [pc, #308]	; (8002d10 <HAL_GPIO_Init+0x320>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d013      	beq.n	8002c06 <HAL_GPIO_Init+0x216>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a4c      	ldr	r2, [pc, #304]	; (8002d14 <HAL_GPIO_Init+0x324>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d00d      	beq.n	8002c02 <HAL_GPIO_Init+0x212>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a4b      	ldr	r2, [pc, #300]	; (8002d18 <HAL_GPIO_Init+0x328>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d007      	beq.n	8002bfe <HAL_GPIO_Init+0x20e>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a4a      	ldr	r2, [pc, #296]	; (8002d1c <HAL_GPIO_Init+0x32c>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d101      	bne.n	8002bfa <HAL_GPIO_Init+0x20a>
 8002bf6:	2307      	movs	r3, #7
 8002bf8:	e00e      	b.n	8002c18 <HAL_GPIO_Init+0x228>
 8002bfa:	2308      	movs	r3, #8
 8002bfc:	e00c      	b.n	8002c18 <HAL_GPIO_Init+0x228>
 8002bfe:	2306      	movs	r3, #6
 8002c00:	e00a      	b.n	8002c18 <HAL_GPIO_Init+0x228>
 8002c02:	2305      	movs	r3, #5
 8002c04:	e008      	b.n	8002c18 <HAL_GPIO_Init+0x228>
 8002c06:	2304      	movs	r3, #4
 8002c08:	e006      	b.n	8002c18 <HAL_GPIO_Init+0x228>
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e004      	b.n	8002c18 <HAL_GPIO_Init+0x228>
 8002c0e:	2302      	movs	r3, #2
 8002c10:	e002      	b.n	8002c18 <HAL_GPIO_Init+0x228>
 8002c12:	2301      	movs	r3, #1
 8002c14:	e000      	b.n	8002c18 <HAL_GPIO_Init+0x228>
 8002c16:	2300      	movs	r3, #0
 8002c18:	69fa      	ldr	r2, [r7, #28]
 8002c1a:	f002 0203 	and.w	r2, r2, #3
 8002c1e:	0092      	lsls	r2, r2, #2
 8002c20:	4093      	lsls	r3, r2
 8002c22:	69ba      	ldr	r2, [r7, #24]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c28:	4934      	ldr	r1, [pc, #208]	; (8002cfc <HAL_GPIO_Init+0x30c>)
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	089b      	lsrs	r3, r3, #2
 8002c2e:	3302      	adds	r3, #2
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c36:	4b3a      	ldr	r3, [pc, #232]	; (8002d20 <HAL_GPIO_Init+0x330>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	43db      	mvns	r3, r3
 8002c40:	69ba      	ldr	r2, [r7, #24]
 8002c42:	4013      	ands	r3, r2
 8002c44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d003      	beq.n	8002c5a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002c52:	69ba      	ldr	r2, [r7, #24]
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c5a:	4a31      	ldr	r2, [pc, #196]	; (8002d20 <HAL_GPIO_Init+0x330>)
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002c60:	4b2f      	ldr	r3, [pc, #188]	; (8002d20 <HAL_GPIO_Init+0x330>)
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	43db      	mvns	r3, r3
 8002c6a:	69ba      	ldr	r2, [r7, #24]
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d003      	beq.n	8002c84 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002c7c:	69ba      	ldr	r2, [r7, #24]
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c84:	4a26      	ldr	r2, [pc, #152]	; (8002d20 <HAL_GPIO_Init+0x330>)
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c8a:	4b25      	ldr	r3, [pc, #148]	; (8002d20 <HAL_GPIO_Init+0x330>)
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	43db      	mvns	r3, r3
 8002c94:	69ba      	ldr	r2, [r7, #24]
 8002c96:	4013      	ands	r3, r2
 8002c98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d003      	beq.n	8002cae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002ca6:	69ba      	ldr	r2, [r7, #24]
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cae:	4a1c      	ldr	r2, [pc, #112]	; (8002d20 <HAL_GPIO_Init+0x330>)
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cb4:	4b1a      	ldr	r3, [pc, #104]	; (8002d20 <HAL_GPIO_Init+0x330>)
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	43db      	mvns	r3, r3
 8002cbe:	69ba      	ldr	r2, [r7, #24]
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d003      	beq.n	8002cd8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002cd0:	69ba      	ldr	r2, [r7, #24]
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002cd8:	4a11      	ldr	r2, [pc, #68]	; (8002d20 <HAL_GPIO_Init+0x330>)
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	61fb      	str	r3, [r7, #28]
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	2b0f      	cmp	r3, #15
 8002ce8:	f67f ae90 	bls.w	8002a0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002cec:	bf00      	nop
 8002cee:	3724      	adds	r7, #36	; 0x24
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr
 8002cf8:	40023800 	.word	0x40023800
 8002cfc:	40013800 	.word	0x40013800
 8002d00:	40020000 	.word	0x40020000
 8002d04:	40020400 	.word	0x40020400
 8002d08:	40020800 	.word	0x40020800
 8002d0c:	40020c00 	.word	0x40020c00
 8002d10:	40021000 	.word	0x40021000
 8002d14:	40021400 	.word	0x40021400
 8002d18:	40021800 	.word	0x40021800
 8002d1c:	40021c00 	.word	0x40021c00
 8002d20:	40013c00 	.word	0x40013c00

08002d24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	460b      	mov	r3, r1
 8002d2e:	807b      	strh	r3, [r7, #2]
 8002d30:	4613      	mov	r3, r2
 8002d32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d34:	787b      	ldrb	r3, [r7, #1]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d003      	beq.n	8002d42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d3a:	887a      	ldrh	r2, [r7, #2]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d40:	e003      	b.n	8002d4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d42:	887b      	ldrh	r3, [r7, #2]
 8002d44:	041a      	lsls	r2, r3, #16
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	619a      	str	r2, [r3, #24]
}
 8002d4a:	bf00      	nop
 8002d4c:	370c      	adds	r7, #12
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr

08002d56 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d56:	b480      	push	{r7}
 8002d58:	b083      	sub	sp, #12
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
 8002d5e:	460b      	mov	r3, r1
 8002d60:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	695a      	ldr	r2, [r3, #20]
 8002d66:	887b      	ldrh	r3, [r7, #2]
 8002d68:	401a      	ands	r2, r3
 8002d6a:	887b      	ldrh	r3, [r7, #2]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d104      	bne.n	8002d7a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002d70:	887b      	ldrh	r3, [r7, #2]
 8002d72:	041a      	lsls	r2, r3, #16
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002d78:	e002      	b.n	8002d80 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002d7a:	887a      	ldrh	r2, [r7, #2]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	619a      	str	r2, [r3, #24]
}
 8002d80:	bf00      	nop
 8002d82:	370c      	adds	r7, #12
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr

08002d8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d101      	bne.n	8002d9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e11f      	b.n	8002fde <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d106      	bne.n	8002db8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f7fe fdb6 	bl	8001924 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2224      	movs	r2, #36	; 0x24
 8002dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f022 0201 	bic.w	r2, r2, #1
 8002dce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002dde:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002dee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002df0:	f001 fc6e 	bl	80046d0 <HAL_RCC_GetPCLK1Freq>
 8002df4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	4a7b      	ldr	r2, [pc, #492]	; (8002fe8 <HAL_I2C_Init+0x25c>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d807      	bhi.n	8002e10 <HAL_I2C_Init+0x84>
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	4a7a      	ldr	r2, [pc, #488]	; (8002fec <HAL_I2C_Init+0x260>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	bf94      	ite	ls
 8002e08:	2301      	movls	r3, #1
 8002e0a:	2300      	movhi	r3, #0
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	e006      	b.n	8002e1e <HAL_I2C_Init+0x92>
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	4a77      	ldr	r2, [pc, #476]	; (8002ff0 <HAL_I2C_Init+0x264>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	bf94      	ite	ls
 8002e18:	2301      	movls	r3, #1
 8002e1a:	2300      	movhi	r3, #0
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d001      	beq.n	8002e26 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e0db      	b.n	8002fde <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	4a72      	ldr	r2, [pc, #456]	; (8002ff4 <HAL_I2C_Init+0x268>)
 8002e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e2e:	0c9b      	lsrs	r3, r3, #18
 8002e30:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	68ba      	ldr	r2, [r7, #8]
 8002e42:	430a      	orrs	r2, r1
 8002e44:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	6a1b      	ldr	r3, [r3, #32]
 8002e4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	4a64      	ldr	r2, [pc, #400]	; (8002fe8 <HAL_I2C_Init+0x25c>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d802      	bhi.n	8002e60 <HAL_I2C_Init+0xd4>
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	3301      	adds	r3, #1
 8002e5e:	e009      	b.n	8002e74 <HAL_I2C_Init+0xe8>
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e66:	fb02 f303 	mul.w	r3, r2, r3
 8002e6a:	4a63      	ldr	r2, [pc, #396]	; (8002ff8 <HAL_I2C_Init+0x26c>)
 8002e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e70:	099b      	lsrs	r3, r3, #6
 8002e72:	3301      	adds	r3, #1
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	6812      	ldr	r2, [r2, #0]
 8002e78:	430b      	orrs	r3, r1
 8002e7a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	69db      	ldr	r3, [r3, #28]
 8002e82:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e86:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	4956      	ldr	r1, [pc, #344]	; (8002fe8 <HAL_I2C_Init+0x25c>)
 8002e90:	428b      	cmp	r3, r1
 8002e92:	d80d      	bhi.n	8002eb0 <HAL_I2C_Init+0x124>
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	1e59      	subs	r1, r3, #1
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	005b      	lsls	r3, r3, #1
 8002e9e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ea8:	2b04      	cmp	r3, #4
 8002eaa:	bf38      	it	cc
 8002eac:	2304      	movcc	r3, #4
 8002eae:	e04f      	b.n	8002f50 <HAL_I2C_Init+0x1c4>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d111      	bne.n	8002edc <HAL_I2C_Init+0x150>
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	1e58      	subs	r0, r3, #1
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6859      	ldr	r1, [r3, #4]
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	005b      	lsls	r3, r3, #1
 8002ec4:	440b      	add	r3, r1
 8002ec6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eca:	3301      	adds	r3, #1
 8002ecc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	bf0c      	ite	eq
 8002ed4:	2301      	moveq	r3, #1
 8002ed6:	2300      	movne	r3, #0
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	e012      	b.n	8002f02 <HAL_I2C_Init+0x176>
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	1e58      	subs	r0, r3, #1
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6859      	ldr	r1, [r3, #4]
 8002ee4:	460b      	mov	r3, r1
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	440b      	add	r3, r1
 8002eea:	0099      	lsls	r1, r3, #2
 8002eec:	440b      	add	r3, r1
 8002eee:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	bf0c      	ite	eq
 8002efc:	2301      	moveq	r3, #1
 8002efe:	2300      	movne	r3, #0
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d001      	beq.n	8002f0a <HAL_I2C_Init+0x17e>
 8002f06:	2301      	movs	r3, #1
 8002f08:	e022      	b.n	8002f50 <HAL_I2C_Init+0x1c4>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d10e      	bne.n	8002f30 <HAL_I2C_Init+0x1a4>
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	1e58      	subs	r0, r3, #1
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6859      	ldr	r1, [r3, #4]
 8002f1a:	460b      	mov	r3, r1
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	440b      	add	r3, r1
 8002f20:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f24:	3301      	adds	r3, #1
 8002f26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f2e:	e00f      	b.n	8002f50 <HAL_I2C_Init+0x1c4>
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	1e58      	subs	r0, r3, #1
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6859      	ldr	r1, [r3, #4]
 8002f38:	460b      	mov	r3, r1
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	440b      	add	r3, r1
 8002f3e:	0099      	lsls	r1, r3, #2
 8002f40:	440b      	add	r3, r1
 8002f42:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f46:	3301      	adds	r3, #1
 8002f48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f50:	6879      	ldr	r1, [r7, #4]
 8002f52:	6809      	ldr	r1, [r1, #0]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	69da      	ldr	r2, [r3, #28]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a1b      	ldr	r3, [r3, #32]
 8002f6a:	431a      	orrs	r2, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	430a      	orrs	r2, r1
 8002f72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f7e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	6911      	ldr	r1, [r2, #16]
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	68d2      	ldr	r2, [r2, #12]
 8002f8a:	4311      	orrs	r1, r2
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	6812      	ldr	r2, [r2, #0]
 8002f90:	430b      	orrs	r3, r1
 8002f92:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	695a      	ldr	r2, [r3, #20]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	699b      	ldr	r3, [r3, #24]
 8002fa6:	431a      	orrs	r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	430a      	orrs	r2, r1
 8002fae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f042 0201 	orr.w	r2, r2, #1
 8002fbe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2220      	movs	r2, #32
 8002fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3710      	adds	r7, #16
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	000186a0 	.word	0x000186a0
 8002fec:	001e847f 	.word	0x001e847f
 8002ff0:	003d08ff 	.word	0x003d08ff
 8002ff4:	431bde83 	.word	0x431bde83
 8002ff8:	10624dd3 	.word	0x10624dd3

08002ffc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ffe:	b08f      	sub	sp, #60	; 0x3c
 8003000:	af0a      	add	r7, sp, #40	; 0x28
 8003002:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d101      	bne.n	800300e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e10f      	b.n	800322e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800301a:	b2db      	uxtb	r3, r3
 800301c:	2b00      	cmp	r3, #0
 800301e:	d106      	bne.n	800302e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f7fe ff41 	bl	8001eb0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2203      	movs	r2, #3
 8003032:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800303a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800303e:	2b00      	cmp	r3, #0
 8003040:	d102      	bne.n	8003048 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4618      	mov	r0, r3
 800304e:	f003 fb97 	bl	8006780 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	603b      	str	r3, [r7, #0]
 8003058:	687e      	ldr	r6, [r7, #4]
 800305a:	466d      	mov	r5, sp
 800305c:	f106 0410 	add.w	r4, r6, #16
 8003060:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003062:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003064:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003066:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003068:	e894 0003 	ldmia.w	r4, {r0, r1}
 800306c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003070:	1d33      	adds	r3, r6, #4
 8003072:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003074:	6838      	ldr	r0, [r7, #0]
 8003076:	f003 fa7f 	bl	8006578 <USB_CoreInit>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d005      	beq.n	800308c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2202      	movs	r2, #2
 8003084:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e0d0      	b.n	800322e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	2100      	movs	r1, #0
 8003092:	4618      	mov	r0, r3
 8003094:	f003 fb85 	bl	80067a2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003098:	2300      	movs	r3, #0
 800309a:	73fb      	strb	r3, [r7, #15]
 800309c:	e04a      	b.n	8003134 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800309e:	7bfa      	ldrb	r2, [r7, #15]
 80030a0:	6879      	ldr	r1, [r7, #4]
 80030a2:	4613      	mov	r3, r2
 80030a4:	00db      	lsls	r3, r3, #3
 80030a6:	1a9b      	subs	r3, r3, r2
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	440b      	add	r3, r1
 80030ac:	333d      	adds	r3, #61	; 0x3d
 80030ae:	2201      	movs	r2, #1
 80030b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80030b2:	7bfa      	ldrb	r2, [r7, #15]
 80030b4:	6879      	ldr	r1, [r7, #4]
 80030b6:	4613      	mov	r3, r2
 80030b8:	00db      	lsls	r3, r3, #3
 80030ba:	1a9b      	subs	r3, r3, r2
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	440b      	add	r3, r1
 80030c0:	333c      	adds	r3, #60	; 0x3c
 80030c2:	7bfa      	ldrb	r2, [r7, #15]
 80030c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80030c6:	7bfa      	ldrb	r2, [r7, #15]
 80030c8:	7bfb      	ldrb	r3, [r7, #15]
 80030ca:	b298      	uxth	r0, r3
 80030cc:	6879      	ldr	r1, [r7, #4]
 80030ce:	4613      	mov	r3, r2
 80030d0:	00db      	lsls	r3, r3, #3
 80030d2:	1a9b      	subs	r3, r3, r2
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	440b      	add	r3, r1
 80030d8:	3342      	adds	r3, #66	; 0x42
 80030da:	4602      	mov	r2, r0
 80030dc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80030de:	7bfa      	ldrb	r2, [r7, #15]
 80030e0:	6879      	ldr	r1, [r7, #4]
 80030e2:	4613      	mov	r3, r2
 80030e4:	00db      	lsls	r3, r3, #3
 80030e6:	1a9b      	subs	r3, r3, r2
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	440b      	add	r3, r1
 80030ec:	333f      	adds	r3, #63	; 0x3f
 80030ee:	2200      	movs	r2, #0
 80030f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80030f2:	7bfa      	ldrb	r2, [r7, #15]
 80030f4:	6879      	ldr	r1, [r7, #4]
 80030f6:	4613      	mov	r3, r2
 80030f8:	00db      	lsls	r3, r3, #3
 80030fa:	1a9b      	subs	r3, r3, r2
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	440b      	add	r3, r1
 8003100:	3344      	adds	r3, #68	; 0x44
 8003102:	2200      	movs	r2, #0
 8003104:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003106:	7bfa      	ldrb	r2, [r7, #15]
 8003108:	6879      	ldr	r1, [r7, #4]
 800310a:	4613      	mov	r3, r2
 800310c:	00db      	lsls	r3, r3, #3
 800310e:	1a9b      	subs	r3, r3, r2
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	440b      	add	r3, r1
 8003114:	3348      	adds	r3, #72	; 0x48
 8003116:	2200      	movs	r2, #0
 8003118:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800311a:	7bfa      	ldrb	r2, [r7, #15]
 800311c:	6879      	ldr	r1, [r7, #4]
 800311e:	4613      	mov	r3, r2
 8003120:	00db      	lsls	r3, r3, #3
 8003122:	1a9b      	subs	r3, r3, r2
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	440b      	add	r3, r1
 8003128:	3350      	adds	r3, #80	; 0x50
 800312a:	2200      	movs	r2, #0
 800312c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800312e:	7bfb      	ldrb	r3, [r7, #15]
 8003130:	3301      	adds	r3, #1
 8003132:	73fb      	strb	r3, [r7, #15]
 8003134:	7bfa      	ldrb	r2, [r7, #15]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	429a      	cmp	r2, r3
 800313c:	d3af      	bcc.n	800309e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800313e:	2300      	movs	r3, #0
 8003140:	73fb      	strb	r3, [r7, #15]
 8003142:	e044      	b.n	80031ce <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003144:	7bfa      	ldrb	r2, [r7, #15]
 8003146:	6879      	ldr	r1, [r7, #4]
 8003148:	4613      	mov	r3, r2
 800314a:	00db      	lsls	r3, r3, #3
 800314c:	1a9b      	subs	r3, r3, r2
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	440b      	add	r3, r1
 8003152:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003156:	2200      	movs	r2, #0
 8003158:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800315a:	7bfa      	ldrb	r2, [r7, #15]
 800315c:	6879      	ldr	r1, [r7, #4]
 800315e:	4613      	mov	r3, r2
 8003160:	00db      	lsls	r3, r3, #3
 8003162:	1a9b      	subs	r3, r3, r2
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	440b      	add	r3, r1
 8003168:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800316c:	7bfa      	ldrb	r2, [r7, #15]
 800316e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003170:	7bfa      	ldrb	r2, [r7, #15]
 8003172:	6879      	ldr	r1, [r7, #4]
 8003174:	4613      	mov	r3, r2
 8003176:	00db      	lsls	r3, r3, #3
 8003178:	1a9b      	subs	r3, r3, r2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	440b      	add	r3, r1
 800317e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003182:	2200      	movs	r2, #0
 8003184:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003186:	7bfa      	ldrb	r2, [r7, #15]
 8003188:	6879      	ldr	r1, [r7, #4]
 800318a:	4613      	mov	r3, r2
 800318c:	00db      	lsls	r3, r3, #3
 800318e:	1a9b      	subs	r3, r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	440b      	add	r3, r1
 8003194:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003198:	2200      	movs	r2, #0
 800319a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800319c:	7bfa      	ldrb	r2, [r7, #15]
 800319e:	6879      	ldr	r1, [r7, #4]
 80031a0:	4613      	mov	r3, r2
 80031a2:	00db      	lsls	r3, r3, #3
 80031a4:	1a9b      	subs	r3, r3, r2
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	440b      	add	r3, r1
 80031aa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80031ae:	2200      	movs	r2, #0
 80031b0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80031b2:	7bfa      	ldrb	r2, [r7, #15]
 80031b4:	6879      	ldr	r1, [r7, #4]
 80031b6:	4613      	mov	r3, r2
 80031b8:	00db      	lsls	r3, r3, #3
 80031ba:	1a9b      	subs	r3, r3, r2
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	440b      	add	r3, r1
 80031c0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80031c4:	2200      	movs	r2, #0
 80031c6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031c8:	7bfb      	ldrb	r3, [r7, #15]
 80031ca:	3301      	adds	r3, #1
 80031cc:	73fb      	strb	r3, [r7, #15]
 80031ce:	7bfa      	ldrb	r2, [r7, #15]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d3b5      	bcc.n	8003144 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	603b      	str	r3, [r7, #0]
 80031de:	687e      	ldr	r6, [r7, #4]
 80031e0:	466d      	mov	r5, sp
 80031e2:	f106 0410 	add.w	r4, r6, #16
 80031e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 80031f2:	e885 0003 	stmia.w	r5, {r0, r1}
 80031f6:	1d33      	adds	r3, r6, #4
 80031f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031fa:	6838      	ldr	r0, [r7, #0]
 80031fc:	f003 fafc 	bl	80067f8 <USB_DevInit>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d005      	beq.n	8003212 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2202      	movs	r2, #2
 800320a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e00d      	b.n	800322e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2201      	movs	r2, #1
 800321e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4618      	mov	r0, r3
 8003228:	f003 fd2e 	bl	8006c88 <USB_DevDisconnect>

  return HAL_OK;
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	3714      	adds	r7, #20
 8003232:	46bd      	mov	sp, r7
 8003234:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003236 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003236:	b590      	push	{r4, r7, lr}
 8003238:	b08d      	sub	sp, #52	; 0x34
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003244:	6a3b      	ldr	r3, [r7, #32]
 8003246:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4618      	mov	r0, r3
 800324e:	f003 fdcf 	bl	8006df0 <USB_GetMode>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	f040 839d 	bne.w	8003994 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4618      	mov	r0, r3
 8003260:	f003 fd33 	bl	8006cca <USB_ReadInterrupts>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	f000 8393 	beq.w	8003992 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4618      	mov	r0, r3
 8003272:	f003 fd2a 	bl	8006cca <USB_ReadInterrupts>
 8003276:	4603      	mov	r3, r0
 8003278:	f003 0302 	and.w	r3, r3, #2
 800327c:	2b02      	cmp	r3, #2
 800327e:	d107      	bne.n	8003290 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	695a      	ldr	r2, [r3, #20]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f002 0202 	and.w	r2, r2, #2
 800328e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4618      	mov	r0, r3
 8003296:	f003 fd18 	bl	8006cca <USB_ReadInterrupts>
 800329a:	4603      	mov	r3, r0
 800329c:	f003 0310 	and.w	r3, r3, #16
 80032a0:	2b10      	cmp	r3, #16
 80032a2:	d161      	bne.n	8003368 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	699a      	ldr	r2, [r3, #24]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f022 0210 	bic.w	r2, r2, #16
 80032b2:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80032b4:	6a3b      	ldr	r3, [r7, #32]
 80032b6:	6a1b      	ldr	r3, [r3, #32]
 80032b8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	f003 020f 	and.w	r2, r3, #15
 80032c0:	4613      	mov	r3, r2
 80032c2:	00db      	lsls	r3, r3, #3
 80032c4:	1a9b      	subs	r3, r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	4413      	add	r3, r2
 80032d0:	3304      	adds	r3, #4
 80032d2:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80032d4:	69bb      	ldr	r3, [r7, #24]
 80032d6:	0c5b      	lsrs	r3, r3, #17
 80032d8:	f003 030f 	and.w	r3, r3, #15
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d124      	bne.n	800332a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80032e0:	69ba      	ldr	r2, [r7, #24]
 80032e2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80032e6:	4013      	ands	r3, r2
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d035      	beq.n	8003358 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	091b      	lsrs	r3, r3, #4
 80032f4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80032f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	461a      	mov	r2, r3
 80032fe:	6a38      	ldr	r0, [r7, #32]
 8003300:	f003 fc99 	bl	8006c36 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	68da      	ldr	r2, [r3, #12]
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	091b      	lsrs	r3, r3, #4
 800330c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003310:	441a      	add	r2, r3
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	699a      	ldr	r2, [r3, #24]
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	091b      	lsrs	r3, r3, #4
 800331e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003322:	441a      	add	r2, r3
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	619a      	str	r2, [r3, #24]
 8003328:	e016      	b.n	8003358 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	0c5b      	lsrs	r3, r3, #17
 800332e:	f003 030f 	and.w	r3, r3, #15
 8003332:	2b06      	cmp	r3, #6
 8003334:	d110      	bne.n	8003358 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800333c:	2208      	movs	r2, #8
 800333e:	4619      	mov	r1, r3
 8003340:	6a38      	ldr	r0, [r7, #32]
 8003342:	f003 fc78 	bl	8006c36 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	699a      	ldr	r2, [r3, #24]
 800334a:	69bb      	ldr	r3, [r7, #24]
 800334c:	091b      	lsrs	r3, r3, #4
 800334e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003352:	441a      	add	r2, r3
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	699a      	ldr	r2, [r3, #24]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f042 0210 	orr.w	r2, r2, #16
 8003366:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4618      	mov	r0, r3
 800336e:	f003 fcac 	bl	8006cca <USB_ReadInterrupts>
 8003372:	4603      	mov	r3, r0
 8003374:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003378:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800337c:	d16e      	bne.n	800345c <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800337e:	2300      	movs	r3, #0
 8003380:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4618      	mov	r0, r3
 8003388:	f003 fcb2 	bl	8006cf0 <USB_ReadDevAllOutEpInterrupt>
 800338c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800338e:	e062      	b.n	8003456 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003392:	f003 0301 	and.w	r3, r3, #1
 8003396:	2b00      	cmp	r3, #0
 8003398:	d057      	beq.n	800344a <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033a0:	b2d2      	uxtb	r2, r2
 80033a2:	4611      	mov	r1, r2
 80033a4:	4618      	mov	r0, r3
 80033a6:	f003 fcd7 	bl	8006d58 <USB_ReadDevOutEPInterrupt>
 80033aa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	f003 0301 	and.w	r3, r3, #1
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d00c      	beq.n	80033d0 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80033b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b8:	015a      	lsls	r2, r3, #5
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	4413      	add	r3, r2
 80033be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033c2:	461a      	mov	r2, r3
 80033c4:	2301      	movs	r3, #1
 80033c6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80033c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 fbe8 	bl	8003ba0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	f003 0308 	and.w	r3, r3, #8
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d00c      	beq.n	80033f4 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80033da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033dc:	015a      	lsls	r2, r3, #5
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	4413      	add	r3, r2
 80033e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033e6:	461a      	mov	r2, r3
 80033e8:	2308      	movs	r3, #8
 80033ea:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80033ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f000 fce2 	bl	8003db8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	f003 0310 	and.w	r3, r3, #16
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d008      	beq.n	8003410 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80033fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003400:	015a      	lsls	r2, r3, #5
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	4413      	add	r3, r2
 8003406:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800340a:	461a      	mov	r2, r3
 800340c:	2310      	movs	r3, #16
 800340e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	f003 0320 	and.w	r3, r3, #32
 8003416:	2b00      	cmp	r3, #0
 8003418:	d008      	beq.n	800342c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800341a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341c:	015a      	lsls	r2, r3, #5
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	4413      	add	r3, r2
 8003422:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003426:	461a      	mov	r2, r3
 8003428:	2320      	movs	r3, #32
 800342a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d009      	beq.n	800344a <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003438:	015a      	lsls	r2, r3, #5
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	4413      	add	r3, r2
 800343e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003442:	461a      	mov	r2, r3
 8003444:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003448:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800344a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344c:	3301      	adds	r3, #1
 800344e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003452:	085b      	lsrs	r3, r3, #1
 8003454:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003458:	2b00      	cmp	r3, #0
 800345a:	d199      	bne.n	8003390 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4618      	mov	r0, r3
 8003462:	f003 fc32 	bl	8006cca <USB_ReadInterrupts>
 8003466:	4603      	mov	r3, r0
 8003468:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800346c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003470:	f040 80c0 	bne.w	80035f4 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4618      	mov	r0, r3
 800347a:	f003 fc53 	bl	8006d24 <USB_ReadDevAllInEpInterrupt>
 800347e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003480:	2300      	movs	r3, #0
 8003482:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003484:	e0b2      	b.n	80035ec <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003488:	f003 0301 	and.w	r3, r3, #1
 800348c:	2b00      	cmp	r3, #0
 800348e:	f000 80a7 	beq.w	80035e0 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003498:	b2d2      	uxtb	r2, r2
 800349a:	4611      	mov	r1, r2
 800349c:	4618      	mov	r0, r3
 800349e:	f003 fc79 	bl	8006d94 <USB_ReadDevInEPInterrupt>
 80034a2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	f003 0301 	and.w	r3, r3, #1
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d057      	beq.n	800355e <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80034ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b0:	f003 030f 	and.w	r3, r3, #15
 80034b4:	2201      	movs	r2, #1
 80034b6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ba:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	43db      	mvns	r3, r3
 80034c8:	69f9      	ldr	r1, [r7, #28]
 80034ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80034ce:	4013      	ands	r3, r2
 80034d0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80034d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d4:	015a      	lsls	r2, r3, #5
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	4413      	add	r3, r2
 80034da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034de:	461a      	mov	r2, r3
 80034e0:	2301      	movs	r3, #1
 80034e2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	691b      	ldr	r3, [r3, #16]
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d132      	bne.n	8003552 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80034ec:	6879      	ldr	r1, [r7, #4]
 80034ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034f0:	4613      	mov	r3, r2
 80034f2:	00db      	lsls	r3, r3, #3
 80034f4:	1a9b      	subs	r3, r3, r2
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	440b      	add	r3, r1
 80034fa:	3348      	adds	r3, #72	; 0x48
 80034fc:	6819      	ldr	r1, [r3, #0]
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003502:	4613      	mov	r3, r2
 8003504:	00db      	lsls	r3, r3, #3
 8003506:	1a9b      	subs	r3, r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	4403      	add	r3, r0
 800350c:	3344      	adds	r3, #68	; 0x44
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4419      	add	r1, r3
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003516:	4613      	mov	r3, r2
 8003518:	00db      	lsls	r3, r3, #3
 800351a:	1a9b      	subs	r3, r3, r2
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	4403      	add	r3, r0
 8003520:	3348      	adds	r3, #72	; 0x48
 8003522:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003526:	2b00      	cmp	r3, #0
 8003528:	d113      	bne.n	8003552 <HAL_PCD_IRQHandler+0x31c>
 800352a:	6879      	ldr	r1, [r7, #4]
 800352c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800352e:	4613      	mov	r3, r2
 8003530:	00db      	lsls	r3, r3, #3
 8003532:	1a9b      	subs	r3, r3, r2
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	440b      	add	r3, r1
 8003538:	3350      	adds	r3, #80	; 0x50
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d108      	bne.n	8003552 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6818      	ldr	r0, [r3, #0]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800354a:	461a      	mov	r2, r3
 800354c:	2101      	movs	r1, #1
 800354e:	f003 fc81 	bl	8006e54 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003554:	b2db      	uxtb	r3, r3
 8003556:	4619      	mov	r1, r3
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f000 fa2a 	bl	80039b2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	f003 0308 	and.w	r3, r3, #8
 8003564:	2b00      	cmp	r3, #0
 8003566:	d008      	beq.n	800357a <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356a:	015a      	lsls	r2, r3, #5
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	4413      	add	r3, r2
 8003570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003574:	461a      	mov	r2, r3
 8003576:	2308      	movs	r3, #8
 8003578:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	f003 0310 	and.w	r3, r3, #16
 8003580:	2b00      	cmp	r3, #0
 8003582:	d008      	beq.n	8003596 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003586:	015a      	lsls	r2, r3, #5
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	4413      	add	r3, r2
 800358c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003590:	461a      	mov	r2, r3
 8003592:	2310      	movs	r3, #16
 8003594:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800359c:	2b00      	cmp	r3, #0
 800359e:	d008      	beq.n	80035b2 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80035a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a2:	015a      	lsls	r2, r3, #5
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	4413      	add	r3, r2
 80035a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035ac:	461a      	mov	r2, r3
 80035ae:	2340      	movs	r3, #64	; 0x40
 80035b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	f003 0302 	and.w	r3, r3, #2
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d008      	beq.n	80035ce <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80035bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035be:	015a      	lsls	r2, r3, #5
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	4413      	add	r3, r2
 80035c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035c8:	461a      	mov	r2, r3
 80035ca:	2302      	movs	r3, #2
 80035cc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d003      	beq.n	80035e0 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80035d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 fa53 	bl	8003a86 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80035e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e2:	3301      	adds	r3, #1
 80035e4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80035e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035e8:	085b      	lsrs	r3, r3, #1
 80035ea:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80035ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	f47f af49 	bne.w	8003486 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4618      	mov	r0, r3
 80035fa:	f003 fb66 	bl	8006cca <USB_ReadInterrupts>
 80035fe:	4603      	mov	r3, r0
 8003600:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003604:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003608:	d122      	bne.n	8003650 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	69fa      	ldr	r2, [r7, #28]
 8003614:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003618:	f023 0301 	bic.w	r3, r3, #1
 800361c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003624:	2b01      	cmp	r3, #1
 8003626:	d108      	bne.n	800363a <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003630:	2100      	movs	r1, #0
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 fc06 	bl	8003e44 <HAL_PCDEx_LPM_Callback>
 8003638:	e002      	b.n	8003640 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 f9ed 	bl	8003a1a <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	695a      	ldr	r2, [r3, #20]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800364e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4618      	mov	r0, r3
 8003656:	f003 fb38 	bl	8006cca <USB_ReadInterrupts>
 800365a:	4603      	mov	r3, r0
 800365c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003660:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003664:	d112      	bne.n	800368c <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f003 0301 	and.w	r3, r3, #1
 8003672:	2b01      	cmp	r3, #1
 8003674:	d102      	bne.n	800367c <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f000 f9c5 	bl	8003a06 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	695a      	ldr	r2, [r3, #20]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800368a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4618      	mov	r0, r3
 8003692:	f003 fb1a 	bl	8006cca <USB_ReadInterrupts>
 8003696:	4603      	mov	r3, r0
 8003698:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800369c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036a0:	f040 80c7 	bne.w	8003832 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	69fa      	ldr	r2, [r7, #28]
 80036ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036b2:	f023 0301 	bic.w	r3, r3, #1
 80036b6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2110      	movs	r1, #16
 80036be:	4618      	mov	r0, r3
 80036c0:	f003 f9fe 	bl	8006ac0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036c4:	2300      	movs	r3, #0
 80036c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036c8:	e056      	b.n	8003778 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80036ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036cc:	015a      	lsls	r2, r3, #5
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	4413      	add	r3, r2
 80036d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036d6:	461a      	mov	r2, r3
 80036d8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80036dc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80036de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036e0:	015a      	lsls	r2, r3, #5
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	4413      	add	r3, r2
 80036e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036ee:	0151      	lsls	r1, r2, #5
 80036f0:	69fa      	ldr	r2, [r7, #28]
 80036f2:	440a      	add	r2, r1
 80036f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036f8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80036fc:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80036fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003700:	015a      	lsls	r2, r3, #5
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	4413      	add	r3, r2
 8003706:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800370e:	0151      	lsls	r1, r2, #5
 8003710:	69fa      	ldr	r2, [r7, #28]
 8003712:	440a      	add	r2, r1
 8003714:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003718:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800371c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800371e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003720:	015a      	lsls	r2, r3, #5
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	4413      	add	r3, r2
 8003726:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800372a:	461a      	mov	r2, r3
 800372c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003730:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003734:	015a      	lsls	r2, r3, #5
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	4413      	add	r3, r2
 800373a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003742:	0151      	lsls	r1, r2, #5
 8003744:	69fa      	ldr	r2, [r7, #28]
 8003746:	440a      	add	r2, r1
 8003748:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800374c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003750:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003754:	015a      	lsls	r2, r3, #5
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	4413      	add	r3, r2
 800375a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003762:	0151      	lsls	r1, r2, #5
 8003764:	69fa      	ldr	r2, [r7, #28]
 8003766:	440a      	add	r2, r1
 8003768:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800376c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003770:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003774:	3301      	adds	r3, #1
 8003776:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800377e:	429a      	cmp	r2, r3
 8003780:	d3a3      	bcc.n	80036ca <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003788:	69db      	ldr	r3, [r3, #28]
 800378a:	69fa      	ldr	r2, [r7, #28]
 800378c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003790:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003794:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379a:	2b00      	cmp	r3, #0
 800379c:	d016      	beq.n	80037cc <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037a8:	69fa      	ldr	r2, [r7, #28]
 80037aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037ae:	f043 030b 	orr.w	r3, r3, #11
 80037b2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037be:	69fa      	ldr	r2, [r7, #28]
 80037c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037c4:	f043 030b 	orr.w	r3, r3, #11
 80037c8:	6453      	str	r3, [r2, #68]	; 0x44
 80037ca:	e015      	b.n	80037f8 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037d2:	695b      	ldr	r3, [r3, #20]
 80037d4:	69fa      	ldr	r2, [r7, #28]
 80037d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037da:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80037de:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80037e2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037ea:	691b      	ldr	r3, [r3, #16]
 80037ec:	69fa      	ldr	r2, [r7, #28]
 80037ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037f2:	f043 030b 	orr.w	r3, r3, #11
 80037f6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	69fa      	ldr	r2, [r7, #28]
 8003802:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003806:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800380a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6818      	ldr	r0, [r3, #0]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	691b      	ldr	r3, [r3, #16]
 8003814:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800381c:	461a      	mov	r2, r3
 800381e:	f003 fb19 	bl	8006e54 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	695a      	ldr	r2, [r3, #20]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003830:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4618      	mov	r0, r3
 8003838:	f003 fa47 	bl	8006cca <USB_ReadInterrupts>
 800383c:	4603      	mov	r3, r0
 800383e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003842:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003846:	d124      	bne.n	8003892 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4618      	mov	r0, r3
 800384e:	f003 fadd 	bl	8006e0c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4618      	mov	r0, r3
 8003858:	f003 f993 	bl	8006b82 <USB_GetDevSpeed>
 800385c:	4603      	mov	r3, r0
 800385e:	461a      	mov	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681c      	ldr	r4, [r3, #0]
 8003868:	f000 ff26 	bl	80046b8 <HAL_RCC_GetHCLKFreq>
 800386c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003872:	b2db      	uxtb	r3, r3
 8003874:	461a      	mov	r2, r3
 8003876:	4620      	mov	r0, r4
 8003878:	f002 fee0 	bl	800663c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f000 f8b8 	bl	80039f2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	695a      	ldr	r2, [r3, #20]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003890:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4618      	mov	r0, r3
 8003898:	f003 fa17 	bl	8006cca <USB_ReadInterrupts>
 800389c:	4603      	mov	r3, r0
 800389e:	f003 0308 	and.w	r3, r3, #8
 80038a2:	2b08      	cmp	r3, #8
 80038a4:	d10a      	bne.n	80038bc <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 f899 	bl	80039de <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	695a      	ldr	r2, [r3, #20]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f002 0208 	and.w	r2, r2, #8
 80038ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4618      	mov	r0, r3
 80038c2:	f003 fa02 	bl	8006cca <USB_ReadInterrupts>
 80038c6:	4603      	mov	r3, r0
 80038c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038d0:	d10f      	bne.n	80038f2 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80038d2:	2300      	movs	r3, #0
 80038d4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80038d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	4619      	mov	r1, r3
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f000 f8b2 	bl	8003a46 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	695a      	ldr	r2, [r3, #20]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80038f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4618      	mov	r0, r3
 80038f8:	f003 f9e7 	bl	8006cca <USB_ReadInterrupts>
 80038fc:	4603      	mov	r3, r0
 80038fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003902:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003906:	d10f      	bne.n	8003928 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003908:	2300      	movs	r3, #0
 800390a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800390c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390e:	b2db      	uxtb	r3, r3
 8003910:	4619      	mov	r1, r3
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 f88b 	bl	8003a2e <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	695a      	ldr	r2, [r3, #20]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003926:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4618      	mov	r0, r3
 800392e:	f003 f9cc 	bl	8006cca <USB_ReadInterrupts>
 8003932:	4603      	mov	r3, r0
 8003934:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003938:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800393c:	d10a      	bne.n	8003954 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 f88d 	bl	8003a5e <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	695a      	ldr	r2, [r3, #20]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003952:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4618      	mov	r0, r3
 800395a:	f003 f9b6 	bl	8006cca <USB_ReadInterrupts>
 800395e:	4603      	mov	r3, r0
 8003960:	f003 0304 	and.w	r3, r3, #4
 8003964:	2b04      	cmp	r3, #4
 8003966:	d115      	bne.n	8003994 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	f003 0304 	and.w	r3, r3, #4
 8003976:	2b00      	cmp	r3, #0
 8003978:	d002      	beq.n	8003980 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 f879 	bl	8003a72 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	6859      	ldr	r1, [r3, #4]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	69ba      	ldr	r2, [r7, #24]
 800398c:	430a      	orrs	r2, r1
 800398e:	605a      	str	r2, [r3, #4]
 8003990:	e000      	b.n	8003994 <HAL_PCD_IRQHandler+0x75e>
      return;
 8003992:	bf00      	nop
    }
  }
}
 8003994:	3734      	adds	r7, #52	; 0x34
 8003996:	46bd      	mov	sp, r7
 8003998:	bd90      	pop	{r4, r7, pc}

0800399a <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800399a:	b480      	push	{r7}
 800399c:	b083      	sub	sp, #12
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
 80039a2:	460b      	mov	r3, r1
 80039a4:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 80039a6:	bf00      	nop
 80039a8:	370c      	adds	r7, #12
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr

080039b2 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80039b2:	b480      	push	{r7}
 80039b4:	b083      	sub	sp, #12
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
 80039ba:	460b      	mov	r3, r1
 80039bc:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 80039be:	bf00      	nop
 80039c0:	370c      	adds	r7, #12
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr

080039ca <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 80039ca:	b480      	push	{r7}
 80039cc:	b083      	sub	sp, #12
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 80039d2:	bf00      	nop
 80039d4:	370c      	adds	r7, #12
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr

080039de <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 80039de:	b480      	push	{r7}
 80039e0:	b083      	sub	sp, #12
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 80039e6:	bf00      	nop
 80039e8:	370c      	adds	r7, #12
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr

080039f2 <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 80039f2:	b480      	push	{r7}
 80039f4:	b083      	sub	sp, #12
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 80039fa:	bf00      	nop
 80039fc:	370c      	adds	r7, #12
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr

08003a06 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8003a06:	b480      	push	{r7}
 8003a08:	b083      	sub	sp, #12
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8003a0e:	bf00      	nop
 8003a10:	370c      	adds	r7, #12
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr

08003a1a <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8003a1a:	b480      	push	{r7}
 8003a1c:	b083      	sub	sp, #12
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8003a22:	bf00      	nop
 8003a24:	370c      	adds	r7, #12
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr

08003a2e <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8003a2e:	b480      	push	{r7}
 8003a30:	b083      	sub	sp, #12
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	6078      	str	r0, [r7, #4]
 8003a36:	460b      	mov	r3, r1
 8003a38:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOOUTIncompleteCallback could be implemented in the user file
   */
}
 8003a3a:	bf00      	nop
 8003a3c:	370c      	adds	r7, #12
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr

08003a46 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8003a46:	b480      	push	{r7}
 8003a48:	b083      	sub	sp, #12
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
 8003a4e:	460b      	mov	r3, r1
 8003a50:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOINIncompleteCallback could be implemented in the user file
   */
}
 8003a52:	bf00      	nop
 8003a54:	370c      	adds	r7, #12
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr

08003a5e <HAL_PCD_ConnectCallback>:
  * @brief  Connection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 8003a5e:	b480      	push	{r7}
 8003a60:	b083      	sub	sp, #12
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ConnectCallback could be implemented in the user file
   */
}
 8003a66:	bf00      	nop
 8003a68:	370c      	adds	r7, #12
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr

08003a72 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 8003a72:	b480      	push	{r7}
 8003a74:	b083      	sub	sp, #12
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DisconnectCallback could be implemented in the user file
   */
}
 8003a7a:	bf00      	nop
 8003a7c:	370c      	adds	r7, #12
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr

08003a86 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003a86:	b580      	push	{r7, lr}
 8003a88:	b08a      	sub	sp, #40	; 0x28
 8003a8a:	af02      	add	r7, sp, #8
 8003a8c:	6078      	str	r0, [r7, #4]
 8003a8e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003a9a:	683a      	ldr	r2, [r7, #0]
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	00db      	lsls	r3, r3, #3
 8003aa0:	1a9b      	subs	r3, r3, r2
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	3338      	adds	r3, #56	; 0x38
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	4413      	add	r3, r2
 8003aaa:	3304      	adds	r3, #4
 8003aac:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	699a      	ldr	r2, [r3, #24]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	695b      	ldr	r3, [r3, #20]
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d901      	bls.n	8003abe <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e06c      	b.n	8003b98 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	695a      	ldr	r2, [r3, #20]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	699b      	ldr	r3, [r3, #24]
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	69fa      	ldr	r2, [r7, #28]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d902      	bls.n	8003ada <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	3303      	adds	r3, #3
 8003ade:	089b      	lsrs	r3, r3, #2
 8003ae0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003ae2:	e02b      	b.n	8003b3c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	695a      	ldr	r2, [r3, #20]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	699b      	ldr	r3, [r3, #24]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	69fa      	ldr	r2, [r7, #28]
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d902      	bls.n	8003b00 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	3303      	adds	r3, #3
 8003b04:	089b      	lsrs	r3, r3, #2
 8003b06:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	68d9      	ldr	r1, [r3, #12]
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	b2da      	uxtb	r2, r3
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	9300      	str	r3, [sp, #0]
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	6978      	ldr	r0, [r7, #20]
 8003b20:	f003 f854 	bl	8006bcc <USB_WritePacket>

    ep->xfer_buff  += len;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	68da      	ldr	r2, [r3, #12]
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	441a      	add	r2, r3
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	699a      	ldr	r2, [r3, #24]
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	441a      	add	r2, r3
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	015a      	lsls	r2, r3, #5
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	4413      	add	r3, r2
 8003b44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b48:	699b      	ldr	r3, [r3, #24]
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	69ba      	ldr	r2, [r7, #24]
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d809      	bhi.n	8003b66 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	699a      	ldr	r2, [r3, #24]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d203      	bcs.n	8003b66 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	695b      	ldr	r3, [r3, #20]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d1be      	bne.n	8003ae4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	695a      	ldr	r2, [r3, #20]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	699b      	ldr	r3, [r3, #24]
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d811      	bhi.n	8003b96 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	f003 030f 	and.w	r3, r3, #15
 8003b78:	2201      	movs	r2, #1
 8003b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	43db      	mvns	r3, r3
 8003b8c:	6939      	ldr	r1, [r7, #16]
 8003b8e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b92:	4013      	ands	r3, r2
 8003b94:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003b96:	2300      	movs	r3, #0
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3720      	adds	r7, #32
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b086      	sub	sp, #24
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	333c      	adds	r3, #60	; 0x3c
 8003bb8:	3304      	adds	r3, #4
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	015a      	lsls	r2, r3, #5
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	4413      	add	r3, r2
 8003bc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	f040 80a0 	bne.w	8003d18 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	f003 0308 	and.w	r3, r3, #8
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d015      	beq.n	8003c0e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	4a72      	ldr	r2, [pc, #456]	; (8003db0 <PCD_EP_OutXfrComplete_int+0x210>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	f240 80dd 	bls.w	8003da6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	f000 80d7 	beq.w	8003da6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	015a      	lsls	r2, r3, #5
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	4413      	add	r3, r2
 8003c00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c04:	461a      	mov	r2, r3
 8003c06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c0a:	6093      	str	r3, [r2, #8]
 8003c0c:	e0cb      	b.n	8003da6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	f003 0320 	and.w	r3, r3, #32
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d009      	beq.n	8003c2c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	015a      	lsls	r2, r3, #5
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	4413      	add	r3, r2
 8003c20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c24:	461a      	mov	r2, r3
 8003c26:	2320      	movs	r3, #32
 8003c28:	6093      	str	r3, [r2, #8]
 8003c2a:	e0bc      	b.n	8003da6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	f040 80b7 	bne.w	8003da6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	4a5d      	ldr	r2, [pc, #372]	; (8003db0 <PCD_EP_OutXfrComplete_int+0x210>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d90f      	bls.n	8003c60 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d00a      	beq.n	8003c60 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	015a      	lsls	r2, r3, #5
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	4413      	add	r3, r2
 8003c52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c56:	461a      	mov	r2, r3
 8003c58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c5c:	6093      	str	r3, [r2, #8]
 8003c5e:	e0a2      	b.n	8003da6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003c60:	6879      	ldr	r1, [r7, #4]
 8003c62:	683a      	ldr	r2, [r7, #0]
 8003c64:	4613      	mov	r3, r2
 8003c66:	00db      	lsls	r3, r3, #3
 8003c68:	1a9b      	subs	r3, r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	440b      	add	r3, r1
 8003c6e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003c72:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	0159      	lsls	r1, r3, #5
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	440b      	add	r3, r1
 8003c7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003c86:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	683a      	ldr	r2, [r7, #0]
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	00db      	lsls	r3, r3, #3
 8003c90:	1a9b      	subs	r3, r3, r2
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	4403      	add	r3, r0
 8003c96:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003c9a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003c9c:	6879      	ldr	r1, [r7, #4]
 8003c9e:	683a      	ldr	r2, [r7, #0]
 8003ca0:	4613      	mov	r3, r2
 8003ca2:	00db      	lsls	r3, r3, #3
 8003ca4:	1a9b      	subs	r3, r3, r2
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	440b      	add	r3, r1
 8003caa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003cae:	6819      	ldr	r1, [r3, #0]
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	683a      	ldr	r2, [r7, #0]
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	00db      	lsls	r3, r3, #3
 8003cb8:	1a9b      	subs	r3, r3, r2
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	4403      	add	r3, r0
 8003cbe:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4419      	add	r1, r3
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	683a      	ldr	r2, [r7, #0]
 8003cca:	4613      	mov	r3, r2
 8003ccc:	00db      	lsls	r3, r3, #3
 8003cce:	1a9b      	subs	r3, r3, r2
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	4403      	add	r3, r0
 8003cd4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003cd8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d114      	bne.n	8003d0a <PCD_EP_OutXfrComplete_int+0x16a>
 8003ce0:	6879      	ldr	r1, [r7, #4]
 8003ce2:	683a      	ldr	r2, [r7, #0]
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	00db      	lsls	r3, r3, #3
 8003ce8:	1a9b      	subs	r3, r3, r2
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	440b      	add	r3, r1
 8003cee:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d108      	bne.n	8003d0a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6818      	ldr	r0, [r3, #0]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003d02:	461a      	mov	r2, r3
 8003d04:	2101      	movs	r1, #1
 8003d06:	f003 f8a5 	bl	8006e54 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	4619      	mov	r1, r3
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f7ff fe42 	bl	800399a <HAL_PCD_DataOutStageCallback>
 8003d16:	e046      	b.n	8003da6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	4a26      	ldr	r2, [pc, #152]	; (8003db4 <PCD_EP_OutXfrComplete_int+0x214>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d124      	bne.n	8003d6a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d00a      	beq.n	8003d40 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	015a      	lsls	r2, r3, #5
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	4413      	add	r3, r2
 8003d32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d36:	461a      	mov	r2, r3
 8003d38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d3c:	6093      	str	r3, [r2, #8]
 8003d3e:	e032      	b.n	8003da6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	f003 0320 	and.w	r3, r3, #32
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d008      	beq.n	8003d5c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	015a      	lsls	r2, r3, #5
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	4413      	add	r3, r2
 8003d52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d56:	461a      	mov	r2, r3
 8003d58:	2320      	movs	r3, #32
 8003d5a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	4619      	mov	r1, r3
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f7ff fe19 	bl	800399a <HAL_PCD_DataOutStageCallback>
 8003d68:	e01d      	b.n	8003da6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d114      	bne.n	8003d9a <PCD_EP_OutXfrComplete_int+0x1fa>
 8003d70:	6879      	ldr	r1, [r7, #4]
 8003d72:	683a      	ldr	r2, [r7, #0]
 8003d74:	4613      	mov	r3, r2
 8003d76:	00db      	lsls	r3, r3, #3
 8003d78:	1a9b      	subs	r3, r3, r2
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	440b      	add	r3, r1
 8003d7e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d108      	bne.n	8003d9a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6818      	ldr	r0, [r3, #0]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003d92:	461a      	mov	r2, r3
 8003d94:	2100      	movs	r1, #0
 8003d96:	f003 f85d 	bl	8006e54 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	4619      	mov	r1, r3
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f7ff fdfa 	bl	800399a <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003da6:	2300      	movs	r3, #0
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3718      	adds	r7, #24
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	4f54300a 	.word	0x4f54300a
 8003db4:	4f54310a 	.word	0x4f54310a

08003db8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b086      	sub	sp, #24
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	333c      	adds	r3, #60	; 0x3c
 8003dd0:	3304      	adds	r3, #4
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	015a      	lsls	r2, r3, #5
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	4413      	add	r3, r2
 8003dde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	4a15      	ldr	r2, [pc, #84]	; (8003e40 <PCD_EP_OutSetupPacket_int+0x88>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d90e      	bls.n	8003e0c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d009      	beq.n	8003e0c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	015a      	lsls	r2, r3, #5
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	4413      	add	r3, r2
 8003e00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e04:	461a      	mov	r2, r3
 8003e06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e0a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f7ff fddc 	bl	80039ca <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	4a0a      	ldr	r2, [pc, #40]	; (8003e40 <PCD_EP_OutSetupPacket_int+0x88>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d90c      	bls.n	8003e34 <PCD_EP_OutSetupPacket_int+0x7c>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	691b      	ldr	r3, [r3, #16]
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d108      	bne.n	8003e34 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6818      	ldr	r0, [r3, #0]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	2101      	movs	r1, #1
 8003e30:	f003 f810 	bl	8006e54 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3718      	adds	r7, #24
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	4f54300a 	.word	0x4f54300a

08003e44 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	460b      	mov	r3, r1
 8003e4e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003e50:	bf00      	nop
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b086      	sub	sp, #24
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d101      	bne.n	8003e6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e25b      	b.n	8004326 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d075      	beq.n	8003f66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e7a:	4ba3      	ldr	r3, [pc, #652]	; (8004108 <HAL_RCC_OscConfig+0x2ac>)
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	f003 030c 	and.w	r3, r3, #12
 8003e82:	2b04      	cmp	r3, #4
 8003e84:	d00c      	beq.n	8003ea0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e86:	4ba0      	ldr	r3, [pc, #640]	; (8004108 <HAL_RCC_OscConfig+0x2ac>)
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e8e:	2b08      	cmp	r3, #8
 8003e90:	d112      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e92:	4b9d      	ldr	r3, [pc, #628]	; (8004108 <HAL_RCC_OscConfig+0x2ac>)
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e9e:	d10b      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ea0:	4b99      	ldr	r3, [pc, #612]	; (8004108 <HAL_RCC_OscConfig+0x2ac>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d05b      	beq.n	8003f64 <HAL_RCC_OscConfig+0x108>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d157      	bne.n	8003f64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e236      	b.n	8004326 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ec0:	d106      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x74>
 8003ec2:	4b91      	ldr	r3, [pc, #580]	; (8004108 <HAL_RCC_OscConfig+0x2ac>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a90      	ldr	r2, [pc, #576]	; (8004108 <HAL_RCC_OscConfig+0x2ac>)
 8003ec8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ecc:	6013      	str	r3, [r2, #0]
 8003ece:	e01d      	b.n	8003f0c <HAL_RCC_OscConfig+0xb0>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ed8:	d10c      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x98>
 8003eda:	4b8b      	ldr	r3, [pc, #556]	; (8004108 <HAL_RCC_OscConfig+0x2ac>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a8a      	ldr	r2, [pc, #552]	; (8004108 <HAL_RCC_OscConfig+0x2ac>)
 8003ee0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ee4:	6013      	str	r3, [r2, #0]
 8003ee6:	4b88      	ldr	r3, [pc, #544]	; (8004108 <HAL_RCC_OscConfig+0x2ac>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a87      	ldr	r2, [pc, #540]	; (8004108 <HAL_RCC_OscConfig+0x2ac>)
 8003eec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ef0:	6013      	str	r3, [r2, #0]
 8003ef2:	e00b      	b.n	8003f0c <HAL_RCC_OscConfig+0xb0>
 8003ef4:	4b84      	ldr	r3, [pc, #528]	; (8004108 <HAL_RCC_OscConfig+0x2ac>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a83      	ldr	r2, [pc, #524]	; (8004108 <HAL_RCC_OscConfig+0x2ac>)
 8003efa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003efe:	6013      	str	r3, [r2, #0]
 8003f00:	4b81      	ldr	r3, [pc, #516]	; (8004108 <HAL_RCC_OscConfig+0x2ac>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a80      	ldr	r2, [pc, #512]	; (8004108 <HAL_RCC_OscConfig+0x2ac>)
 8003f06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d013      	beq.n	8003f3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f14:	f7fe f9d8 	bl	80022c8 <HAL_GetTick>
 8003f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f1a:	e008      	b.n	8003f2e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f1c:	f7fe f9d4 	bl	80022c8 <HAL_GetTick>
 8003f20:	4602      	mov	r2, r0
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	2b64      	cmp	r3, #100	; 0x64
 8003f28:	d901      	bls.n	8003f2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e1fb      	b.n	8004326 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f2e:	4b76      	ldr	r3, [pc, #472]	; (8004108 <HAL_RCC_OscConfig+0x2ac>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d0f0      	beq.n	8003f1c <HAL_RCC_OscConfig+0xc0>
 8003f3a:	e014      	b.n	8003f66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f3c:	f7fe f9c4 	bl	80022c8 <HAL_GetTick>
 8003f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f42:	e008      	b.n	8003f56 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f44:	f7fe f9c0 	bl	80022c8 <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	2b64      	cmp	r3, #100	; 0x64
 8003f50:	d901      	bls.n	8003f56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e1e7      	b.n	8004326 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f56:	4b6c      	ldr	r3, [pc, #432]	; (8004108 <HAL_RCC_OscConfig+0x2ac>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d1f0      	bne.n	8003f44 <HAL_RCC_OscConfig+0xe8>
 8003f62:	e000      	b.n	8003f66 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0302 	and.w	r3, r3, #2
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d063      	beq.n	800403a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f72:	4b65      	ldr	r3, [pc, #404]	; (8004108 <HAL_RCC_OscConfig+0x2ac>)
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f003 030c 	and.w	r3, r3, #12
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d00b      	beq.n	8003f96 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f7e:	4b62      	ldr	r3, [pc, #392]	; (8004108 <HAL_RCC_OscConfig+0x2ac>)
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f86:	2b08      	cmp	r3, #8
 8003f88:	d11c      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f8a:	4b5f      	ldr	r3, [pc, #380]	; (8004108 <HAL_RCC_OscConfig+0x2ac>)
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d116      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f96:	4b5c      	ldr	r3, [pc, #368]	; (8004108 <HAL_RCC_OscConfig+0x2ac>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0302 	and.w	r3, r3, #2
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d005      	beq.n	8003fae <HAL_RCC_OscConfig+0x152>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d001      	beq.n	8003fae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e1bb      	b.n	8004326 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fae:	4b56      	ldr	r3, [pc, #344]	; (8004108 <HAL_RCC_OscConfig+0x2ac>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	691b      	ldr	r3, [r3, #16]
 8003fba:	00db      	lsls	r3, r3, #3
 8003fbc:	4952      	ldr	r1, [pc, #328]	; (8004108 <HAL_RCC_OscConfig+0x2ac>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fc2:	e03a      	b.n	800403a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d020      	beq.n	800400e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fcc:	4b4f      	ldr	r3, [pc, #316]	; (800410c <HAL_RCC_OscConfig+0x2b0>)
 8003fce:	2201      	movs	r2, #1
 8003fd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd2:	f7fe f979 	bl	80022c8 <HAL_GetTick>
 8003fd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fd8:	e008      	b.n	8003fec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fda:	f7fe f975 	bl	80022c8 <HAL_GetTick>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d901      	bls.n	8003fec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e19c      	b.n	8004326 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fec:	4b46      	ldr	r3, [pc, #280]	; (8004108 <HAL_RCC_OscConfig+0x2ac>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0302 	and.w	r3, r3, #2
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d0f0      	beq.n	8003fda <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ff8:	4b43      	ldr	r3, [pc, #268]	; (8004108 <HAL_RCC_OscConfig+0x2ac>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	691b      	ldr	r3, [r3, #16]
 8004004:	00db      	lsls	r3, r3, #3
 8004006:	4940      	ldr	r1, [pc, #256]	; (8004108 <HAL_RCC_OscConfig+0x2ac>)
 8004008:	4313      	orrs	r3, r2
 800400a:	600b      	str	r3, [r1, #0]
 800400c:	e015      	b.n	800403a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800400e:	4b3f      	ldr	r3, [pc, #252]	; (800410c <HAL_RCC_OscConfig+0x2b0>)
 8004010:	2200      	movs	r2, #0
 8004012:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004014:	f7fe f958 	bl	80022c8 <HAL_GetTick>
 8004018:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800401a:	e008      	b.n	800402e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800401c:	f7fe f954 	bl	80022c8 <HAL_GetTick>
 8004020:	4602      	mov	r2, r0
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	2b02      	cmp	r3, #2
 8004028:	d901      	bls.n	800402e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800402a:	2303      	movs	r3, #3
 800402c:	e17b      	b.n	8004326 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800402e:	4b36      	ldr	r3, [pc, #216]	; (8004108 <HAL_RCC_OscConfig+0x2ac>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0302 	and.w	r3, r3, #2
 8004036:	2b00      	cmp	r3, #0
 8004038:	d1f0      	bne.n	800401c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0308 	and.w	r3, r3, #8
 8004042:	2b00      	cmp	r3, #0
 8004044:	d030      	beq.n	80040a8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	695b      	ldr	r3, [r3, #20]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d016      	beq.n	800407c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800404e:	4b30      	ldr	r3, [pc, #192]	; (8004110 <HAL_RCC_OscConfig+0x2b4>)
 8004050:	2201      	movs	r2, #1
 8004052:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004054:	f7fe f938 	bl	80022c8 <HAL_GetTick>
 8004058:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800405a:	e008      	b.n	800406e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800405c:	f7fe f934 	bl	80022c8 <HAL_GetTick>
 8004060:	4602      	mov	r2, r0
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	2b02      	cmp	r3, #2
 8004068:	d901      	bls.n	800406e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	e15b      	b.n	8004326 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800406e:	4b26      	ldr	r3, [pc, #152]	; (8004108 <HAL_RCC_OscConfig+0x2ac>)
 8004070:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004072:	f003 0302 	and.w	r3, r3, #2
 8004076:	2b00      	cmp	r3, #0
 8004078:	d0f0      	beq.n	800405c <HAL_RCC_OscConfig+0x200>
 800407a:	e015      	b.n	80040a8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800407c:	4b24      	ldr	r3, [pc, #144]	; (8004110 <HAL_RCC_OscConfig+0x2b4>)
 800407e:	2200      	movs	r2, #0
 8004080:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004082:	f7fe f921 	bl	80022c8 <HAL_GetTick>
 8004086:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004088:	e008      	b.n	800409c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800408a:	f7fe f91d 	bl	80022c8 <HAL_GetTick>
 800408e:	4602      	mov	r2, r0
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	2b02      	cmp	r3, #2
 8004096:	d901      	bls.n	800409c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004098:	2303      	movs	r3, #3
 800409a:	e144      	b.n	8004326 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800409c:	4b1a      	ldr	r3, [pc, #104]	; (8004108 <HAL_RCC_OscConfig+0x2ac>)
 800409e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040a0:	f003 0302 	and.w	r3, r3, #2
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d1f0      	bne.n	800408a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0304 	and.w	r3, r3, #4
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	f000 80a0 	beq.w	80041f6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040b6:	2300      	movs	r3, #0
 80040b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040ba:	4b13      	ldr	r3, [pc, #76]	; (8004108 <HAL_RCC_OscConfig+0x2ac>)
 80040bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d10f      	bne.n	80040e6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040c6:	2300      	movs	r3, #0
 80040c8:	60bb      	str	r3, [r7, #8]
 80040ca:	4b0f      	ldr	r3, [pc, #60]	; (8004108 <HAL_RCC_OscConfig+0x2ac>)
 80040cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ce:	4a0e      	ldr	r2, [pc, #56]	; (8004108 <HAL_RCC_OscConfig+0x2ac>)
 80040d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040d4:	6413      	str	r3, [r2, #64]	; 0x40
 80040d6:	4b0c      	ldr	r3, [pc, #48]	; (8004108 <HAL_RCC_OscConfig+0x2ac>)
 80040d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040de:	60bb      	str	r3, [r7, #8]
 80040e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040e2:	2301      	movs	r3, #1
 80040e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040e6:	4b0b      	ldr	r3, [pc, #44]	; (8004114 <HAL_RCC_OscConfig+0x2b8>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d121      	bne.n	8004136 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040f2:	4b08      	ldr	r3, [pc, #32]	; (8004114 <HAL_RCC_OscConfig+0x2b8>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a07      	ldr	r2, [pc, #28]	; (8004114 <HAL_RCC_OscConfig+0x2b8>)
 80040f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040fe:	f7fe f8e3 	bl	80022c8 <HAL_GetTick>
 8004102:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004104:	e011      	b.n	800412a <HAL_RCC_OscConfig+0x2ce>
 8004106:	bf00      	nop
 8004108:	40023800 	.word	0x40023800
 800410c:	42470000 	.word	0x42470000
 8004110:	42470e80 	.word	0x42470e80
 8004114:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004118:	f7fe f8d6 	bl	80022c8 <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	2b02      	cmp	r3, #2
 8004124:	d901      	bls.n	800412a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e0fd      	b.n	8004326 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800412a:	4b81      	ldr	r3, [pc, #516]	; (8004330 <HAL_RCC_OscConfig+0x4d4>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004132:	2b00      	cmp	r3, #0
 8004134:	d0f0      	beq.n	8004118 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	2b01      	cmp	r3, #1
 800413c:	d106      	bne.n	800414c <HAL_RCC_OscConfig+0x2f0>
 800413e:	4b7d      	ldr	r3, [pc, #500]	; (8004334 <HAL_RCC_OscConfig+0x4d8>)
 8004140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004142:	4a7c      	ldr	r2, [pc, #496]	; (8004334 <HAL_RCC_OscConfig+0x4d8>)
 8004144:	f043 0301 	orr.w	r3, r3, #1
 8004148:	6713      	str	r3, [r2, #112]	; 0x70
 800414a:	e01c      	b.n	8004186 <HAL_RCC_OscConfig+0x32a>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	2b05      	cmp	r3, #5
 8004152:	d10c      	bne.n	800416e <HAL_RCC_OscConfig+0x312>
 8004154:	4b77      	ldr	r3, [pc, #476]	; (8004334 <HAL_RCC_OscConfig+0x4d8>)
 8004156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004158:	4a76      	ldr	r2, [pc, #472]	; (8004334 <HAL_RCC_OscConfig+0x4d8>)
 800415a:	f043 0304 	orr.w	r3, r3, #4
 800415e:	6713      	str	r3, [r2, #112]	; 0x70
 8004160:	4b74      	ldr	r3, [pc, #464]	; (8004334 <HAL_RCC_OscConfig+0x4d8>)
 8004162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004164:	4a73      	ldr	r2, [pc, #460]	; (8004334 <HAL_RCC_OscConfig+0x4d8>)
 8004166:	f043 0301 	orr.w	r3, r3, #1
 800416a:	6713      	str	r3, [r2, #112]	; 0x70
 800416c:	e00b      	b.n	8004186 <HAL_RCC_OscConfig+0x32a>
 800416e:	4b71      	ldr	r3, [pc, #452]	; (8004334 <HAL_RCC_OscConfig+0x4d8>)
 8004170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004172:	4a70      	ldr	r2, [pc, #448]	; (8004334 <HAL_RCC_OscConfig+0x4d8>)
 8004174:	f023 0301 	bic.w	r3, r3, #1
 8004178:	6713      	str	r3, [r2, #112]	; 0x70
 800417a:	4b6e      	ldr	r3, [pc, #440]	; (8004334 <HAL_RCC_OscConfig+0x4d8>)
 800417c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800417e:	4a6d      	ldr	r2, [pc, #436]	; (8004334 <HAL_RCC_OscConfig+0x4d8>)
 8004180:	f023 0304 	bic.w	r3, r3, #4
 8004184:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d015      	beq.n	80041ba <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800418e:	f7fe f89b 	bl	80022c8 <HAL_GetTick>
 8004192:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004194:	e00a      	b.n	80041ac <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004196:	f7fe f897 	bl	80022c8 <HAL_GetTick>
 800419a:	4602      	mov	r2, r0
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d901      	bls.n	80041ac <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80041a8:	2303      	movs	r3, #3
 80041aa:	e0bc      	b.n	8004326 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041ac:	4b61      	ldr	r3, [pc, #388]	; (8004334 <HAL_RCC_OscConfig+0x4d8>)
 80041ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041b0:	f003 0302 	and.w	r3, r3, #2
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d0ee      	beq.n	8004196 <HAL_RCC_OscConfig+0x33a>
 80041b8:	e014      	b.n	80041e4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041ba:	f7fe f885 	bl	80022c8 <HAL_GetTick>
 80041be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041c0:	e00a      	b.n	80041d8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041c2:	f7fe f881 	bl	80022c8 <HAL_GetTick>
 80041c6:	4602      	mov	r2, r0
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d901      	bls.n	80041d8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e0a6      	b.n	8004326 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041d8:	4b56      	ldr	r3, [pc, #344]	; (8004334 <HAL_RCC_OscConfig+0x4d8>)
 80041da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041dc:	f003 0302 	and.w	r3, r3, #2
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d1ee      	bne.n	80041c2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041e4:	7dfb      	ldrb	r3, [r7, #23]
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d105      	bne.n	80041f6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041ea:	4b52      	ldr	r3, [pc, #328]	; (8004334 <HAL_RCC_OscConfig+0x4d8>)
 80041ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ee:	4a51      	ldr	r2, [pc, #324]	; (8004334 <HAL_RCC_OscConfig+0x4d8>)
 80041f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041f4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	699b      	ldr	r3, [r3, #24]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	f000 8092 	beq.w	8004324 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004200:	4b4c      	ldr	r3, [pc, #304]	; (8004334 <HAL_RCC_OscConfig+0x4d8>)
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	f003 030c 	and.w	r3, r3, #12
 8004208:	2b08      	cmp	r3, #8
 800420a:	d05c      	beq.n	80042c6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	699b      	ldr	r3, [r3, #24]
 8004210:	2b02      	cmp	r3, #2
 8004212:	d141      	bne.n	8004298 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004214:	4b48      	ldr	r3, [pc, #288]	; (8004338 <HAL_RCC_OscConfig+0x4dc>)
 8004216:	2200      	movs	r2, #0
 8004218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800421a:	f7fe f855 	bl	80022c8 <HAL_GetTick>
 800421e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004220:	e008      	b.n	8004234 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004222:	f7fe f851 	bl	80022c8 <HAL_GetTick>
 8004226:	4602      	mov	r2, r0
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	2b02      	cmp	r3, #2
 800422e:	d901      	bls.n	8004234 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004230:	2303      	movs	r3, #3
 8004232:	e078      	b.n	8004326 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004234:	4b3f      	ldr	r3, [pc, #252]	; (8004334 <HAL_RCC_OscConfig+0x4d8>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800423c:	2b00      	cmp	r3, #0
 800423e:	d1f0      	bne.n	8004222 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	69da      	ldr	r2, [r3, #28]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6a1b      	ldr	r3, [r3, #32]
 8004248:	431a      	orrs	r2, r3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424e:	019b      	lsls	r3, r3, #6
 8004250:	431a      	orrs	r2, r3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004256:	085b      	lsrs	r3, r3, #1
 8004258:	3b01      	subs	r3, #1
 800425a:	041b      	lsls	r3, r3, #16
 800425c:	431a      	orrs	r2, r3
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004262:	061b      	lsls	r3, r3, #24
 8004264:	4933      	ldr	r1, [pc, #204]	; (8004334 <HAL_RCC_OscConfig+0x4d8>)
 8004266:	4313      	orrs	r3, r2
 8004268:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800426a:	4b33      	ldr	r3, [pc, #204]	; (8004338 <HAL_RCC_OscConfig+0x4dc>)
 800426c:	2201      	movs	r2, #1
 800426e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004270:	f7fe f82a 	bl	80022c8 <HAL_GetTick>
 8004274:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004276:	e008      	b.n	800428a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004278:	f7fe f826 	bl	80022c8 <HAL_GetTick>
 800427c:	4602      	mov	r2, r0
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	2b02      	cmp	r3, #2
 8004284:	d901      	bls.n	800428a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	e04d      	b.n	8004326 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800428a:	4b2a      	ldr	r3, [pc, #168]	; (8004334 <HAL_RCC_OscConfig+0x4d8>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d0f0      	beq.n	8004278 <HAL_RCC_OscConfig+0x41c>
 8004296:	e045      	b.n	8004324 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004298:	4b27      	ldr	r3, [pc, #156]	; (8004338 <HAL_RCC_OscConfig+0x4dc>)
 800429a:	2200      	movs	r2, #0
 800429c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800429e:	f7fe f813 	bl	80022c8 <HAL_GetTick>
 80042a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042a4:	e008      	b.n	80042b8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042a6:	f7fe f80f 	bl	80022c8 <HAL_GetTick>
 80042aa:	4602      	mov	r2, r0
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	2b02      	cmp	r3, #2
 80042b2:	d901      	bls.n	80042b8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80042b4:	2303      	movs	r3, #3
 80042b6:	e036      	b.n	8004326 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042b8:	4b1e      	ldr	r3, [pc, #120]	; (8004334 <HAL_RCC_OscConfig+0x4d8>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d1f0      	bne.n	80042a6 <HAL_RCC_OscConfig+0x44a>
 80042c4:	e02e      	b.n	8004324 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	699b      	ldr	r3, [r3, #24]
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d101      	bne.n	80042d2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e029      	b.n	8004326 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80042d2:	4b18      	ldr	r3, [pc, #96]	; (8004334 <HAL_RCC_OscConfig+0x4d8>)
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	69db      	ldr	r3, [r3, #28]
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d11c      	bne.n	8004320 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d115      	bne.n	8004320 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80042f4:	68fa      	ldr	r2, [r7, #12]
 80042f6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80042fa:	4013      	ands	r3, r2
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004300:	4293      	cmp	r3, r2
 8004302:	d10d      	bne.n	8004320 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800430e:	429a      	cmp	r2, r3
 8004310:	d106      	bne.n	8004320 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800431c:	429a      	cmp	r2, r3
 800431e:	d001      	beq.n	8004324 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e000      	b.n	8004326 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	3718      	adds	r7, #24
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	40007000 	.word	0x40007000
 8004334:	40023800 	.word	0x40023800
 8004338:	42470060 	.word	0x42470060

0800433c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d101      	bne.n	8004350 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e0cc      	b.n	80044ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004350:	4b68      	ldr	r3, [pc, #416]	; (80044f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 030f 	and.w	r3, r3, #15
 8004358:	683a      	ldr	r2, [r7, #0]
 800435a:	429a      	cmp	r2, r3
 800435c:	d90c      	bls.n	8004378 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800435e:	4b65      	ldr	r3, [pc, #404]	; (80044f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004360:	683a      	ldr	r2, [r7, #0]
 8004362:	b2d2      	uxtb	r2, r2
 8004364:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004366:	4b63      	ldr	r3, [pc, #396]	; (80044f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 030f 	and.w	r3, r3, #15
 800436e:	683a      	ldr	r2, [r7, #0]
 8004370:	429a      	cmp	r2, r3
 8004372:	d001      	beq.n	8004378 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	e0b8      	b.n	80044ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0302 	and.w	r3, r3, #2
 8004380:	2b00      	cmp	r3, #0
 8004382:	d020      	beq.n	80043c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0304 	and.w	r3, r3, #4
 800438c:	2b00      	cmp	r3, #0
 800438e:	d005      	beq.n	800439c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004390:	4b59      	ldr	r3, [pc, #356]	; (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	4a58      	ldr	r2, [pc, #352]	; (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004396:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800439a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0308 	and.w	r3, r3, #8
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d005      	beq.n	80043b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043a8:	4b53      	ldr	r3, [pc, #332]	; (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	4a52      	ldr	r2, [pc, #328]	; (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 80043ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80043b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043b4:	4b50      	ldr	r3, [pc, #320]	; (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	494d      	ldr	r1, [pc, #308]	; (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0301 	and.w	r3, r3, #1
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d044      	beq.n	800445c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d107      	bne.n	80043ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043da:	4b47      	ldr	r3, [pc, #284]	; (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d119      	bne.n	800441a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e07f      	b.n	80044ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	2b02      	cmp	r3, #2
 80043f0:	d003      	beq.n	80043fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043f6:	2b03      	cmp	r3, #3
 80043f8:	d107      	bne.n	800440a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043fa:	4b3f      	ldr	r3, [pc, #252]	; (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d109      	bne.n	800441a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e06f      	b.n	80044ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800440a:	4b3b      	ldr	r3, [pc, #236]	; (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 0302 	and.w	r3, r3, #2
 8004412:	2b00      	cmp	r3, #0
 8004414:	d101      	bne.n	800441a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e067      	b.n	80044ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800441a:	4b37      	ldr	r3, [pc, #220]	; (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	f023 0203 	bic.w	r2, r3, #3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	4934      	ldr	r1, [pc, #208]	; (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004428:	4313      	orrs	r3, r2
 800442a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800442c:	f7fd ff4c 	bl	80022c8 <HAL_GetTick>
 8004430:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004432:	e00a      	b.n	800444a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004434:	f7fd ff48 	bl	80022c8 <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004442:	4293      	cmp	r3, r2
 8004444:	d901      	bls.n	800444a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e04f      	b.n	80044ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800444a:	4b2b      	ldr	r3, [pc, #172]	; (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	f003 020c 	and.w	r2, r3, #12
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	429a      	cmp	r2, r3
 800445a:	d1eb      	bne.n	8004434 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800445c:	4b25      	ldr	r3, [pc, #148]	; (80044f4 <HAL_RCC_ClockConfig+0x1b8>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 030f 	and.w	r3, r3, #15
 8004464:	683a      	ldr	r2, [r7, #0]
 8004466:	429a      	cmp	r2, r3
 8004468:	d20c      	bcs.n	8004484 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800446a:	4b22      	ldr	r3, [pc, #136]	; (80044f4 <HAL_RCC_ClockConfig+0x1b8>)
 800446c:	683a      	ldr	r2, [r7, #0]
 800446e:	b2d2      	uxtb	r2, r2
 8004470:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004472:	4b20      	ldr	r3, [pc, #128]	; (80044f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 030f 	and.w	r3, r3, #15
 800447a:	683a      	ldr	r2, [r7, #0]
 800447c:	429a      	cmp	r2, r3
 800447e:	d001      	beq.n	8004484 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e032      	b.n	80044ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 0304 	and.w	r3, r3, #4
 800448c:	2b00      	cmp	r3, #0
 800448e:	d008      	beq.n	80044a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004490:	4b19      	ldr	r3, [pc, #100]	; (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	4916      	ldr	r1, [pc, #88]	; (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0308 	and.w	r3, r3, #8
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d009      	beq.n	80044c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044ae:	4b12      	ldr	r3, [pc, #72]	; (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	00db      	lsls	r3, r3, #3
 80044bc:	490e      	ldr	r1, [pc, #56]	; (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 80044be:	4313      	orrs	r3, r2
 80044c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80044c2:	f000 f821 	bl	8004508 <HAL_RCC_GetSysClockFreq>
 80044c6:	4601      	mov	r1, r0
 80044c8:	4b0b      	ldr	r3, [pc, #44]	; (80044f8 <HAL_RCC_ClockConfig+0x1bc>)
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	091b      	lsrs	r3, r3, #4
 80044ce:	f003 030f 	and.w	r3, r3, #15
 80044d2:	4a0a      	ldr	r2, [pc, #40]	; (80044fc <HAL_RCC_ClockConfig+0x1c0>)
 80044d4:	5cd3      	ldrb	r3, [r2, r3]
 80044d6:	fa21 f303 	lsr.w	r3, r1, r3
 80044da:	4a09      	ldr	r2, [pc, #36]	; (8004500 <HAL_RCC_ClockConfig+0x1c4>)
 80044dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80044de:	4b09      	ldr	r3, [pc, #36]	; (8004504 <HAL_RCC_ClockConfig+0x1c8>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4618      	mov	r0, r3
 80044e4:	f7fd fd46 	bl	8001f74 <HAL_InitTick>

  return HAL_OK;
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3710      	adds	r7, #16
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	40023c00 	.word	0x40023c00
 80044f8:	40023800 	.word	0x40023800
 80044fc:	0800abec 	.word	0x0800abec
 8004500:	20000004 	.word	0x20000004
 8004504:	20000008 	.word	0x20000008

08004508 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800450a:	b085      	sub	sp, #20
 800450c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800450e:	2300      	movs	r3, #0
 8004510:	607b      	str	r3, [r7, #4]
 8004512:	2300      	movs	r3, #0
 8004514:	60fb      	str	r3, [r7, #12]
 8004516:	2300      	movs	r3, #0
 8004518:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800451a:	2300      	movs	r3, #0
 800451c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800451e:	4b63      	ldr	r3, [pc, #396]	; (80046ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	f003 030c 	and.w	r3, r3, #12
 8004526:	2b04      	cmp	r3, #4
 8004528:	d007      	beq.n	800453a <HAL_RCC_GetSysClockFreq+0x32>
 800452a:	2b08      	cmp	r3, #8
 800452c:	d008      	beq.n	8004540 <HAL_RCC_GetSysClockFreq+0x38>
 800452e:	2b00      	cmp	r3, #0
 8004530:	f040 80b4 	bne.w	800469c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004534:	4b5e      	ldr	r3, [pc, #376]	; (80046b0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004536:	60bb      	str	r3, [r7, #8]
       break;
 8004538:	e0b3      	b.n	80046a2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800453a:	4b5e      	ldr	r3, [pc, #376]	; (80046b4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800453c:	60bb      	str	r3, [r7, #8]
      break;
 800453e:	e0b0      	b.n	80046a2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004540:	4b5a      	ldr	r3, [pc, #360]	; (80046ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004548:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800454a:	4b58      	ldr	r3, [pc, #352]	; (80046ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004552:	2b00      	cmp	r3, #0
 8004554:	d04a      	beq.n	80045ec <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004556:	4b55      	ldr	r3, [pc, #340]	; (80046ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	099b      	lsrs	r3, r3, #6
 800455c:	f04f 0400 	mov.w	r4, #0
 8004560:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004564:	f04f 0200 	mov.w	r2, #0
 8004568:	ea03 0501 	and.w	r5, r3, r1
 800456c:	ea04 0602 	and.w	r6, r4, r2
 8004570:	4629      	mov	r1, r5
 8004572:	4632      	mov	r2, r6
 8004574:	f04f 0300 	mov.w	r3, #0
 8004578:	f04f 0400 	mov.w	r4, #0
 800457c:	0154      	lsls	r4, r2, #5
 800457e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004582:	014b      	lsls	r3, r1, #5
 8004584:	4619      	mov	r1, r3
 8004586:	4622      	mov	r2, r4
 8004588:	1b49      	subs	r1, r1, r5
 800458a:	eb62 0206 	sbc.w	r2, r2, r6
 800458e:	f04f 0300 	mov.w	r3, #0
 8004592:	f04f 0400 	mov.w	r4, #0
 8004596:	0194      	lsls	r4, r2, #6
 8004598:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800459c:	018b      	lsls	r3, r1, #6
 800459e:	1a5b      	subs	r3, r3, r1
 80045a0:	eb64 0402 	sbc.w	r4, r4, r2
 80045a4:	f04f 0100 	mov.w	r1, #0
 80045a8:	f04f 0200 	mov.w	r2, #0
 80045ac:	00e2      	lsls	r2, r4, #3
 80045ae:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80045b2:	00d9      	lsls	r1, r3, #3
 80045b4:	460b      	mov	r3, r1
 80045b6:	4614      	mov	r4, r2
 80045b8:	195b      	adds	r3, r3, r5
 80045ba:	eb44 0406 	adc.w	r4, r4, r6
 80045be:	f04f 0100 	mov.w	r1, #0
 80045c2:	f04f 0200 	mov.w	r2, #0
 80045c6:	0262      	lsls	r2, r4, #9
 80045c8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80045cc:	0259      	lsls	r1, r3, #9
 80045ce:	460b      	mov	r3, r1
 80045d0:	4614      	mov	r4, r2
 80045d2:	4618      	mov	r0, r3
 80045d4:	4621      	mov	r1, r4
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f04f 0400 	mov.w	r4, #0
 80045dc:	461a      	mov	r2, r3
 80045de:	4623      	mov	r3, r4
 80045e0:	f7fb fe46 	bl	8000270 <__aeabi_uldivmod>
 80045e4:	4603      	mov	r3, r0
 80045e6:	460c      	mov	r4, r1
 80045e8:	60fb      	str	r3, [r7, #12]
 80045ea:	e049      	b.n	8004680 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045ec:	4b2f      	ldr	r3, [pc, #188]	; (80046ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	099b      	lsrs	r3, r3, #6
 80045f2:	f04f 0400 	mov.w	r4, #0
 80045f6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80045fa:	f04f 0200 	mov.w	r2, #0
 80045fe:	ea03 0501 	and.w	r5, r3, r1
 8004602:	ea04 0602 	and.w	r6, r4, r2
 8004606:	4629      	mov	r1, r5
 8004608:	4632      	mov	r2, r6
 800460a:	f04f 0300 	mov.w	r3, #0
 800460e:	f04f 0400 	mov.w	r4, #0
 8004612:	0154      	lsls	r4, r2, #5
 8004614:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004618:	014b      	lsls	r3, r1, #5
 800461a:	4619      	mov	r1, r3
 800461c:	4622      	mov	r2, r4
 800461e:	1b49      	subs	r1, r1, r5
 8004620:	eb62 0206 	sbc.w	r2, r2, r6
 8004624:	f04f 0300 	mov.w	r3, #0
 8004628:	f04f 0400 	mov.w	r4, #0
 800462c:	0194      	lsls	r4, r2, #6
 800462e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004632:	018b      	lsls	r3, r1, #6
 8004634:	1a5b      	subs	r3, r3, r1
 8004636:	eb64 0402 	sbc.w	r4, r4, r2
 800463a:	f04f 0100 	mov.w	r1, #0
 800463e:	f04f 0200 	mov.w	r2, #0
 8004642:	00e2      	lsls	r2, r4, #3
 8004644:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004648:	00d9      	lsls	r1, r3, #3
 800464a:	460b      	mov	r3, r1
 800464c:	4614      	mov	r4, r2
 800464e:	195b      	adds	r3, r3, r5
 8004650:	eb44 0406 	adc.w	r4, r4, r6
 8004654:	f04f 0100 	mov.w	r1, #0
 8004658:	f04f 0200 	mov.w	r2, #0
 800465c:	02a2      	lsls	r2, r4, #10
 800465e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004662:	0299      	lsls	r1, r3, #10
 8004664:	460b      	mov	r3, r1
 8004666:	4614      	mov	r4, r2
 8004668:	4618      	mov	r0, r3
 800466a:	4621      	mov	r1, r4
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f04f 0400 	mov.w	r4, #0
 8004672:	461a      	mov	r2, r3
 8004674:	4623      	mov	r3, r4
 8004676:	f7fb fdfb 	bl	8000270 <__aeabi_uldivmod>
 800467a:	4603      	mov	r3, r0
 800467c:	460c      	mov	r4, r1
 800467e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004680:	4b0a      	ldr	r3, [pc, #40]	; (80046ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	0c1b      	lsrs	r3, r3, #16
 8004686:	f003 0303 	and.w	r3, r3, #3
 800468a:	3301      	adds	r3, #1
 800468c:	005b      	lsls	r3, r3, #1
 800468e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004690:	68fa      	ldr	r2, [r7, #12]
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	fbb2 f3f3 	udiv	r3, r2, r3
 8004698:	60bb      	str	r3, [r7, #8]
      break;
 800469a:	e002      	b.n	80046a2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800469c:	4b04      	ldr	r3, [pc, #16]	; (80046b0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800469e:	60bb      	str	r3, [r7, #8]
      break;
 80046a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046a2:	68bb      	ldr	r3, [r7, #8]
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3714      	adds	r7, #20
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046ac:	40023800 	.word	0x40023800
 80046b0:	00f42400 	.word	0x00f42400
 80046b4:	007a1200 	.word	0x007a1200

080046b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046b8:	b480      	push	{r7}
 80046ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046bc:	4b03      	ldr	r3, [pc, #12]	; (80046cc <HAL_RCC_GetHCLKFreq+0x14>)
 80046be:	681b      	ldr	r3, [r3, #0]
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr
 80046ca:	bf00      	nop
 80046cc:	20000004 	.word	0x20000004

080046d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80046d4:	f7ff fff0 	bl	80046b8 <HAL_RCC_GetHCLKFreq>
 80046d8:	4601      	mov	r1, r0
 80046da:	4b05      	ldr	r3, [pc, #20]	; (80046f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	0a9b      	lsrs	r3, r3, #10
 80046e0:	f003 0307 	and.w	r3, r3, #7
 80046e4:	4a03      	ldr	r2, [pc, #12]	; (80046f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046e6:	5cd3      	ldrb	r3, [r2, r3]
 80046e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	40023800 	.word	0x40023800
 80046f4:	0800abfc 	.word	0x0800abfc

080046f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80046fc:	f7ff ffdc 	bl	80046b8 <HAL_RCC_GetHCLKFreq>
 8004700:	4601      	mov	r1, r0
 8004702:	4b05      	ldr	r3, [pc, #20]	; (8004718 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	0b5b      	lsrs	r3, r3, #13
 8004708:	f003 0307 	and.w	r3, r3, #7
 800470c:	4a03      	ldr	r2, [pc, #12]	; (800471c <HAL_RCC_GetPCLK2Freq+0x24>)
 800470e:	5cd3      	ldrb	r3, [r2, r3]
 8004710:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004714:	4618      	mov	r0, r3
 8004716:	bd80      	pop	{r7, pc}
 8004718:	40023800 	.word	0x40023800
 800471c:	0800abfc 	.word	0x0800abfc

08004720 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004720:	b480      	push	{r7}
 8004722:	b083      	sub	sp, #12
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	220f      	movs	r2, #15
 800472e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004730:	4b12      	ldr	r3, [pc, #72]	; (800477c <HAL_RCC_GetClockConfig+0x5c>)
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	f003 0203 	and.w	r2, r3, #3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800473c:	4b0f      	ldr	r3, [pc, #60]	; (800477c <HAL_RCC_GetClockConfig+0x5c>)
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004748:	4b0c      	ldr	r3, [pc, #48]	; (800477c <HAL_RCC_GetClockConfig+0x5c>)
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004754:	4b09      	ldr	r3, [pc, #36]	; (800477c <HAL_RCC_GetClockConfig+0x5c>)
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	08db      	lsrs	r3, r3, #3
 800475a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004762:	4b07      	ldr	r3, [pc, #28]	; (8004780 <HAL_RCC_GetClockConfig+0x60>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 020f 	and.w	r2, r3, #15
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	601a      	str	r2, [r3, #0]
}
 800476e:	bf00      	nop
 8004770:	370c      	adds	r7, #12
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop
 800477c:	40023800 	.word	0x40023800
 8004780:	40023c00 	.word	0x40023c00

08004784 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b082      	sub	sp, #8
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d101      	bne.n	8004796 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e056      	b.n	8004844 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d106      	bne.n	80047b6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f7fd f935 	bl	8001a20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2202      	movs	r2, #2
 80047ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047cc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	685a      	ldr	r2, [r3, #4]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	431a      	orrs	r2, r3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	431a      	orrs	r2, r3
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	691b      	ldr	r3, [r3, #16]
 80047e2:	431a      	orrs	r2, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	695b      	ldr	r3, [r3, #20]
 80047e8:	431a      	orrs	r2, r3
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	699b      	ldr	r3, [r3, #24]
 80047ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047f2:	431a      	orrs	r2, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	69db      	ldr	r3, [r3, #28]
 80047f8:	431a      	orrs	r2, r3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a1b      	ldr	r3, [r3, #32]
 80047fe:	ea42 0103 	orr.w	r1, r2, r3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	430a      	orrs	r2, r1
 800480c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	699b      	ldr	r3, [r3, #24]
 8004812:	0c1b      	lsrs	r3, r3, #16
 8004814:	f003 0104 	and.w	r1, r3, #4
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	430a      	orrs	r2, r1
 8004822:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	69da      	ldr	r2, [r3, #28]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004832:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2201      	movs	r2, #1
 800483e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004842:	2300      	movs	r3, #0
}
 8004844:	4618      	mov	r0, r3
 8004846:	3708      	adds	r7, #8
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}

0800484c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b082      	sub	sp, #8
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d101      	bne.n	800485e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e01d      	b.n	800489a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004864:	b2db      	uxtb	r3, r3
 8004866:	2b00      	cmp	r3, #0
 8004868:	d106      	bne.n	8004878 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2200      	movs	r2, #0
 800486e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f7fd f98a 	bl	8001b8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2202      	movs	r2, #2
 800487c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	3304      	adds	r3, #4
 8004888:	4619      	mov	r1, r3
 800488a:	4610      	mov	r0, r2
 800488c:	f000 fb9c 	bl	8004fc8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	3708      	adds	r7, #8
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}

080048a2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80048a2:	b480      	push	{r7}
 80048a4:	b085      	sub	sp, #20
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	68da      	ldr	r2, [r3, #12]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f042 0201 	orr.w	r2, r2, #1
 80048b8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	f003 0307 	and.w	r3, r3, #7
 80048c4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2b06      	cmp	r3, #6
 80048ca:	d007      	beq.n	80048dc <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f042 0201 	orr.w	r2, r2, #1
 80048da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3714      	adds	r7, #20
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr

080048ea <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80048ea:	b580      	push	{r7, lr}
 80048ec:	b082      	sub	sp, #8
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d101      	bne.n	80048fc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e01d      	b.n	8004938 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004902:	b2db      	uxtb	r3, r3
 8004904:	2b00      	cmp	r3, #0
 8004906:	d106      	bne.n	8004916 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f7fd f95b 	bl	8001bcc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2202      	movs	r2, #2
 800491a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	3304      	adds	r3, #4
 8004926:	4619      	mov	r1, r3
 8004928:	4610      	mov	r0, r2
 800492a:	f000 fb4d 	bl	8004fc8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2201      	movs	r2, #1
 8004932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004936:	2300      	movs	r3, #0
}
 8004938:	4618      	mov	r0, r3
 800493a:	3708      	adds	r7, #8
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}

08004940 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	2201      	movs	r2, #1
 8004950:	6839      	ldr	r1, [r7, #0]
 8004952:	4618      	mov	r0, r3
 8004954:	f000 fe22 	bl	800559c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a15      	ldr	r2, [pc, #84]	; (80049b4 <HAL_TIM_PWM_Start+0x74>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d004      	beq.n	800496c <HAL_TIM_PWM_Start+0x2c>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a14      	ldr	r2, [pc, #80]	; (80049b8 <HAL_TIM_PWM_Start+0x78>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d101      	bne.n	8004970 <HAL_TIM_PWM_Start+0x30>
 800496c:	2301      	movs	r3, #1
 800496e:	e000      	b.n	8004972 <HAL_TIM_PWM_Start+0x32>
 8004970:	2300      	movs	r3, #0
 8004972:	2b00      	cmp	r3, #0
 8004974:	d007      	beq.n	8004986 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004984:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	f003 0307 	and.w	r3, r3, #7
 8004990:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2b06      	cmp	r3, #6
 8004996:	d007      	beq.n	80049a8 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f042 0201 	orr.w	r2, r2, #1
 80049a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049a8:	2300      	movs	r3, #0
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3710      	adds	r7, #16
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop
 80049b4:	40010000 	.word	0x40010000
 80049b8:	40010400 	.word	0x40010400

080049bc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b082      	sub	sp, #8
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	2200      	movs	r2, #0
 80049cc:	6839      	ldr	r1, [r7, #0]
 80049ce:	4618      	mov	r0, r3
 80049d0:	f000 fde4 	bl	800559c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a22      	ldr	r2, [pc, #136]	; (8004a64 <HAL_TIM_PWM_Stop+0xa8>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d004      	beq.n	80049e8 <HAL_TIM_PWM_Stop+0x2c>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a21      	ldr	r2, [pc, #132]	; (8004a68 <HAL_TIM_PWM_Stop+0xac>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d101      	bne.n	80049ec <HAL_TIM_PWM_Stop+0x30>
 80049e8:	2301      	movs	r3, #1
 80049ea:	e000      	b.n	80049ee <HAL_TIM_PWM_Stop+0x32>
 80049ec:	2300      	movs	r3, #0
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d017      	beq.n	8004a22 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	6a1a      	ldr	r2, [r3, #32]
 80049f8:	f241 1311 	movw	r3, #4369	; 0x1111
 80049fc:	4013      	ands	r3, r2
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d10f      	bne.n	8004a22 <HAL_TIM_PWM_Stop+0x66>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	6a1a      	ldr	r2, [r3, #32]
 8004a08:	f240 4344 	movw	r3, #1092	; 0x444
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d107      	bne.n	8004a22 <HAL_TIM_PWM_Stop+0x66>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a20:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	6a1a      	ldr	r2, [r3, #32]
 8004a28:	f241 1311 	movw	r3, #4369	; 0x1111
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d10f      	bne.n	8004a52 <HAL_TIM_PWM_Stop+0x96>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	6a1a      	ldr	r2, [r3, #32]
 8004a38:	f240 4344 	movw	r3, #1092	; 0x444
 8004a3c:	4013      	ands	r3, r2
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d107      	bne.n	8004a52 <HAL_TIM_PWM_Stop+0x96>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f022 0201 	bic.w	r2, r2, #1
 8004a50:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2201      	movs	r2, #1
 8004a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004a5a:	2300      	movs	r3, #0
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3708      	adds	r7, #8
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	40010000 	.word	0x40010000
 8004a68:	40010400 	.word	0x40010400

08004a6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b082      	sub	sp, #8
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	691b      	ldr	r3, [r3, #16]
 8004a7a:	f003 0302 	and.w	r3, r3, #2
 8004a7e:	2b02      	cmp	r3, #2
 8004a80:	d122      	bne.n	8004ac8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	f003 0302 	and.w	r3, r3, #2
 8004a8c:	2b02      	cmp	r3, #2
 8004a8e:	d11b      	bne.n	8004ac8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f06f 0202 	mvn.w	r2, #2
 8004a98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	699b      	ldr	r3, [r3, #24]
 8004aa6:	f003 0303 	and.w	r3, r3, #3
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d003      	beq.n	8004ab6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f000 fa6b 	bl	8004f8a <HAL_TIM_IC_CaptureCallback>
 8004ab4:	e005      	b.n	8004ac2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f000 fa5d 	bl	8004f76 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f000 fa6e 	bl	8004f9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	691b      	ldr	r3, [r3, #16]
 8004ace:	f003 0304 	and.w	r3, r3, #4
 8004ad2:	2b04      	cmp	r3, #4
 8004ad4:	d122      	bne.n	8004b1c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	f003 0304 	and.w	r3, r3, #4
 8004ae0:	2b04      	cmp	r3, #4
 8004ae2:	d11b      	bne.n	8004b1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f06f 0204 	mvn.w	r2, #4
 8004aec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2202      	movs	r2, #2
 8004af2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	699b      	ldr	r3, [r3, #24]
 8004afa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d003      	beq.n	8004b0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 fa41 	bl	8004f8a <HAL_TIM_IC_CaptureCallback>
 8004b08:	e005      	b.n	8004b16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f000 fa33 	bl	8004f76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f000 fa44 	bl	8004f9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	691b      	ldr	r3, [r3, #16]
 8004b22:	f003 0308 	and.w	r3, r3, #8
 8004b26:	2b08      	cmp	r3, #8
 8004b28:	d122      	bne.n	8004b70 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	f003 0308 	and.w	r3, r3, #8
 8004b34:	2b08      	cmp	r3, #8
 8004b36:	d11b      	bne.n	8004b70 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f06f 0208 	mvn.w	r2, #8
 8004b40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2204      	movs	r2, #4
 8004b46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	69db      	ldr	r3, [r3, #28]
 8004b4e:	f003 0303 	and.w	r3, r3, #3
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d003      	beq.n	8004b5e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f000 fa17 	bl	8004f8a <HAL_TIM_IC_CaptureCallback>
 8004b5c:	e005      	b.n	8004b6a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f000 fa09 	bl	8004f76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f000 fa1a 	bl	8004f9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	691b      	ldr	r3, [r3, #16]
 8004b76:	f003 0310 	and.w	r3, r3, #16
 8004b7a:	2b10      	cmp	r3, #16
 8004b7c:	d122      	bne.n	8004bc4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	f003 0310 	and.w	r3, r3, #16
 8004b88:	2b10      	cmp	r3, #16
 8004b8a:	d11b      	bne.n	8004bc4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f06f 0210 	mvn.w	r2, #16
 8004b94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2208      	movs	r2, #8
 8004b9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	69db      	ldr	r3, [r3, #28]
 8004ba2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d003      	beq.n	8004bb2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f000 f9ed 	bl	8004f8a <HAL_TIM_IC_CaptureCallback>
 8004bb0:	e005      	b.n	8004bbe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f000 f9df 	bl	8004f76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f000 f9f0 	bl	8004f9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	f003 0301 	and.w	r3, r3, #1
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d10e      	bne.n	8004bf0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	f003 0301 	and.w	r3, r3, #1
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d107      	bne.n	8004bf0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f06f 0201 	mvn.w	r2, #1
 8004be8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f7fc fe36 	bl	800185c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	691b      	ldr	r3, [r3, #16]
 8004bf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bfa:	2b80      	cmp	r3, #128	; 0x80
 8004bfc:	d10e      	bne.n	8004c1c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c08:	2b80      	cmp	r3, #128	; 0x80
 8004c0a:	d107      	bne.n	8004c1c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f000 fd6c 	bl	80056f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c26:	2b40      	cmp	r3, #64	; 0x40
 8004c28:	d10e      	bne.n	8004c48 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c34:	2b40      	cmp	r3, #64	; 0x40
 8004c36:	d107      	bne.n	8004c48 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 f9b5 	bl	8004fb2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	691b      	ldr	r3, [r3, #16]
 8004c4e:	f003 0320 	and.w	r3, r3, #32
 8004c52:	2b20      	cmp	r3, #32
 8004c54:	d10e      	bne.n	8004c74 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	f003 0320 	and.w	r3, r3, #32
 8004c60:	2b20      	cmp	r3, #32
 8004c62:	d107      	bne.n	8004c74 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f06f 0220 	mvn.w	r2, #32
 8004c6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 fd36 	bl	80056e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c74:	bf00      	nop
 8004c76:	3708      	adds	r7, #8
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}

08004c7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	60b9      	str	r1, [r7, #8]
 8004c86:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d101      	bne.n	8004c96 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004c92:	2302      	movs	r3, #2
 8004c94:	e0b4      	b.n	8004e00 <HAL_TIM_PWM_ConfigChannel+0x184>
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2202      	movs	r2, #2
 8004ca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2b0c      	cmp	r3, #12
 8004caa:	f200 809f 	bhi.w	8004dec <HAL_TIM_PWM_ConfigChannel+0x170>
 8004cae:	a201      	add	r2, pc, #4	; (adr r2, 8004cb4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb4:	08004ce9 	.word	0x08004ce9
 8004cb8:	08004ded 	.word	0x08004ded
 8004cbc:	08004ded 	.word	0x08004ded
 8004cc0:	08004ded 	.word	0x08004ded
 8004cc4:	08004d29 	.word	0x08004d29
 8004cc8:	08004ded 	.word	0x08004ded
 8004ccc:	08004ded 	.word	0x08004ded
 8004cd0:	08004ded 	.word	0x08004ded
 8004cd4:	08004d6b 	.word	0x08004d6b
 8004cd8:	08004ded 	.word	0x08004ded
 8004cdc:	08004ded 	.word	0x08004ded
 8004ce0:	08004ded 	.word	0x08004ded
 8004ce4:	08004dab 	.word	0x08004dab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	68b9      	ldr	r1, [r7, #8]
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f000 fa0a 	bl	8005108 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	699a      	ldr	r2, [r3, #24]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f042 0208 	orr.w	r2, r2, #8
 8004d02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	699a      	ldr	r2, [r3, #24]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f022 0204 	bic.w	r2, r2, #4
 8004d12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	6999      	ldr	r1, [r3, #24]
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	691a      	ldr	r2, [r3, #16]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	430a      	orrs	r2, r1
 8004d24:	619a      	str	r2, [r3, #24]
      break;
 8004d26:	e062      	b.n	8004dee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	68b9      	ldr	r1, [r7, #8]
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f000 fa5a 	bl	80051e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	699a      	ldr	r2, [r3, #24]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	699a      	ldr	r2, [r3, #24]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	6999      	ldr	r1, [r3, #24]
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	021a      	lsls	r2, r3, #8
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	430a      	orrs	r2, r1
 8004d66:	619a      	str	r2, [r3, #24]
      break;
 8004d68:	e041      	b.n	8004dee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	68b9      	ldr	r1, [r7, #8]
 8004d70:	4618      	mov	r0, r3
 8004d72:	f000 faaf 	bl	80052d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	69da      	ldr	r2, [r3, #28]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f042 0208 	orr.w	r2, r2, #8
 8004d84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	69da      	ldr	r2, [r3, #28]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f022 0204 	bic.w	r2, r2, #4
 8004d94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	69d9      	ldr	r1, [r3, #28]
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	691a      	ldr	r2, [r3, #16]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	430a      	orrs	r2, r1
 8004da6:	61da      	str	r2, [r3, #28]
      break;
 8004da8:	e021      	b.n	8004dee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	68b9      	ldr	r1, [r7, #8]
 8004db0:	4618      	mov	r0, r3
 8004db2:	f000 fb03 	bl	80053bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	69da      	ldr	r2, [r3, #28]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004dc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	69da      	ldr	r2, [r3, #28]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	69d9      	ldr	r1, [r3, #28]
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	691b      	ldr	r3, [r3, #16]
 8004de0:	021a      	lsls	r2, r3, #8
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	430a      	orrs	r2, r1
 8004de8:	61da      	str	r2, [r3, #28]
      break;
 8004dea:	e000      	b.n	8004dee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8004dec:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2201      	movs	r2, #1
 8004df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004dfe:	2300      	movs	r3, #0
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3710      	adds	r7, #16
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}

08004e08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b084      	sub	sp, #16
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d101      	bne.n	8004e20 <HAL_TIM_ConfigClockSource+0x18>
 8004e1c:	2302      	movs	r3, #2
 8004e1e:	e0a6      	b.n	8004f6e <HAL_TIM_ConfigClockSource+0x166>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2202      	movs	r2, #2
 8004e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004e3e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e46:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	68fa      	ldr	r2, [r7, #12]
 8004e4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	2b40      	cmp	r3, #64	; 0x40
 8004e56:	d067      	beq.n	8004f28 <HAL_TIM_ConfigClockSource+0x120>
 8004e58:	2b40      	cmp	r3, #64	; 0x40
 8004e5a:	d80b      	bhi.n	8004e74 <HAL_TIM_ConfigClockSource+0x6c>
 8004e5c:	2b10      	cmp	r3, #16
 8004e5e:	d073      	beq.n	8004f48 <HAL_TIM_ConfigClockSource+0x140>
 8004e60:	2b10      	cmp	r3, #16
 8004e62:	d802      	bhi.n	8004e6a <HAL_TIM_ConfigClockSource+0x62>
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d06f      	beq.n	8004f48 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004e68:	e078      	b.n	8004f5c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004e6a:	2b20      	cmp	r3, #32
 8004e6c:	d06c      	beq.n	8004f48 <HAL_TIM_ConfigClockSource+0x140>
 8004e6e:	2b30      	cmp	r3, #48	; 0x30
 8004e70:	d06a      	beq.n	8004f48 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004e72:	e073      	b.n	8004f5c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004e74:	2b70      	cmp	r3, #112	; 0x70
 8004e76:	d00d      	beq.n	8004e94 <HAL_TIM_ConfigClockSource+0x8c>
 8004e78:	2b70      	cmp	r3, #112	; 0x70
 8004e7a:	d804      	bhi.n	8004e86 <HAL_TIM_ConfigClockSource+0x7e>
 8004e7c:	2b50      	cmp	r3, #80	; 0x50
 8004e7e:	d033      	beq.n	8004ee8 <HAL_TIM_ConfigClockSource+0xe0>
 8004e80:	2b60      	cmp	r3, #96	; 0x60
 8004e82:	d041      	beq.n	8004f08 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004e84:	e06a      	b.n	8004f5c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004e86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e8a:	d066      	beq.n	8004f5a <HAL_TIM_ConfigClockSource+0x152>
 8004e8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e90:	d017      	beq.n	8004ec2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004e92:	e063      	b.n	8004f5c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6818      	ldr	r0, [r3, #0]
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	6899      	ldr	r1, [r3, #8]
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	685a      	ldr	r2, [r3, #4]
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	f000 fb5a 	bl	800555c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004eb6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	68fa      	ldr	r2, [r7, #12]
 8004ebe:	609a      	str	r2, [r3, #8]
      break;
 8004ec0:	e04c      	b.n	8004f5c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6818      	ldr	r0, [r3, #0]
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	6899      	ldr	r1, [r3, #8]
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	685a      	ldr	r2, [r3, #4]
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	f000 fb43 	bl	800555c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	689a      	ldr	r2, [r3, #8]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ee4:	609a      	str	r2, [r3, #8]
      break;
 8004ee6:	e039      	b.n	8004f5c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6818      	ldr	r0, [r3, #0]
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	6859      	ldr	r1, [r3, #4]
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	461a      	mov	r2, r3
 8004ef6:	f000 fab7 	bl	8005468 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	2150      	movs	r1, #80	; 0x50
 8004f00:	4618      	mov	r0, r3
 8004f02:	f000 fb10 	bl	8005526 <TIM_ITRx_SetConfig>
      break;
 8004f06:	e029      	b.n	8004f5c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6818      	ldr	r0, [r3, #0]
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	6859      	ldr	r1, [r3, #4]
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	461a      	mov	r2, r3
 8004f16:	f000 fad6 	bl	80054c6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	2160      	movs	r1, #96	; 0x60
 8004f20:	4618      	mov	r0, r3
 8004f22:	f000 fb00 	bl	8005526 <TIM_ITRx_SetConfig>
      break;
 8004f26:	e019      	b.n	8004f5c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6818      	ldr	r0, [r3, #0]
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	6859      	ldr	r1, [r3, #4]
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	461a      	mov	r2, r3
 8004f36:	f000 fa97 	bl	8005468 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	2140      	movs	r1, #64	; 0x40
 8004f40:	4618      	mov	r0, r3
 8004f42:	f000 faf0 	bl	8005526 <TIM_ITRx_SetConfig>
      break;
 8004f46:	e009      	b.n	8004f5c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4619      	mov	r1, r3
 8004f52:	4610      	mov	r0, r2
 8004f54:	f000 fae7 	bl	8005526 <TIM_ITRx_SetConfig>
      break;
 8004f58:	e000      	b.n	8004f5c <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004f5a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3710      	adds	r7, #16
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}

08004f76 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f76:	b480      	push	{r7}
 8004f78:	b083      	sub	sp, #12
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f7e:	bf00      	nop
 8004f80:	370c      	adds	r7, #12
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr

08004f8a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f8a:	b480      	push	{r7}
 8004f8c:	b083      	sub	sp, #12
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f92:	bf00      	nop
 8004f94:	370c      	adds	r7, #12
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr

08004f9e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f9e:	b480      	push	{r7}
 8004fa0:	b083      	sub	sp, #12
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004fa6:	bf00      	nop
 8004fa8:	370c      	adds	r7, #12
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr

08004fb2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004fb2:	b480      	push	{r7}
 8004fb4:	b083      	sub	sp, #12
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004fba:	bf00      	nop
 8004fbc:	370c      	adds	r7, #12
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr
	...

08004fc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b085      	sub	sp, #20
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	4a40      	ldr	r2, [pc, #256]	; (80050dc <TIM_Base_SetConfig+0x114>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d013      	beq.n	8005008 <TIM_Base_SetConfig+0x40>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fe6:	d00f      	beq.n	8005008 <TIM_Base_SetConfig+0x40>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4a3d      	ldr	r2, [pc, #244]	; (80050e0 <TIM_Base_SetConfig+0x118>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d00b      	beq.n	8005008 <TIM_Base_SetConfig+0x40>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	4a3c      	ldr	r2, [pc, #240]	; (80050e4 <TIM_Base_SetConfig+0x11c>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d007      	beq.n	8005008 <TIM_Base_SetConfig+0x40>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	4a3b      	ldr	r2, [pc, #236]	; (80050e8 <TIM_Base_SetConfig+0x120>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d003      	beq.n	8005008 <TIM_Base_SetConfig+0x40>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	4a3a      	ldr	r2, [pc, #232]	; (80050ec <TIM_Base_SetConfig+0x124>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d108      	bne.n	800501a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800500e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	68fa      	ldr	r2, [r7, #12]
 8005016:	4313      	orrs	r3, r2
 8005018:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4a2f      	ldr	r2, [pc, #188]	; (80050dc <TIM_Base_SetConfig+0x114>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d02b      	beq.n	800507a <TIM_Base_SetConfig+0xb2>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005028:	d027      	beq.n	800507a <TIM_Base_SetConfig+0xb2>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a2c      	ldr	r2, [pc, #176]	; (80050e0 <TIM_Base_SetConfig+0x118>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d023      	beq.n	800507a <TIM_Base_SetConfig+0xb2>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a2b      	ldr	r2, [pc, #172]	; (80050e4 <TIM_Base_SetConfig+0x11c>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d01f      	beq.n	800507a <TIM_Base_SetConfig+0xb2>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4a2a      	ldr	r2, [pc, #168]	; (80050e8 <TIM_Base_SetConfig+0x120>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d01b      	beq.n	800507a <TIM_Base_SetConfig+0xb2>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4a29      	ldr	r2, [pc, #164]	; (80050ec <TIM_Base_SetConfig+0x124>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d017      	beq.n	800507a <TIM_Base_SetConfig+0xb2>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4a28      	ldr	r2, [pc, #160]	; (80050f0 <TIM_Base_SetConfig+0x128>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d013      	beq.n	800507a <TIM_Base_SetConfig+0xb2>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4a27      	ldr	r2, [pc, #156]	; (80050f4 <TIM_Base_SetConfig+0x12c>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d00f      	beq.n	800507a <TIM_Base_SetConfig+0xb2>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	4a26      	ldr	r2, [pc, #152]	; (80050f8 <TIM_Base_SetConfig+0x130>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d00b      	beq.n	800507a <TIM_Base_SetConfig+0xb2>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	4a25      	ldr	r2, [pc, #148]	; (80050fc <TIM_Base_SetConfig+0x134>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d007      	beq.n	800507a <TIM_Base_SetConfig+0xb2>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	4a24      	ldr	r2, [pc, #144]	; (8005100 <TIM_Base_SetConfig+0x138>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d003      	beq.n	800507a <TIM_Base_SetConfig+0xb2>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	4a23      	ldr	r2, [pc, #140]	; (8005104 <TIM_Base_SetConfig+0x13c>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d108      	bne.n	800508c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005080:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	68fa      	ldr	r2, [r7, #12]
 8005088:	4313      	orrs	r3, r2
 800508a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	695b      	ldr	r3, [r3, #20]
 8005096:	4313      	orrs	r3, r2
 8005098:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	68fa      	ldr	r2, [r7, #12]
 800509e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	689a      	ldr	r2, [r3, #8]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	4a0a      	ldr	r2, [pc, #40]	; (80050dc <TIM_Base_SetConfig+0x114>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d003      	beq.n	80050c0 <TIM_Base_SetConfig+0xf8>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	4a0c      	ldr	r2, [pc, #48]	; (80050ec <TIM_Base_SetConfig+0x124>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d103      	bne.n	80050c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	691a      	ldr	r2, [r3, #16]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	615a      	str	r2, [r3, #20]
}
 80050ce:	bf00      	nop
 80050d0:	3714      	adds	r7, #20
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr
 80050da:	bf00      	nop
 80050dc:	40010000 	.word	0x40010000
 80050e0:	40000400 	.word	0x40000400
 80050e4:	40000800 	.word	0x40000800
 80050e8:	40000c00 	.word	0x40000c00
 80050ec:	40010400 	.word	0x40010400
 80050f0:	40014000 	.word	0x40014000
 80050f4:	40014400 	.word	0x40014400
 80050f8:	40014800 	.word	0x40014800
 80050fc:	40001800 	.word	0x40001800
 8005100:	40001c00 	.word	0x40001c00
 8005104:	40002000 	.word	0x40002000

08005108 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005108:	b480      	push	{r7}
 800510a:	b087      	sub	sp, #28
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6a1b      	ldr	r3, [r3, #32]
 8005116:	f023 0201 	bic.w	r2, r3, #1
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a1b      	ldr	r3, [r3, #32]
 8005122:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	699b      	ldr	r3, [r3, #24]
 800512e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005136:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f023 0303 	bic.w	r3, r3, #3
 800513e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	68fa      	ldr	r2, [r7, #12]
 8005146:	4313      	orrs	r3, r2
 8005148:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	f023 0302 	bic.w	r3, r3, #2
 8005150:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	697a      	ldr	r2, [r7, #20]
 8005158:	4313      	orrs	r3, r2
 800515a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	4a20      	ldr	r2, [pc, #128]	; (80051e0 <TIM_OC1_SetConfig+0xd8>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d003      	beq.n	800516c <TIM_OC1_SetConfig+0x64>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	4a1f      	ldr	r2, [pc, #124]	; (80051e4 <TIM_OC1_SetConfig+0xdc>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d10c      	bne.n	8005186 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	f023 0308 	bic.w	r3, r3, #8
 8005172:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	697a      	ldr	r2, [r7, #20]
 800517a:	4313      	orrs	r3, r2
 800517c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	f023 0304 	bic.w	r3, r3, #4
 8005184:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a15      	ldr	r2, [pc, #84]	; (80051e0 <TIM_OC1_SetConfig+0xd8>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d003      	beq.n	8005196 <TIM_OC1_SetConfig+0x8e>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4a14      	ldr	r2, [pc, #80]	; (80051e4 <TIM_OC1_SetConfig+0xdc>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d111      	bne.n	80051ba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800519c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	695b      	ldr	r3, [r3, #20]
 80051aa:	693a      	ldr	r2, [r7, #16]
 80051ac:	4313      	orrs	r3, r2
 80051ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	699b      	ldr	r3, [r3, #24]
 80051b4:	693a      	ldr	r2, [r7, #16]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	693a      	ldr	r2, [r7, #16]
 80051be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	68fa      	ldr	r2, [r7, #12]
 80051c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	685a      	ldr	r2, [r3, #4]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	697a      	ldr	r2, [r7, #20]
 80051d2:	621a      	str	r2, [r3, #32]
}
 80051d4:	bf00      	nop
 80051d6:	371c      	adds	r7, #28
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr
 80051e0:	40010000 	.word	0x40010000
 80051e4:	40010400 	.word	0x40010400

080051e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b087      	sub	sp, #28
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a1b      	ldr	r3, [r3, #32]
 80051f6:	f023 0210 	bic.w	r2, r3, #16
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a1b      	ldr	r3, [r3, #32]
 8005202:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	699b      	ldr	r3, [r3, #24]
 800520e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005216:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800521e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	021b      	lsls	r3, r3, #8
 8005226:	68fa      	ldr	r2, [r7, #12]
 8005228:	4313      	orrs	r3, r2
 800522a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	f023 0320 	bic.w	r3, r3, #32
 8005232:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	011b      	lsls	r3, r3, #4
 800523a:	697a      	ldr	r2, [r7, #20]
 800523c:	4313      	orrs	r3, r2
 800523e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	4a22      	ldr	r2, [pc, #136]	; (80052cc <TIM_OC2_SetConfig+0xe4>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d003      	beq.n	8005250 <TIM_OC2_SetConfig+0x68>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	4a21      	ldr	r2, [pc, #132]	; (80052d0 <TIM_OC2_SetConfig+0xe8>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d10d      	bne.n	800526c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005256:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	011b      	lsls	r3, r3, #4
 800525e:	697a      	ldr	r2, [r7, #20]
 8005260:	4313      	orrs	r3, r2
 8005262:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800526a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	4a17      	ldr	r2, [pc, #92]	; (80052cc <TIM_OC2_SetConfig+0xe4>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d003      	beq.n	800527c <TIM_OC2_SetConfig+0x94>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	4a16      	ldr	r2, [pc, #88]	; (80052d0 <TIM_OC2_SetConfig+0xe8>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d113      	bne.n	80052a4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005282:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800528a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	695b      	ldr	r3, [r3, #20]
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	693a      	ldr	r2, [r7, #16]
 8005294:	4313      	orrs	r3, r2
 8005296:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	699b      	ldr	r3, [r3, #24]
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	693a      	ldr	r2, [r7, #16]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	693a      	ldr	r2, [r7, #16]
 80052a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	68fa      	ldr	r2, [r7, #12]
 80052ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	685a      	ldr	r2, [r3, #4]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	697a      	ldr	r2, [r7, #20]
 80052bc:	621a      	str	r2, [r3, #32]
}
 80052be:	bf00      	nop
 80052c0:	371c      	adds	r7, #28
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr
 80052ca:	bf00      	nop
 80052cc:	40010000 	.word	0x40010000
 80052d0:	40010400 	.word	0x40010400

080052d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b087      	sub	sp, #28
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6a1b      	ldr	r3, [r3, #32]
 80052e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a1b      	ldr	r3, [r3, #32]
 80052ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	69db      	ldr	r3, [r3, #28]
 80052fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005302:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f023 0303 	bic.w	r3, r3, #3
 800530a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	68fa      	ldr	r2, [r7, #12]
 8005312:	4313      	orrs	r3, r2
 8005314:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800531c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	021b      	lsls	r3, r3, #8
 8005324:	697a      	ldr	r2, [r7, #20]
 8005326:	4313      	orrs	r3, r2
 8005328:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4a21      	ldr	r2, [pc, #132]	; (80053b4 <TIM_OC3_SetConfig+0xe0>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d003      	beq.n	800533a <TIM_OC3_SetConfig+0x66>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	4a20      	ldr	r2, [pc, #128]	; (80053b8 <TIM_OC3_SetConfig+0xe4>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d10d      	bne.n	8005356 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005340:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	021b      	lsls	r3, r3, #8
 8005348:	697a      	ldr	r2, [r7, #20]
 800534a:	4313      	orrs	r3, r2
 800534c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005354:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a16      	ldr	r2, [pc, #88]	; (80053b4 <TIM_OC3_SetConfig+0xe0>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d003      	beq.n	8005366 <TIM_OC3_SetConfig+0x92>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4a15      	ldr	r2, [pc, #84]	; (80053b8 <TIM_OC3_SetConfig+0xe4>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d113      	bne.n	800538e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800536c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005374:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	695b      	ldr	r3, [r3, #20]
 800537a:	011b      	lsls	r3, r3, #4
 800537c:	693a      	ldr	r2, [r7, #16]
 800537e:	4313      	orrs	r3, r2
 8005380:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	699b      	ldr	r3, [r3, #24]
 8005386:	011b      	lsls	r3, r3, #4
 8005388:	693a      	ldr	r2, [r7, #16]
 800538a:	4313      	orrs	r3, r2
 800538c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	693a      	ldr	r2, [r7, #16]
 8005392:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	68fa      	ldr	r2, [r7, #12]
 8005398:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	685a      	ldr	r2, [r3, #4]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	697a      	ldr	r2, [r7, #20]
 80053a6:	621a      	str	r2, [r3, #32]
}
 80053a8:	bf00      	nop
 80053aa:	371c      	adds	r7, #28
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr
 80053b4:	40010000 	.word	0x40010000
 80053b8:	40010400 	.word	0x40010400

080053bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053bc:	b480      	push	{r7}
 80053be:	b087      	sub	sp, #28
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6a1b      	ldr	r3, [r3, #32]
 80053ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6a1b      	ldr	r3, [r3, #32]
 80053d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	69db      	ldr	r3, [r3, #28]
 80053e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	021b      	lsls	r3, r3, #8
 80053fa:	68fa      	ldr	r2, [r7, #12]
 80053fc:	4313      	orrs	r3, r2
 80053fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005406:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	031b      	lsls	r3, r3, #12
 800540e:	693a      	ldr	r2, [r7, #16]
 8005410:	4313      	orrs	r3, r2
 8005412:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	4a12      	ldr	r2, [pc, #72]	; (8005460 <TIM_OC4_SetConfig+0xa4>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d003      	beq.n	8005424 <TIM_OC4_SetConfig+0x68>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	4a11      	ldr	r2, [pc, #68]	; (8005464 <TIM_OC4_SetConfig+0xa8>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d109      	bne.n	8005438 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800542a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	695b      	ldr	r3, [r3, #20]
 8005430:	019b      	lsls	r3, r3, #6
 8005432:	697a      	ldr	r2, [r7, #20]
 8005434:	4313      	orrs	r3, r2
 8005436:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	697a      	ldr	r2, [r7, #20]
 800543c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	68fa      	ldr	r2, [r7, #12]
 8005442:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	685a      	ldr	r2, [r3, #4]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	693a      	ldr	r2, [r7, #16]
 8005450:	621a      	str	r2, [r3, #32]
}
 8005452:	bf00      	nop
 8005454:	371c      	adds	r7, #28
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr
 800545e:	bf00      	nop
 8005460:	40010000 	.word	0x40010000
 8005464:	40010400 	.word	0x40010400

08005468 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005468:	b480      	push	{r7}
 800546a:	b087      	sub	sp, #28
 800546c:	af00      	add	r7, sp, #0
 800546e:	60f8      	str	r0, [r7, #12]
 8005470:	60b9      	str	r1, [r7, #8]
 8005472:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	6a1b      	ldr	r3, [r3, #32]
 8005478:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6a1b      	ldr	r3, [r3, #32]
 800547e:	f023 0201 	bic.w	r2, r3, #1
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	699b      	ldr	r3, [r3, #24]
 800548a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005492:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	011b      	lsls	r3, r3, #4
 8005498:	693a      	ldr	r2, [r7, #16]
 800549a:	4313      	orrs	r3, r2
 800549c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	f023 030a 	bic.w	r3, r3, #10
 80054a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80054a6:	697a      	ldr	r2, [r7, #20]
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	693a      	ldr	r2, [r7, #16]
 80054b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	697a      	ldr	r2, [r7, #20]
 80054b8:	621a      	str	r2, [r3, #32]
}
 80054ba:	bf00      	nop
 80054bc:	371c      	adds	r7, #28
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr

080054c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054c6:	b480      	push	{r7}
 80054c8:	b087      	sub	sp, #28
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	60f8      	str	r0, [r7, #12]
 80054ce:	60b9      	str	r1, [r7, #8]
 80054d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	6a1b      	ldr	r3, [r3, #32]
 80054d6:	f023 0210 	bic.w	r2, r3, #16
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	699b      	ldr	r3, [r3, #24]
 80054e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6a1b      	ldr	r3, [r3, #32]
 80054e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80054f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	031b      	lsls	r3, r3, #12
 80054f6:	697a      	ldr	r2, [r7, #20]
 80054f8:	4313      	orrs	r3, r2
 80054fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005502:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	011b      	lsls	r3, r3, #4
 8005508:	693a      	ldr	r2, [r7, #16]
 800550a:	4313      	orrs	r3, r2
 800550c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	697a      	ldr	r2, [r7, #20]
 8005512:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	693a      	ldr	r2, [r7, #16]
 8005518:	621a      	str	r2, [r3, #32]
}
 800551a:	bf00      	nop
 800551c:	371c      	adds	r7, #28
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr

08005526 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005526:	b480      	push	{r7}
 8005528:	b085      	sub	sp, #20
 800552a:	af00      	add	r7, sp, #0
 800552c:	6078      	str	r0, [r7, #4]
 800552e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800553c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800553e:	683a      	ldr	r2, [r7, #0]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	4313      	orrs	r3, r2
 8005544:	f043 0307 	orr.w	r3, r3, #7
 8005548:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	68fa      	ldr	r2, [r7, #12]
 800554e:	609a      	str	r2, [r3, #8]
}
 8005550:	bf00      	nop
 8005552:	3714      	adds	r7, #20
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr

0800555c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800555c:	b480      	push	{r7}
 800555e:	b087      	sub	sp, #28
 8005560:	af00      	add	r7, sp, #0
 8005562:	60f8      	str	r0, [r7, #12]
 8005564:	60b9      	str	r1, [r7, #8]
 8005566:	607a      	str	r2, [r7, #4]
 8005568:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	689b      	ldr	r3, [r3, #8]
 800556e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005576:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	021a      	lsls	r2, r3, #8
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	431a      	orrs	r2, r3
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	4313      	orrs	r3, r2
 8005584:	697a      	ldr	r2, [r7, #20]
 8005586:	4313      	orrs	r3, r2
 8005588:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	697a      	ldr	r2, [r7, #20]
 800558e:	609a      	str	r2, [r3, #8]
}
 8005590:	bf00      	nop
 8005592:	371c      	adds	r7, #28
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr

0800559c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800559c:	b480      	push	{r7}
 800559e:	b087      	sub	sp, #28
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	60f8      	str	r0, [r7, #12]
 80055a4:	60b9      	str	r1, [r7, #8]
 80055a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	f003 031f 	and.w	r3, r3, #31
 80055ae:	2201      	movs	r2, #1
 80055b0:	fa02 f303 	lsl.w	r3, r2, r3
 80055b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	6a1a      	ldr	r2, [r3, #32]
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	43db      	mvns	r3, r3
 80055be:	401a      	ands	r2, r3
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	6a1a      	ldr	r2, [r3, #32]
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	f003 031f 	and.w	r3, r3, #31
 80055ce:	6879      	ldr	r1, [r7, #4]
 80055d0:	fa01 f303 	lsl.w	r3, r1, r3
 80055d4:	431a      	orrs	r2, r3
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	621a      	str	r2, [r3, #32]
}
 80055da:	bf00      	nop
 80055dc:	371c      	adds	r7, #28
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr
	...

080055e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b085      	sub	sp, #20
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d101      	bne.n	8005600 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055fc:	2302      	movs	r3, #2
 80055fe:	e05a      	b.n	80056b6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2202      	movs	r2, #2
 800560c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005626:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	68fa      	ldr	r2, [r7, #12]
 800562e:	4313      	orrs	r3, r2
 8005630:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	68fa      	ldr	r2, [r7, #12]
 8005638:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a21      	ldr	r2, [pc, #132]	; (80056c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d022      	beq.n	800568a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800564c:	d01d      	beq.n	800568a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a1d      	ldr	r2, [pc, #116]	; (80056c8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d018      	beq.n	800568a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a1b      	ldr	r2, [pc, #108]	; (80056cc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d013      	beq.n	800568a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a1a      	ldr	r2, [pc, #104]	; (80056d0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d00e      	beq.n	800568a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a18      	ldr	r2, [pc, #96]	; (80056d4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d009      	beq.n	800568a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a17      	ldr	r2, [pc, #92]	; (80056d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d004      	beq.n	800568a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a15      	ldr	r2, [pc, #84]	; (80056dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d10c      	bne.n	80056a4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005690:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	68ba      	ldr	r2, [r7, #8]
 8005698:	4313      	orrs	r3, r2
 800569a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	68ba      	ldr	r2, [r7, #8]
 80056a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2200      	movs	r2, #0
 80056b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056b4:	2300      	movs	r3, #0
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3714      	adds	r7, #20
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr
 80056c2:	bf00      	nop
 80056c4:	40010000 	.word	0x40010000
 80056c8:	40000400 	.word	0x40000400
 80056cc:	40000800 	.word	0x40000800
 80056d0:	40000c00 	.word	0x40000c00
 80056d4:	40010400 	.word	0x40010400
 80056d8:	40014000 	.word	0x40014000
 80056dc:	40001800 	.word	0x40001800

080056e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b083      	sub	sp, #12
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056e8:	bf00      	nop
 80056ea:	370c      	adds	r7, #12
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b083      	sub	sp, #12
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80056fc:	bf00      	nop
 80056fe:	370c      	adds	r7, #12
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr

08005708 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b082      	sub	sp, #8
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d101      	bne.n	800571a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	e03f      	b.n	800579a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005720:	b2db      	uxtb	r3, r3
 8005722:	2b00      	cmp	r3, #0
 8005724:	d106      	bne.n	8005734 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f7fc face 	bl	8001cd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2224      	movs	r2, #36	; 0x24
 8005738:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	68da      	ldr	r2, [r3, #12]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800574a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f000 fb97 	bl	8005e80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	691a      	ldr	r2, [r3, #16]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005760:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	695a      	ldr	r2, [r3, #20]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005770:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	68da      	ldr	r2, [r3, #12]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005780:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2200      	movs	r2, #0
 8005786:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2220      	movs	r2, #32
 800578c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2220      	movs	r2, #32
 8005794:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005798:	2300      	movs	r3, #0
}
 800579a:	4618      	mov	r0, r3
 800579c:	3708      	adds	r7, #8
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}

080057a2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057a2:	b580      	push	{r7, lr}
 80057a4:	b088      	sub	sp, #32
 80057a6:	af02      	add	r7, sp, #8
 80057a8:	60f8      	str	r0, [r7, #12]
 80057aa:	60b9      	str	r1, [r7, #8]
 80057ac:	603b      	str	r3, [r7, #0]
 80057ae:	4613      	mov	r3, r2
 80057b0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80057b2:	2300      	movs	r3, #0
 80057b4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	2b20      	cmp	r3, #32
 80057c0:	f040 8083 	bne.w	80058ca <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d002      	beq.n	80057d0 <HAL_UART_Transmit+0x2e>
 80057ca:	88fb      	ldrh	r3, [r7, #6]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d101      	bne.n	80057d4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80057d0:	2301      	movs	r3, #1
 80057d2:	e07b      	b.n	80058cc <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d101      	bne.n	80057e2 <HAL_UART_Transmit+0x40>
 80057de:	2302      	movs	r3, #2
 80057e0:	e074      	b.n	80058cc <HAL_UART_Transmit+0x12a>
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2201      	movs	r2, #1
 80057e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2200      	movs	r2, #0
 80057ee:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2221      	movs	r2, #33	; 0x21
 80057f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80057f8:	f7fc fd66 	bl	80022c8 <HAL_GetTick>
 80057fc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	88fa      	ldrh	r2, [r7, #6]
 8005802:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	88fa      	ldrh	r2, [r7, #6]
 8005808:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2200      	movs	r2, #0
 800580e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005812:	e042      	b.n	800589a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005818:	b29b      	uxth	r3, r3
 800581a:	3b01      	subs	r3, #1
 800581c:	b29a      	uxth	r2, r3
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800582a:	d122      	bne.n	8005872 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	9300      	str	r3, [sp, #0]
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	2200      	movs	r2, #0
 8005834:	2180      	movs	r1, #128	; 0x80
 8005836:	68f8      	ldr	r0, [r7, #12]
 8005838:	f000 f9b6 	bl	8005ba8 <UART_WaitOnFlagUntilTimeout>
 800583c:	4603      	mov	r3, r0
 800583e:	2b00      	cmp	r3, #0
 8005840:	d001      	beq.n	8005846 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8005842:	2303      	movs	r3, #3
 8005844:	e042      	b.n	80058cc <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	881b      	ldrh	r3, [r3, #0]
 800584e:	461a      	mov	r2, r3
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005858:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	691b      	ldr	r3, [r3, #16]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d103      	bne.n	800586a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	3302      	adds	r3, #2
 8005866:	60bb      	str	r3, [r7, #8]
 8005868:	e017      	b.n	800589a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	3301      	adds	r3, #1
 800586e:	60bb      	str	r3, [r7, #8]
 8005870:	e013      	b.n	800589a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	9300      	str	r3, [sp, #0]
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	2200      	movs	r2, #0
 800587a:	2180      	movs	r1, #128	; 0x80
 800587c:	68f8      	ldr	r0, [r7, #12]
 800587e:	f000 f993 	bl	8005ba8 <UART_WaitOnFlagUntilTimeout>
 8005882:	4603      	mov	r3, r0
 8005884:	2b00      	cmp	r3, #0
 8005886:	d001      	beq.n	800588c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8005888:	2303      	movs	r3, #3
 800588a:	e01f      	b.n	80058cc <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	1c5a      	adds	r2, r3, #1
 8005890:	60ba      	str	r2, [r7, #8]
 8005892:	781a      	ldrb	r2, [r3, #0]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800589e:	b29b      	uxth	r3, r3
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d1b7      	bne.n	8005814 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	9300      	str	r3, [sp, #0]
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	2200      	movs	r2, #0
 80058ac:	2140      	movs	r1, #64	; 0x40
 80058ae:	68f8      	ldr	r0, [r7, #12]
 80058b0:	f000 f97a 	bl	8005ba8 <UART_WaitOnFlagUntilTimeout>
 80058b4:	4603      	mov	r3, r0
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d001      	beq.n	80058be <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80058ba:	2303      	movs	r3, #3
 80058bc:	e006      	b.n	80058cc <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2220      	movs	r2, #32
 80058c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80058c6:	2300      	movs	r3, #0
 80058c8:	e000      	b.n	80058cc <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80058ca:	2302      	movs	r3, #2
  }
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3718      	adds	r7, #24
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}

080058d4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b085      	sub	sp, #20
 80058d8:	af00      	add	r7, sp, #0
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	60b9      	str	r1, [r7, #8]
 80058de:	4613      	mov	r3, r2
 80058e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	2b20      	cmp	r3, #32
 80058ec:	d140      	bne.n	8005970 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d002      	beq.n	80058fa <HAL_UART_Receive_IT+0x26>
 80058f4:	88fb      	ldrh	r3, [r7, #6]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d101      	bne.n	80058fe <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	e039      	b.n	8005972 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005904:	2b01      	cmp	r3, #1
 8005906:	d101      	bne.n	800590c <HAL_UART_Receive_IT+0x38>
 8005908:	2302      	movs	r3, #2
 800590a:	e032      	b.n	8005972 <HAL_UART_Receive_IT+0x9e>
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	68ba      	ldr	r2, [r7, #8]
 8005918:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	88fa      	ldrh	r2, [r7, #6]
 800591e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	88fa      	ldrh	r2, [r7, #6]
 8005924:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2200      	movs	r2, #0
 800592a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2222      	movs	r2, #34	; 0x22
 8005930:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2200      	movs	r2, #0
 8005938:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	68da      	ldr	r2, [r3, #12]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800594a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	695a      	ldr	r2, [r3, #20]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f042 0201 	orr.w	r2, r2, #1
 800595a:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	68da      	ldr	r2, [r3, #12]
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f042 0220 	orr.w	r2, r2, #32
 800596a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800596c:	2300      	movs	r3, #0
 800596e:	e000      	b.n	8005972 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005970:	2302      	movs	r3, #2
  }
}
 8005972:	4618      	mov	r0, r3
 8005974:	3714      	adds	r7, #20
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr
	...

08005980 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b088      	sub	sp, #32
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	695b      	ldr	r3, [r3, #20]
 800599e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80059a0:	2300      	movs	r3, #0
 80059a2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80059a4:	2300      	movs	r3, #0
 80059a6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80059a8:	69fb      	ldr	r3, [r7, #28]
 80059aa:	f003 030f 	and.w	r3, r3, #15
 80059ae:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d10d      	bne.n	80059d2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80059b6:	69fb      	ldr	r3, [r7, #28]
 80059b8:	f003 0320 	and.w	r3, r3, #32
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d008      	beq.n	80059d2 <HAL_UART_IRQHandler+0x52>
 80059c0:	69bb      	ldr	r3, [r7, #24]
 80059c2:	f003 0320 	and.w	r3, r3, #32
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d003      	beq.n	80059d2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f000 f9d6 	bl	8005d7c <UART_Receive_IT>
      return;
 80059d0:	e0d1      	b.n	8005b76 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	f000 80b0 	beq.w	8005b3a <HAL_UART_IRQHandler+0x1ba>
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	f003 0301 	and.w	r3, r3, #1
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d105      	bne.n	80059f0 <HAL_UART_IRQHandler+0x70>
 80059e4:	69bb      	ldr	r3, [r7, #24]
 80059e6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	f000 80a5 	beq.w	8005b3a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80059f0:	69fb      	ldr	r3, [r7, #28]
 80059f2:	f003 0301 	and.w	r3, r3, #1
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d00a      	beq.n	8005a10 <HAL_UART_IRQHandler+0x90>
 80059fa:	69bb      	ldr	r3, [r7, #24]
 80059fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d005      	beq.n	8005a10 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a08:	f043 0201 	orr.w	r2, r3, #1
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	f003 0304 	and.w	r3, r3, #4
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d00a      	beq.n	8005a30 <HAL_UART_IRQHandler+0xb0>
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	f003 0301 	and.w	r3, r3, #1
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d005      	beq.n	8005a30 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a28:	f043 0202 	orr.w	r2, r3, #2
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a30:	69fb      	ldr	r3, [r7, #28]
 8005a32:	f003 0302 	and.w	r3, r3, #2
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d00a      	beq.n	8005a50 <HAL_UART_IRQHandler+0xd0>
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	f003 0301 	and.w	r3, r3, #1
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d005      	beq.n	8005a50 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a48:	f043 0204 	orr.w	r2, r3, #4
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005a50:	69fb      	ldr	r3, [r7, #28]
 8005a52:	f003 0308 	and.w	r3, r3, #8
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d00f      	beq.n	8005a7a <HAL_UART_IRQHandler+0xfa>
 8005a5a:	69bb      	ldr	r3, [r7, #24]
 8005a5c:	f003 0320 	and.w	r3, r3, #32
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d104      	bne.n	8005a6e <HAL_UART_IRQHandler+0xee>
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	f003 0301 	and.w	r3, r3, #1
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d005      	beq.n	8005a7a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a72:	f043 0208 	orr.w	r2, r3, #8
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d078      	beq.n	8005b74 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	f003 0320 	and.w	r3, r3, #32
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d007      	beq.n	8005a9c <HAL_UART_IRQHandler+0x11c>
 8005a8c:	69bb      	ldr	r3, [r7, #24]
 8005a8e:	f003 0320 	and.w	r3, r3, #32
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d002      	beq.n	8005a9c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f000 f970 	bl	8005d7c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	695b      	ldr	r3, [r3, #20]
 8005aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aa6:	2b40      	cmp	r3, #64	; 0x40
 8005aa8:	bf0c      	ite	eq
 8005aaa:	2301      	moveq	r3, #1
 8005aac:	2300      	movne	r3, #0
 8005aae:	b2db      	uxtb	r3, r3
 8005ab0:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ab6:	f003 0308 	and.w	r3, r3, #8
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d102      	bne.n	8005ac4 <HAL_UART_IRQHandler+0x144>
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d031      	beq.n	8005b28 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f000 f8b9 	bl	8005c3c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	695b      	ldr	r3, [r3, #20]
 8005ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ad4:	2b40      	cmp	r3, #64	; 0x40
 8005ad6:	d123      	bne.n	8005b20 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	695a      	ldr	r2, [r3, #20]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ae6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d013      	beq.n	8005b18 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005af4:	4a21      	ldr	r2, [pc, #132]	; (8005b7c <HAL_UART_IRQHandler+0x1fc>)
 8005af6:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005afc:	4618      	mov	r0, r3
 8005afe:	f7fc ff55 	bl	80029ac <HAL_DMA_Abort_IT>
 8005b02:	4603      	mov	r3, r0
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d016      	beq.n	8005b36 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b0e:	687a      	ldr	r2, [r7, #4]
 8005b10:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005b12:	4610      	mov	r0, r2
 8005b14:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b16:	e00e      	b.n	8005b36 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f000 f83b 	bl	8005b94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b1e:	e00a      	b.n	8005b36 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f000 f837 	bl	8005b94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b26:	e006      	b.n	8005b36 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f000 f833 	bl	8005b94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005b34:	e01e      	b.n	8005b74 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b36:	bf00      	nop
    return;
 8005b38:	e01c      	b.n	8005b74 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005b3a:	69fb      	ldr	r3, [r7, #28]
 8005b3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d008      	beq.n	8005b56 <HAL_UART_IRQHandler+0x1d6>
 8005b44:	69bb      	ldr	r3, [r7, #24]
 8005b46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d003      	beq.n	8005b56 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f000 f8a6 	bl	8005ca0 <UART_Transmit_IT>
    return;
 8005b54:	e00f      	b.n	8005b76 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005b56:	69fb      	ldr	r3, [r7, #28]
 8005b58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d00a      	beq.n	8005b76 <HAL_UART_IRQHandler+0x1f6>
 8005b60:	69bb      	ldr	r3, [r7, #24]
 8005b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d005      	beq.n	8005b76 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f000 f8ee 	bl	8005d4c <UART_EndTransmit_IT>
    return;
 8005b70:	bf00      	nop
 8005b72:	e000      	b.n	8005b76 <HAL_UART_IRQHandler+0x1f6>
    return;
 8005b74:	bf00      	nop
  }
}
 8005b76:	3720      	adds	r7, #32
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}
 8005b7c:	08005c79 	.word	0x08005c79

08005b80 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b083      	sub	sp, #12
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005b88:	bf00      	nop
 8005b8a:	370c      	adds	r7, #12
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr

08005b94 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b083      	sub	sp, #12
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005b9c:	bf00      	nop
 8005b9e:	370c      	adds	r7, #12
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr

08005ba8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b084      	sub	sp, #16
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	60f8      	str	r0, [r7, #12]
 8005bb0:	60b9      	str	r1, [r7, #8]
 8005bb2:	603b      	str	r3, [r7, #0]
 8005bb4:	4613      	mov	r3, r2
 8005bb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bb8:	e02c      	b.n	8005c14 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bba:	69bb      	ldr	r3, [r7, #24]
 8005bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bc0:	d028      	beq.n	8005c14 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005bc2:	69bb      	ldr	r3, [r7, #24]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d007      	beq.n	8005bd8 <UART_WaitOnFlagUntilTimeout+0x30>
 8005bc8:	f7fc fb7e 	bl	80022c8 <HAL_GetTick>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	1ad3      	subs	r3, r2, r3
 8005bd2:	69ba      	ldr	r2, [r7, #24]
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d21d      	bcs.n	8005c14 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	68da      	ldr	r2, [r3, #12]
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005be6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	695a      	ldr	r2, [r3, #20]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f022 0201 	bic.w	r2, r2, #1
 8005bf6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2220      	movs	r2, #32
 8005bfc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2220      	movs	r2, #32
 8005c04:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005c10:	2303      	movs	r3, #3
 8005c12:	e00f      	b.n	8005c34 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	4013      	ands	r3, r2
 8005c1e:	68ba      	ldr	r2, [r7, #8]
 8005c20:	429a      	cmp	r2, r3
 8005c22:	bf0c      	ite	eq
 8005c24:	2301      	moveq	r3, #1
 8005c26:	2300      	movne	r3, #0
 8005c28:	b2db      	uxtb	r3, r3
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	79fb      	ldrb	r3, [r7, #7]
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	d0c3      	beq.n	8005bba <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005c32:	2300      	movs	r3, #0
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3710      	adds	r7, #16
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}

08005c3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b083      	sub	sp, #12
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	68da      	ldr	r2, [r3, #12]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005c52:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	695a      	ldr	r2, [r3, #20]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f022 0201 	bic.w	r2, r2, #1
 8005c62:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2220      	movs	r2, #32
 8005c68:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005c6c:	bf00      	nop
 8005c6e:	370c      	adds	r7, #12
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr

08005c78 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b084      	sub	sp, #16
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c84:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c92:	68f8      	ldr	r0, [r7, #12]
 8005c94:	f7ff ff7e 	bl	8005b94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c98:	bf00      	nop
 8005c9a:	3710      	adds	r7, #16
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}

08005ca0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b085      	sub	sp, #20
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005cae:	b2db      	uxtb	r3, r3
 8005cb0:	2b21      	cmp	r3, #33	; 0x21
 8005cb2:	d144      	bne.n	8005d3e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cbc:	d11a      	bne.n	8005cf4 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6a1b      	ldr	r3, [r3, #32]
 8005cc2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	881b      	ldrh	r3, [r3, #0]
 8005cc8:	461a      	mov	r2, r3
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005cd2:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	691b      	ldr	r3, [r3, #16]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d105      	bne.n	8005ce8 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6a1b      	ldr	r3, [r3, #32]
 8005ce0:	1c9a      	adds	r2, r3, #2
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	621a      	str	r2, [r3, #32]
 8005ce6:	e00e      	b.n	8005d06 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6a1b      	ldr	r3, [r3, #32]
 8005cec:	1c5a      	adds	r2, r3, #1
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	621a      	str	r2, [r3, #32]
 8005cf2:	e008      	b.n	8005d06 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6a1b      	ldr	r3, [r3, #32]
 8005cf8:	1c59      	adds	r1, r3, #1
 8005cfa:	687a      	ldr	r2, [r7, #4]
 8005cfc:	6211      	str	r1, [r2, #32]
 8005cfe:	781a      	ldrb	r2, [r3, #0]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	3b01      	subs	r3, #1
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	4619      	mov	r1, r3
 8005d14:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d10f      	bne.n	8005d3a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	68da      	ldr	r2, [r3, #12]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d28:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	68da      	ldr	r2, [r3, #12]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d38:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	e000      	b.n	8005d40 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005d3e:	2302      	movs	r3, #2
  }
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3714      	adds	r7, #20
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr

08005d4c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b082      	sub	sp, #8
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	68da      	ldr	r2, [r3, #12]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d62:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2220      	movs	r2, #32
 8005d68:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f7ff ff07 	bl	8005b80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005d72:	2300      	movs	r3, #0
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3708      	adds	r7, #8
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}

08005d7c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b084      	sub	sp, #16
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005d8a:	b2db      	uxtb	r3, r3
 8005d8c:	2b22      	cmp	r3, #34	; 0x22
 8005d8e:	d171      	bne.n	8005e74 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d98:	d123      	bne.n	8005de2 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d9e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	691b      	ldr	r3, [r3, #16]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d10e      	bne.n	8005dc6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005db4:	b29a      	uxth	r2, r3
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dbe:	1c9a      	adds	r2, r3, #2
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	629a      	str	r2, [r3, #40]	; 0x28
 8005dc4:	e029      	b.n	8005e1a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	b29a      	uxth	r2, r3
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dda:	1c5a      	adds	r2, r3, #1
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	629a      	str	r2, [r3, #40]	; 0x28
 8005de0:	e01b      	b.n	8005e1a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	691b      	ldr	r3, [r3, #16]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d10a      	bne.n	8005e00 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	6858      	ldr	r0, [r3, #4]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005df4:	1c59      	adds	r1, r3, #1
 8005df6:	687a      	ldr	r2, [r7, #4]
 8005df8:	6291      	str	r1, [r2, #40]	; 0x28
 8005dfa:	b2c2      	uxtb	r2, r0
 8005dfc:	701a      	strb	r2, [r3, #0]
 8005dfe:	e00c      	b.n	8005e1a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	b2da      	uxtb	r2, r3
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e0c:	1c58      	adds	r0, r3, #1
 8005e0e:	6879      	ldr	r1, [r7, #4]
 8005e10:	6288      	str	r0, [r1, #40]	; 0x28
 8005e12:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005e16:	b2d2      	uxtb	r2, r2
 8005e18:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	3b01      	subs	r3, #1
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	687a      	ldr	r2, [r7, #4]
 8005e26:	4619      	mov	r1, r3
 8005e28:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d120      	bne.n	8005e70 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	68da      	ldr	r2, [r3, #12]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f022 0220 	bic.w	r2, r2, #32
 8005e3c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	68da      	ldr	r2, [r3, #12]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e4c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	695a      	ldr	r2, [r3, #20]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f022 0201 	bic.w	r2, r2, #1
 8005e5c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2220      	movs	r2, #32
 8005e62:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f7fb fc5c 	bl	8001724 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	e002      	b.n	8005e76 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005e70:	2300      	movs	r3, #0
 8005e72:	e000      	b.n	8005e76 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005e74:	2302      	movs	r3, #2
  }
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3710      	adds	r7, #16
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}
	...

08005e80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e84:	b085      	sub	sp, #20
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	691b      	ldr	r3, [r3, #16]
 8005e90:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	68da      	ldr	r2, [r3, #12]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	430a      	orrs	r2, r1
 8005e9e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	689a      	ldr	r2, [r3, #8]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	691b      	ldr	r3, [r3, #16]
 8005ea8:	431a      	orrs	r2, r3
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	695b      	ldr	r3, [r3, #20]
 8005eae:	431a      	orrs	r2, r3
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	69db      	ldr	r3, [r3, #28]
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	68db      	ldr	r3, [r3, #12]
 8005ebe:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005ec2:	f023 030c 	bic.w	r3, r3, #12
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	6812      	ldr	r2, [r2, #0]
 8005eca:	68f9      	ldr	r1, [r7, #12]
 8005ecc:	430b      	orrs	r3, r1
 8005ece:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	695b      	ldr	r3, [r3, #20]
 8005ed6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	699a      	ldr	r2, [r3, #24]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	430a      	orrs	r2, r1
 8005ee4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	69db      	ldr	r3, [r3, #28]
 8005eea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005eee:	f040 818b 	bne.w	8006208 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4ac1      	ldr	r2, [pc, #772]	; (80061fc <UART_SetConfig+0x37c>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d005      	beq.n	8005f08 <UART_SetConfig+0x88>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4abf      	ldr	r2, [pc, #764]	; (8006200 <UART_SetConfig+0x380>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	f040 80bd 	bne.w	8006082 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005f08:	f7fe fbf6 	bl	80046f8 <HAL_RCC_GetPCLK2Freq>
 8005f0c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	461d      	mov	r5, r3
 8005f12:	f04f 0600 	mov.w	r6, #0
 8005f16:	46a8      	mov	r8, r5
 8005f18:	46b1      	mov	r9, r6
 8005f1a:	eb18 0308 	adds.w	r3, r8, r8
 8005f1e:	eb49 0409 	adc.w	r4, r9, r9
 8005f22:	4698      	mov	r8, r3
 8005f24:	46a1      	mov	r9, r4
 8005f26:	eb18 0805 	adds.w	r8, r8, r5
 8005f2a:	eb49 0906 	adc.w	r9, r9, r6
 8005f2e:	f04f 0100 	mov.w	r1, #0
 8005f32:	f04f 0200 	mov.w	r2, #0
 8005f36:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005f3a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005f3e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005f42:	4688      	mov	r8, r1
 8005f44:	4691      	mov	r9, r2
 8005f46:	eb18 0005 	adds.w	r0, r8, r5
 8005f4a:	eb49 0106 	adc.w	r1, r9, r6
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	461d      	mov	r5, r3
 8005f54:	f04f 0600 	mov.w	r6, #0
 8005f58:	196b      	adds	r3, r5, r5
 8005f5a:	eb46 0406 	adc.w	r4, r6, r6
 8005f5e:	461a      	mov	r2, r3
 8005f60:	4623      	mov	r3, r4
 8005f62:	f7fa f985 	bl	8000270 <__aeabi_uldivmod>
 8005f66:	4603      	mov	r3, r0
 8005f68:	460c      	mov	r4, r1
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	4ba5      	ldr	r3, [pc, #660]	; (8006204 <UART_SetConfig+0x384>)
 8005f6e:	fba3 2302 	umull	r2, r3, r3, r2
 8005f72:	095b      	lsrs	r3, r3, #5
 8005f74:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	461d      	mov	r5, r3
 8005f7c:	f04f 0600 	mov.w	r6, #0
 8005f80:	46a9      	mov	r9, r5
 8005f82:	46b2      	mov	sl, r6
 8005f84:	eb19 0309 	adds.w	r3, r9, r9
 8005f88:	eb4a 040a 	adc.w	r4, sl, sl
 8005f8c:	4699      	mov	r9, r3
 8005f8e:	46a2      	mov	sl, r4
 8005f90:	eb19 0905 	adds.w	r9, r9, r5
 8005f94:	eb4a 0a06 	adc.w	sl, sl, r6
 8005f98:	f04f 0100 	mov.w	r1, #0
 8005f9c:	f04f 0200 	mov.w	r2, #0
 8005fa0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005fa4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005fa8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005fac:	4689      	mov	r9, r1
 8005fae:	4692      	mov	sl, r2
 8005fb0:	eb19 0005 	adds.w	r0, r9, r5
 8005fb4:	eb4a 0106 	adc.w	r1, sl, r6
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	461d      	mov	r5, r3
 8005fbe:	f04f 0600 	mov.w	r6, #0
 8005fc2:	196b      	adds	r3, r5, r5
 8005fc4:	eb46 0406 	adc.w	r4, r6, r6
 8005fc8:	461a      	mov	r2, r3
 8005fca:	4623      	mov	r3, r4
 8005fcc:	f7fa f950 	bl	8000270 <__aeabi_uldivmod>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	460c      	mov	r4, r1
 8005fd4:	461a      	mov	r2, r3
 8005fd6:	4b8b      	ldr	r3, [pc, #556]	; (8006204 <UART_SetConfig+0x384>)
 8005fd8:	fba3 1302 	umull	r1, r3, r3, r2
 8005fdc:	095b      	lsrs	r3, r3, #5
 8005fde:	2164      	movs	r1, #100	; 0x64
 8005fe0:	fb01 f303 	mul.w	r3, r1, r3
 8005fe4:	1ad3      	subs	r3, r2, r3
 8005fe6:	00db      	lsls	r3, r3, #3
 8005fe8:	3332      	adds	r3, #50	; 0x32
 8005fea:	4a86      	ldr	r2, [pc, #536]	; (8006204 <UART_SetConfig+0x384>)
 8005fec:	fba2 2303 	umull	r2, r3, r2, r3
 8005ff0:	095b      	lsrs	r3, r3, #5
 8005ff2:	005b      	lsls	r3, r3, #1
 8005ff4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005ff8:	4498      	add	r8, r3
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	461d      	mov	r5, r3
 8005ffe:	f04f 0600 	mov.w	r6, #0
 8006002:	46a9      	mov	r9, r5
 8006004:	46b2      	mov	sl, r6
 8006006:	eb19 0309 	adds.w	r3, r9, r9
 800600a:	eb4a 040a 	adc.w	r4, sl, sl
 800600e:	4699      	mov	r9, r3
 8006010:	46a2      	mov	sl, r4
 8006012:	eb19 0905 	adds.w	r9, r9, r5
 8006016:	eb4a 0a06 	adc.w	sl, sl, r6
 800601a:	f04f 0100 	mov.w	r1, #0
 800601e:	f04f 0200 	mov.w	r2, #0
 8006022:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006026:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800602a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800602e:	4689      	mov	r9, r1
 8006030:	4692      	mov	sl, r2
 8006032:	eb19 0005 	adds.w	r0, r9, r5
 8006036:	eb4a 0106 	adc.w	r1, sl, r6
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	461d      	mov	r5, r3
 8006040:	f04f 0600 	mov.w	r6, #0
 8006044:	196b      	adds	r3, r5, r5
 8006046:	eb46 0406 	adc.w	r4, r6, r6
 800604a:	461a      	mov	r2, r3
 800604c:	4623      	mov	r3, r4
 800604e:	f7fa f90f 	bl	8000270 <__aeabi_uldivmod>
 8006052:	4603      	mov	r3, r0
 8006054:	460c      	mov	r4, r1
 8006056:	461a      	mov	r2, r3
 8006058:	4b6a      	ldr	r3, [pc, #424]	; (8006204 <UART_SetConfig+0x384>)
 800605a:	fba3 1302 	umull	r1, r3, r3, r2
 800605e:	095b      	lsrs	r3, r3, #5
 8006060:	2164      	movs	r1, #100	; 0x64
 8006062:	fb01 f303 	mul.w	r3, r1, r3
 8006066:	1ad3      	subs	r3, r2, r3
 8006068:	00db      	lsls	r3, r3, #3
 800606a:	3332      	adds	r3, #50	; 0x32
 800606c:	4a65      	ldr	r2, [pc, #404]	; (8006204 <UART_SetConfig+0x384>)
 800606e:	fba2 2303 	umull	r2, r3, r2, r3
 8006072:	095b      	lsrs	r3, r3, #5
 8006074:	f003 0207 	and.w	r2, r3, #7
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4442      	add	r2, r8
 800607e:	609a      	str	r2, [r3, #8]
 8006080:	e26f      	b.n	8006562 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006082:	f7fe fb25 	bl	80046d0 <HAL_RCC_GetPCLK1Freq>
 8006086:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	461d      	mov	r5, r3
 800608c:	f04f 0600 	mov.w	r6, #0
 8006090:	46a8      	mov	r8, r5
 8006092:	46b1      	mov	r9, r6
 8006094:	eb18 0308 	adds.w	r3, r8, r8
 8006098:	eb49 0409 	adc.w	r4, r9, r9
 800609c:	4698      	mov	r8, r3
 800609e:	46a1      	mov	r9, r4
 80060a0:	eb18 0805 	adds.w	r8, r8, r5
 80060a4:	eb49 0906 	adc.w	r9, r9, r6
 80060a8:	f04f 0100 	mov.w	r1, #0
 80060ac:	f04f 0200 	mov.w	r2, #0
 80060b0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80060b4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80060b8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80060bc:	4688      	mov	r8, r1
 80060be:	4691      	mov	r9, r2
 80060c0:	eb18 0005 	adds.w	r0, r8, r5
 80060c4:	eb49 0106 	adc.w	r1, r9, r6
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	461d      	mov	r5, r3
 80060ce:	f04f 0600 	mov.w	r6, #0
 80060d2:	196b      	adds	r3, r5, r5
 80060d4:	eb46 0406 	adc.w	r4, r6, r6
 80060d8:	461a      	mov	r2, r3
 80060da:	4623      	mov	r3, r4
 80060dc:	f7fa f8c8 	bl	8000270 <__aeabi_uldivmod>
 80060e0:	4603      	mov	r3, r0
 80060e2:	460c      	mov	r4, r1
 80060e4:	461a      	mov	r2, r3
 80060e6:	4b47      	ldr	r3, [pc, #284]	; (8006204 <UART_SetConfig+0x384>)
 80060e8:	fba3 2302 	umull	r2, r3, r3, r2
 80060ec:	095b      	lsrs	r3, r3, #5
 80060ee:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	461d      	mov	r5, r3
 80060f6:	f04f 0600 	mov.w	r6, #0
 80060fa:	46a9      	mov	r9, r5
 80060fc:	46b2      	mov	sl, r6
 80060fe:	eb19 0309 	adds.w	r3, r9, r9
 8006102:	eb4a 040a 	adc.w	r4, sl, sl
 8006106:	4699      	mov	r9, r3
 8006108:	46a2      	mov	sl, r4
 800610a:	eb19 0905 	adds.w	r9, r9, r5
 800610e:	eb4a 0a06 	adc.w	sl, sl, r6
 8006112:	f04f 0100 	mov.w	r1, #0
 8006116:	f04f 0200 	mov.w	r2, #0
 800611a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800611e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006122:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006126:	4689      	mov	r9, r1
 8006128:	4692      	mov	sl, r2
 800612a:	eb19 0005 	adds.w	r0, r9, r5
 800612e:	eb4a 0106 	adc.w	r1, sl, r6
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	461d      	mov	r5, r3
 8006138:	f04f 0600 	mov.w	r6, #0
 800613c:	196b      	adds	r3, r5, r5
 800613e:	eb46 0406 	adc.w	r4, r6, r6
 8006142:	461a      	mov	r2, r3
 8006144:	4623      	mov	r3, r4
 8006146:	f7fa f893 	bl	8000270 <__aeabi_uldivmod>
 800614a:	4603      	mov	r3, r0
 800614c:	460c      	mov	r4, r1
 800614e:	461a      	mov	r2, r3
 8006150:	4b2c      	ldr	r3, [pc, #176]	; (8006204 <UART_SetConfig+0x384>)
 8006152:	fba3 1302 	umull	r1, r3, r3, r2
 8006156:	095b      	lsrs	r3, r3, #5
 8006158:	2164      	movs	r1, #100	; 0x64
 800615a:	fb01 f303 	mul.w	r3, r1, r3
 800615e:	1ad3      	subs	r3, r2, r3
 8006160:	00db      	lsls	r3, r3, #3
 8006162:	3332      	adds	r3, #50	; 0x32
 8006164:	4a27      	ldr	r2, [pc, #156]	; (8006204 <UART_SetConfig+0x384>)
 8006166:	fba2 2303 	umull	r2, r3, r2, r3
 800616a:	095b      	lsrs	r3, r3, #5
 800616c:	005b      	lsls	r3, r3, #1
 800616e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006172:	4498      	add	r8, r3
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	461d      	mov	r5, r3
 8006178:	f04f 0600 	mov.w	r6, #0
 800617c:	46a9      	mov	r9, r5
 800617e:	46b2      	mov	sl, r6
 8006180:	eb19 0309 	adds.w	r3, r9, r9
 8006184:	eb4a 040a 	adc.w	r4, sl, sl
 8006188:	4699      	mov	r9, r3
 800618a:	46a2      	mov	sl, r4
 800618c:	eb19 0905 	adds.w	r9, r9, r5
 8006190:	eb4a 0a06 	adc.w	sl, sl, r6
 8006194:	f04f 0100 	mov.w	r1, #0
 8006198:	f04f 0200 	mov.w	r2, #0
 800619c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80061a0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80061a4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80061a8:	4689      	mov	r9, r1
 80061aa:	4692      	mov	sl, r2
 80061ac:	eb19 0005 	adds.w	r0, r9, r5
 80061b0:	eb4a 0106 	adc.w	r1, sl, r6
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	461d      	mov	r5, r3
 80061ba:	f04f 0600 	mov.w	r6, #0
 80061be:	196b      	adds	r3, r5, r5
 80061c0:	eb46 0406 	adc.w	r4, r6, r6
 80061c4:	461a      	mov	r2, r3
 80061c6:	4623      	mov	r3, r4
 80061c8:	f7fa f852 	bl	8000270 <__aeabi_uldivmod>
 80061cc:	4603      	mov	r3, r0
 80061ce:	460c      	mov	r4, r1
 80061d0:	461a      	mov	r2, r3
 80061d2:	4b0c      	ldr	r3, [pc, #48]	; (8006204 <UART_SetConfig+0x384>)
 80061d4:	fba3 1302 	umull	r1, r3, r3, r2
 80061d8:	095b      	lsrs	r3, r3, #5
 80061da:	2164      	movs	r1, #100	; 0x64
 80061dc:	fb01 f303 	mul.w	r3, r1, r3
 80061e0:	1ad3      	subs	r3, r2, r3
 80061e2:	00db      	lsls	r3, r3, #3
 80061e4:	3332      	adds	r3, #50	; 0x32
 80061e6:	4a07      	ldr	r2, [pc, #28]	; (8006204 <UART_SetConfig+0x384>)
 80061e8:	fba2 2303 	umull	r2, r3, r2, r3
 80061ec:	095b      	lsrs	r3, r3, #5
 80061ee:	f003 0207 	and.w	r2, r3, #7
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4442      	add	r2, r8
 80061f8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80061fa:	e1b2      	b.n	8006562 <UART_SetConfig+0x6e2>
 80061fc:	40011000 	.word	0x40011000
 8006200:	40011400 	.word	0x40011400
 8006204:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4ad7      	ldr	r2, [pc, #860]	; (800656c <UART_SetConfig+0x6ec>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d005      	beq.n	800621e <UART_SetConfig+0x39e>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4ad6      	ldr	r2, [pc, #856]	; (8006570 <UART_SetConfig+0x6f0>)
 8006218:	4293      	cmp	r3, r2
 800621a:	f040 80d1 	bne.w	80063c0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800621e:	f7fe fa6b 	bl	80046f8 <HAL_RCC_GetPCLK2Freq>
 8006222:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	469a      	mov	sl, r3
 8006228:	f04f 0b00 	mov.w	fp, #0
 800622c:	46d0      	mov	r8, sl
 800622e:	46d9      	mov	r9, fp
 8006230:	eb18 0308 	adds.w	r3, r8, r8
 8006234:	eb49 0409 	adc.w	r4, r9, r9
 8006238:	4698      	mov	r8, r3
 800623a:	46a1      	mov	r9, r4
 800623c:	eb18 080a 	adds.w	r8, r8, sl
 8006240:	eb49 090b 	adc.w	r9, r9, fp
 8006244:	f04f 0100 	mov.w	r1, #0
 8006248:	f04f 0200 	mov.w	r2, #0
 800624c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006250:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006254:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006258:	4688      	mov	r8, r1
 800625a:	4691      	mov	r9, r2
 800625c:	eb1a 0508 	adds.w	r5, sl, r8
 8006260:	eb4b 0609 	adc.w	r6, fp, r9
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	4619      	mov	r1, r3
 800626a:	f04f 0200 	mov.w	r2, #0
 800626e:	f04f 0300 	mov.w	r3, #0
 8006272:	f04f 0400 	mov.w	r4, #0
 8006276:	0094      	lsls	r4, r2, #2
 8006278:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800627c:	008b      	lsls	r3, r1, #2
 800627e:	461a      	mov	r2, r3
 8006280:	4623      	mov	r3, r4
 8006282:	4628      	mov	r0, r5
 8006284:	4631      	mov	r1, r6
 8006286:	f7f9 fff3 	bl	8000270 <__aeabi_uldivmod>
 800628a:	4603      	mov	r3, r0
 800628c:	460c      	mov	r4, r1
 800628e:	461a      	mov	r2, r3
 8006290:	4bb8      	ldr	r3, [pc, #736]	; (8006574 <UART_SetConfig+0x6f4>)
 8006292:	fba3 2302 	umull	r2, r3, r3, r2
 8006296:	095b      	lsrs	r3, r3, #5
 8006298:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	469b      	mov	fp, r3
 80062a0:	f04f 0c00 	mov.w	ip, #0
 80062a4:	46d9      	mov	r9, fp
 80062a6:	46e2      	mov	sl, ip
 80062a8:	eb19 0309 	adds.w	r3, r9, r9
 80062ac:	eb4a 040a 	adc.w	r4, sl, sl
 80062b0:	4699      	mov	r9, r3
 80062b2:	46a2      	mov	sl, r4
 80062b4:	eb19 090b 	adds.w	r9, r9, fp
 80062b8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80062bc:	f04f 0100 	mov.w	r1, #0
 80062c0:	f04f 0200 	mov.w	r2, #0
 80062c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80062c8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80062cc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80062d0:	4689      	mov	r9, r1
 80062d2:	4692      	mov	sl, r2
 80062d4:	eb1b 0509 	adds.w	r5, fp, r9
 80062d8:	eb4c 060a 	adc.w	r6, ip, sl
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	4619      	mov	r1, r3
 80062e2:	f04f 0200 	mov.w	r2, #0
 80062e6:	f04f 0300 	mov.w	r3, #0
 80062ea:	f04f 0400 	mov.w	r4, #0
 80062ee:	0094      	lsls	r4, r2, #2
 80062f0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80062f4:	008b      	lsls	r3, r1, #2
 80062f6:	461a      	mov	r2, r3
 80062f8:	4623      	mov	r3, r4
 80062fa:	4628      	mov	r0, r5
 80062fc:	4631      	mov	r1, r6
 80062fe:	f7f9 ffb7 	bl	8000270 <__aeabi_uldivmod>
 8006302:	4603      	mov	r3, r0
 8006304:	460c      	mov	r4, r1
 8006306:	461a      	mov	r2, r3
 8006308:	4b9a      	ldr	r3, [pc, #616]	; (8006574 <UART_SetConfig+0x6f4>)
 800630a:	fba3 1302 	umull	r1, r3, r3, r2
 800630e:	095b      	lsrs	r3, r3, #5
 8006310:	2164      	movs	r1, #100	; 0x64
 8006312:	fb01 f303 	mul.w	r3, r1, r3
 8006316:	1ad3      	subs	r3, r2, r3
 8006318:	011b      	lsls	r3, r3, #4
 800631a:	3332      	adds	r3, #50	; 0x32
 800631c:	4a95      	ldr	r2, [pc, #596]	; (8006574 <UART_SetConfig+0x6f4>)
 800631e:	fba2 2303 	umull	r2, r3, r2, r3
 8006322:	095b      	lsrs	r3, r3, #5
 8006324:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006328:	4498      	add	r8, r3
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	469b      	mov	fp, r3
 800632e:	f04f 0c00 	mov.w	ip, #0
 8006332:	46d9      	mov	r9, fp
 8006334:	46e2      	mov	sl, ip
 8006336:	eb19 0309 	adds.w	r3, r9, r9
 800633a:	eb4a 040a 	adc.w	r4, sl, sl
 800633e:	4699      	mov	r9, r3
 8006340:	46a2      	mov	sl, r4
 8006342:	eb19 090b 	adds.w	r9, r9, fp
 8006346:	eb4a 0a0c 	adc.w	sl, sl, ip
 800634a:	f04f 0100 	mov.w	r1, #0
 800634e:	f04f 0200 	mov.w	r2, #0
 8006352:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006356:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800635a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800635e:	4689      	mov	r9, r1
 8006360:	4692      	mov	sl, r2
 8006362:	eb1b 0509 	adds.w	r5, fp, r9
 8006366:	eb4c 060a 	adc.w	r6, ip, sl
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	4619      	mov	r1, r3
 8006370:	f04f 0200 	mov.w	r2, #0
 8006374:	f04f 0300 	mov.w	r3, #0
 8006378:	f04f 0400 	mov.w	r4, #0
 800637c:	0094      	lsls	r4, r2, #2
 800637e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006382:	008b      	lsls	r3, r1, #2
 8006384:	461a      	mov	r2, r3
 8006386:	4623      	mov	r3, r4
 8006388:	4628      	mov	r0, r5
 800638a:	4631      	mov	r1, r6
 800638c:	f7f9 ff70 	bl	8000270 <__aeabi_uldivmod>
 8006390:	4603      	mov	r3, r0
 8006392:	460c      	mov	r4, r1
 8006394:	461a      	mov	r2, r3
 8006396:	4b77      	ldr	r3, [pc, #476]	; (8006574 <UART_SetConfig+0x6f4>)
 8006398:	fba3 1302 	umull	r1, r3, r3, r2
 800639c:	095b      	lsrs	r3, r3, #5
 800639e:	2164      	movs	r1, #100	; 0x64
 80063a0:	fb01 f303 	mul.w	r3, r1, r3
 80063a4:	1ad3      	subs	r3, r2, r3
 80063a6:	011b      	lsls	r3, r3, #4
 80063a8:	3332      	adds	r3, #50	; 0x32
 80063aa:	4a72      	ldr	r2, [pc, #456]	; (8006574 <UART_SetConfig+0x6f4>)
 80063ac:	fba2 2303 	umull	r2, r3, r2, r3
 80063b0:	095b      	lsrs	r3, r3, #5
 80063b2:	f003 020f 	and.w	r2, r3, #15
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4442      	add	r2, r8
 80063bc:	609a      	str	r2, [r3, #8]
 80063be:	e0d0      	b.n	8006562 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80063c0:	f7fe f986 	bl	80046d0 <HAL_RCC_GetPCLK1Freq>
 80063c4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	469a      	mov	sl, r3
 80063ca:	f04f 0b00 	mov.w	fp, #0
 80063ce:	46d0      	mov	r8, sl
 80063d0:	46d9      	mov	r9, fp
 80063d2:	eb18 0308 	adds.w	r3, r8, r8
 80063d6:	eb49 0409 	adc.w	r4, r9, r9
 80063da:	4698      	mov	r8, r3
 80063dc:	46a1      	mov	r9, r4
 80063de:	eb18 080a 	adds.w	r8, r8, sl
 80063e2:	eb49 090b 	adc.w	r9, r9, fp
 80063e6:	f04f 0100 	mov.w	r1, #0
 80063ea:	f04f 0200 	mov.w	r2, #0
 80063ee:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80063f2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80063f6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80063fa:	4688      	mov	r8, r1
 80063fc:	4691      	mov	r9, r2
 80063fe:	eb1a 0508 	adds.w	r5, sl, r8
 8006402:	eb4b 0609 	adc.w	r6, fp, r9
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	4619      	mov	r1, r3
 800640c:	f04f 0200 	mov.w	r2, #0
 8006410:	f04f 0300 	mov.w	r3, #0
 8006414:	f04f 0400 	mov.w	r4, #0
 8006418:	0094      	lsls	r4, r2, #2
 800641a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800641e:	008b      	lsls	r3, r1, #2
 8006420:	461a      	mov	r2, r3
 8006422:	4623      	mov	r3, r4
 8006424:	4628      	mov	r0, r5
 8006426:	4631      	mov	r1, r6
 8006428:	f7f9 ff22 	bl	8000270 <__aeabi_uldivmod>
 800642c:	4603      	mov	r3, r0
 800642e:	460c      	mov	r4, r1
 8006430:	461a      	mov	r2, r3
 8006432:	4b50      	ldr	r3, [pc, #320]	; (8006574 <UART_SetConfig+0x6f4>)
 8006434:	fba3 2302 	umull	r2, r3, r3, r2
 8006438:	095b      	lsrs	r3, r3, #5
 800643a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	469b      	mov	fp, r3
 8006442:	f04f 0c00 	mov.w	ip, #0
 8006446:	46d9      	mov	r9, fp
 8006448:	46e2      	mov	sl, ip
 800644a:	eb19 0309 	adds.w	r3, r9, r9
 800644e:	eb4a 040a 	adc.w	r4, sl, sl
 8006452:	4699      	mov	r9, r3
 8006454:	46a2      	mov	sl, r4
 8006456:	eb19 090b 	adds.w	r9, r9, fp
 800645a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800645e:	f04f 0100 	mov.w	r1, #0
 8006462:	f04f 0200 	mov.w	r2, #0
 8006466:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800646a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800646e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006472:	4689      	mov	r9, r1
 8006474:	4692      	mov	sl, r2
 8006476:	eb1b 0509 	adds.w	r5, fp, r9
 800647a:	eb4c 060a 	adc.w	r6, ip, sl
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	4619      	mov	r1, r3
 8006484:	f04f 0200 	mov.w	r2, #0
 8006488:	f04f 0300 	mov.w	r3, #0
 800648c:	f04f 0400 	mov.w	r4, #0
 8006490:	0094      	lsls	r4, r2, #2
 8006492:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006496:	008b      	lsls	r3, r1, #2
 8006498:	461a      	mov	r2, r3
 800649a:	4623      	mov	r3, r4
 800649c:	4628      	mov	r0, r5
 800649e:	4631      	mov	r1, r6
 80064a0:	f7f9 fee6 	bl	8000270 <__aeabi_uldivmod>
 80064a4:	4603      	mov	r3, r0
 80064a6:	460c      	mov	r4, r1
 80064a8:	461a      	mov	r2, r3
 80064aa:	4b32      	ldr	r3, [pc, #200]	; (8006574 <UART_SetConfig+0x6f4>)
 80064ac:	fba3 1302 	umull	r1, r3, r3, r2
 80064b0:	095b      	lsrs	r3, r3, #5
 80064b2:	2164      	movs	r1, #100	; 0x64
 80064b4:	fb01 f303 	mul.w	r3, r1, r3
 80064b8:	1ad3      	subs	r3, r2, r3
 80064ba:	011b      	lsls	r3, r3, #4
 80064bc:	3332      	adds	r3, #50	; 0x32
 80064be:	4a2d      	ldr	r2, [pc, #180]	; (8006574 <UART_SetConfig+0x6f4>)
 80064c0:	fba2 2303 	umull	r2, r3, r2, r3
 80064c4:	095b      	lsrs	r3, r3, #5
 80064c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80064ca:	4498      	add	r8, r3
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	469b      	mov	fp, r3
 80064d0:	f04f 0c00 	mov.w	ip, #0
 80064d4:	46d9      	mov	r9, fp
 80064d6:	46e2      	mov	sl, ip
 80064d8:	eb19 0309 	adds.w	r3, r9, r9
 80064dc:	eb4a 040a 	adc.w	r4, sl, sl
 80064e0:	4699      	mov	r9, r3
 80064e2:	46a2      	mov	sl, r4
 80064e4:	eb19 090b 	adds.w	r9, r9, fp
 80064e8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80064ec:	f04f 0100 	mov.w	r1, #0
 80064f0:	f04f 0200 	mov.w	r2, #0
 80064f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80064f8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80064fc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006500:	4689      	mov	r9, r1
 8006502:	4692      	mov	sl, r2
 8006504:	eb1b 0509 	adds.w	r5, fp, r9
 8006508:	eb4c 060a 	adc.w	r6, ip, sl
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	4619      	mov	r1, r3
 8006512:	f04f 0200 	mov.w	r2, #0
 8006516:	f04f 0300 	mov.w	r3, #0
 800651a:	f04f 0400 	mov.w	r4, #0
 800651e:	0094      	lsls	r4, r2, #2
 8006520:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006524:	008b      	lsls	r3, r1, #2
 8006526:	461a      	mov	r2, r3
 8006528:	4623      	mov	r3, r4
 800652a:	4628      	mov	r0, r5
 800652c:	4631      	mov	r1, r6
 800652e:	f7f9 fe9f 	bl	8000270 <__aeabi_uldivmod>
 8006532:	4603      	mov	r3, r0
 8006534:	460c      	mov	r4, r1
 8006536:	461a      	mov	r2, r3
 8006538:	4b0e      	ldr	r3, [pc, #56]	; (8006574 <UART_SetConfig+0x6f4>)
 800653a:	fba3 1302 	umull	r1, r3, r3, r2
 800653e:	095b      	lsrs	r3, r3, #5
 8006540:	2164      	movs	r1, #100	; 0x64
 8006542:	fb01 f303 	mul.w	r3, r1, r3
 8006546:	1ad3      	subs	r3, r2, r3
 8006548:	011b      	lsls	r3, r3, #4
 800654a:	3332      	adds	r3, #50	; 0x32
 800654c:	4a09      	ldr	r2, [pc, #36]	; (8006574 <UART_SetConfig+0x6f4>)
 800654e:	fba2 2303 	umull	r2, r3, r2, r3
 8006552:	095b      	lsrs	r3, r3, #5
 8006554:	f003 020f 	and.w	r2, r3, #15
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4442      	add	r2, r8
 800655e:	609a      	str	r2, [r3, #8]
}
 8006560:	e7ff      	b.n	8006562 <UART_SetConfig+0x6e2>
 8006562:	bf00      	nop
 8006564:	3714      	adds	r7, #20
 8006566:	46bd      	mov	sp, r7
 8006568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800656c:	40011000 	.word	0x40011000
 8006570:	40011400 	.word	0x40011400
 8006574:	51eb851f 	.word	0x51eb851f

08006578 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006578:	b084      	sub	sp, #16
 800657a:	b580      	push	{r7, lr}
 800657c:	b084      	sub	sp, #16
 800657e:	af00      	add	r7, sp, #0
 8006580:	6078      	str	r0, [r7, #4]
 8006582:	f107 001c 	add.w	r0, r7, #28
 8006586:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800658a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800658c:	2b01      	cmp	r3, #1
 800658e:	d122      	bne.n	80065d6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006594:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	68db      	ldr	r3, [r3, #12]
 80065a0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80065a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065a8:	687a      	ldr	r2, [r7, #4]
 80065aa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	68db      	ldr	r3, [r3, #12]
 80065b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80065b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	d105      	bne.n	80065ca <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	68db      	ldr	r3, [r3, #12]
 80065c2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f000 fca0 	bl	8006f10 <USB_CoreReset>
 80065d0:	4603      	mov	r3, r0
 80065d2:	73fb      	strb	r3, [r7, #15]
 80065d4:	e01a      	b.n	800660c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	68db      	ldr	r3, [r3, #12]
 80065da:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f000 fc94 	bl	8006f10 <USB_CoreReset>
 80065e8:	4603      	mov	r3, r0
 80065ea:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80065ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d106      	bne.n	8006600 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065f6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	639a      	str	r2, [r3, #56]	; 0x38
 80065fe:	e005      	b.n	800660c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006604:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800660c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800660e:	2b01      	cmp	r3, #1
 8006610:	d10b      	bne.n	800662a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	f043 0206 	orr.w	r2, r3, #6
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	f043 0220 	orr.w	r2, r3, #32
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800662a:	7bfb      	ldrb	r3, [r7, #15]
}
 800662c:	4618      	mov	r0, r3
 800662e:	3710      	adds	r7, #16
 8006630:	46bd      	mov	sp, r7
 8006632:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006636:	b004      	add	sp, #16
 8006638:	4770      	bx	lr
	...

0800663c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800663c:	b480      	push	{r7}
 800663e:	b087      	sub	sp, #28
 8006640:	af00      	add	r7, sp, #0
 8006642:	60f8      	str	r0, [r7, #12]
 8006644:	60b9      	str	r1, [r7, #8]
 8006646:	4613      	mov	r3, r2
 8006648:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800664a:	79fb      	ldrb	r3, [r7, #7]
 800664c:	2b02      	cmp	r3, #2
 800664e:	d165      	bne.n	800671c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	4a41      	ldr	r2, [pc, #260]	; (8006758 <USB_SetTurnaroundTime+0x11c>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d906      	bls.n	8006666 <USB_SetTurnaroundTime+0x2a>
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	4a40      	ldr	r2, [pc, #256]	; (800675c <USB_SetTurnaroundTime+0x120>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d802      	bhi.n	8006666 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006660:	230f      	movs	r3, #15
 8006662:	617b      	str	r3, [r7, #20]
 8006664:	e062      	b.n	800672c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	4a3c      	ldr	r2, [pc, #240]	; (800675c <USB_SetTurnaroundTime+0x120>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d906      	bls.n	800667c <USB_SetTurnaroundTime+0x40>
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	4a3b      	ldr	r2, [pc, #236]	; (8006760 <USB_SetTurnaroundTime+0x124>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d802      	bhi.n	800667c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006676:	230e      	movs	r3, #14
 8006678:	617b      	str	r3, [r7, #20]
 800667a:	e057      	b.n	800672c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	4a38      	ldr	r2, [pc, #224]	; (8006760 <USB_SetTurnaroundTime+0x124>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d906      	bls.n	8006692 <USB_SetTurnaroundTime+0x56>
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	4a37      	ldr	r2, [pc, #220]	; (8006764 <USB_SetTurnaroundTime+0x128>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d802      	bhi.n	8006692 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800668c:	230d      	movs	r3, #13
 800668e:	617b      	str	r3, [r7, #20]
 8006690:	e04c      	b.n	800672c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	4a33      	ldr	r2, [pc, #204]	; (8006764 <USB_SetTurnaroundTime+0x128>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d906      	bls.n	80066a8 <USB_SetTurnaroundTime+0x6c>
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	4a32      	ldr	r2, [pc, #200]	; (8006768 <USB_SetTurnaroundTime+0x12c>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d802      	bhi.n	80066a8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80066a2:	230c      	movs	r3, #12
 80066a4:	617b      	str	r3, [r7, #20]
 80066a6:	e041      	b.n	800672c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	4a2f      	ldr	r2, [pc, #188]	; (8006768 <USB_SetTurnaroundTime+0x12c>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d906      	bls.n	80066be <USB_SetTurnaroundTime+0x82>
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	4a2e      	ldr	r2, [pc, #184]	; (800676c <USB_SetTurnaroundTime+0x130>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d802      	bhi.n	80066be <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80066b8:	230b      	movs	r3, #11
 80066ba:	617b      	str	r3, [r7, #20]
 80066bc:	e036      	b.n	800672c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	4a2a      	ldr	r2, [pc, #168]	; (800676c <USB_SetTurnaroundTime+0x130>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d906      	bls.n	80066d4 <USB_SetTurnaroundTime+0x98>
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	4a29      	ldr	r2, [pc, #164]	; (8006770 <USB_SetTurnaroundTime+0x134>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d802      	bhi.n	80066d4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80066ce:	230a      	movs	r3, #10
 80066d0:	617b      	str	r3, [r7, #20]
 80066d2:	e02b      	b.n	800672c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	4a26      	ldr	r2, [pc, #152]	; (8006770 <USB_SetTurnaroundTime+0x134>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d906      	bls.n	80066ea <USB_SetTurnaroundTime+0xae>
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	4a25      	ldr	r2, [pc, #148]	; (8006774 <USB_SetTurnaroundTime+0x138>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d802      	bhi.n	80066ea <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80066e4:	2309      	movs	r3, #9
 80066e6:	617b      	str	r3, [r7, #20]
 80066e8:	e020      	b.n	800672c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	4a21      	ldr	r2, [pc, #132]	; (8006774 <USB_SetTurnaroundTime+0x138>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d906      	bls.n	8006700 <USB_SetTurnaroundTime+0xc4>
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	4a20      	ldr	r2, [pc, #128]	; (8006778 <USB_SetTurnaroundTime+0x13c>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d802      	bhi.n	8006700 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80066fa:	2308      	movs	r3, #8
 80066fc:	617b      	str	r3, [r7, #20]
 80066fe:	e015      	b.n	800672c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	4a1d      	ldr	r2, [pc, #116]	; (8006778 <USB_SetTurnaroundTime+0x13c>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d906      	bls.n	8006716 <USB_SetTurnaroundTime+0xda>
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	4a1c      	ldr	r2, [pc, #112]	; (800677c <USB_SetTurnaroundTime+0x140>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d802      	bhi.n	8006716 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006710:	2307      	movs	r3, #7
 8006712:	617b      	str	r3, [r7, #20]
 8006714:	e00a      	b.n	800672c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006716:	2306      	movs	r3, #6
 8006718:	617b      	str	r3, [r7, #20]
 800671a:	e007      	b.n	800672c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800671c:	79fb      	ldrb	r3, [r7, #7]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d102      	bne.n	8006728 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006722:	2309      	movs	r3, #9
 8006724:	617b      	str	r3, [r7, #20]
 8006726:	e001      	b.n	800672c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006728:	2309      	movs	r3, #9
 800672a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	68db      	ldr	r3, [r3, #12]
 8006730:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	68da      	ldr	r2, [r3, #12]
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	029b      	lsls	r3, r3, #10
 8006740:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006744:	431a      	orrs	r2, r3
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800674a:	2300      	movs	r3, #0
}
 800674c:	4618      	mov	r0, r3
 800674e:	371c      	adds	r7, #28
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr
 8006758:	00d8acbf 	.word	0x00d8acbf
 800675c:	00e4e1bf 	.word	0x00e4e1bf
 8006760:	00f423ff 	.word	0x00f423ff
 8006764:	0106737f 	.word	0x0106737f
 8006768:	011a499f 	.word	0x011a499f
 800676c:	01312cff 	.word	0x01312cff
 8006770:	014ca43f 	.word	0x014ca43f
 8006774:	016e35ff 	.word	0x016e35ff
 8006778:	01a6ab1f 	.word	0x01a6ab1f
 800677c:	01e847ff 	.word	0x01e847ff

08006780 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006780:	b480      	push	{r7}
 8006782:	b083      	sub	sp, #12
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	689b      	ldr	r3, [r3, #8]
 800678c:	f023 0201 	bic.w	r2, r3, #1
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006794:	2300      	movs	r3, #0
}
 8006796:	4618      	mov	r0, r3
 8006798:	370c      	adds	r7, #12
 800679a:	46bd      	mov	sp, r7
 800679c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a0:	4770      	bx	lr

080067a2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80067a2:	b580      	push	{r7, lr}
 80067a4:	b082      	sub	sp, #8
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	6078      	str	r0, [r7, #4]
 80067aa:	460b      	mov	r3, r1
 80067ac:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	68db      	ldr	r3, [r3, #12]
 80067b2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80067ba:	78fb      	ldrb	r3, [r7, #3]
 80067bc:	2b01      	cmp	r3, #1
 80067be:	d106      	bne.n	80067ce <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	68db      	ldr	r3, [r3, #12]
 80067c4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	60da      	str	r2, [r3, #12]
 80067cc:	e00b      	b.n	80067e6 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80067ce:	78fb      	ldrb	r3, [r7, #3]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d106      	bne.n	80067e2 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	68db      	ldr	r3, [r3, #12]
 80067d8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	60da      	str	r2, [r3, #12]
 80067e0:	e001      	b.n	80067e6 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80067e2:	2301      	movs	r3, #1
 80067e4:	e003      	b.n	80067ee <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80067e6:	2032      	movs	r0, #50	; 0x32
 80067e8:	f7fb fd7a 	bl	80022e0 <HAL_Delay>

  return HAL_OK;
 80067ec:	2300      	movs	r3, #0
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	3708      	adds	r7, #8
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}
	...

080067f8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80067f8:	b084      	sub	sp, #16
 80067fa:	b580      	push	{r7, lr}
 80067fc:	b086      	sub	sp, #24
 80067fe:	af00      	add	r7, sp, #0
 8006800:	6078      	str	r0, [r7, #4]
 8006802:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006806:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800680a:	2300      	movs	r3, #0
 800680c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006812:	2300      	movs	r3, #0
 8006814:	613b      	str	r3, [r7, #16]
 8006816:	e009      	b.n	800682c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006818:	687a      	ldr	r2, [r7, #4]
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	3340      	adds	r3, #64	; 0x40
 800681e:	009b      	lsls	r3, r3, #2
 8006820:	4413      	add	r3, r2
 8006822:	2200      	movs	r2, #0
 8006824:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	3301      	adds	r3, #1
 800682a:	613b      	str	r3, [r7, #16]
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	2b0e      	cmp	r3, #14
 8006830:	d9f2      	bls.n	8006818 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006832:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006834:	2b00      	cmp	r3, #0
 8006836:	d11c      	bne.n	8006872 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	68fa      	ldr	r2, [r7, #12]
 8006842:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006846:	f043 0302 	orr.w	r3, r3, #2
 800684a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006850:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800685c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006868:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	639a      	str	r2, [r3, #56]	; 0x38
 8006870:	e00b      	b.n	800688a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006876:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006882:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006890:	461a      	mov	r2, r3
 8006892:	2300      	movs	r3, #0
 8006894:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800689c:	4619      	mov	r1, r3
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068a4:	461a      	mov	r2, r3
 80068a6:	680b      	ldr	r3, [r1, #0]
 80068a8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80068aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	d10c      	bne.n	80068ca <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80068b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d104      	bne.n	80068c0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80068b6:	2100      	movs	r1, #0
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f000 f949 	bl	8006b50 <USB_SetDevSpeed>
 80068be:	e008      	b.n	80068d2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80068c0:	2101      	movs	r1, #1
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f000 f944 	bl	8006b50 <USB_SetDevSpeed>
 80068c8:	e003      	b.n	80068d2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80068ca:	2103      	movs	r1, #3
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f000 f93f 	bl	8006b50 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80068d2:	2110      	movs	r1, #16
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f000 f8f3 	bl	8006ac0 <USB_FlushTxFifo>
 80068da:	4603      	mov	r3, r0
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d001      	beq.n	80068e4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80068e0:	2301      	movs	r3, #1
 80068e2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f000 f911 	bl	8006b0c <USB_FlushRxFifo>
 80068ea:	4603      	mov	r3, r0
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d001      	beq.n	80068f4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80068f0:	2301      	movs	r3, #1
 80068f2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068fa:	461a      	mov	r2, r3
 80068fc:	2300      	movs	r3, #0
 80068fe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006906:	461a      	mov	r2, r3
 8006908:	2300      	movs	r3, #0
 800690a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006912:	461a      	mov	r2, r3
 8006914:	2300      	movs	r3, #0
 8006916:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006918:	2300      	movs	r3, #0
 800691a:	613b      	str	r3, [r7, #16]
 800691c:	e043      	b.n	80069a6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	015a      	lsls	r2, r3, #5
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	4413      	add	r3, r2
 8006926:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006930:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006934:	d118      	bne.n	8006968 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d10a      	bne.n	8006952 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	015a      	lsls	r2, r3, #5
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	4413      	add	r3, r2
 8006944:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006948:	461a      	mov	r2, r3
 800694a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800694e:	6013      	str	r3, [r2, #0]
 8006950:	e013      	b.n	800697a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	015a      	lsls	r2, r3, #5
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	4413      	add	r3, r2
 800695a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800695e:	461a      	mov	r2, r3
 8006960:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006964:	6013      	str	r3, [r2, #0]
 8006966:	e008      	b.n	800697a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	015a      	lsls	r2, r3, #5
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	4413      	add	r3, r2
 8006970:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006974:	461a      	mov	r2, r3
 8006976:	2300      	movs	r3, #0
 8006978:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	015a      	lsls	r2, r3, #5
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	4413      	add	r3, r2
 8006982:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006986:	461a      	mov	r2, r3
 8006988:	2300      	movs	r3, #0
 800698a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	015a      	lsls	r2, r3, #5
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	4413      	add	r3, r2
 8006994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006998:	461a      	mov	r2, r3
 800699a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800699e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	3301      	adds	r3, #1
 80069a4:	613b      	str	r3, [r7, #16]
 80069a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a8:	693a      	ldr	r2, [r7, #16]
 80069aa:	429a      	cmp	r2, r3
 80069ac:	d3b7      	bcc.n	800691e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80069ae:	2300      	movs	r3, #0
 80069b0:	613b      	str	r3, [r7, #16]
 80069b2:	e043      	b.n	8006a3c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	015a      	lsls	r2, r3, #5
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	4413      	add	r3, r2
 80069bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069ca:	d118      	bne.n	80069fe <USB_DevInit+0x206>
    {
      if (i == 0U)
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d10a      	bne.n	80069e8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	015a      	lsls	r2, r3, #5
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	4413      	add	r3, r2
 80069da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069de:	461a      	mov	r2, r3
 80069e0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80069e4:	6013      	str	r3, [r2, #0]
 80069e6:	e013      	b.n	8006a10 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	015a      	lsls	r2, r3, #5
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	4413      	add	r3, r2
 80069f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069f4:	461a      	mov	r2, r3
 80069f6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80069fa:	6013      	str	r3, [r2, #0]
 80069fc:	e008      	b.n	8006a10 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	015a      	lsls	r2, r3, #5
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	4413      	add	r3, r2
 8006a06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a0a:	461a      	mov	r2, r3
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	015a      	lsls	r2, r3, #5
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	4413      	add	r3, r2
 8006a18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a1c:	461a      	mov	r2, r3
 8006a1e:	2300      	movs	r3, #0
 8006a20:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	015a      	lsls	r2, r3, #5
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	4413      	add	r3, r2
 8006a2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a2e:	461a      	mov	r2, r3
 8006a30:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006a34:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	3301      	adds	r3, #1
 8006a3a:	613b      	str	r3, [r7, #16]
 8006a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a3e:	693a      	ldr	r2, [r7, #16]
 8006a40:	429a      	cmp	r2, r3
 8006a42:	d3b7      	bcc.n	80069b4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a4a:	691b      	ldr	r3, [r3, #16]
 8006a4c:	68fa      	ldr	r2, [r7, #12]
 8006a4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a52:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a56:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006a64:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d105      	bne.n	8006a78 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	699b      	ldr	r3, [r3, #24]
 8006a70:	f043 0210 	orr.w	r2, r3, #16
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	699a      	ldr	r2, [r3, #24]
 8006a7c:	4b0f      	ldr	r3, [pc, #60]	; (8006abc <USB_DevInit+0x2c4>)
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	687a      	ldr	r2, [r7, #4]
 8006a82:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006a84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d005      	beq.n	8006a96 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	699b      	ldr	r3, [r3, #24]
 8006a8e:	f043 0208 	orr.w	r2, r3, #8
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006a96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a98:	2b01      	cmp	r3, #1
 8006a9a:	d107      	bne.n	8006aac <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	699b      	ldr	r3, [r3, #24]
 8006aa0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006aa4:	f043 0304 	orr.w	r3, r3, #4
 8006aa8:	687a      	ldr	r2, [r7, #4]
 8006aaa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006aac:	7dfb      	ldrb	r3, [r7, #23]
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3718      	adds	r7, #24
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006ab8:	b004      	add	sp, #16
 8006aba:	4770      	bx	lr
 8006abc:	803c3800 	.word	0x803c3800

08006ac0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b085      	sub	sp, #20
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
 8006ac8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006aca:	2300      	movs	r3, #0
 8006acc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	019b      	lsls	r3, r3, #6
 8006ad2:	f043 0220 	orr.w	r2, r3, #32
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	3301      	adds	r3, #1
 8006ade:	60fb      	str	r3, [r7, #12]
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	4a09      	ldr	r2, [pc, #36]	; (8006b08 <USB_FlushTxFifo+0x48>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d901      	bls.n	8006aec <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006ae8:	2303      	movs	r3, #3
 8006aea:	e006      	b.n	8006afa <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	691b      	ldr	r3, [r3, #16]
 8006af0:	f003 0320 	and.w	r3, r3, #32
 8006af4:	2b20      	cmp	r3, #32
 8006af6:	d0f0      	beq.n	8006ada <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006af8:	2300      	movs	r3, #0
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3714      	adds	r7, #20
 8006afe:	46bd      	mov	sp, r7
 8006b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b04:	4770      	bx	lr
 8006b06:	bf00      	nop
 8006b08:	00030d40 	.word	0x00030d40

08006b0c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b085      	sub	sp, #20
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006b14:	2300      	movs	r3, #0
 8006b16:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2210      	movs	r2, #16
 8006b1c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	3301      	adds	r3, #1
 8006b22:	60fb      	str	r3, [r7, #12]
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	4a09      	ldr	r2, [pc, #36]	; (8006b4c <USB_FlushRxFifo+0x40>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d901      	bls.n	8006b30 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006b2c:	2303      	movs	r3, #3
 8006b2e:	e006      	b.n	8006b3e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	691b      	ldr	r3, [r3, #16]
 8006b34:	f003 0310 	and.w	r3, r3, #16
 8006b38:	2b10      	cmp	r3, #16
 8006b3a:	d0f0      	beq.n	8006b1e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006b3c:	2300      	movs	r3, #0
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3714      	adds	r7, #20
 8006b42:	46bd      	mov	sp, r7
 8006b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b48:	4770      	bx	lr
 8006b4a:	bf00      	nop
 8006b4c:	00030d40 	.word	0x00030d40

08006b50 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b085      	sub	sp, #20
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
 8006b58:	460b      	mov	r3, r1
 8006b5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b66:	681a      	ldr	r2, [r3, #0]
 8006b68:	78fb      	ldrb	r3, [r7, #3]
 8006b6a:	68f9      	ldr	r1, [r7, #12]
 8006b6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b70:	4313      	orrs	r3, r2
 8006b72:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006b74:	2300      	movs	r3, #0
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3714      	adds	r7, #20
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr

08006b82 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006b82:	b480      	push	{r7}
 8006b84:	b087      	sub	sp, #28
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b94:	689b      	ldr	r3, [r3, #8]
 8006b96:	f003 0306 	and.w	r3, r3, #6
 8006b9a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d102      	bne.n	8006ba8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	75fb      	strb	r3, [r7, #23]
 8006ba6:	e00a      	b.n	8006bbe <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2b02      	cmp	r3, #2
 8006bac:	d002      	beq.n	8006bb4 <USB_GetDevSpeed+0x32>
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2b06      	cmp	r3, #6
 8006bb2:	d102      	bne.n	8006bba <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006bb4:	2302      	movs	r3, #2
 8006bb6:	75fb      	strb	r3, [r7, #23]
 8006bb8:	e001      	b.n	8006bbe <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006bba:	230f      	movs	r3, #15
 8006bbc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006bbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	371c      	adds	r7, #28
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr

08006bcc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b089      	sub	sp, #36	; 0x24
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	60f8      	str	r0, [r7, #12]
 8006bd4:	60b9      	str	r1, [r7, #8]
 8006bd6:	4611      	mov	r1, r2
 8006bd8:	461a      	mov	r2, r3
 8006bda:	460b      	mov	r3, r1
 8006bdc:	71fb      	strb	r3, [r7, #7]
 8006bde:	4613      	mov	r3, r2
 8006be0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006bea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d11a      	bne.n	8006c28 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006bf2:	88bb      	ldrh	r3, [r7, #4]
 8006bf4:	3303      	adds	r3, #3
 8006bf6:	089b      	lsrs	r3, r3, #2
 8006bf8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	61bb      	str	r3, [r7, #24]
 8006bfe:	e00f      	b.n	8006c20 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006c00:	79fb      	ldrb	r3, [r7, #7]
 8006c02:	031a      	lsls	r2, r3, #12
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	4413      	add	r3, r2
 8006c08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c0c:	461a      	mov	r2, r3
 8006c0e:	69fb      	ldr	r3, [r7, #28]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006c14:	69fb      	ldr	r3, [r7, #28]
 8006c16:	3304      	adds	r3, #4
 8006c18:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006c1a:	69bb      	ldr	r3, [r7, #24]
 8006c1c:	3301      	adds	r3, #1
 8006c1e:	61bb      	str	r3, [r7, #24]
 8006c20:	69ba      	ldr	r2, [r7, #24]
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	429a      	cmp	r2, r3
 8006c26:	d3eb      	bcc.n	8006c00 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006c28:	2300      	movs	r3, #0
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3724      	adds	r7, #36	; 0x24
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr

08006c36 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006c36:	b480      	push	{r7}
 8006c38:	b089      	sub	sp, #36	; 0x24
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	60f8      	str	r0, [r7, #12]
 8006c3e:	60b9      	str	r1, [r7, #8]
 8006c40:	4613      	mov	r3, r2
 8006c42:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006c4c:	88fb      	ldrh	r3, [r7, #6]
 8006c4e:	3303      	adds	r3, #3
 8006c50:	089b      	lsrs	r3, r3, #2
 8006c52:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006c54:	2300      	movs	r3, #0
 8006c56:	61bb      	str	r3, [r7, #24]
 8006c58:	e00b      	b.n	8006c72 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c60:	681a      	ldr	r2, [r3, #0]
 8006c62:	69fb      	ldr	r3, [r7, #28]
 8006c64:	601a      	str	r2, [r3, #0]
    pDest++;
 8006c66:	69fb      	ldr	r3, [r7, #28]
 8006c68:	3304      	adds	r3, #4
 8006c6a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006c6c:	69bb      	ldr	r3, [r7, #24]
 8006c6e:	3301      	adds	r3, #1
 8006c70:	61bb      	str	r3, [r7, #24]
 8006c72:	69ba      	ldr	r2, [r7, #24]
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	429a      	cmp	r2, r3
 8006c78:	d3ef      	bcc.n	8006c5a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8006c7a:	69fb      	ldr	r3, [r7, #28]
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3724      	adds	r7, #36	; 0x24
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr

08006c88 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b085      	sub	sp, #20
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	68fa      	ldr	r2, [r7, #12]
 8006c9e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006ca2:	f023 0303 	bic.w	r3, r3, #3
 8006ca6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	68fa      	ldr	r2, [r7, #12]
 8006cb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006cb6:	f043 0302 	orr.w	r3, r3, #2
 8006cba:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006cbc:	2300      	movs	r3, #0
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3714      	adds	r7, #20
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc8:	4770      	bx	lr

08006cca <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006cca:	b480      	push	{r7}
 8006ccc:	b085      	sub	sp, #20
 8006cce:	af00      	add	r7, sp, #0
 8006cd0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	695b      	ldr	r3, [r3, #20]
 8006cd6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	699b      	ldr	r3, [r3, #24]
 8006cdc:	68fa      	ldr	r2, [r7, #12]
 8006cde:	4013      	ands	r3, r2
 8006ce0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3714      	adds	r7, #20
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cee:	4770      	bx	lr

08006cf0 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b085      	sub	sp, #20
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d02:	699b      	ldr	r3, [r3, #24]
 8006d04:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d0c:	69db      	ldr	r3, [r3, #28]
 8006d0e:	68ba      	ldr	r2, [r7, #8]
 8006d10:	4013      	ands	r3, r2
 8006d12:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	0c1b      	lsrs	r3, r3, #16
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3714      	adds	r7, #20
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr

08006d24 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b085      	sub	sp, #20
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d36:	699b      	ldr	r3, [r3, #24]
 8006d38:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d40:	69db      	ldr	r3, [r3, #28]
 8006d42:	68ba      	ldr	r2, [r7, #8]
 8006d44:	4013      	ands	r3, r2
 8006d46:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	b29b      	uxth	r3, r3
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	3714      	adds	r7, #20
 8006d50:	46bd      	mov	sp, r7
 8006d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d56:	4770      	bx	lr

08006d58 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b085      	sub	sp, #20
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
 8006d60:	460b      	mov	r3, r1
 8006d62:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006d68:	78fb      	ldrb	r3, [r7, #3]
 8006d6a:	015a      	lsls	r2, r3, #5
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	4413      	add	r3, r2
 8006d70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d74:	689b      	ldr	r3, [r3, #8]
 8006d76:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d7e:	695b      	ldr	r3, [r3, #20]
 8006d80:	68ba      	ldr	r2, [r7, #8]
 8006d82:	4013      	ands	r3, r2
 8006d84:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006d86:	68bb      	ldr	r3, [r7, #8]
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	3714      	adds	r7, #20
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d92:	4770      	bx	lr

08006d94 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b087      	sub	sp, #28
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
 8006d9c:	460b      	mov	r3, r1
 8006d9e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006daa:	691b      	ldr	r3, [r3, #16]
 8006dac:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006db6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006db8:	78fb      	ldrb	r3, [r7, #3]
 8006dba:	f003 030f 	and.w	r3, r3, #15
 8006dbe:	68fa      	ldr	r2, [r7, #12]
 8006dc0:	fa22 f303 	lsr.w	r3, r2, r3
 8006dc4:	01db      	lsls	r3, r3, #7
 8006dc6:	b2db      	uxtb	r3, r3
 8006dc8:	693a      	ldr	r2, [r7, #16]
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006dce:	78fb      	ldrb	r3, [r7, #3]
 8006dd0:	015a      	lsls	r2, r3, #5
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	4413      	add	r3, r2
 8006dd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dda:	689b      	ldr	r3, [r3, #8]
 8006ddc:	693a      	ldr	r2, [r7, #16]
 8006dde:	4013      	ands	r3, r2
 8006de0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006de2:	68bb      	ldr	r3, [r7, #8]
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	371c      	adds	r7, #28
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr

08006df0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b083      	sub	sp, #12
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	695b      	ldr	r3, [r3, #20]
 8006dfc:	f003 0301 	and.w	r3, r3, #1
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	370c      	adds	r7, #12
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr

08006e0c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b085      	sub	sp, #20
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	68fa      	ldr	r2, [r7, #12]
 8006e22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e26:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006e2a:	f023 0307 	bic.w	r3, r3, #7
 8006e2e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	68fa      	ldr	r2, [r7, #12]
 8006e3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e42:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006e44:	2300      	movs	r3, #0
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3714      	adds	r7, #20
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e50:	4770      	bx	lr
	...

08006e54 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b087      	sub	sp, #28
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	60f8      	str	r0, [r7, #12]
 8006e5c:	460b      	mov	r3, r1
 8006e5e:	607a      	str	r2, [r7, #4]
 8006e60:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	333c      	adds	r3, #60	; 0x3c
 8006e6a:	3304      	adds	r3, #4
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	4a26      	ldr	r2, [pc, #152]	; (8006f0c <USB_EP0_OutStart+0xb8>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d90a      	bls.n	8006e8e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e88:	d101      	bne.n	8006e8e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	e037      	b.n	8006efe <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e94:	461a      	mov	r2, r3
 8006e96:	2300      	movs	r3, #0
 8006e98:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ea0:	691b      	ldr	r3, [r3, #16]
 8006ea2:	697a      	ldr	r2, [r7, #20]
 8006ea4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ea8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006eac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eb4:	691b      	ldr	r3, [r3, #16]
 8006eb6:	697a      	ldr	r2, [r7, #20]
 8006eb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ebc:	f043 0318 	orr.w	r3, r3, #24
 8006ec0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ec8:	691b      	ldr	r3, [r3, #16]
 8006eca:	697a      	ldr	r2, [r7, #20]
 8006ecc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ed0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006ed4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006ed6:	7afb      	ldrb	r3, [r7, #11]
 8006ed8:	2b01      	cmp	r3, #1
 8006eda:	d10f      	bne.n	8006efc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ee2:	461a      	mov	r2, r3
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	697a      	ldr	r2, [r7, #20]
 8006ef2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ef6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006efa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006efc:	2300      	movs	r3, #0
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	371c      	adds	r7, #28
 8006f02:	46bd      	mov	sp, r7
 8006f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f08:	4770      	bx	lr
 8006f0a:	bf00      	nop
 8006f0c:	4f54300a 	.word	0x4f54300a

08006f10 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b085      	sub	sp, #20
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	3301      	adds	r3, #1
 8006f20:	60fb      	str	r3, [r7, #12]
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	4a13      	ldr	r2, [pc, #76]	; (8006f74 <USB_CoreReset+0x64>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d901      	bls.n	8006f2e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006f2a:	2303      	movs	r3, #3
 8006f2c:	e01b      	b.n	8006f66 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	691b      	ldr	r3, [r3, #16]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	daf2      	bge.n	8006f1c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006f36:	2300      	movs	r3, #0
 8006f38:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	691b      	ldr	r3, [r3, #16]
 8006f3e:	f043 0201 	orr.w	r2, r3, #1
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	3301      	adds	r3, #1
 8006f4a:	60fb      	str	r3, [r7, #12]
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	4a09      	ldr	r2, [pc, #36]	; (8006f74 <USB_CoreReset+0x64>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d901      	bls.n	8006f58 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006f54:	2303      	movs	r3, #3
 8006f56:	e006      	b.n	8006f66 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	691b      	ldr	r3, [r3, #16]
 8006f5c:	f003 0301 	and.w	r3, r3, #1
 8006f60:	2b01      	cmp	r3, #1
 8006f62:	d0f0      	beq.n	8006f46 <USB_CoreReset+0x36>

  return HAL_OK;
 8006f64:	2300      	movs	r3, #0
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3714      	adds	r7, #20
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f70:	4770      	bx	lr
 8006f72:	bf00      	nop
 8006f74:	00030d40 	.word	0x00030d40

08006f78 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006f78:	b480      	push	{r7}
 8006f7a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8006f7c:	bf00      	nop
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f84:	4770      	bx	lr
	...

08006f88 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006f88:	b480      	push	{r7}
 8006f8a:	b085      	sub	sp, #20
 8006f8c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f8e:	f3ef 8305 	mrs	r3, IPSR
 8006f92:	60bb      	str	r3, [r7, #8]
  return(result);
 8006f94:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d10f      	bne.n	8006fba <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f9a:	f3ef 8310 	mrs	r3, PRIMASK
 8006f9e:	607b      	str	r3, [r7, #4]
  return(result);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d105      	bne.n	8006fb2 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006fa6:	f3ef 8311 	mrs	r3, BASEPRI
 8006faa:	603b      	str	r3, [r7, #0]
  return(result);
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d007      	beq.n	8006fc2 <osKernelInitialize+0x3a>
 8006fb2:	4b0e      	ldr	r3, [pc, #56]	; (8006fec <osKernelInitialize+0x64>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	2b02      	cmp	r3, #2
 8006fb8:	d103      	bne.n	8006fc2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8006fba:	f06f 0305 	mvn.w	r3, #5
 8006fbe:	60fb      	str	r3, [r7, #12]
 8006fc0:	e00c      	b.n	8006fdc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006fc2:	4b0a      	ldr	r3, [pc, #40]	; (8006fec <osKernelInitialize+0x64>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d105      	bne.n	8006fd6 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006fca:	4b08      	ldr	r3, [pc, #32]	; (8006fec <osKernelInitialize+0x64>)
 8006fcc:	2201      	movs	r2, #1
 8006fce:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	60fb      	str	r3, [r7, #12]
 8006fd4:	e002      	b.n	8006fdc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8006fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8006fda:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3714      	adds	r7, #20
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe8:	4770      	bx	lr
 8006fea:	bf00      	nop
 8006fec:	2000020c 	.word	0x2000020c

08006ff0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b084      	sub	sp, #16
 8006ff4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ff6:	f3ef 8305 	mrs	r3, IPSR
 8006ffa:	60bb      	str	r3, [r7, #8]
  return(result);
 8006ffc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d10f      	bne.n	8007022 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007002:	f3ef 8310 	mrs	r3, PRIMASK
 8007006:	607b      	str	r3, [r7, #4]
  return(result);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d105      	bne.n	800701a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800700e:	f3ef 8311 	mrs	r3, BASEPRI
 8007012:	603b      	str	r3, [r7, #0]
  return(result);
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d007      	beq.n	800702a <osKernelStart+0x3a>
 800701a:	4b0f      	ldr	r3, [pc, #60]	; (8007058 <osKernelStart+0x68>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	2b02      	cmp	r3, #2
 8007020:	d103      	bne.n	800702a <osKernelStart+0x3a>
    stat = osErrorISR;
 8007022:	f06f 0305 	mvn.w	r3, #5
 8007026:	60fb      	str	r3, [r7, #12]
 8007028:	e010      	b.n	800704c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800702a:	4b0b      	ldr	r3, [pc, #44]	; (8007058 <osKernelStart+0x68>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	2b01      	cmp	r3, #1
 8007030:	d109      	bne.n	8007046 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007032:	f7ff ffa1 	bl	8006f78 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007036:	4b08      	ldr	r3, [pc, #32]	; (8007058 <osKernelStart+0x68>)
 8007038:	2202      	movs	r2, #2
 800703a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800703c:	f001 f872 	bl	8008124 <vTaskStartScheduler>
      stat = osOK;
 8007040:	2300      	movs	r3, #0
 8007042:	60fb      	str	r3, [r7, #12]
 8007044:	e002      	b.n	800704c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8007046:	f04f 33ff 	mov.w	r3, #4294967295
 800704a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800704c:	68fb      	ldr	r3, [r7, #12]
}
 800704e:	4618      	mov	r0, r3
 8007050:	3710      	adds	r7, #16
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}
 8007056:	bf00      	nop
 8007058:	2000020c 	.word	0x2000020c

0800705c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800705c:	b580      	push	{r7, lr}
 800705e:	b090      	sub	sp, #64	; 0x40
 8007060:	af04      	add	r7, sp, #16
 8007062:	60f8      	str	r0, [r7, #12]
 8007064:	60b9      	str	r1, [r7, #8]
 8007066:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007068:	2300      	movs	r3, #0
 800706a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800706c:	f3ef 8305 	mrs	r3, IPSR
 8007070:	61fb      	str	r3, [r7, #28]
  return(result);
 8007072:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8007074:	2b00      	cmp	r3, #0
 8007076:	f040 808f 	bne.w	8007198 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800707a:	f3ef 8310 	mrs	r3, PRIMASK
 800707e:	61bb      	str	r3, [r7, #24]
  return(result);
 8007080:	69bb      	ldr	r3, [r7, #24]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d105      	bne.n	8007092 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007086:	f3ef 8311 	mrs	r3, BASEPRI
 800708a:	617b      	str	r3, [r7, #20]
  return(result);
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d003      	beq.n	800709a <osThreadNew+0x3e>
 8007092:	4b44      	ldr	r3, [pc, #272]	; (80071a4 <osThreadNew+0x148>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	2b02      	cmp	r3, #2
 8007098:	d07e      	beq.n	8007198 <osThreadNew+0x13c>
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d07b      	beq.n	8007198 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80070a0:	2380      	movs	r3, #128	; 0x80
 80070a2:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80070a4:	2318      	movs	r3, #24
 80070a6:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80070a8:	2300      	movs	r3, #0
 80070aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80070ac:	f04f 33ff 	mov.w	r3, #4294967295
 80070b0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d045      	beq.n	8007144 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d002      	beq.n	80070c6 <osThreadNew+0x6a>
        name = attr->name;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	699b      	ldr	r3, [r3, #24]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d002      	beq.n	80070d4 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	699b      	ldr	r3, [r3, #24]
 80070d2:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80070d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d008      	beq.n	80070ec <osThreadNew+0x90>
 80070da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070dc:	2b38      	cmp	r3, #56	; 0x38
 80070de:	d805      	bhi.n	80070ec <osThreadNew+0x90>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	f003 0301 	and.w	r3, r3, #1
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d001      	beq.n	80070f0 <osThreadNew+0x94>
        return (NULL);
 80070ec:	2300      	movs	r3, #0
 80070ee:	e054      	b.n	800719a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	695b      	ldr	r3, [r3, #20]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d003      	beq.n	8007100 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	695b      	ldr	r3, [r3, #20]
 80070fc:	089b      	lsrs	r3, r3, #2
 80070fe:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	689b      	ldr	r3, [r3, #8]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d00e      	beq.n	8007126 <osThreadNew+0xca>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	68db      	ldr	r3, [r3, #12]
 800710c:	2b5f      	cmp	r3, #95	; 0x5f
 800710e:	d90a      	bls.n	8007126 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007114:	2b00      	cmp	r3, #0
 8007116:	d006      	beq.n	8007126 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	695b      	ldr	r3, [r3, #20]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d002      	beq.n	8007126 <osThreadNew+0xca>
        mem = 1;
 8007120:	2301      	movs	r3, #1
 8007122:	623b      	str	r3, [r7, #32]
 8007124:	e010      	b.n	8007148 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	689b      	ldr	r3, [r3, #8]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d10c      	bne.n	8007148 <osThreadNew+0xec>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	68db      	ldr	r3, [r3, #12]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d108      	bne.n	8007148 <osThreadNew+0xec>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	691b      	ldr	r3, [r3, #16]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d104      	bne.n	8007148 <osThreadNew+0xec>
          mem = 0;
 800713e:	2300      	movs	r3, #0
 8007140:	623b      	str	r3, [r7, #32]
 8007142:	e001      	b.n	8007148 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8007144:	2300      	movs	r3, #0
 8007146:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8007148:	6a3b      	ldr	r3, [r7, #32]
 800714a:	2b01      	cmp	r3, #1
 800714c:	d110      	bne.n	8007170 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8007152:	687a      	ldr	r2, [r7, #4]
 8007154:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007156:	9202      	str	r2, [sp, #8]
 8007158:	9301      	str	r3, [sp, #4]
 800715a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800715c:	9300      	str	r3, [sp, #0]
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007162:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007164:	68f8      	ldr	r0, [r7, #12]
 8007166:	f000 fe09 	bl	8007d7c <xTaskCreateStatic>
 800716a:	4603      	mov	r3, r0
 800716c:	613b      	str	r3, [r7, #16]
 800716e:	e013      	b.n	8007198 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8007170:	6a3b      	ldr	r3, [r7, #32]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d110      	bne.n	8007198 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007178:	b29a      	uxth	r2, r3
 800717a:	f107 0310 	add.w	r3, r7, #16
 800717e:	9301      	str	r3, [sp, #4]
 8007180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007182:	9300      	str	r3, [sp, #0]
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007188:	68f8      	ldr	r0, [r7, #12]
 800718a:	f000 fe51 	bl	8007e30 <xTaskCreate>
 800718e:	4603      	mov	r3, r0
 8007190:	2b01      	cmp	r3, #1
 8007192:	d001      	beq.n	8007198 <osThreadNew+0x13c>
          hTask = NULL;
 8007194:	2300      	movs	r3, #0
 8007196:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007198:	693b      	ldr	r3, [r7, #16]
}
 800719a:	4618      	mov	r0, r3
 800719c:	3730      	adds	r7, #48	; 0x30
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}
 80071a2:	bf00      	nop
 80071a4:	2000020c 	.word	0x2000020c

080071a8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b086      	sub	sp, #24
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80071b0:	f3ef 8305 	mrs	r3, IPSR
 80071b4:	613b      	str	r3, [r7, #16]
  return(result);
 80071b6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d10f      	bne.n	80071dc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80071bc:	f3ef 8310 	mrs	r3, PRIMASK
 80071c0:	60fb      	str	r3, [r7, #12]
  return(result);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d105      	bne.n	80071d4 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80071c8:	f3ef 8311 	mrs	r3, BASEPRI
 80071cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d007      	beq.n	80071e4 <osDelay+0x3c>
 80071d4:	4b0a      	ldr	r3, [pc, #40]	; (8007200 <osDelay+0x58>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	2b02      	cmp	r3, #2
 80071da:	d103      	bne.n	80071e4 <osDelay+0x3c>
    stat = osErrorISR;
 80071dc:	f06f 0305 	mvn.w	r3, #5
 80071e0:	617b      	str	r3, [r7, #20]
 80071e2:	e007      	b.n	80071f4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80071e4:	2300      	movs	r3, #0
 80071e6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d002      	beq.n	80071f4 <osDelay+0x4c>
      vTaskDelay(ticks);
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f000 ff64 	bl	80080bc <vTaskDelay>
    }
  }

  return (stat);
 80071f4:	697b      	ldr	r3, [r7, #20]
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3718      	adds	r7, #24
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}
 80071fe:	bf00      	nop
 8007200:	2000020c 	.word	0x2000020c

08007204 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007204:	b480      	push	{r7}
 8007206:	b085      	sub	sp, #20
 8007208:	af00      	add	r7, sp, #0
 800720a:	60f8      	str	r0, [r7, #12]
 800720c:	60b9      	str	r1, [r7, #8]
 800720e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	4a07      	ldr	r2, [pc, #28]	; (8007230 <vApplicationGetIdleTaskMemory+0x2c>)
 8007214:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	4a06      	ldr	r2, [pc, #24]	; (8007234 <vApplicationGetIdleTaskMemory+0x30>)
 800721a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2280      	movs	r2, #128	; 0x80
 8007220:	601a      	str	r2, [r3, #0]
}
 8007222:	bf00      	nop
 8007224:	3714      	adds	r7, #20
 8007226:	46bd      	mov	sp, r7
 8007228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722c:	4770      	bx	lr
 800722e:	bf00      	nop
 8007230:	20000210 	.word	0x20000210
 8007234:	20000270 	.word	0x20000270

08007238 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007238:	b480      	push	{r7}
 800723a:	b085      	sub	sp, #20
 800723c:	af00      	add	r7, sp, #0
 800723e:	60f8      	str	r0, [r7, #12]
 8007240:	60b9      	str	r1, [r7, #8]
 8007242:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	4a07      	ldr	r2, [pc, #28]	; (8007264 <vApplicationGetTimerTaskMemory+0x2c>)
 8007248:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	4a06      	ldr	r2, [pc, #24]	; (8007268 <vApplicationGetTimerTaskMemory+0x30>)
 800724e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007256:	601a      	str	r2, [r3, #0]
}
 8007258:	bf00      	nop
 800725a:	3714      	adds	r7, #20
 800725c:	46bd      	mov	sp, r7
 800725e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007262:	4770      	bx	lr
 8007264:	20000470 	.word	0x20000470
 8007268:	200004d0 	.word	0x200004d0

0800726c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800726c:	b480      	push	{r7}
 800726e:	b083      	sub	sp, #12
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f103 0208 	add.w	r2, r3, #8
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f04f 32ff 	mov.w	r2, #4294967295
 8007284:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f103 0208 	add.w	r2, r3, #8
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f103 0208 	add.w	r2, r3, #8
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2200      	movs	r2, #0
 800729e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80072a0:	bf00      	nop
 80072a2:	370c      	adds	r7, #12
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr

080072ac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80072ac:	b480      	push	{r7}
 80072ae:	b083      	sub	sp, #12
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2200      	movs	r2, #0
 80072b8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80072ba:	bf00      	nop
 80072bc:	370c      	adds	r7, #12
 80072be:	46bd      	mov	sp, r7
 80072c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c4:	4770      	bx	lr

080072c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80072c6:	b480      	push	{r7}
 80072c8:	b085      	sub	sp, #20
 80072ca:	af00      	add	r7, sp, #0
 80072cc:	6078      	str	r0, [r7, #4]
 80072ce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	68fa      	ldr	r2, [r7, #12]
 80072da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	689a      	ldr	r2, [r3, #8]
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	689b      	ldr	r3, [r3, #8]
 80072e8:	683a      	ldr	r2, [r7, #0]
 80072ea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	683a      	ldr	r2, [r7, #0]
 80072f0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	687a      	ldr	r2, [r7, #4]
 80072f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	1c5a      	adds	r2, r3, #1
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	601a      	str	r2, [r3, #0]
}
 8007302:	bf00      	nop
 8007304:	3714      	adds	r7, #20
 8007306:	46bd      	mov	sp, r7
 8007308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730c:	4770      	bx	lr

0800730e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800730e:	b480      	push	{r7}
 8007310:	b085      	sub	sp, #20
 8007312:	af00      	add	r7, sp, #0
 8007314:	6078      	str	r0, [r7, #4]
 8007316:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007324:	d103      	bne.n	800732e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	691b      	ldr	r3, [r3, #16]
 800732a:	60fb      	str	r3, [r7, #12]
 800732c:	e00c      	b.n	8007348 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	3308      	adds	r3, #8
 8007332:	60fb      	str	r3, [r7, #12]
 8007334:	e002      	b.n	800733c <vListInsert+0x2e>
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	60fb      	str	r3, [r7, #12]
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	68ba      	ldr	r2, [r7, #8]
 8007344:	429a      	cmp	r2, r3
 8007346:	d2f6      	bcs.n	8007336 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	685a      	ldr	r2, [r3, #4]
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	683a      	ldr	r2, [r7, #0]
 8007356:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	68fa      	ldr	r2, [r7, #12]
 800735c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	683a      	ldr	r2, [r7, #0]
 8007362:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	687a      	ldr	r2, [r7, #4]
 8007368:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	1c5a      	adds	r2, r3, #1
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	601a      	str	r2, [r3, #0]
}
 8007374:	bf00      	nop
 8007376:	3714      	adds	r7, #20
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr

08007380 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007380:	b480      	push	{r7}
 8007382:	b085      	sub	sp, #20
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	691b      	ldr	r3, [r3, #16]
 800738c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	687a      	ldr	r2, [r7, #4]
 8007394:	6892      	ldr	r2, [r2, #8]
 8007396:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	689b      	ldr	r3, [r3, #8]
 800739c:	687a      	ldr	r2, [r7, #4]
 800739e:	6852      	ldr	r2, [r2, #4]
 80073a0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	687a      	ldr	r2, [r7, #4]
 80073a8:	429a      	cmp	r2, r3
 80073aa:	d103      	bne.n	80073b4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	689a      	ldr	r2, [r3, #8]
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2200      	movs	r2, #0
 80073b8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	1e5a      	subs	r2, r3, #1
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3714      	adds	r7, #20
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr

080073d4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b084      	sub	sp, #16
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d109      	bne.n	80073fc <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80073e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ec:	f383 8811 	msr	BASEPRI, r3
 80073f0:	f3bf 8f6f 	isb	sy
 80073f4:	f3bf 8f4f 	dsb	sy
 80073f8:	60bb      	str	r3, [r7, #8]
 80073fa:	e7fe      	b.n	80073fa <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80073fc:	f002 f816 	bl	800942c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681a      	ldr	r2, [r3, #0]
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007408:	68f9      	ldr	r1, [r7, #12]
 800740a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800740c:	fb01 f303 	mul.w	r3, r1, r3
 8007410:	441a      	add	r2, r3
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2200      	movs	r2, #0
 800741a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681a      	ldr	r2, [r3, #0]
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681a      	ldr	r2, [r3, #0]
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800742c:	3b01      	subs	r3, #1
 800742e:	68f9      	ldr	r1, [r7, #12]
 8007430:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007432:	fb01 f303 	mul.w	r3, r1, r3
 8007436:	441a      	add	r2, r3
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	22ff      	movs	r2, #255	; 0xff
 8007440:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	22ff      	movs	r2, #255	; 0xff
 8007448:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d114      	bne.n	800747c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	691b      	ldr	r3, [r3, #16]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d01a      	beq.n	8007490 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	3310      	adds	r3, #16
 800745e:	4618      	mov	r0, r3
 8007460:	f001 f8e0 	bl	8008624 <xTaskRemoveFromEventList>
 8007464:	4603      	mov	r3, r0
 8007466:	2b00      	cmp	r3, #0
 8007468:	d012      	beq.n	8007490 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800746a:	4b0d      	ldr	r3, [pc, #52]	; (80074a0 <xQueueGenericReset+0xcc>)
 800746c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007470:	601a      	str	r2, [r3, #0]
 8007472:	f3bf 8f4f 	dsb	sy
 8007476:	f3bf 8f6f 	isb	sy
 800747a:	e009      	b.n	8007490 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	3310      	adds	r3, #16
 8007480:	4618      	mov	r0, r3
 8007482:	f7ff fef3 	bl	800726c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	3324      	adds	r3, #36	; 0x24
 800748a:	4618      	mov	r0, r3
 800748c:	f7ff feee 	bl	800726c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007490:	f001 fffa 	bl	8009488 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007494:	2301      	movs	r3, #1
}
 8007496:	4618      	mov	r0, r3
 8007498:	3710      	adds	r7, #16
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}
 800749e:	bf00      	nop
 80074a0:	e000ed04 	.word	0xe000ed04

080074a4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b08e      	sub	sp, #56	; 0x38
 80074a8:	af02      	add	r7, sp, #8
 80074aa:	60f8      	str	r0, [r7, #12]
 80074ac:	60b9      	str	r1, [r7, #8]
 80074ae:	607a      	str	r2, [r7, #4]
 80074b0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d109      	bne.n	80074cc <xQueueGenericCreateStatic+0x28>
 80074b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074bc:	f383 8811 	msr	BASEPRI, r3
 80074c0:	f3bf 8f6f 	isb	sy
 80074c4:	f3bf 8f4f 	dsb	sy
 80074c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80074ca:	e7fe      	b.n	80074ca <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d109      	bne.n	80074e6 <xQueueGenericCreateStatic+0x42>
 80074d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074d6:	f383 8811 	msr	BASEPRI, r3
 80074da:	f3bf 8f6f 	isb	sy
 80074de:	f3bf 8f4f 	dsb	sy
 80074e2:	627b      	str	r3, [r7, #36]	; 0x24
 80074e4:	e7fe      	b.n	80074e4 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d002      	beq.n	80074f2 <xQueueGenericCreateStatic+0x4e>
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d001      	beq.n	80074f6 <xQueueGenericCreateStatic+0x52>
 80074f2:	2301      	movs	r3, #1
 80074f4:	e000      	b.n	80074f8 <xQueueGenericCreateStatic+0x54>
 80074f6:	2300      	movs	r3, #0
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d109      	bne.n	8007510 <xQueueGenericCreateStatic+0x6c>
 80074fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007500:	f383 8811 	msr	BASEPRI, r3
 8007504:	f3bf 8f6f 	isb	sy
 8007508:	f3bf 8f4f 	dsb	sy
 800750c:	623b      	str	r3, [r7, #32]
 800750e:	e7fe      	b.n	800750e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d102      	bne.n	800751c <xQueueGenericCreateStatic+0x78>
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d101      	bne.n	8007520 <xQueueGenericCreateStatic+0x7c>
 800751c:	2301      	movs	r3, #1
 800751e:	e000      	b.n	8007522 <xQueueGenericCreateStatic+0x7e>
 8007520:	2300      	movs	r3, #0
 8007522:	2b00      	cmp	r3, #0
 8007524:	d109      	bne.n	800753a <xQueueGenericCreateStatic+0x96>
 8007526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800752a:	f383 8811 	msr	BASEPRI, r3
 800752e:	f3bf 8f6f 	isb	sy
 8007532:	f3bf 8f4f 	dsb	sy
 8007536:	61fb      	str	r3, [r7, #28]
 8007538:	e7fe      	b.n	8007538 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800753a:	2350      	movs	r3, #80	; 0x50
 800753c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	2b50      	cmp	r3, #80	; 0x50
 8007542:	d009      	beq.n	8007558 <xQueueGenericCreateStatic+0xb4>
 8007544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007548:	f383 8811 	msr	BASEPRI, r3
 800754c:	f3bf 8f6f 	isb	sy
 8007550:	f3bf 8f4f 	dsb	sy
 8007554:	61bb      	str	r3, [r7, #24]
 8007556:	e7fe      	b.n	8007556 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007558:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800755e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007560:	2b00      	cmp	r3, #0
 8007562:	d00d      	beq.n	8007580 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007566:	2201      	movs	r2, #1
 8007568:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800756c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007572:	9300      	str	r3, [sp, #0]
 8007574:	4613      	mov	r3, r2
 8007576:	687a      	ldr	r2, [r7, #4]
 8007578:	68b9      	ldr	r1, [r7, #8]
 800757a:	68f8      	ldr	r0, [r7, #12]
 800757c:	f000 f805 	bl	800758a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007582:	4618      	mov	r0, r3
 8007584:	3730      	adds	r7, #48	; 0x30
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}

0800758a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800758a:	b580      	push	{r7, lr}
 800758c:	b084      	sub	sp, #16
 800758e:	af00      	add	r7, sp, #0
 8007590:	60f8      	str	r0, [r7, #12]
 8007592:	60b9      	str	r1, [r7, #8]
 8007594:	607a      	str	r2, [r7, #4]
 8007596:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d103      	bne.n	80075a6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800759e:	69bb      	ldr	r3, [r7, #24]
 80075a0:	69ba      	ldr	r2, [r7, #24]
 80075a2:	601a      	str	r2, [r3, #0]
 80075a4:	e002      	b.n	80075ac <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80075a6:	69bb      	ldr	r3, [r7, #24]
 80075a8:	687a      	ldr	r2, [r7, #4]
 80075aa:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80075ac:	69bb      	ldr	r3, [r7, #24]
 80075ae:	68fa      	ldr	r2, [r7, #12]
 80075b0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80075b2:	69bb      	ldr	r3, [r7, #24]
 80075b4:	68ba      	ldr	r2, [r7, #8]
 80075b6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80075b8:	2101      	movs	r1, #1
 80075ba:	69b8      	ldr	r0, [r7, #24]
 80075bc:	f7ff ff0a 	bl	80073d4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80075c0:	69bb      	ldr	r3, [r7, #24]
 80075c2:	78fa      	ldrb	r2, [r7, #3]
 80075c4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80075c8:	bf00      	nop
 80075ca:	3710      	adds	r7, #16
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}

080075d0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b08e      	sub	sp, #56	; 0x38
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	60f8      	str	r0, [r7, #12]
 80075d8:	60b9      	str	r1, [r7, #8]
 80075da:	607a      	str	r2, [r7, #4]
 80075dc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80075de:	2300      	movs	r3, #0
 80075e0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80075e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d109      	bne.n	8007600 <xQueueGenericSend+0x30>
 80075ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f0:	f383 8811 	msr	BASEPRI, r3
 80075f4:	f3bf 8f6f 	isb	sy
 80075f8:	f3bf 8f4f 	dsb	sy
 80075fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80075fe:	e7fe      	b.n	80075fe <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d103      	bne.n	800760e <xQueueGenericSend+0x3e>
 8007606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800760a:	2b00      	cmp	r3, #0
 800760c:	d101      	bne.n	8007612 <xQueueGenericSend+0x42>
 800760e:	2301      	movs	r3, #1
 8007610:	e000      	b.n	8007614 <xQueueGenericSend+0x44>
 8007612:	2300      	movs	r3, #0
 8007614:	2b00      	cmp	r3, #0
 8007616:	d109      	bne.n	800762c <xQueueGenericSend+0x5c>
 8007618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800761c:	f383 8811 	msr	BASEPRI, r3
 8007620:	f3bf 8f6f 	isb	sy
 8007624:	f3bf 8f4f 	dsb	sy
 8007628:	627b      	str	r3, [r7, #36]	; 0x24
 800762a:	e7fe      	b.n	800762a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	2b02      	cmp	r3, #2
 8007630:	d103      	bne.n	800763a <xQueueGenericSend+0x6a>
 8007632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007636:	2b01      	cmp	r3, #1
 8007638:	d101      	bne.n	800763e <xQueueGenericSend+0x6e>
 800763a:	2301      	movs	r3, #1
 800763c:	e000      	b.n	8007640 <xQueueGenericSend+0x70>
 800763e:	2300      	movs	r3, #0
 8007640:	2b00      	cmp	r3, #0
 8007642:	d109      	bne.n	8007658 <xQueueGenericSend+0x88>
 8007644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007648:	f383 8811 	msr	BASEPRI, r3
 800764c:	f3bf 8f6f 	isb	sy
 8007650:	f3bf 8f4f 	dsb	sy
 8007654:	623b      	str	r3, [r7, #32]
 8007656:	e7fe      	b.n	8007656 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007658:	f001 f99a 	bl	8008990 <xTaskGetSchedulerState>
 800765c:	4603      	mov	r3, r0
 800765e:	2b00      	cmp	r3, #0
 8007660:	d102      	bne.n	8007668 <xQueueGenericSend+0x98>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d101      	bne.n	800766c <xQueueGenericSend+0x9c>
 8007668:	2301      	movs	r3, #1
 800766a:	e000      	b.n	800766e <xQueueGenericSend+0x9e>
 800766c:	2300      	movs	r3, #0
 800766e:	2b00      	cmp	r3, #0
 8007670:	d109      	bne.n	8007686 <xQueueGenericSend+0xb6>
 8007672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007676:	f383 8811 	msr	BASEPRI, r3
 800767a:	f3bf 8f6f 	isb	sy
 800767e:	f3bf 8f4f 	dsb	sy
 8007682:	61fb      	str	r3, [r7, #28]
 8007684:	e7fe      	b.n	8007684 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007686:	f001 fed1 	bl	800942c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800768a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800768c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800768e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007692:	429a      	cmp	r2, r3
 8007694:	d302      	bcc.n	800769c <xQueueGenericSend+0xcc>
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	2b02      	cmp	r3, #2
 800769a:	d129      	bne.n	80076f0 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800769c:	683a      	ldr	r2, [r7, #0]
 800769e:	68b9      	ldr	r1, [r7, #8]
 80076a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80076a2:	f000 f9ff 	bl	8007aa4 <prvCopyDataToQueue>
 80076a6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80076a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d010      	beq.n	80076d2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80076b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b2:	3324      	adds	r3, #36	; 0x24
 80076b4:	4618      	mov	r0, r3
 80076b6:	f000 ffb5 	bl	8008624 <xTaskRemoveFromEventList>
 80076ba:	4603      	mov	r3, r0
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d013      	beq.n	80076e8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80076c0:	4b3f      	ldr	r3, [pc, #252]	; (80077c0 <xQueueGenericSend+0x1f0>)
 80076c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076c6:	601a      	str	r2, [r3, #0]
 80076c8:	f3bf 8f4f 	dsb	sy
 80076cc:	f3bf 8f6f 	isb	sy
 80076d0:	e00a      	b.n	80076e8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80076d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d007      	beq.n	80076e8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80076d8:	4b39      	ldr	r3, [pc, #228]	; (80077c0 <xQueueGenericSend+0x1f0>)
 80076da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076de:	601a      	str	r2, [r3, #0]
 80076e0:	f3bf 8f4f 	dsb	sy
 80076e4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80076e8:	f001 fece 	bl	8009488 <vPortExitCritical>
				return pdPASS;
 80076ec:	2301      	movs	r3, #1
 80076ee:	e063      	b.n	80077b8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d103      	bne.n	80076fe <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80076f6:	f001 fec7 	bl	8009488 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80076fa:	2300      	movs	r3, #0
 80076fc:	e05c      	b.n	80077b8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80076fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007700:	2b00      	cmp	r3, #0
 8007702:	d106      	bne.n	8007712 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007704:	f107 0314 	add.w	r3, r7, #20
 8007708:	4618      	mov	r0, r3
 800770a:	f000 ffed 	bl	80086e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800770e:	2301      	movs	r3, #1
 8007710:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007712:	f001 feb9 	bl	8009488 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007716:	f000 fd69 	bl	80081ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800771a:	f001 fe87 	bl	800942c <vPortEnterCritical>
 800771e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007720:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007724:	b25b      	sxtb	r3, r3
 8007726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800772a:	d103      	bne.n	8007734 <xQueueGenericSend+0x164>
 800772c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800772e:	2200      	movs	r2, #0
 8007730:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007736:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800773a:	b25b      	sxtb	r3, r3
 800773c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007740:	d103      	bne.n	800774a <xQueueGenericSend+0x17a>
 8007742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007744:	2200      	movs	r2, #0
 8007746:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800774a:	f001 fe9d 	bl	8009488 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800774e:	1d3a      	adds	r2, r7, #4
 8007750:	f107 0314 	add.w	r3, r7, #20
 8007754:	4611      	mov	r1, r2
 8007756:	4618      	mov	r0, r3
 8007758:	f000 ffdc 	bl	8008714 <xTaskCheckForTimeOut>
 800775c:	4603      	mov	r3, r0
 800775e:	2b00      	cmp	r3, #0
 8007760:	d124      	bne.n	80077ac <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007762:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007764:	f000 fa96 	bl	8007c94 <prvIsQueueFull>
 8007768:	4603      	mov	r3, r0
 800776a:	2b00      	cmp	r3, #0
 800776c:	d018      	beq.n	80077a0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800776e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007770:	3310      	adds	r3, #16
 8007772:	687a      	ldr	r2, [r7, #4]
 8007774:	4611      	mov	r1, r2
 8007776:	4618      	mov	r0, r3
 8007778:	f000 ff06 	bl	8008588 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800777c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800777e:	f000 fa21 	bl	8007bc4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007782:	f000 fd41 	bl	8008208 <xTaskResumeAll>
 8007786:	4603      	mov	r3, r0
 8007788:	2b00      	cmp	r3, #0
 800778a:	f47f af7c 	bne.w	8007686 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800778e:	4b0c      	ldr	r3, [pc, #48]	; (80077c0 <xQueueGenericSend+0x1f0>)
 8007790:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007794:	601a      	str	r2, [r3, #0]
 8007796:	f3bf 8f4f 	dsb	sy
 800779a:	f3bf 8f6f 	isb	sy
 800779e:	e772      	b.n	8007686 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80077a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80077a2:	f000 fa0f 	bl	8007bc4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80077a6:	f000 fd2f 	bl	8008208 <xTaskResumeAll>
 80077aa:	e76c      	b.n	8007686 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80077ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80077ae:	f000 fa09 	bl	8007bc4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80077b2:	f000 fd29 	bl	8008208 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80077b6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	3738      	adds	r7, #56	; 0x38
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}
 80077c0:	e000ed04 	.word	0xe000ed04

080077c4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b08e      	sub	sp, #56	; 0x38
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	60f8      	str	r0, [r7, #12]
 80077cc:	60b9      	str	r1, [r7, #8]
 80077ce:	607a      	str	r2, [r7, #4]
 80077d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80077d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d109      	bne.n	80077f0 <xQueueGenericSendFromISR+0x2c>
 80077dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e0:	f383 8811 	msr	BASEPRI, r3
 80077e4:	f3bf 8f6f 	isb	sy
 80077e8:	f3bf 8f4f 	dsb	sy
 80077ec:	627b      	str	r3, [r7, #36]	; 0x24
 80077ee:	e7fe      	b.n	80077ee <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d103      	bne.n	80077fe <xQueueGenericSendFromISR+0x3a>
 80077f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d101      	bne.n	8007802 <xQueueGenericSendFromISR+0x3e>
 80077fe:	2301      	movs	r3, #1
 8007800:	e000      	b.n	8007804 <xQueueGenericSendFromISR+0x40>
 8007802:	2300      	movs	r3, #0
 8007804:	2b00      	cmp	r3, #0
 8007806:	d109      	bne.n	800781c <xQueueGenericSendFromISR+0x58>
 8007808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800780c:	f383 8811 	msr	BASEPRI, r3
 8007810:	f3bf 8f6f 	isb	sy
 8007814:	f3bf 8f4f 	dsb	sy
 8007818:	623b      	str	r3, [r7, #32]
 800781a:	e7fe      	b.n	800781a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	2b02      	cmp	r3, #2
 8007820:	d103      	bne.n	800782a <xQueueGenericSendFromISR+0x66>
 8007822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007826:	2b01      	cmp	r3, #1
 8007828:	d101      	bne.n	800782e <xQueueGenericSendFromISR+0x6a>
 800782a:	2301      	movs	r3, #1
 800782c:	e000      	b.n	8007830 <xQueueGenericSendFromISR+0x6c>
 800782e:	2300      	movs	r3, #0
 8007830:	2b00      	cmp	r3, #0
 8007832:	d109      	bne.n	8007848 <xQueueGenericSendFromISR+0x84>
 8007834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007838:	f383 8811 	msr	BASEPRI, r3
 800783c:	f3bf 8f6f 	isb	sy
 8007840:	f3bf 8f4f 	dsb	sy
 8007844:	61fb      	str	r3, [r7, #28]
 8007846:	e7fe      	b.n	8007846 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007848:	f001 fecc 	bl	80095e4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800784c:	f3ef 8211 	mrs	r2, BASEPRI
 8007850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007854:	f383 8811 	msr	BASEPRI, r3
 8007858:	f3bf 8f6f 	isb	sy
 800785c:	f3bf 8f4f 	dsb	sy
 8007860:	61ba      	str	r2, [r7, #24]
 8007862:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007864:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007866:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800786a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800786c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800786e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007870:	429a      	cmp	r2, r3
 8007872:	d302      	bcc.n	800787a <xQueueGenericSendFromISR+0xb6>
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	2b02      	cmp	r3, #2
 8007878:	d12c      	bne.n	80078d4 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800787a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800787c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007880:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007884:	683a      	ldr	r2, [r7, #0]
 8007886:	68b9      	ldr	r1, [r7, #8]
 8007888:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800788a:	f000 f90b 	bl	8007aa4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800788e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007896:	d112      	bne.n	80078be <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800789a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800789c:	2b00      	cmp	r3, #0
 800789e:	d016      	beq.n	80078ce <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80078a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078a2:	3324      	adds	r3, #36	; 0x24
 80078a4:	4618      	mov	r0, r3
 80078a6:	f000 febd 	bl	8008624 <xTaskRemoveFromEventList>
 80078aa:	4603      	mov	r3, r0
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d00e      	beq.n	80078ce <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d00b      	beq.n	80078ce <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2201      	movs	r2, #1
 80078ba:	601a      	str	r2, [r3, #0]
 80078bc:	e007      	b.n	80078ce <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80078be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80078c2:	3301      	adds	r3, #1
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	b25a      	sxtb	r2, r3
 80078c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80078ce:	2301      	movs	r3, #1
 80078d0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80078d2:	e001      	b.n	80078d8 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80078d4:	2300      	movs	r3, #0
 80078d6:	637b      	str	r3, [r7, #52]	; 0x34
 80078d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078da:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80078e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3738      	adds	r7, #56	; 0x38
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}

080078ec <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b08c      	sub	sp, #48	; 0x30
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	60f8      	str	r0, [r7, #12]
 80078f4:	60b9      	str	r1, [r7, #8]
 80078f6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80078f8:	2300      	movs	r3, #0
 80078fa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007902:	2b00      	cmp	r3, #0
 8007904:	d109      	bne.n	800791a <xQueueReceive+0x2e>
	__asm volatile
 8007906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800790a:	f383 8811 	msr	BASEPRI, r3
 800790e:	f3bf 8f6f 	isb	sy
 8007912:	f3bf 8f4f 	dsb	sy
 8007916:	623b      	str	r3, [r7, #32]
 8007918:	e7fe      	b.n	8007918 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d103      	bne.n	8007928 <xQueueReceive+0x3c>
 8007920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007924:	2b00      	cmp	r3, #0
 8007926:	d101      	bne.n	800792c <xQueueReceive+0x40>
 8007928:	2301      	movs	r3, #1
 800792a:	e000      	b.n	800792e <xQueueReceive+0x42>
 800792c:	2300      	movs	r3, #0
 800792e:	2b00      	cmp	r3, #0
 8007930:	d109      	bne.n	8007946 <xQueueReceive+0x5a>
 8007932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007936:	f383 8811 	msr	BASEPRI, r3
 800793a:	f3bf 8f6f 	isb	sy
 800793e:	f3bf 8f4f 	dsb	sy
 8007942:	61fb      	str	r3, [r7, #28]
 8007944:	e7fe      	b.n	8007944 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007946:	f001 f823 	bl	8008990 <xTaskGetSchedulerState>
 800794a:	4603      	mov	r3, r0
 800794c:	2b00      	cmp	r3, #0
 800794e:	d102      	bne.n	8007956 <xQueueReceive+0x6a>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d101      	bne.n	800795a <xQueueReceive+0x6e>
 8007956:	2301      	movs	r3, #1
 8007958:	e000      	b.n	800795c <xQueueReceive+0x70>
 800795a:	2300      	movs	r3, #0
 800795c:	2b00      	cmp	r3, #0
 800795e:	d109      	bne.n	8007974 <xQueueReceive+0x88>
 8007960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007964:	f383 8811 	msr	BASEPRI, r3
 8007968:	f3bf 8f6f 	isb	sy
 800796c:	f3bf 8f4f 	dsb	sy
 8007970:	61bb      	str	r3, [r7, #24]
 8007972:	e7fe      	b.n	8007972 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007974:	f001 fd5a 	bl	800942c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800797a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800797c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800797e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007980:	2b00      	cmp	r3, #0
 8007982:	d01f      	beq.n	80079c4 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007984:	68b9      	ldr	r1, [r7, #8]
 8007986:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007988:	f000 f8f6 	bl	8007b78 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800798c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800798e:	1e5a      	subs	r2, r3, #1
 8007990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007992:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007996:	691b      	ldr	r3, [r3, #16]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d00f      	beq.n	80079bc <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800799c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800799e:	3310      	adds	r3, #16
 80079a0:	4618      	mov	r0, r3
 80079a2:	f000 fe3f 	bl	8008624 <xTaskRemoveFromEventList>
 80079a6:	4603      	mov	r3, r0
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d007      	beq.n	80079bc <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80079ac:	4b3c      	ldr	r3, [pc, #240]	; (8007aa0 <xQueueReceive+0x1b4>)
 80079ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079b2:	601a      	str	r2, [r3, #0]
 80079b4:	f3bf 8f4f 	dsb	sy
 80079b8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80079bc:	f001 fd64 	bl	8009488 <vPortExitCritical>
				return pdPASS;
 80079c0:	2301      	movs	r3, #1
 80079c2:	e069      	b.n	8007a98 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d103      	bne.n	80079d2 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80079ca:	f001 fd5d 	bl	8009488 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80079ce:	2300      	movs	r3, #0
 80079d0:	e062      	b.n	8007a98 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80079d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d106      	bne.n	80079e6 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80079d8:	f107 0310 	add.w	r3, r7, #16
 80079dc:	4618      	mov	r0, r3
 80079de:	f000 fe83 	bl	80086e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80079e2:	2301      	movs	r3, #1
 80079e4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80079e6:	f001 fd4f 	bl	8009488 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80079ea:	f000 fbff 	bl	80081ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80079ee:	f001 fd1d 	bl	800942c <vPortEnterCritical>
 80079f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80079f8:	b25b      	sxtb	r3, r3
 80079fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079fe:	d103      	bne.n	8007a08 <xQueueReceive+0x11c>
 8007a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a02:	2200      	movs	r2, #0
 8007a04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a0e:	b25b      	sxtb	r3, r3
 8007a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a14:	d103      	bne.n	8007a1e <xQueueReceive+0x132>
 8007a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a18:	2200      	movs	r2, #0
 8007a1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007a1e:	f001 fd33 	bl	8009488 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007a22:	1d3a      	adds	r2, r7, #4
 8007a24:	f107 0310 	add.w	r3, r7, #16
 8007a28:	4611      	mov	r1, r2
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f000 fe72 	bl	8008714 <xTaskCheckForTimeOut>
 8007a30:	4603      	mov	r3, r0
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d123      	bne.n	8007a7e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007a36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a38:	f000 f916 	bl	8007c68 <prvIsQueueEmpty>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d017      	beq.n	8007a72 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a44:	3324      	adds	r3, #36	; 0x24
 8007a46:	687a      	ldr	r2, [r7, #4]
 8007a48:	4611      	mov	r1, r2
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	f000 fd9c 	bl	8008588 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007a50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a52:	f000 f8b7 	bl	8007bc4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007a56:	f000 fbd7 	bl	8008208 <xTaskResumeAll>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d189      	bne.n	8007974 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8007a60:	4b0f      	ldr	r3, [pc, #60]	; (8007aa0 <xQueueReceive+0x1b4>)
 8007a62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a66:	601a      	str	r2, [r3, #0]
 8007a68:	f3bf 8f4f 	dsb	sy
 8007a6c:	f3bf 8f6f 	isb	sy
 8007a70:	e780      	b.n	8007974 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007a72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a74:	f000 f8a6 	bl	8007bc4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007a78:	f000 fbc6 	bl	8008208 <xTaskResumeAll>
 8007a7c:	e77a      	b.n	8007974 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007a7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a80:	f000 f8a0 	bl	8007bc4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007a84:	f000 fbc0 	bl	8008208 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007a88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a8a:	f000 f8ed 	bl	8007c68 <prvIsQueueEmpty>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	f43f af6f 	beq.w	8007974 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007a96:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3730      	adds	r7, #48	; 0x30
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}
 8007aa0:	e000ed04 	.word	0xe000ed04

08007aa4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b086      	sub	sp, #24
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	60f8      	str	r0, [r7, #12]
 8007aac:	60b9      	str	r1, [r7, #8]
 8007aae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ab8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d10d      	bne.n	8007ade <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d14d      	bne.n	8007b66 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	689b      	ldr	r3, [r3, #8]
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f000 ff7c 	bl	80089cc <xTaskPriorityDisinherit>
 8007ad4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	609a      	str	r2, [r3, #8]
 8007adc:	e043      	b.n	8007b66 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d119      	bne.n	8007b18 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	6858      	ldr	r0, [r3, #4]
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aec:	461a      	mov	r2, r3
 8007aee:	68b9      	ldr	r1, [r7, #8]
 8007af0:	f001 ffba 	bl	8009a68 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	685a      	ldr	r2, [r3, #4]
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007afc:	441a      	add	r2, r3
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	685a      	ldr	r2, [r3, #4]
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	689b      	ldr	r3, [r3, #8]
 8007b0a:	429a      	cmp	r2, r3
 8007b0c:	d32b      	bcc.n	8007b66 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681a      	ldr	r2, [r3, #0]
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	605a      	str	r2, [r3, #4]
 8007b16:	e026      	b.n	8007b66 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	68d8      	ldr	r0, [r3, #12]
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b20:	461a      	mov	r2, r3
 8007b22:	68b9      	ldr	r1, [r7, #8]
 8007b24:	f001 ffa0 	bl	8009a68 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	68da      	ldr	r2, [r3, #12]
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b30:	425b      	negs	r3, r3
 8007b32:	441a      	add	r2, r3
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	68da      	ldr	r2, [r3, #12]
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	429a      	cmp	r2, r3
 8007b42:	d207      	bcs.n	8007b54 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	689a      	ldr	r2, [r3, #8]
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b4c:	425b      	negs	r3, r3
 8007b4e:	441a      	add	r2, r3
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2b02      	cmp	r3, #2
 8007b58:	d105      	bne.n	8007b66 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007b5a:	693b      	ldr	r3, [r7, #16]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d002      	beq.n	8007b66 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	3b01      	subs	r3, #1
 8007b64:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	1c5a      	adds	r2, r3, #1
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007b6e:	697b      	ldr	r3, [r7, #20]
}
 8007b70:	4618      	mov	r0, r3
 8007b72:	3718      	adds	r7, #24
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}

08007b78 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b082      	sub	sp, #8
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
 8007b80:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d018      	beq.n	8007bbc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	68da      	ldr	r2, [r3, #12]
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b92:	441a      	add	r2, r3
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	68da      	ldr	r2, [r3, #12]
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	689b      	ldr	r3, [r3, #8]
 8007ba0:	429a      	cmp	r2, r3
 8007ba2:	d303      	bcc.n	8007bac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681a      	ldr	r2, [r3, #0]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	68d9      	ldr	r1, [r3, #12]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bb4:	461a      	mov	r2, r3
 8007bb6:	6838      	ldr	r0, [r7, #0]
 8007bb8:	f001 ff56 	bl	8009a68 <memcpy>
	}
}
 8007bbc:	bf00      	nop
 8007bbe:	3708      	adds	r7, #8
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}

08007bc4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b084      	sub	sp, #16
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007bcc:	f001 fc2e 	bl	800942c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007bd6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007bd8:	e011      	b.n	8007bfe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d012      	beq.n	8007c08 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	3324      	adds	r3, #36	; 0x24
 8007be6:	4618      	mov	r0, r3
 8007be8:	f000 fd1c 	bl	8008624 <xTaskRemoveFromEventList>
 8007bec:	4603      	mov	r3, r0
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d001      	beq.n	8007bf6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007bf2:	f000 fdef 	bl	80087d4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007bf6:	7bfb      	ldrb	r3, [r7, #15]
 8007bf8:	3b01      	subs	r3, #1
 8007bfa:	b2db      	uxtb	r3, r3
 8007bfc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007bfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	dce9      	bgt.n	8007bda <prvUnlockQueue+0x16>
 8007c06:	e000      	b.n	8007c0a <prvUnlockQueue+0x46>
					break;
 8007c08:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	22ff      	movs	r2, #255	; 0xff
 8007c0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007c12:	f001 fc39 	bl	8009488 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007c16:	f001 fc09 	bl	800942c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c20:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007c22:	e011      	b.n	8007c48 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	691b      	ldr	r3, [r3, #16]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d012      	beq.n	8007c52 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	3310      	adds	r3, #16
 8007c30:	4618      	mov	r0, r3
 8007c32:	f000 fcf7 	bl	8008624 <xTaskRemoveFromEventList>
 8007c36:	4603      	mov	r3, r0
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d001      	beq.n	8007c40 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007c3c:	f000 fdca 	bl	80087d4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007c40:	7bbb      	ldrb	r3, [r7, #14]
 8007c42:	3b01      	subs	r3, #1
 8007c44:	b2db      	uxtb	r3, r3
 8007c46:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007c48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	dce9      	bgt.n	8007c24 <prvUnlockQueue+0x60>
 8007c50:	e000      	b.n	8007c54 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007c52:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	22ff      	movs	r2, #255	; 0xff
 8007c58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007c5c:	f001 fc14 	bl	8009488 <vPortExitCritical>
}
 8007c60:	bf00      	nop
 8007c62:	3710      	adds	r7, #16
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}

08007c68 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b084      	sub	sp, #16
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007c70:	f001 fbdc 	bl	800942c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d102      	bne.n	8007c82 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	60fb      	str	r3, [r7, #12]
 8007c80:	e001      	b.n	8007c86 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007c82:	2300      	movs	r3, #0
 8007c84:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007c86:	f001 fbff 	bl	8009488 <vPortExitCritical>

	return xReturn;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	3710      	adds	r7, #16
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}

08007c94 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b084      	sub	sp, #16
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007c9c:	f001 fbc6 	bl	800942c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ca8:	429a      	cmp	r2, r3
 8007caa:	d102      	bne.n	8007cb2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007cac:	2301      	movs	r3, #1
 8007cae:	60fb      	str	r3, [r7, #12]
 8007cb0:	e001      	b.n	8007cb6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007cb6:	f001 fbe7 	bl	8009488 <vPortExitCritical>

	return xReturn;
 8007cba:	68fb      	ldr	r3, [r7, #12]
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	3710      	adds	r7, #16
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}

08007cc4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b085      	sub	sp, #20
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007cce:	2300      	movs	r3, #0
 8007cd0:	60fb      	str	r3, [r7, #12]
 8007cd2:	e014      	b.n	8007cfe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007cd4:	4a0e      	ldr	r2, [pc, #56]	; (8007d10 <vQueueAddToRegistry+0x4c>)
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d10b      	bne.n	8007cf8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007ce0:	490b      	ldr	r1, [pc, #44]	; (8007d10 <vQueueAddToRegistry+0x4c>)
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	683a      	ldr	r2, [r7, #0]
 8007ce6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007cea:	4a09      	ldr	r2, [pc, #36]	; (8007d10 <vQueueAddToRegistry+0x4c>)
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	00db      	lsls	r3, r3, #3
 8007cf0:	4413      	add	r3, r2
 8007cf2:	687a      	ldr	r2, [r7, #4]
 8007cf4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007cf6:	e005      	b.n	8007d04 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	3301      	adds	r3, #1
 8007cfc:	60fb      	str	r3, [r7, #12]
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2b07      	cmp	r3, #7
 8007d02:	d9e7      	bls.n	8007cd4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007d04:	bf00      	nop
 8007d06:	3714      	adds	r7, #20
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0e:	4770      	bx	lr
 8007d10:	200063c4 	.word	0x200063c4

08007d14 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b086      	sub	sp, #24
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	60f8      	str	r0, [r7, #12]
 8007d1c:	60b9      	str	r1, [r7, #8]
 8007d1e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007d24:	f001 fb82 	bl	800942c <vPortEnterCritical>
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d2e:	b25b      	sxtb	r3, r3
 8007d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d34:	d103      	bne.n	8007d3e <vQueueWaitForMessageRestricted+0x2a>
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d44:	b25b      	sxtb	r3, r3
 8007d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d4a:	d103      	bne.n	8007d54 <vQueueWaitForMessageRestricted+0x40>
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007d54:	f001 fb98 	bl	8009488 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d106      	bne.n	8007d6e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	3324      	adds	r3, #36	; 0x24
 8007d64:	687a      	ldr	r2, [r7, #4]
 8007d66:	68b9      	ldr	r1, [r7, #8]
 8007d68:	4618      	mov	r0, r3
 8007d6a:	f000 fc31 	bl	80085d0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007d6e:	6978      	ldr	r0, [r7, #20]
 8007d70:	f7ff ff28 	bl	8007bc4 <prvUnlockQueue>
	}
 8007d74:	bf00      	nop
 8007d76:	3718      	adds	r7, #24
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}

08007d7c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b08e      	sub	sp, #56	; 0x38
 8007d80:	af04      	add	r7, sp, #16
 8007d82:	60f8      	str	r0, [r7, #12]
 8007d84:	60b9      	str	r1, [r7, #8]
 8007d86:	607a      	str	r2, [r7, #4]
 8007d88:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d109      	bne.n	8007da4 <xTaskCreateStatic+0x28>
 8007d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d94:	f383 8811 	msr	BASEPRI, r3
 8007d98:	f3bf 8f6f 	isb	sy
 8007d9c:	f3bf 8f4f 	dsb	sy
 8007da0:	623b      	str	r3, [r7, #32]
 8007da2:	e7fe      	b.n	8007da2 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8007da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d109      	bne.n	8007dbe <xTaskCreateStatic+0x42>
 8007daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dae:	f383 8811 	msr	BASEPRI, r3
 8007db2:	f3bf 8f6f 	isb	sy
 8007db6:	f3bf 8f4f 	dsb	sy
 8007dba:	61fb      	str	r3, [r7, #28]
 8007dbc:	e7fe      	b.n	8007dbc <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007dbe:	2360      	movs	r3, #96	; 0x60
 8007dc0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	2b60      	cmp	r3, #96	; 0x60
 8007dc6:	d009      	beq.n	8007ddc <xTaskCreateStatic+0x60>
 8007dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dcc:	f383 8811 	msr	BASEPRI, r3
 8007dd0:	f3bf 8f6f 	isb	sy
 8007dd4:	f3bf 8f4f 	dsb	sy
 8007dd8:	61bb      	str	r3, [r7, #24]
 8007dda:	e7fe      	b.n	8007dda <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007ddc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d01e      	beq.n	8007e22 <xTaskCreateStatic+0xa6>
 8007de4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d01b      	beq.n	8007e22 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dec:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007df2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df6:	2202      	movs	r2, #2
 8007df8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	9303      	str	r3, [sp, #12]
 8007e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e02:	9302      	str	r3, [sp, #8]
 8007e04:	f107 0314 	add.w	r3, r7, #20
 8007e08:	9301      	str	r3, [sp, #4]
 8007e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e0c:	9300      	str	r3, [sp, #0]
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	687a      	ldr	r2, [r7, #4]
 8007e12:	68b9      	ldr	r1, [r7, #8]
 8007e14:	68f8      	ldr	r0, [r7, #12]
 8007e16:	f000 f850 	bl	8007eba <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007e1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007e1c:	f000 f8de 	bl	8007fdc <prvAddNewTaskToReadyList>
 8007e20:	e001      	b.n	8007e26 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8007e22:	2300      	movs	r3, #0
 8007e24:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007e26:	697b      	ldr	r3, [r7, #20]
	}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	3728      	adds	r7, #40	; 0x28
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}

08007e30 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b08c      	sub	sp, #48	; 0x30
 8007e34:	af04      	add	r7, sp, #16
 8007e36:	60f8      	str	r0, [r7, #12]
 8007e38:	60b9      	str	r1, [r7, #8]
 8007e3a:	603b      	str	r3, [r7, #0]
 8007e3c:	4613      	mov	r3, r2
 8007e3e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007e40:	88fb      	ldrh	r3, [r7, #6]
 8007e42:	009b      	lsls	r3, r3, #2
 8007e44:	4618      	mov	r0, r3
 8007e46:	f001 fc0b 	bl	8009660 <pvPortMalloc>
 8007e4a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d00e      	beq.n	8007e70 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007e52:	2060      	movs	r0, #96	; 0x60
 8007e54:	f001 fc04 	bl	8009660 <pvPortMalloc>
 8007e58:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007e5a:	69fb      	ldr	r3, [r7, #28]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d003      	beq.n	8007e68 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007e60:	69fb      	ldr	r3, [r7, #28]
 8007e62:	697a      	ldr	r2, [r7, #20]
 8007e64:	631a      	str	r2, [r3, #48]	; 0x30
 8007e66:	e005      	b.n	8007e74 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007e68:	6978      	ldr	r0, [r7, #20]
 8007e6a:	f001 fcbb 	bl	80097e4 <vPortFree>
 8007e6e:	e001      	b.n	8007e74 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007e70:	2300      	movs	r3, #0
 8007e72:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007e74:	69fb      	ldr	r3, [r7, #28]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d017      	beq.n	8007eaa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007e7a:	69fb      	ldr	r3, [r7, #28]
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007e82:	88fa      	ldrh	r2, [r7, #6]
 8007e84:	2300      	movs	r3, #0
 8007e86:	9303      	str	r3, [sp, #12]
 8007e88:	69fb      	ldr	r3, [r7, #28]
 8007e8a:	9302      	str	r3, [sp, #8]
 8007e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e8e:	9301      	str	r3, [sp, #4]
 8007e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e92:	9300      	str	r3, [sp, #0]
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	68b9      	ldr	r1, [r7, #8]
 8007e98:	68f8      	ldr	r0, [r7, #12]
 8007e9a:	f000 f80e 	bl	8007eba <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007e9e:	69f8      	ldr	r0, [r7, #28]
 8007ea0:	f000 f89c 	bl	8007fdc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	61bb      	str	r3, [r7, #24]
 8007ea8:	e002      	b.n	8007eb0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8007eae:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007eb0:	69bb      	ldr	r3, [r7, #24]
	}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	3720      	adds	r7, #32
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}

08007eba <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007eba:	b580      	push	{r7, lr}
 8007ebc:	b088      	sub	sp, #32
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	60f8      	str	r0, [r7, #12]
 8007ec2:	60b9      	str	r1, [r7, #8]
 8007ec4:	607a      	str	r2, [r7, #4]
 8007ec6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eca:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	009b      	lsls	r3, r3, #2
 8007ed0:	461a      	mov	r2, r3
 8007ed2:	21a5      	movs	r1, #165	; 0xa5
 8007ed4:	f001 fdd3 	bl	8009a7e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007ee2:	3b01      	subs	r3, #1
 8007ee4:	009b      	lsls	r3, r3, #2
 8007ee6:	4413      	add	r3, r2
 8007ee8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007eea:	69bb      	ldr	r3, [r7, #24]
 8007eec:	f023 0307 	bic.w	r3, r3, #7
 8007ef0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007ef2:	69bb      	ldr	r3, [r7, #24]
 8007ef4:	f003 0307 	and.w	r3, r3, #7
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d009      	beq.n	8007f10 <prvInitialiseNewTask+0x56>
 8007efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f00:	f383 8811 	msr	BASEPRI, r3
 8007f04:	f3bf 8f6f 	isb	sy
 8007f08:	f3bf 8f4f 	dsb	sy
 8007f0c:	617b      	str	r3, [r7, #20]
 8007f0e:	e7fe      	b.n	8007f0e <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d01f      	beq.n	8007f56 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007f16:	2300      	movs	r3, #0
 8007f18:	61fb      	str	r3, [r7, #28]
 8007f1a:	e012      	b.n	8007f42 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007f1c:	68ba      	ldr	r2, [r7, #8]
 8007f1e:	69fb      	ldr	r3, [r7, #28]
 8007f20:	4413      	add	r3, r2
 8007f22:	7819      	ldrb	r1, [r3, #0]
 8007f24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f26:	69fb      	ldr	r3, [r7, #28]
 8007f28:	4413      	add	r3, r2
 8007f2a:	3334      	adds	r3, #52	; 0x34
 8007f2c:	460a      	mov	r2, r1
 8007f2e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007f30:	68ba      	ldr	r2, [r7, #8]
 8007f32:	69fb      	ldr	r3, [r7, #28]
 8007f34:	4413      	add	r3, r2
 8007f36:	781b      	ldrb	r3, [r3, #0]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d006      	beq.n	8007f4a <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007f3c:	69fb      	ldr	r3, [r7, #28]
 8007f3e:	3301      	adds	r3, #1
 8007f40:	61fb      	str	r3, [r7, #28]
 8007f42:	69fb      	ldr	r3, [r7, #28]
 8007f44:	2b0f      	cmp	r3, #15
 8007f46:	d9e9      	bls.n	8007f1c <prvInitialiseNewTask+0x62>
 8007f48:	e000      	b.n	8007f4c <prvInitialiseNewTask+0x92>
			{
				break;
 8007f4a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f4e:	2200      	movs	r2, #0
 8007f50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007f54:	e003      	b.n	8007f5e <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f58:	2200      	movs	r2, #0
 8007f5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f60:	2b37      	cmp	r3, #55	; 0x37
 8007f62:	d901      	bls.n	8007f68 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007f64:	2337      	movs	r3, #55	; 0x37
 8007f66:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f6c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f72:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f76:	2200      	movs	r2, #0
 8007f78:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f7c:	3304      	adds	r3, #4
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f7ff f994 	bl	80072ac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f86:	3318      	adds	r3, #24
 8007f88:	4618      	mov	r0, r3
 8007f8a:	f7ff f98f 	bl	80072ac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f92:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f96:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f9c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fa2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8007fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fac:	2200      	movs	r2, #0
 8007fae:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007fb8:	683a      	ldr	r2, [r7, #0]
 8007fba:	68f9      	ldr	r1, [r7, #12]
 8007fbc:	69b8      	ldr	r0, [r7, #24]
 8007fbe:	f001 f90b 	bl	80091d8 <pxPortInitialiseStack>
 8007fc2:	4602      	mov	r2, r0
 8007fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d002      	beq.n	8007fd4 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fd2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007fd4:	bf00      	nop
 8007fd6:	3720      	adds	r7, #32
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}

08007fdc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b082      	sub	sp, #8
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007fe4:	f001 fa22 	bl	800942c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007fe8:	4b2d      	ldr	r3, [pc, #180]	; (80080a0 <prvAddNewTaskToReadyList+0xc4>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	3301      	adds	r3, #1
 8007fee:	4a2c      	ldr	r2, [pc, #176]	; (80080a0 <prvAddNewTaskToReadyList+0xc4>)
 8007ff0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007ff2:	4b2c      	ldr	r3, [pc, #176]	; (80080a4 <prvAddNewTaskToReadyList+0xc8>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d109      	bne.n	800800e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007ffa:	4a2a      	ldr	r2, [pc, #168]	; (80080a4 <prvAddNewTaskToReadyList+0xc8>)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008000:	4b27      	ldr	r3, [pc, #156]	; (80080a0 <prvAddNewTaskToReadyList+0xc4>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	2b01      	cmp	r3, #1
 8008006:	d110      	bne.n	800802a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008008:	f000 fc08 	bl	800881c <prvInitialiseTaskLists>
 800800c:	e00d      	b.n	800802a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800800e:	4b26      	ldr	r3, [pc, #152]	; (80080a8 <prvAddNewTaskToReadyList+0xcc>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d109      	bne.n	800802a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008016:	4b23      	ldr	r3, [pc, #140]	; (80080a4 <prvAddNewTaskToReadyList+0xc8>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008020:	429a      	cmp	r2, r3
 8008022:	d802      	bhi.n	800802a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008024:	4a1f      	ldr	r2, [pc, #124]	; (80080a4 <prvAddNewTaskToReadyList+0xc8>)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800802a:	4b20      	ldr	r3, [pc, #128]	; (80080ac <prvAddNewTaskToReadyList+0xd0>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	3301      	adds	r3, #1
 8008030:	4a1e      	ldr	r2, [pc, #120]	; (80080ac <prvAddNewTaskToReadyList+0xd0>)
 8008032:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008034:	4b1d      	ldr	r3, [pc, #116]	; (80080ac <prvAddNewTaskToReadyList+0xd0>)
 8008036:	681a      	ldr	r2, [r3, #0]
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008040:	4b1b      	ldr	r3, [pc, #108]	; (80080b0 <prvAddNewTaskToReadyList+0xd4>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	429a      	cmp	r2, r3
 8008046:	d903      	bls.n	8008050 <prvAddNewTaskToReadyList+0x74>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800804c:	4a18      	ldr	r2, [pc, #96]	; (80080b0 <prvAddNewTaskToReadyList+0xd4>)
 800804e:	6013      	str	r3, [r2, #0]
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008054:	4613      	mov	r3, r2
 8008056:	009b      	lsls	r3, r3, #2
 8008058:	4413      	add	r3, r2
 800805a:	009b      	lsls	r3, r3, #2
 800805c:	4a15      	ldr	r2, [pc, #84]	; (80080b4 <prvAddNewTaskToReadyList+0xd8>)
 800805e:	441a      	add	r2, r3
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	3304      	adds	r3, #4
 8008064:	4619      	mov	r1, r3
 8008066:	4610      	mov	r0, r2
 8008068:	f7ff f92d 	bl	80072c6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800806c:	f001 fa0c 	bl	8009488 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008070:	4b0d      	ldr	r3, [pc, #52]	; (80080a8 <prvAddNewTaskToReadyList+0xcc>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d00e      	beq.n	8008096 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008078:	4b0a      	ldr	r3, [pc, #40]	; (80080a4 <prvAddNewTaskToReadyList+0xc8>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008082:	429a      	cmp	r2, r3
 8008084:	d207      	bcs.n	8008096 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008086:	4b0c      	ldr	r3, [pc, #48]	; (80080b8 <prvAddNewTaskToReadyList+0xdc>)
 8008088:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800808c:	601a      	str	r2, [r3, #0]
 800808e:	f3bf 8f4f 	dsb	sy
 8008092:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008096:	bf00      	nop
 8008098:	3708      	adds	r7, #8
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}
 800809e:	bf00      	nop
 80080a0:	20000da4 	.word	0x20000da4
 80080a4:	200008d0 	.word	0x200008d0
 80080a8:	20000db0 	.word	0x20000db0
 80080ac:	20000dc0 	.word	0x20000dc0
 80080b0:	20000dac 	.word	0x20000dac
 80080b4:	200008d4 	.word	0x200008d4
 80080b8:	e000ed04 	.word	0xe000ed04

080080bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b084      	sub	sp, #16
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80080c4:	2300      	movs	r3, #0
 80080c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d016      	beq.n	80080fc <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80080ce:	4b13      	ldr	r3, [pc, #76]	; (800811c <vTaskDelay+0x60>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d009      	beq.n	80080ea <vTaskDelay+0x2e>
 80080d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080da:	f383 8811 	msr	BASEPRI, r3
 80080de:	f3bf 8f6f 	isb	sy
 80080e2:	f3bf 8f4f 	dsb	sy
 80080e6:	60bb      	str	r3, [r7, #8]
 80080e8:	e7fe      	b.n	80080e8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80080ea:	f000 f87f 	bl	80081ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80080ee:	2100      	movs	r1, #0
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f000 fcd7 	bl	8008aa4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80080f6:	f000 f887 	bl	8008208 <xTaskResumeAll>
 80080fa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d107      	bne.n	8008112 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8008102:	4b07      	ldr	r3, [pc, #28]	; (8008120 <vTaskDelay+0x64>)
 8008104:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008108:	601a      	str	r2, [r3, #0]
 800810a:	f3bf 8f4f 	dsb	sy
 800810e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008112:	bf00      	nop
 8008114:	3710      	adds	r7, #16
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}
 800811a:	bf00      	nop
 800811c:	20000dcc 	.word	0x20000dcc
 8008120:	e000ed04 	.word	0xe000ed04

08008124 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b08a      	sub	sp, #40	; 0x28
 8008128:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800812a:	2300      	movs	r3, #0
 800812c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800812e:	2300      	movs	r3, #0
 8008130:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008132:	463a      	mov	r2, r7
 8008134:	1d39      	adds	r1, r7, #4
 8008136:	f107 0308 	add.w	r3, r7, #8
 800813a:	4618      	mov	r0, r3
 800813c:	f7ff f862 	bl	8007204 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008140:	6839      	ldr	r1, [r7, #0]
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	68ba      	ldr	r2, [r7, #8]
 8008146:	9202      	str	r2, [sp, #8]
 8008148:	9301      	str	r3, [sp, #4]
 800814a:	2300      	movs	r3, #0
 800814c:	9300      	str	r3, [sp, #0]
 800814e:	2300      	movs	r3, #0
 8008150:	460a      	mov	r2, r1
 8008152:	4920      	ldr	r1, [pc, #128]	; (80081d4 <vTaskStartScheduler+0xb0>)
 8008154:	4820      	ldr	r0, [pc, #128]	; (80081d8 <vTaskStartScheduler+0xb4>)
 8008156:	f7ff fe11 	bl	8007d7c <xTaskCreateStatic>
 800815a:	4602      	mov	r2, r0
 800815c:	4b1f      	ldr	r3, [pc, #124]	; (80081dc <vTaskStartScheduler+0xb8>)
 800815e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008160:	4b1e      	ldr	r3, [pc, #120]	; (80081dc <vTaskStartScheduler+0xb8>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d002      	beq.n	800816e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008168:	2301      	movs	r3, #1
 800816a:	617b      	str	r3, [r7, #20]
 800816c:	e001      	b.n	8008172 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800816e:	2300      	movs	r3, #0
 8008170:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	2b01      	cmp	r3, #1
 8008176:	d102      	bne.n	800817e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008178:	f000 fce8 	bl	8008b4c <xTimerCreateTimerTask>
 800817c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800817e:	697b      	ldr	r3, [r7, #20]
 8008180:	2b01      	cmp	r3, #1
 8008182:	d115      	bne.n	80081b0 <vTaskStartScheduler+0x8c>
 8008184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008188:	f383 8811 	msr	BASEPRI, r3
 800818c:	f3bf 8f6f 	isb	sy
 8008190:	f3bf 8f4f 	dsb	sy
 8008194:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008196:	4b12      	ldr	r3, [pc, #72]	; (80081e0 <vTaskStartScheduler+0xbc>)
 8008198:	f04f 32ff 	mov.w	r2, #4294967295
 800819c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800819e:	4b11      	ldr	r3, [pc, #68]	; (80081e4 <vTaskStartScheduler+0xc0>)
 80081a0:	2201      	movs	r2, #1
 80081a2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80081a4:	4b10      	ldr	r3, [pc, #64]	; (80081e8 <vTaskStartScheduler+0xc4>)
 80081a6:	2200      	movs	r2, #0
 80081a8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80081aa:	f001 f8a1 	bl	80092f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80081ae:	e00d      	b.n	80081cc <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081b6:	d109      	bne.n	80081cc <vTaskStartScheduler+0xa8>
 80081b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081bc:	f383 8811 	msr	BASEPRI, r3
 80081c0:	f3bf 8f6f 	isb	sy
 80081c4:	f3bf 8f4f 	dsb	sy
 80081c8:	60fb      	str	r3, [r7, #12]
 80081ca:	e7fe      	b.n	80081ca <vTaskStartScheduler+0xa6>
}
 80081cc:	bf00      	nop
 80081ce:	3718      	adds	r7, #24
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}
 80081d4:	0800aad4 	.word	0x0800aad4
 80081d8:	080087ed 	.word	0x080087ed
 80081dc:	20000dc8 	.word	0x20000dc8
 80081e0:	20000dc4 	.word	0x20000dc4
 80081e4:	20000db0 	.word	0x20000db0
 80081e8:	20000da8 	.word	0x20000da8

080081ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80081ec:	b480      	push	{r7}
 80081ee:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80081f0:	4b04      	ldr	r3, [pc, #16]	; (8008204 <vTaskSuspendAll+0x18>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	3301      	adds	r3, #1
 80081f6:	4a03      	ldr	r2, [pc, #12]	; (8008204 <vTaskSuspendAll+0x18>)
 80081f8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80081fa:	bf00      	nop
 80081fc:	46bd      	mov	sp, r7
 80081fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008202:	4770      	bx	lr
 8008204:	20000dcc 	.word	0x20000dcc

08008208 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b084      	sub	sp, #16
 800820c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800820e:	2300      	movs	r3, #0
 8008210:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008212:	2300      	movs	r3, #0
 8008214:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008216:	4b41      	ldr	r3, [pc, #260]	; (800831c <xTaskResumeAll+0x114>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d109      	bne.n	8008232 <xTaskResumeAll+0x2a>
 800821e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008222:	f383 8811 	msr	BASEPRI, r3
 8008226:	f3bf 8f6f 	isb	sy
 800822a:	f3bf 8f4f 	dsb	sy
 800822e:	603b      	str	r3, [r7, #0]
 8008230:	e7fe      	b.n	8008230 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008232:	f001 f8fb 	bl	800942c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008236:	4b39      	ldr	r3, [pc, #228]	; (800831c <xTaskResumeAll+0x114>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	3b01      	subs	r3, #1
 800823c:	4a37      	ldr	r2, [pc, #220]	; (800831c <xTaskResumeAll+0x114>)
 800823e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008240:	4b36      	ldr	r3, [pc, #216]	; (800831c <xTaskResumeAll+0x114>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d162      	bne.n	800830e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008248:	4b35      	ldr	r3, [pc, #212]	; (8008320 <xTaskResumeAll+0x118>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d05e      	beq.n	800830e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008250:	e02f      	b.n	80082b2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008252:	4b34      	ldr	r3, [pc, #208]	; (8008324 <xTaskResumeAll+0x11c>)
 8008254:	68db      	ldr	r3, [r3, #12]
 8008256:	68db      	ldr	r3, [r3, #12]
 8008258:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	3318      	adds	r3, #24
 800825e:	4618      	mov	r0, r3
 8008260:	f7ff f88e 	bl	8007380 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	3304      	adds	r3, #4
 8008268:	4618      	mov	r0, r3
 800826a:	f7ff f889 	bl	8007380 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008272:	4b2d      	ldr	r3, [pc, #180]	; (8008328 <xTaskResumeAll+0x120>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	429a      	cmp	r2, r3
 8008278:	d903      	bls.n	8008282 <xTaskResumeAll+0x7a>
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800827e:	4a2a      	ldr	r2, [pc, #168]	; (8008328 <xTaskResumeAll+0x120>)
 8008280:	6013      	str	r3, [r2, #0]
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008286:	4613      	mov	r3, r2
 8008288:	009b      	lsls	r3, r3, #2
 800828a:	4413      	add	r3, r2
 800828c:	009b      	lsls	r3, r3, #2
 800828e:	4a27      	ldr	r2, [pc, #156]	; (800832c <xTaskResumeAll+0x124>)
 8008290:	441a      	add	r2, r3
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	3304      	adds	r3, #4
 8008296:	4619      	mov	r1, r3
 8008298:	4610      	mov	r0, r2
 800829a:	f7ff f814 	bl	80072c6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082a2:	4b23      	ldr	r3, [pc, #140]	; (8008330 <xTaskResumeAll+0x128>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082a8:	429a      	cmp	r2, r3
 80082aa:	d302      	bcc.n	80082b2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80082ac:	4b21      	ldr	r3, [pc, #132]	; (8008334 <xTaskResumeAll+0x12c>)
 80082ae:	2201      	movs	r2, #1
 80082b0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80082b2:	4b1c      	ldr	r3, [pc, #112]	; (8008324 <xTaskResumeAll+0x11c>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d1cb      	bne.n	8008252 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d001      	beq.n	80082c4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80082c0:	f000 fb46 	bl	8008950 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80082c4:	4b1c      	ldr	r3, [pc, #112]	; (8008338 <xTaskResumeAll+0x130>)
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d010      	beq.n	80082f2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80082d0:	f000 f846 	bl	8008360 <xTaskIncrementTick>
 80082d4:	4603      	mov	r3, r0
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d002      	beq.n	80082e0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80082da:	4b16      	ldr	r3, [pc, #88]	; (8008334 <xTaskResumeAll+0x12c>)
 80082dc:	2201      	movs	r2, #1
 80082de:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	3b01      	subs	r3, #1
 80082e4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d1f1      	bne.n	80082d0 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80082ec:	4b12      	ldr	r3, [pc, #72]	; (8008338 <xTaskResumeAll+0x130>)
 80082ee:	2200      	movs	r2, #0
 80082f0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80082f2:	4b10      	ldr	r3, [pc, #64]	; (8008334 <xTaskResumeAll+0x12c>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d009      	beq.n	800830e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80082fa:	2301      	movs	r3, #1
 80082fc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80082fe:	4b0f      	ldr	r3, [pc, #60]	; (800833c <xTaskResumeAll+0x134>)
 8008300:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008304:	601a      	str	r2, [r3, #0]
 8008306:	f3bf 8f4f 	dsb	sy
 800830a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800830e:	f001 f8bb 	bl	8009488 <vPortExitCritical>

	return xAlreadyYielded;
 8008312:	68bb      	ldr	r3, [r7, #8]
}
 8008314:	4618      	mov	r0, r3
 8008316:	3710      	adds	r7, #16
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}
 800831c:	20000dcc 	.word	0x20000dcc
 8008320:	20000da4 	.word	0x20000da4
 8008324:	20000d64 	.word	0x20000d64
 8008328:	20000dac 	.word	0x20000dac
 800832c:	200008d4 	.word	0x200008d4
 8008330:	200008d0 	.word	0x200008d0
 8008334:	20000db8 	.word	0x20000db8
 8008338:	20000db4 	.word	0x20000db4
 800833c:	e000ed04 	.word	0xe000ed04

08008340 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008340:	b480      	push	{r7}
 8008342:	b083      	sub	sp, #12
 8008344:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008346:	4b05      	ldr	r3, [pc, #20]	; (800835c <xTaskGetTickCount+0x1c>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800834c:	687b      	ldr	r3, [r7, #4]
}
 800834e:	4618      	mov	r0, r3
 8008350:	370c      	adds	r7, #12
 8008352:	46bd      	mov	sp, r7
 8008354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008358:	4770      	bx	lr
 800835a:	bf00      	nop
 800835c:	20000da8 	.word	0x20000da8

08008360 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b086      	sub	sp, #24
 8008364:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008366:	2300      	movs	r3, #0
 8008368:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800836a:	4b4e      	ldr	r3, [pc, #312]	; (80084a4 <xTaskIncrementTick+0x144>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	2b00      	cmp	r3, #0
 8008370:	f040 8088 	bne.w	8008484 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008374:	4b4c      	ldr	r3, [pc, #304]	; (80084a8 <xTaskIncrementTick+0x148>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	3301      	adds	r3, #1
 800837a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800837c:	4a4a      	ldr	r2, [pc, #296]	; (80084a8 <xTaskIncrementTick+0x148>)
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008382:	693b      	ldr	r3, [r7, #16]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d11f      	bne.n	80083c8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8008388:	4b48      	ldr	r3, [pc, #288]	; (80084ac <xTaskIncrementTick+0x14c>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d009      	beq.n	80083a6 <xTaskIncrementTick+0x46>
 8008392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008396:	f383 8811 	msr	BASEPRI, r3
 800839a:	f3bf 8f6f 	isb	sy
 800839e:	f3bf 8f4f 	dsb	sy
 80083a2:	603b      	str	r3, [r7, #0]
 80083a4:	e7fe      	b.n	80083a4 <xTaskIncrementTick+0x44>
 80083a6:	4b41      	ldr	r3, [pc, #260]	; (80084ac <xTaskIncrementTick+0x14c>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	60fb      	str	r3, [r7, #12]
 80083ac:	4b40      	ldr	r3, [pc, #256]	; (80084b0 <xTaskIncrementTick+0x150>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4a3e      	ldr	r2, [pc, #248]	; (80084ac <xTaskIncrementTick+0x14c>)
 80083b2:	6013      	str	r3, [r2, #0]
 80083b4:	4a3e      	ldr	r2, [pc, #248]	; (80084b0 <xTaskIncrementTick+0x150>)
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	6013      	str	r3, [r2, #0]
 80083ba:	4b3e      	ldr	r3, [pc, #248]	; (80084b4 <xTaskIncrementTick+0x154>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	3301      	adds	r3, #1
 80083c0:	4a3c      	ldr	r2, [pc, #240]	; (80084b4 <xTaskIncrementTick+0x154>)
 80083c2:	6013      	str	r3, [r2, #0]
 80083c4:	f000 fac4 	bl	8008950 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80083c8:	4b3b      	ldr	r3, [pc, #236]	; (80084b8 <xTaskIncrementTick+0x158>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	693a      	ldr	r2, [r7, #16]
 80083ce:	429a      	cmp	r2, r3
 80083d0:	d349      	bcc.n	8008466 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80083d2:	4b36      	ldr	r3, [pc, #216]	; (80084ac <xTaskIncrementTick+0x14c>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d104      	bne.n	80083e6 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083dc:	4b36      	ldr	r3, [pc, #216]	; (80084b8 <xTaskIncrementTick+0x158>)
 80083de:	f04f 32ff 	mov.w	r2, #4294967295
 80083e2:	601a      	str	r2, [r3, #0]
					break;
 80083e4:	e03f      	b.n	8008466 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083e6:	4b31      	ldr	r3, [pc, #196]	; (80084ac <xTaskIncrementTick+0x14c>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	68db      	ldr	r3, [r3, #12]
 80083ec:	68db      	ldr	r3, [r3, #12]
 80083ee:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	685b      	ldr	r3, [r3, #4]
 80083f4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80083f6:	693a      	ldr	r2, [r7, #16]
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	429a      	cmp	r2, r3
 80083fc:	d203      	bcs.n	8008406 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80083fe:	4a2e      	ldr	r2, [pc, #184]	; (80084b8 <xTaskIncrementTick+0x158>)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008404:	e02f      	b.n	8008466 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	3304      	adds	r3, #4
 800840a:	4618      	mov	r0, r3
 800840c:	f7fe ffb8 	bl	8007380 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008414:	2b00      	cmp	r3, #0
 8008416:	d004      	beq.n	8008422 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	3318      	adds	r3, #24
 800841c:	4618      	mov	r0, r3
 800841e:	f7fe ffaf 	bl	8007380 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008426:	4b25      	ldr	r3, [pc, #148]	; (80084bc <xTaskIncrementTick+0x15c>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	429a      	cmp	r2, r3
 800842c:	d903      	bls.n	8008436 <xTaskIncrementTick+0xd6>
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008432:	4a22      	ldr	r2, [pc, #136]	; (80084bc <xTaskIncrementTick+0x15c>)
 8008434:	6013      	str	r3, [r2, #0]
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800843a:	4613      	mov	r3, r2
 800843c:	009b      	lsls	r3, r3, #2
 800843e:	4413      	add	r3, r2
 8008440:	009b      	lsls	r3, r3, #2
 8008442:	4a1f      	ldr	r2, [pc, #124]	; (80084c0 <xTaskIncrementTick+0x160>)
 8008444:	441a      	add	r2, r3
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	3304      	adds	r3, #4
 800844a:	4619      	mov	r1, r3
 800844c:	4610      	mov	r0, r2
 800844e:	f7fe ff3a 	bl	80072c6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008456:	4b1b      	ldr	r3, [pc, #108]	; (80084c4 <xTaskIncrementTick+0x164>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800845c:	429a      	cmp	r2, r3
 800845e:	d3b8      	bcc.n	80083d2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8008460:	2301      	movs	r3, #1
 8008462:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008464:	e7b5      	b.n	80083d2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008466:	4b17      	ldr	r3, [pc, #92]	; (80084c4 <xTaskIncrementTick+0x164>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800846c:	4914      	ldr	r1, [pc, #80]	; (80084c0 <xTaskIncrementTick+0x160>)
 800846e:	4613      	mov	r3, r2
 8008470:	009b      	lsls	r3, r3, #2
 8008472:	4413      	add	r3, r2
 8008474:	009b      	lsls	r3, r3, #2
 8008476:	440b      	add	r3, r1
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	2b01      	cmp	r3, #1
 800847c:	d907      	bls.n	800848e <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800847e:	2301      	movs	r3, #1
 8008480:	617b      	str	r3, [r7, #20]
 8008482:	e004      	b.n	800848e <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008484:	4b10      	ldr	r3, [pc, #64]	; (80084c8 <xTaskIncrementTick+0x168>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	3301      	adds	r3, #1
 800848a:	4a0f      	ldr	r2, [pc, #60]	; (80084c8 <xTaskIncrementTick+0x168>)
 800848c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800848e:	4b0f      	ldr	r3, [pc, #60]	; (80084cc <xTaskIncrementTick+0x16c>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d001      	beq.n	800849a <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8008496:	2301      	movs	r3, #1
 8008498:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800849a:	697b      	ldr	r3, [r7, #20]
}
 800849c:	4618      	mov	r0, r3
 800849e:	3718      	adds	r7, #24
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}
 80084a4:	20000dcc 	.word	0x20000dcc
 80084a8:	20000da8 	.word	0x20000da8
 80084ac:	20000d5c 	.word	0x20000d5c
 80084b0:	20000d60 	.word	0x20000d60
 80084b4:	20000dbc 	.word	0x20000dbc
 80084b8:	20000dc4 	.word	0x20000dc4
 80084bc:	20000dac 	.word	0x20000dac
 80084c0:	200008d4 	.word	0x200008d4
 80084c4:	200008d0 	.word	0x200008d0
 80084c8:	20000db4 	.word	0x20000db4
 80084cc:	20000db8 	.word	0x20000db8

080084d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80084d0:	b480      	push	{r7}
 80084d2:	b085      	sub	sp, #20
 80084d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80084d6:	4b27      	ldr	r3, [pc, #156]	; (8008574 <vTaskSwitchContext+0xa4>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d003      	beq.n	80084e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80084de:	4b26      	ldr	r3, [pc, #152]	; (8008578 <vTaskSwitchContext+0xa8>)
 80084e0:	2201      	movs	r2, #1
 80084e2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80084e4:	e040      	b.n	8008568 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80084e6:	4b24      	ldr	r3, [pc, #144]	; (8008578 <vTaskSwitchContext+0xa8>)
 80084e8:	2200      	movs	r2, #0
 80084ea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084ec:	4b23      	ldr	r3, [pc, #140]	; (800857c <vTaskSwitchContext+0xac>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	60fb      	str	r3, [r7, #12]
 80084f2:	e00f      	b.n	8008514 <vTaskSwitchContext+0x44>
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d109      	bne.n	800850e <vTaskSwitchContext+0x3e>
 80084fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084fe:	f383 8811 	msr	BASEPRI, r3
 8008502:	f3bf 8f6f 	isb	sy
 8008506:	f3bf 8f4f 	dsb	sy
 800850a:	607b      	str	r3, [r7, #4]
 800850c:	e7fe      	b.n	800850c <vTaskSwitchContext+0x3c>
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	3b01      	subs	r3, #1
 8008512:	60fb      	str	r3, [r7, #12]
 8008514:	491a      	ldr	r1, [pc, #104]	; (8008580 <vTaskSwitchContext+0xb0>)
 8008516:	68fa      	ldr	r2, [r7, #12]
 8008518:	4613      	mov	r3, r2
 800851a:	009b      	lsls	r3, r3, #2
 800851c:	4413      	add	r3, r2
 800851e:	009b      	lsls	r3, r3, #2
 8008520:	440b      	add	r3, r1
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d0e5      	beq.n	80084f4 <vTaskSwitchContext+0x24>
 8008528:	68fa      	ldr	r2, [r7, #12]
 800852a:	4613      	mov	r3, r2
 800852c:	009b      	lsls	r3, r3, #2
 800852e:	4413      	add	r3, r2
 8008530:	009b      	lsls	r3, r3, #2
 8008532:	4a13      	ldr	r2, [pc, #76]	; (8008580 <vTaskSwitchContext+0xb0>)
 8008534:	4413      	add	r3, r2
 8008536:	60bb      	str	r3, [r7, #8]
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	685b      	ldr	r3, [r3, #4]
 800853c:	685a      	ldr	r2, [r3, #4]
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	605a      	str	r2, [r3, #4]
 8008542:	68bb      	ldr	r3, [r7, #8]
 8008544:	685a      	ldr	r2, [r3, #4]
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	3308      	adds	r3, #8
 800854a:	429a      	cmp	r2, r3
 800854c:	d104      	bne.n	8008558 <vTaskSwitchContext+0x88>
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	685b      	ldr	r3, [r3, #4]
 8008552:	685a      	ldr	r2, [r3, #4]
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	605a      	str	r2, [r3, #4]
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	685b      	ldr	r3, [r3, #4]
 800855c:	68db      	ldr	r3, [r3, #12]
 800855e:	4a09      	ldr	r2, [pc, #36]	; (8008584 <vTaskSwitchContext+0xb4>)
 8008560:	6013      	str	r3, [r2, #0]
 8008562:	4a06      	ldr	r2, [pc, #24]	; (800857c <vTaskSwitchContext+0xac>)
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	6013      	str	r3, [r2, #0]
}
 8008568:	bf00      	nop
 800856a:	3714      	adds	r7, #20
 800856c:	46bd      	mov	sp, r7
 800856e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008572:	4770      	bx	lr
 8008574:	20000dcc 	.word	0x20000dcc
 8008578:	20000db8 	.word	0x20000db8
 800857c:	20000dac 	.word	0x20000dac
 8008580:	200008d4 	.word	0x200008d4
 8008584:	200008d0 	.word	0x200008d0

08008588 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b084      	sub	sp, #16
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
 8008590:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d109      	bne.n	80085ac <vTaskPlaceOnEventList+0x24>
 8008598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800859c:	f383 8811 	msr	BASEPRI, r3
 80085a0:	f3bf 8f6f 	isb	sy
 80085a4:	f3bf 8f4f 	dsb	sy
 80085a8:	60fb      	str	r3, [r7, #12]
 80085aa:	e7fe      	b.n	80085aa <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80085ac:	4b07      	ldr	r3, [pc, #28]	; (80085cc <vTaskPlaceOnEventList+0x44>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	3318      	adds	r3, #24
 80085b2:	4619      	mov	r1, r3
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f7fe feaa 	bl	800730e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80085ba:	2101      	movs	r1, #1
 80085bc:	6838      	ldr	r0, [r7, #0]
 80085be:	f000 fa71 	bl	8008aa4 <prvAddCurrentTaskToDelayedList>
}
 80085c2:	bf00      	nop
 80085c4:	3710      	adds	r7, #16
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}
 80085ca:	bf00      	nop
 80085cc:	200008d0 	.word	0x200008d0

080085d0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b086      	sub	sp, #24
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	60f8      	str	r0, [r7, #12]
 80085d8:	60b9      	str	r1, [r7, #8]
 80085da:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d109      	bne.n	80085f6 <vTaskPlaceOnEventListRestricted+0x26>
 80085e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085e6:	f383 8811 	msr	BASEPRI, r3
 80085ea:	f3bf 8f6f 	isb	sy
 80085ee:	f3bf 8f4f 	dsb	sy
 80085f2:	617b      	str	r3, [r7, #20]
 80085f4:	e7fe      	b.n	80085f4 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80085f6:	4b0a      	ldr	r3, [pc, #40]	; (8008620 <vTaskPlaceOnEventListRestricted+0x50>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	3318      	adds	r3, #24
 80085fc:	4619      	mov	r1, r3
 80085fe:	68f8      	ldr	r0, [r7, #12]
 8008600:	f7fe fe61 	bl	80072c6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d002      	beq.n	8008610 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800860a:	f04f 33ff 	mov.w	r3, #4294967295
 800860e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008610:	6879      	ldr	r1, [r7, #4]
 8008612:	68b8      	ldr	r0, [r7, #8]
 8008614:	f000 fa46 	bl	8008aa4 <prvAddCurrentTaskToDelayedList>
	}
 8008618:	bf00      	nop
 800861a:	3718      	adds	r7, #24
 800861c:	46bd      	mov	sp, r7
 800861e:	bd80      	pop	{r7, pc}
 8008620:	200008d0 	.word	0x200008d0

08008624 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b086      	sub	sp, #24
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	68db      	ldr	r3, [r3, #12]
 8008630:	68db      	ldr	r3, [r3, #12]
 8008632:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008634:	693b      	ldr	r3, [r7, #16]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d109      	bne.n	800864e <xTaskRemoveFromEventList+0x2a>
 800863a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800863e:	f383 8811 	msr	BASEPRI, r3
 8008642:	f3bf 8f6f 	isb	sy
 8008646:	f3bf 8f4f 	dsb	sy
 800864a:	60fb      	str	r3, [r7, #12]
 800864c:	e7fe      	b.n	800864c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800864e:	693b      	ldr	r3, [r7, #16]
 8008650:	3318      	adds	r3, #24
 8008652:	4618      	mov	r0, r3
 8008654:	f7fe fe94 	bl	8007380 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008658:	4b1d      	ldr	r3, [pc, #116]	; (80086d0 <xTaskRemoveFromEventList+0xac>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d11d      	bne.n	800869c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	3304      	adds	r3, #4
 8008664:	4618      	mov	r0, r3
 8008666:	f7fe fe8b 	bl	8007380 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800866a:	693b      	ldr	r3, [r7, #16]
 800866c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800866e:	4b19      	ldr	r3, [pc, #100]	; (80086d4 <xTaskRemoveFromEventList+0xb0>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	429a      	cmp	r2, r3
 8008674:	d903      	bls.n	800867e <xTaskRemoveFromEventList+0x5a>
 8008676:	693b      	ldr	r3, [r7, #16]
 8008678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800867a:	4a16      	ldr	r2, [pc, #88]	; (80086d4 <xTaskRemoveFromEventList+0xb0>)
 800867c:	6013      	str	r3, [r2, #0]
 800867e:	693b      	ldr	r3, [r7, #16]
 8008680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008682:	4613      	mov	r3, r2
 8008684:	009b      	lsls	r3, r3, #2
 8008686:	4413      	add	r3, r2
 8008688:	009b      	lsls	r3, r3, #2
 800868a:	4a13      	ldr	r2, [pc, #76]	; (80086d8 <xTaskRemoveFromEventList+0xb4>)
 800868c:	441a      	add	r2, r3
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	3304      	adds	r3, #4
 8008692:	4619      	mov	r1, r3
 8008694:	4610      	mov	r0, r2
 8008696:	f7fe fe16 	bl	80072c6 <vListInsertEnd>
 800869a:	e005      	b.n	80086a8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800869c:	693b      	ldr	r3, [r7, #16]
 800869e:	3318      	adds	r3, #24
 80086a0:	4619      	mov	r1, r3
 80086a2:	480e      	ldr	r0, [pc, #56]	; (80086dc <xTaskRemoveFromEventList+0xb8>)
 80086a4:	f7fe fe0f 	bl	80072c6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086ac:	4b0c      	ldr	r3, [pc, #48]	; (80086e0 <xTaskRemoveFromEventList+0xbc>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086b2:	429a      	cmp	r2, r3
 80086b4:	d905      	bls.n	80086c2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80086b6:	2301      	movs	r3, #1
 80086b8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80086ba:	4b0a      	ldr	r3, [pc, #40]	; (80086e4 <xTaskRemoveFromEventList+0xc0>)
 80086bc:	2201      	movs	r2, #1
 80086be:	601a      	str	r2, [r3, #0]
 80086c0:	e001      	b.n	80086c6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80086c2:	2300      	movs	r3, #0
 80086c4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80086c6:	697b      	ldr	r3, [r7, #20]
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	3718      	adds	r7, #24
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}
 80086d0:	20000dcc 	.word	0x20000dcc
 80086d4:	20000dac 	.word	0x20000dac
 80086d8:	200008d4 	.word	0x200008d4
 80086dc:	20000d64 	.word	0x20000d64
 80086e0:	200008d0 	.word	0x200008d0
 80086e4:	20000db8 	.word	0x20000db8

080086e8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80086e8:	b480      	push	{r7}
 80086ea:	b083      	sub	sp, #12
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80086f0:	4b06      	ldr	r3, [pc, #24]	; (800870c <vTaskInternalSetTimeOutState+0x24>)
 80086f2:	681a      	ldr	r2, [r3, #0]
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80086f8:	4b05      	ldr	r3, [pc, #20]	; (8008710 <vTaskInternalSetTimeOutState+0x28>)
 80086fa:	681a      	ldr	r2, [r3, #0]
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	605a      	str	r2, [r3, #4]
}
 8008700:	bf00      	nop
 8008702:	370c      	adds	r7, #12
 8008704:	46bd      	mov	sp, r7
 8008706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870a:	4770      	bx	lr
 800870c:	20000dbc 	.word	0x20000dbc
 8008710:	20000da8 	.word	0x20000da8

08008714 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b088      	sub	sp, #32
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
 800871c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d109      	bne.n	8008738 <xTaskCheckForTimeOut+0x24>
 8008724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008728:	f383 8811 	msr	BASEPRI, r3
 800872c:	f3bf 8f6f 	isb	sy
 8008730:	f3bf 8f4f 	dsb	sy
 8008734:	613b      	str	r3, [r7, #16]
 8008736:	e7fe      	b.n	8008736 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d109      	bne.n	8008752 <xTaskCheckForTimeOut+0x3e>
 800873e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008742:	f383 8811 	msr	BASEPRI, r3
 8008746:	f3bf 8f6f 	isb	sy
 800874a:	f3bf 8f4f 	dsb	sy
 800874e:	60fb      	str	r3, [r7, #12]
 8008750:	e7fe      	b.n	8008750 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8008752:	f000 fe6b 	bl	800942c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008756:	4b1d      	ldr	r3, [pc, #116]	; (80087cc <xTaskCheckForTimeOut+0xb8>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	685b      	ldr	r3, [r3, #4]
 8008760:	69ba      	ldr	r2, [r7, #24]
 8008762:	1ad3      	subs	r3, r2, r3
 8008764:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800876e:	d102      	bne.n	8008776 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008770:	2300      	movs	r3, #0
 8008772:	61fb      	str	r3, [r7, #28]
 8008774:	e023      	b.n	80087be <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681a      	ldr	r2, [r3, #0]
 800877a:	4b15      	ldr	r3, [pc, #84]	; (80087d0 <xTaskCheckForTimeOut+0xbc>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	429a      	cmp	r2, r3
 8008780:	d007      	beq.n	8008792 <xTaskCheckForTimeOut+0x7e>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	685b      	ldr	r3, [r3, #4]
 8008786:	69ba      	ldr	r2, [r7, #24]
 8008788:	429a      	cmp	r2, r3
 800878a:	d302      	bcc.n	8008792 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800878c:	2301      	movs	r3, #1
 800878e:	61fb      	str	r3, [r7, #28]
 8008790:	e015      	b.n	80087be <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	697a      	ldr	r2, [r7, #20]
 8008798:	429a      	cmp	r2, r3
 800879a:	d20b      	bcs.n	80087b4 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	681a      	ldr	r2, [r3, #0]
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	1ad2      	subs	r2, r2, r3
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f7ff ff9d 	bl	80086e8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80087ae:	2300      	movs	r3, #0
 80087b0:	61fb      	str	r3, [r7, #28]
 80087b2:	e004      	b.n	80087be <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	2200      	movs	r2, #0
 80087b8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80087ba:	2301      	movs	r3, #1
 80087bc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80087be:	f000 fe63 	bl	8009488 <vPortExitCritical>

	return xReturn;
 80087c2:	69fb      	ldr	r3, [r7, #28]
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	3720      	adds	r7, #32
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}
 80087cc:	20000da8 	.word	0x20000da8
 80087d0:	20000dbc 	.word	0x20000dbc

080087d4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80087d4:	b480      	push	{r7}
 80087d6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80087d8:	4b03      	ldr	r3, [pc, #12]	; (80087e8 <vTaskMissedYield+0x14>)
 80087da:	2201      	movs	r2, #1
 80087dc:	601a      	str	r2, [r3, #0]
}
 80087de:	bf00      	nop
 80087e0:	46bd      	mov	sp, r7
 80087e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e6:	4770      	bx	lr
 80087e8:	20000db8 	.word	0x20000db8

080087ec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b082      	sub	sp, #8
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80087f4:	f000 f852 	bl	800889c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80087f8:	4b06      	ldr	r3, [pc, #24]	; (8008814 <prvIdleTask+0x28>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	2b01      	cmp	r3, #1
 80087fe:	d9f9      	bls.n	80087f4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008800:	4b05      	ldr	r3, [pc, #20]	; (8008818 <prvIdleTask+0x2c>)
 8008802:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008806:	601a      	str	r2, [r3, #0]
 8008808:	f3bf 8f4f 	dsb	sy
 800880c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008810:	e7f0      	b.n	80087f4 <prvIdleTask+0x8>
 8008812:	bf00      	nop
 8008814:	200008d4 	.word	0x200008d4
 8008818:	e000ed04 	.word	0xe000ed04

0800881c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b082      	sub	sp, #8
 8008820:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008822:	2300      	movs	r3, #0
 8008824:	607b      	str	r3, [r7, #4]
 8008826:	e00c      	b.n	8008842 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008828:	687a      	ldr	r2, [r7, #4]
 800882a:	4613      	mov	r3, r2
 800882c:	009b      	lsls	r3, r3, #2
 800882e:	4413      	add	r3, r2
 8008830:	009b      	lsls	r3, r3, #2
 8008832:	4a12      	ldr	r2, [pc, #72]	; (800887c <prvInitialiseTaskLists+0x60>)
 8008834:	4413      	add	r3, r2
 8008836:	4618      	mov	r0, r3
 8008838:	f7fe fd18 	bl	800726c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	3301      	adds	r3, #1
 8008840:	607b      	str	r3, [r7, #4]
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2b37      	cmp	r3, #55	; 0x37
 8008846:	d9ef      	bls.n	8008828 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008848:	480d      	ldr	r0, [pc, #52]	; (8008880 <prvInitialiseTaskLists+0x64>)
 800884a:	f7fe fd0f 	bl	800726c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800884e:	480d      	ldr	r0, [pc, #52]	; (8008884 <prvInitialiseTaskLists+0x68>)
 8008850:	f7fe fd0c 	bl	800726c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008854:	480c      	ldr	r0, [pc, #48]	; (8008888 <prvInitialiseTaskLists+0x6c>)
 8008856:	f7fe fd09 	bl	800726c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800885a:	480c      	ldr	r0, [pc, #48]	; (800888c <prvInitialiseTaskLists+0x70>)
 800885c:	f7fe fd06 	bl	800726c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008860:	480b      	ldr	r0, [pc, #44]	; (8008890 <prvInitialiseTaskLists+0x74>)
 8008862:	f7fe fd03 	bl	800726c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008866:	4b0b      	ldr	r3, [pc, #44]	; (8008894 <prvInitialiseTaskLists+0x78>)
 8008868:	4a05      	ldr	r2, [pc, #20]	; (8008880 <prvInitialiseTaskLists+0x64>)
 800886a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800886c:	4b0a      	ldr	r3, [pc, #40]	; (8008898 <prvInitialiseTaskLists+0x7c>)
 800886e:	4a05      	ldr	r2, [pc, #20]	; (8008884 <prvInitialiseTaskLists+0x68>)
 8008870:	601a      	str	r2, [r3, #0]
}
 8008872:	bf00      	nop
 8008874:	3708      	adds	r7, #8
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}
 800887a:	bf00      	nop
 800887c:	200008d4 	.word	0x200008d4
 8008880:	20000d34 	.word	0x20000d34
 8008884:	20000d48 	.word	0x20000d48
 8008888:	20000d64 	.word	0x20000d64
 800888c:	20000d78 	.word	0x20000d78
 8008890:	20000d90 	.word	0x20000d90
 8008894:	20000d5c 	.word	0x20000d5c
 8008898:	20000d60 	.word	0x20000d60

0800889c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b082      	sub	sp, #8
 80088a0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80088a2:	e019      	b.n	80088d8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80088a4:	f000 fdc2 	bl	800942c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088a8:	4b0f      	ldr	r3, [pc, #60]	; (80088e8 <prvCheckTasksWaitingTermination+0x4c>)
 80088aa:	68db      	ldr	r3, [r3, #12]
 80088ac:	68db      	ldr	r3, [r3, #12]
 80088ae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	3304      	adds	r3, #4
 80088b4:	4618      	mov	r0, r3
 80088b6:	f7fe fd63 	bl	8007380 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80088ba:	4b0c      	ldr	r3, [pc, #48]	; (80088ec <prvCheckTasksWaitingTermination+0x50>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	3b01      	subs	r3, #1
 80088c0:	4a0a      	ldr	r2, [pc, #40]	; (80088ec <prvCheckTasksWaitingTermination+0x50>)
 80088c2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80088c4:	4b0a      	ldr	r3, [pc, #40]	; (80088f0 <prvCheckTasksWaitingTermination+0x54>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	3b01      	subs	r3, #1
 80088ca:	4a09      	ldr	r2, [pc, #36]	; (80088f0 <prvCheckTasksWaitingTermination+0x54>)
 80088cc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80088ce:	f000 fddb 	bl	8009488 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f000 f80e 	bl	80088f4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80088d8:	4b05      	ldr	r3, [pc, #20]	; (80088f0 <prvCheckTasksWaitingTermination+0x54>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d1e1      	bne.n	80088a4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80088e0:	bf00      	nop
 80088e2:	3708      	adds	r7, #8
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}
 80088e8:	20000d78 	.word	0x20000d78
 80088ec:	20000da4 	.word	0x20000da4
 80088f0:	20000d8c 	.word	0x20000d8c

080088f4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b084      	sub	sp, #16
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008902:	2b00      	cmp	r3, #0
 8008904:	d108      	bne.n	8008918 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800890a:	4618      	mov	r0, r3
 800890c:	f000 ff6a 	bl	80097e4 <vPortFree>
				vPortFree( pxTCB );
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f000 ff67 	bl	80097e4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008916:	e017      	b.n	8008948 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800891e:	2b01      	cmp	r3, #1
 8008920:	d103      	bne.n	800892a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f000 ff5e 	bl	80097e4 <vPortFree>
	}
 8008928:	e00e      	b.n	8008948 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008930:	2b02      	cmp	r3, #2
 8008932:	d009      	beq.n	8008948 <prvDeleteTCB+0x54>
 8008934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008938:	f383 8811 	msr	BASEPRI, r3
 800893c:	f3bf 8f6f 	isb	sy
 8008940:	f3bf 8f4f 	dsb	sy
 8008944:	60fb      	str	r3, [r7, #12]
 8008946:	e7fe      	b.n	8008946 <prvDeleteTCB+0x52>
	}
 8008948:	bf00      	nop
 800894a:	3710      	adds	r7, #16
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}

08008950 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008950:	b480      	push	{r7}
 8008952:	b083      	sub	sp, #12
 8008954:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008956:	4b0c      	ldr	r3, [pc, #48]	; (8008988 <prvResetNextTaskUnblockTime+0x38>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d104      	bne.n	800896a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008960:	4b0a      	ldr	r3, [pc, #40]	; (800898c <prvResetNextTaskUnblockTime+0x3c>)
 8008962:	f04f 32ff 	mov.w	r2, #4294967295
 8008966:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008968:	e008      	b.n	800897c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800896a:	4b07      	ldr	r3, [pc, #28]	; (8008988 <prvResetNextTaskUnblockTime+0x38>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	68db      	ldr	r3, [r3, #12]
 8008970:	68db      	ldr	r3, [r3, #12]
 8008972:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	685b      	ldr	r3, [r3, #4]
 8008978:	4a04      	ldr	r2, [pc, #16]	; (800898c <prvResetNextTaskUnblockTime+0x3c>)
 800897a:	6013      	str	r3, [r2, #0]
}
 800897c:	bf00      	nop
 800897e:	370c      	adds	r7, #12
 8008980:	46bd      	mov	sp, r7
 8008982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008986:	4770      	bx	lr
 8008988:	20000d5c 	.word	0x20000d5c
 800898c:	20000dc4 	.word	0x20000dc4

08008990 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008990:	b480      	push	{r7}
 8008992:	b083      	sub	sp, #12
 8008994:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008996:	4b0b      	ldr	r3, [pc, #44]	; (80089c4 <xTaskGetSchedulerState+0x34>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d102      	bne.n	80089a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800899e:	2301      	movs	r3, #1
 80089a0:	607b      	str	r3, [r7, #4]
 80089a2:	e008      	b.n	80089b6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80089a4:	4b08      	ldr	r3, [pc, #32]	; (80089c8 <xTaskGetSchedulerState+0x38>)
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d102      	bne.n	80089b2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80089ac:	2302      	movs	r3, #2
 80089ae:	607b      	str	r3, [r7, #4]
 80089b0:	e001      	b.n	80089b6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80089b2:	2300      	movs	r3, #0
 80089b4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80089b6:	687b      	ldr	r3, [r7, #4]
	}
 80089b8:	4618      	mov	r0, r3
 80089ba:	370c      	adds	r7, #12
 80089bc:	46bd      	mov	sp, r7
 80089be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c2:	4770      	bx	lr
 80089c4:	20000db0 	.word	0x20000db0
 80089c8:	20000dcc 	.word	0x20000dcc

080089cc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b086      	sub	sp, #24
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80089d8:	2300      	movs	r3, #0
 80089da:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d054      	beq.n	8008a8c <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80089e2:	4b2d      	ldr	r3, [pc, #180]	; (8008a98 <xTaskPriorityDisinherit+0xcc>)
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	693a      	ldr	r2, [r7, #16]
 80089e8:	429a      	cmp	r2, r3
 80089ea:	d009      	beq.n	8008a00 <xTaskPriorityDisinherit+0x34>
 80089ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089f0:	f383 8811 	msr	BASEPRI, r3
 80089f4:	f3bf 8f6f 	isb	sy
 80089f8:	f3bf 8f4f 	dsb	sy
 80089fc:	60fb      	str	r3, [r7, #12]
 80089fe:	e7fe      	b.n	80089fe <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8008a00:	693b      	ldr	r3, [r7, #16]
 8008a02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d109      	bne.n	8008a1c <xTaskPriorityDisinherit+0x50>
 8008a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a0c:	f383 8811 	msr	BASEPRI, r3
 8008a10:	f3bf 8f6f 	isb	sy
 8008a14:	f3bf 8f4f 	dsb	sy
 8008a18:	60bb      	str	r3, [r7, #8]
 8008a1a:	e7fe      	b.n	8008a1a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8008a1c:	693b      	ldr	r3, [r7, #16]
 8008a1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a20:	1e5a      	subs	r2, r3, #1
 8008a22:	693b      	ldr	r3, [r7, #16]
 8008a24:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008a26:	693b      	ldr	r3, [r7, #16]
 8008a28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a2a:	693b      	ldr	r3, [r7, #16]
 8008a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a2e:	429a      	cmp	r2, r3
 8008a30:	d02c      	beq.n	8008a8c <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008a32:	693b      	ldr	r3, [r7, #16]
 8008a34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d128      	bne.n	8008a8c <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a3a:	693b      	ldr	r3, [r7, #16]
 8008a3c:	3304      	adds	r3, #4
 8008a3e:	4618      	mov	r0, r3
 8008a40:	f7fe fc9e 	bl	8007380 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008a44:	693b      	ldr	r3, [r7, #16]
 8008a46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a4c:	693b      	ldr	r3, [r7, #16]
 8008a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a50:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008a54:	693b      	ldr	r3, [r7, #16]
 8008a56:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008a58:	693b      	ldr	r3, [r7, #16]
 8008a5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a5c:	4b0f      	ldr	r3, [pc, #60]	; (8008a9c <xTaskPriorityDisinherit+0xd0>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	429a      	cmp	r2, r3
 8008a62:	d903      	bls.n	8008a6c <xTaskPriorityDisinherit+0xa0>
 8008a64:	693b      	ldr	r3, [r7, #16]
 8008a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a68:	4a0c      	ldr	r2, [pc, #48]	; (8008a9c <xTaskPriorityDisinherit+0xd0>)
 8008a6a:	6013      	str	r3, [r2, #0]
 8008a6c:	693b      	ldr	r3, [r7, #16]
 8008a6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a70:	4613      	mov	r3, r2
 8008a72:	009b      	lsls	r3, r3, #2
 8008a74:	4413      	add	r3, r2
 8008a76:	009b      	lsls	r3, r3, #2
 8008a78:	4a09      	ldr	r2, [pc, #36]	; (8008aa0 <xTaskPriorityDisinherit+0xd4>)
 8008a7a:	441a      	add	r2, r3
 8008a7c:	693b      	ldr	r3, [r7, #16]
 8008a7e:	3304      	adds	r3, #4
 8008a80:	4619      	mov	r1, r3
 8008a82:	4610      	mov	r0, r2
 8008a84:	f7fe fc1f 	bl	80072c6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008a88:	2301      	movs	r3, #1
 8008a8a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008a8c:	697b      	ldr	r3, [r7, #20]
	}
 8008a8e:	4618      	mov	r0, r3
 8008a90:	3718      	adds	r7, #24
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bd80      	pop	{r7, pc}
 8008a96:	bf00      	nop
 8008a98:	200008d0 	.word	0x200008d0
 8008a9c:	20000dac 	.word	0x20000dac
 8008aa0:	200008d4 	.word	0x200008d4

08008aa4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b084      	sub	sp, #16
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
 8008aac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008aae:	4b21      	ldr	r3, [pc, #132]	; (8008b34 <prvAddCurrentTaskToDelayedList+0x90>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008ab4:	4b20      	ldr	r3, [pc, #128]	; (8008b38 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	3304      	adds	r3, #4
 8008aba:	4618      	mov	r0, r3
 8008abc:	f7fe fc60 	bl	8007380 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ac6:	d10a      	bne.n	8008ade <prvAddCurrentTaskToDelayedList+0x3a>
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d007      	beq.n	8008ade <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ace:	4b1a      	ldr	r3, [pc, #104]	; (8008b38 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	3304      	adds	r3, #4
 8008ad4:	4619      	mov	r1, r3
 8008ad6:	4819      	ldr	r0, [pc, #100]	; (8008b3c <prvAddCurrentTaskToDelayedList+0x98>)
 8008ad8:	f7fe fbf5 	bl	80072c6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008adc:	e026      	b.n	8008b2c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008ade:	68fa      	ldr	r2, [r7, #12]
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	4413      	add	r3, r2
 8008ae4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008ae6:	4b14      	ldr	r3, [pc, #80]	; (8008b38 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	68ba      	ldr	r2, [r7, #8]
 8008aec:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008aee:	68ba      	ldr	r2, [r7, #8]
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	429a      	cmp	r2, r3
 8008af4:	d209      	bcs.n	8008b0a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008af6:	4b12      	ldr	r3, [pc, #72]	; (8008b40 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008af8:	681a      	ldr	r2, [r3, #0]
 8008afa:	4b0f      	ldr	r3, [pc, #60]	; (8008b38 <prvAddCurrentTaskToDelayedList+0x94>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	3304      	adds	r3, #4
 8008b00:	4619      	mov	r1, r3
 8008b02:	4610      	mov	r0, r2
 8008b04:	f7fe fc03 	bl	800730e <vListInsert>
}
 8008b08:	e010      	b.n	8008b2c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008b0a:	4b0e      	ldr	r3, [pc, #56]	; (8008b44 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008b0c:	681a      	ldr	r2, [r3, #0]
 8008b0e:	4b0a      	ldr	r3, [pc, #40]	; (8008b38 <prvAddCurrentTaskToDelayedList+0x94>)
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	3304      	adds	r3, #4
 8008b14:	4619      	mov	r1, r3
 8008b16:	4610      	mov	r0, r2
 8008b18:	f7fe fbf9 	bl	800730e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008b1c:	4b0a      	ldr	r3, [pc, #40]	; (8008b48 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	68ba      	ldr	r2, [r7, #8]
 8008b22:	429a      	cmp	r2, r3
 8008b24:	d202      	bcs.n	8008b2c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008b26:	4a08      	ldr	r2, [pc, #32]	; (8008b48 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	6013      	str	r3, [r2, #0]
}
 8008b2c:	bf00      	nop
 8008b2e:	3710      	adds	r7, #16
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}
 8008b34:	20000da8 	.word	0x20000da8
 8008b38:	200008d0 	.word	0x200008d0
 8008b3c:	20000d90 	.word	0x20000d90
 8008b40:	20000d60 	.word	0x20000d60
 8008b44:	20000d5c 	.word	0x20000d5c
 8008b48:	20000dc4 	.word	0x20000dc4

08008b4c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b08a      	sub	sp, #40	; 0x28
 8008b50:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008b52:	2300      	movs	r3, #0
 8008b54:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008b56:	f000 faff 	bl	8009158 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008b5a:	4b1c      	ldr	r3, [pc, #112]	; (8008bcc <xTimerCreateTimerTask+0x80>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d021      	beq.n	8008ba6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008b62:	2300      	movs	r3, #0
 8008b64:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008b66:	2300      	movs	r3, #0
 8008b68:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008b6a:	1d3a      	adds	r2, r7, #4
 8008b6c:	f107 0108 	add.w	r1, r7, #8
 8008b70:	f107 030c 	add.w	r3, r7, #12
 8008b74:	4618      	mov	r0, r3
 8008b76:	f7fe fb5f 	bl	8007238 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008b7a:	6879      	ldr	r1, [r7, #4]
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	68fa      	ldr	r2, [r7, #12]
 8008b80:	9202      	str	r2, [sp, #8]
 8008b82:	9301      	str	r3, [sp, #4]
 8008b84:	2302      	movs	r3, #2
 8008b86:	9300      	str	r3, [sp, #0]
 8008b88:	2300      	movs	r3, #0
 8008b8a:	460a      	mov	r2, r1
 8008b8c:	4910      	ldr	r1, [pc, #64]	; (8008bd0 <xTimerCreateTimerTask+0x84>)
 8008b8e:	4811      	ldr	r0, [pc, #68]	; (8008bd4 <xTimerCreateTimerTask+0x88>)
 8008b90:	f7ff f8f4 	bl	8007d7c <xTaskCreateStatic>
 8008b94:	4602      	mov	r2, r0
 8008b96:	4b10      	ldr	r3, [pc, #64]	; (8008bd8 <xTimerCreateTimerTask+0x8c>)
 8008b98:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008b9a:	4b0f      	ldr	r3, [pc, #60]	; (8008bd8 <xTimerCreateTimerTask+0x8c>)
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d001      	beq.n	8008ba6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008ba2:	2301      	movs	r3, #1
 8008ba4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008ba6:	697b      	ldr	r3, [r7, #20]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d109      	bne.n	8008bc0 <xTimerCreateTimerTask+0x74>
 8008bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bb0:	f383 8811 	msr	BASEPRI, r3
 8008bb4:	f3bf 8f6f 	isb	sy
 8008bb8:	f3bf 8f4f 	dsb	sy
 8008bbc:	613b      	str	r3, [r7, #16]
 8008bbe:	e7fe      	b.n	8008bbe <xTimerCreateTimerTask+0x72>
	return xReturn;
 8008bc0:	697b      	ldr	r3, [r7, #20]
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	3718      	adds	r7, #24
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}
 8008bca:	bf00      	nop
 8008bcc:	20000e00 	.word	0x20000e00
 8008bd0:	0800aadc 	.word	0x0800aadc
 8008bd4:	08008d0d 	.word	0x08008d0d
 8008bd8:	20000e04 	.word	0x20000e04

08008bdc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b08a      	sub	sp, #40	; 0x28
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	60f8      	str	r0, [r7, #12]
 8008be4:	60b9      	str	r1, [r7, #8]
 8008be6:	607a      	str	r2, [r7, #4]
 8008be8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008bea:	2300      	movs	r3, #0
 8008bec:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d109      	bne.n	8008c08 <xTimerGenericCommand+0x2c>
 8008bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bf8:	f383 8811 	msr	BASEPRI, r3
 8008bfc:	f3bf 8f6f 	isb	sy
 8008c00:	f3bf 8f4f 	dsb	sy
 8008c04:	623b      	str	r3, [r7, #32]
 8008c06:	e7fe      	b.n	8008c06 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008c08:	4b19      	ldr	r3, [pc, #100]	; (8008c70 <xTimerGenericCommand+0x94>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d02a      	beq.n	8008c66 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	2b05      	cmp	r3, #5
 8008c20:	dc18      	bgt.n	8008c54 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008c22:	f7ff feb5 	bl	8008990 <xTaskGetSchedulerState>
 8008c26:	4603      	mov	r3, r0
 8008c28:	2b02      	cmp	r3, #2
 8008c2a:	d109      	bne.n	8008c40 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008c2c:	4b10      	ldr	r3, [pc, #64]	; (8008c70 <xTimerGenericCommand+0x94>)
 8008c2e:	6818      	ldr	r0, [r3, #0]
 8008c30:	f107 0110 	add.w	r1, r7, #16
 8008c34:	2300      	movs	r3, #0
 8008c36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c38:	f7fe fcca 	bl	80075d0 <xQueueGenericSend>
 8008c3c:	6278      	str	r0, [r7, #36]	; 0x24
 8008c3e:	e012      	b.n	8008c66 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008c40:	4b0b      	ldr	r3, [pc, #44]	; (8008c70 <xTimerGenericCommand+0x94>)
 8008c42:	6818      	ldr	r0, [r3, #0]
 8008c44:	f107 0110 	add.w	r1, r7, #16
 8008c48:	2300      	movs	r3, #0
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	f7fe fcc0 	bl	80075d0 <xQueueGenericSend>
 8008c50:	6278      	str	r0, [r7, #36]	; 0x24
 8008c52:	e008      	b.n	8008c66 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008c54:	4b06      	ldr	r3, [pc, #24]	; (8008c70 <xTimerGenericCommand+0x94>)
 8008c56:	6818      	ldr	r0, [r3, #0]
 8008c58:	f107 0110 	add.w	r1, r7, #16
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	683a      	ldr	r2, [r7, #0]
 8008c60:	f7fe fdb0 	bl	80077c4 <xQueueGenericSendFromISR>
 8008c64:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	3728      	adds	r7, #40	; 0x28
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bd80      	pop	{r7, pc}
 8008c70:	20000e00 	.word	0x20000e00

08008c74 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b088      	sub	sp, #32
 8008c78:	af02      	add	r7, sp, #8
 8008c7a:	6078      	str	r0, [r7, #4]
 8008c7c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c7e:	4b22      	ldr	r3, [pc, #136]	; (8008d08 <prvProcessExpiredTimer+0x94>)
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	68db      	ldr	r3, [r3, #12]
 8008c84:	68db      	ldr	r3, [r3, #12]
 8008c86:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008c88:	697b      	ldr	r3, [r7, #20]
 8008c8a:	3304      	adds	r3, #4
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f7fe fb77 	bl	8007380 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008c92:	697b      	ldr	r3, [r7, #20]
 8008c94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c98:	f003 0304 	and.w	r3, r3, #4
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d021      	beq.n	8008ce4 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008ca0:	697b      	ldr	r3, [r7, #20]
 8008ca2:	699a      	ldr	r2, [r3, #24]
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	18d1      	adds	r1, r2, r3
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	683a      	ldr	r2, [r7, #0]
 8008cac:	6978      	ldr	r0, [r7, #20]
 8008cae:	f000 f8d1 	bl	8008e54 <prvInsertTimerInActiveList>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d01e      	beq.n	8008cf6 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008cb8:	2300      	movs	r3, #0
 8008cba:	9300      	str	r3, [sp, #0]
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	687a      	ldr	r2, [r7, #4]
 8008cc0:	2100      	movs	r1, #0
 8008cc2:	6978      	ldr	r0, [r7, #20]
 8008cc4:	f7ff ff8a 	bl	8008bdc <xTimerGenericCommand>
 8008cc8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008cca:	693b      	ldr	r3, [r7, #16]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d112      	bne.n	8008cf6 <prvProcessExpiredTimer+0x82>
 8008cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cd4:	f383 8811 	msr	BASEPRI, r3
 8008cd8:	f3bf 8f6f 	isb	sy
 8008cdc:	f3bf 8f4f 	dsb	sy
 8008ce0:	60fb      	str	r3, [r7, #12]
 8008ce2:	e7fe      	b.n	8008ce2 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008cea:	f023 0301 	bic.w	r3, r3, #1
 8008cee:	b2da      	uxtb	r2, r3
 8008cf0:	697b      	ldr	r3, [r7, #20]
 8008cf2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008cf6:	697b      	ldr	r3, [r7, #20]
 8008cf8:	6a1b      	ldr	r3, [r3, #32]
 8008cfa:	6978      	ldr	r0, [r7, #20]
 8008cfc:	4798      	blx	r3
}
 8008cfe:	bf00      	nop
 8008d00:	3718      	adds	r7, #24
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}
 8008d06:	bf00      	nop
 8008d08:	20000df8 	.word	0x20000df8

08008d0c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b084      	sub	sp, #16
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008d14:	f107 0308 	add.w	r3, r7, #8
 8008d18:	4618      	mov	r0, r3
 8008d1a:	f000 f857 	bl	8008dcc <prvGetNextExpireTime>
 8008d1e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	4619      	mov	r1, r3
 8008d24:	68f8      	ldr	r0, [r7, #12]
 8008d26:	f000 f803 	bl	8008d30 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008d2a:	f000 f8d5 	bl	8008ed8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008d2e:	e7f1      	b.n	8008d14 <prvTimerTask+0x8>

08008d30 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b084      	sub	sp, #16
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
 8008d38:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008d3a:	f7ff fa57 	bl	80081ec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008d3e:	f107 0308 	add.w	r3, r7, #8
 8008d42:	4618      	mov	r0, r3
 8008d44:	f000 f866 	bl	8008e14 <prvSampleTimeNow>
 8008d48:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d130      	bne.n	8008db2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d10a      	bne.n	8008d6c <prvProcessTimerOrBlockTask+0x3c>
 8008d56:	687a      	ldr	r2, [r7, #4]
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	429a      	cmp	r2, r3
 8008d5c:	d806      	bhi.n	8008d6c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008d5e:	f7ff fa53 	bl	8008208 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008d62:	68f9      	ldr	r1, [r7, #12]
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f7ff ff85 	bl	8008c74 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008d6a:	e024      	b.n	8008db6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d008      	beq.n	8008d84 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008d72:	4b13      	ldr	r3, [pc, #76]	; (8008dc0 <prvProcessTimerOrBlockTask+0x90>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d101      	bne.n	8008d80 <prvProcessTimerOrBlockTask+0x50>
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	e000      	b.n	8008d82 <prvProcessTimerOrBlockTask+0x52>
 8008d80:	2300      	movs	r3, #0
 8008d82:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008d84:	4b0f      	ldr	r3, [pc, #60]	; (8008dc4 <prvProcessTimerOrBlockTask+0x94>)
 8008d86:	6818      	ldr	r0, [r3, #0]
 8008d88:	687a      	ldr	r2, [r7, #4]
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	1ad3      	subs	r3, r2, r3
 8008d8e:	683a      	ldr	r2, [r7, #0]
 8008d90:	4619      	mov	r1, r3
 8008d92:	f7fe ffbf 	bl	8007d14 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008d96:	f7ff fa37 	bl	8008208 <xTaskResumeAll>
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d10a      	bne.n	8008db6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008da0:	4b09      	ldr	r3, [pc, #36]	; (8008dc8 <prvProcessTimerOrBlockTask+0x98>)
 8008da2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008da6:	601a      	str	r2, [r3, #0]
 8008da8:	f3bf 8f4f 	dsb	sy
 8008dac:	f3bf 8f6f 	isb	sy
}
 8008db0:	e001      	b.n	8008db6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008db2:	f7ff fa29 	bl	8008208 <xTaskResumeAll>
}
 8008db6:	bf00      	nop
 8008db8:	3710      	adds	r7, #16
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd80      	pop	{r7, pc}
 8008dbe:	bf00      	nop
 8008dc0:	20000dfc 	.word	0x20000dfc
 8008dc4:	20000e00 	.word	0x20000e00
 8008dc8:	e000ed04 	.word	0xe000ed04

08008dcc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008dcc:	b480      	push	{r7}
 8008dce:	b085      	sub	sp, #20
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008dd4:	4b0e      	ldr	r3, [pc, #56]	; (8008e10 <prvGetNextExpireTime+0x44>)
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d101      	bne.n	8008de2 <prvGetNextExpireTime+0x16>
 8008dde:	2201      	movs	r2, #1
 8008de0:	e000      	b.n	8008de4 <prvGetNextExpireTime+0x18>
 8008de2:	2200      	movs	r2, #0
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d105      	bne.n	8008dfc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008df0:	4b07      	ldr	r3, [pc, #28]	; (8008e10 <prvGetNextExpireTime+0x44>)
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	68db      	ldr	r3, [r3, #12]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	60fb      	str	r3, [r7, #12]
 8008dfa:	e001      	b.n	8008e00 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008e00:	68fb      	ldr	r3, [r7, #12]
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	3714      	adds	r7, #20
 8008e06:	46bd      	mov	sp, r7
 8008e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0c:	4770      	bx	lr
 8008e0e:	bf00      	nop
 8008e10:	20000df8 	.word	0x20000df8

08008e14 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b084      	sub	sp, #16
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008e1c:	f7ff fa90 	bl	8008340 <xTaskGetTickCount>
 8008e20:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008e22:	4b0b      	ldr	r3, [pc, #44]	; (8008e50 <prvSampleTimeNow+0x3c>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	68fa      	ldr	r2, [r7, #12]
 8008e28:	429a      	cmp	r2, r3
 8008e2a:	d205      	bcs.n	8008e38 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008e2c:	f000 f930 	bl	8009090 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2201      	movs	r2, #1
 8008e34:	601a      	str	r2, [r3, #0]
 8008e36:	e002      	b.n	8008e3e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008e3e:	4a04      	ldr	r2, [pc, #16]	; (8008e50 <prvSampleTimeNow+0x3c>)
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008e44:	68fb      	ldr	r3, [r7, #12]
}
 8008e46:	4618      	mov	r0, r3
 8008e48:	3710      	adds	r7, #16
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}
 8008e4e:	bf00      	nop
 8008e50:	20000e08 	.word	0x20000e08

08008e54 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b086      	sub	sp, #24
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	60f8      	str	r0, [r7, #12]
 8008e5c:	60b9      	str	r1, [r7, #8]
 8008e5e:	607a      	str	r2, [r7, #4]
 8008e60:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008e62:	2300      	movs	r3, #0
 8008e64:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	68ba      	ldr	r2, [r7, #8]
 8008e6a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	68fa      	ldr	r2, [r7, #12]
 8008e70:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008e72:	68ba      	ldr	r2, [r7, #8]
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	429a      	cmp	r2, r3
 8008e78:	d812      	bhi.n	8008ea0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e7a:	687a      	ldr	r2, [r7, #4]
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	1ad2      	subs	r2, r2, r3
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	699b      	ldr	r3, [r3, #24]
 8008e84:	429a      	cmp	r2, r3
 8008e86:	d302      	bcc.n	8008e8e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008e88:	2301      	movs	r3, #1
 8008e8a:	617b      	str	r3, [r7, #20]
 8008e8c:	e01b      	b.n	8008ec6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008e8e:	4b10      	ldr	r3, [pc, #64]	; (8008ed0 <prvInsertTimerInActiveList+0x7c>)
 8008e90:	681a      	ldr	r2, [r3, #0]
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	3304      	adds	r3, #4
 8008e96:	4619      	mov	r1, r3
 8008e98:	4610      	mov	r0, r2
 8008e9a:	f7fe fa38 	bl	800730e <vListInsert>
 8008e9e:	e012      	b.n	8008ec6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008ea0:	687a      	ldr	r2, [r7, #4]
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	429a      	cmp	r2, r3
 8008ea6:	d206      	bcs.n	8008eb6 <prvInsertTimerInActiveList+0x62>
 8008ea8:	68ba      	ldr	r2, [r7, #8]
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	429a      	cmp	r2, r3
 8008eae:	d302      	bcc.n	8008eb6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008eb0:	2301      	movs	r3, #1
 8008eb2:	617b      	str	r3, [r7, #20]
 8008eb4:	e007      	b.n	8008ec6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008eb6:	4b07      	ldr	r3, [pc, #28]	; (8008ed4 <prvInsertTimerInActiveList+0x80>)
 8008eb8:	681a      	ldr	r2, [r3, #0]
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	3304      	adds	r3, #4
 8008ebe:	4619      	mov	r1, r3
 8008ec0:	4610      	mov	r0, r2
 8008ec2:	f7fe fa24 	bl	800730e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008ec6:	697b      	ldr	r3, [r7, #20]
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	3718      	adds	r7, #24
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}
 8008ed0:	20000dfc 	.word	0x20000dfc
 8008ed4:	20000df8 	.word	0x20000df8

08008ed8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b08e      	sub	sp, #56	; 0x38
 8008edc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008ede:	e0c6      	b.n	800906e <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	da17      	bge.n	8008f16 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008ee6:	1d3b      	adds	r3, r7, #4
 8008ee8:	3304      	adds	r3, #4
 8008eea:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d109      	bne.n	8008f06 <prvProcessReceivedCommands+0x2e>
 8008ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ef6:	f383 8811 	msr	BASEPRI, r3
 8008efa:	f3bf 8f6f 	isb	sy
 8008efe:	f3bf 8f4f 	dsb	sy
 8008f02:	61fb      	str	r3, [r7, #28]
 8008f04:	e7fe      	b.n	8008f04 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f0c:	6850      	ldr	r0, [r2, #4]
 8008f0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f10:	6892      	ldr	r2, [r2, #8]
 8008f12:	4611      	mov	r1, r2
 8008f14:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	f2c0 80a7 	blt.w	800906c <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f24:	695b      	ldr	r3, [r3, #20]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d004      	beq.n	8008f34 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f2c:	3304      	adds	r3, #4
 8008f2e:	4618      	mov	r0, r3
 8008f30:	f7fe fa26 	bl	8007380 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008f34:	463b      	mov	r3, r7
 8008f36:	4618      	mov	r0, r3
 8008f38:	f7ff ff6c 	bl	8008e14 <prvSampleTimeNow>
 8008f3c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	2b09      	cmp	r3, #9
 8008f42:	f200 8094 	bhi.w	800906e <prvProcessReceivedCommands+0x196>
 8008f46:	a201      	add	r2, pc, #4	; (adr r2, 8008f4c <prvProcessReceivedCommands+0x74>)
 8008f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f4c:	08008f75 	.word	0x08008f75
 8008f50:	08008f75 	.word	0x08008f75
 8008f54:	08008f75 	.word	0x08008f75
 8008f58:	08008fe7 	.word	0x08008fe7
 8008f5c:	08008ffb 	.word	0x08008ffb
 8008f60:	08009043 	.word	0x08009043
 8008f64:	08008f75 	.word	0x08008f75
 8008f68:	08008f75 	.word	0x08008f75
 8008f6c:	08008fe7 	.word	0x08008fe7
 8008f70:	08008ffb 	.word	0x08008ffb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008f7a:	f043 0301 	orr.w	r3, r3, #1
 8008f7e:	b2da      	uxtb	r2, r3
 8008f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008f86:	68ba      	ldr	r2, [r7, #8]
 8008f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f8a:	699b      	ldr	r3, [r3, #24]
 8008f8c:	18d1      	adds	r1, r2, r3
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f94:	f7ff ff5e 	bl	8008e54 <prvInsertTimerInActiveList>
 8008f98:	4603      	mov	r3, r0
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d067      	beq.n	800906e <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fa0:	6a1b      	ldr	r3, [r3, #32]
 8008fa2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008fa4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fa8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008fac:	f003 0304 	and.w	r3, r3, #4
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d05c      	beq.n	800906e <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008fb4:	68ba      	ldr	r2, [r7, #8]
 8008fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fb8:	699b      	ldr	r3, [r3, #24]
 8008fba:	441a      	add	r2, r3
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	9300      	str	r3, [sp, #0]
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	2100      	movs	r1, #0
 8008fc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008fc6:	f7ff fe09 	bl	8008bdc <xTimerGenericCommand>
 8008fca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008fcc:	6a3b      	ldr	r3, [r7, #32]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d14d      	bne.n	800906e <prvProcessReceivedCommands+0x196>
 8008fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fd6:	f383 8811 	msr	BASEPRI, r3
 8008fda:	f3bf 8f6f 	isb	sy
 8008fde:	f3bf 8f4f 	dsb	sy
 8008fe2:	61bb      	str	r3, [r7, #24]
 8008fe4:	e7fe      	b.n	8008fe4 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fe8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008fec:	f023 0301 	bic.w	r3, r3, #1
 8008ff0:	b2da      	uxtb	r2, r3
 8008ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ff4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008ff8:	e039      	b.n	800906e <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ffc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009000:	f043 0301 	orr.w	r3, r3, #1
 8009004:	b2da      	uxtb	r2, r3
 8009006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009008:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800900c:	68ba      	ldr	r2, [r7, #8]
 800900e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009010:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009014:	699b      	ldr	r3, [r3, #24]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d109      	bne.n	800902e <prvProcessReceivedCommands+0x156>
 800901a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800901e:	f383 8811 	msr	BASEPRI, r3
 8009022:	f3bf 8f6f 	isb	sy
 8009026:	f3bf 8f4f 	dsb	sy
 800902a:	617b      	str	r3, [r7, #20]
 800902c:	e7fe      	b.n	800902c <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800902e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009030:	699a      	ldr	r2, [r3, #24]
 8009032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009034:	18d1      	adds	r1, r2, r3
 8009036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009038:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800903a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800903c:	f7ff ff0a 	bl	8008e54 <prvInsertTimerInActiveList>
					break;
 8009040:	e015      	b.n	800906e <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009044:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009048:	f003 0302 	and.w	r3, r3, #2
 800904c:	2b00      	cmp	r3, #0
 800904e:	d103      	bne.n	8009058 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8009050:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009052:	f000 fbc7 	bl	80097e4 <vPortFree>
 8009056:	e00a      	b.n	800906e <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800905a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800905e:	f023 0301 	bic.w	r3, r3, #1
 8009062:	b2da      	uxtb	r2, r3
 8009064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009066:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800906a:	e000      	b.n	800906e <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800906c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800906e:	4b07      	ldr	r3, [pc, #28]	; (800908c <prvProcessReceivedCommands+0x1b4>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	1d39      	adds	r1, r7, #4
 8009074:	2200      	movs	r2, #0
 8009076:	4618      	mov	r0, r3
 8009078:	f7fe fc38 	bl	80078ec <xQueueReceive>
 800907c:	4603      	mov	r3, r0
 800907e:	2b00      	cmp	r3, #0
 8009080:	f47f af2e 	bne.w	8008ee0 <prvProcessReceivedCommands+0x8>
	}
}
 8009084:	bf00      	nop
 8009086:	3730      	adds	r7, #48	; 0x30
 8009088:	46bd      	mov	sp, r7
 800908a:	bd80      	pop	{r7, pc}
 800908c:	20000e00 	.word	0x20000e00

08009090 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b088      	sub	sp, #32
 8009094:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009096:	e047      	b.n	8009128 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009098:	4b2d      	ldr	r3, [pc, #180]	; (8009150 <prvSwitchTimerLists+0xc0>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	68db      	ldr	r3, [r3, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090a2:	4b2b      	ldr	r3, [pc, #172]	; (8009150 <prvSwitchTimerLists+0xc0>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	68db      	ldr	r3, [r3, #12]
 80090a8:	68db      	ldr	r3, [r3, #12]
 80090aa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	3304      	adds	r3, #4
 80090b0:	4618      	mov	r0, r3
 80090b2:	f7fe f965 	bl	8007380 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	6a1b      	ldr	r3, [r3, #32]
 80090ba:	68f8      	ldr	r0, [r7, #12]
 80090bc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80090c4:	f003 0304 	and.w	r3, r3, #4
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d02d      	beq.n	8009128 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	699b      	ldr	r3, [r3, #24]
 80090d0:	693a      	ldr	r2, [r7, #16]
 80090d2:	4413      	add	r3, r2
 80090d4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80090d6:	68ba      	ldr	r2, [r7, #8]
 80090d8:	693b      	ldr	r3, [r7, #16]
 80090da:	429a      	cmp	r2, r3
 80090dc:	d90e      	bls.n	80090fc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	68ba      	ldr	r2, [r7, #8]
 80090e2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	68fa      	ldr	r2, [r7, #12]
 80090e8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80090ea:	4b19      	ldr	r3, [pc, #100]	; (8009150 <prvSwitchTimerLists+0xc0>)
 80090ec:	681a      	ldr	r2, [r3, #0]
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	3304      	adds	r3, #4
 80090f2:	4619      	mov	r1, r3
 80090f4:	4610      	mov	r0, r2
 80090f6:	f7fe f90a 	bl	800730e <vListInsert>
 80090fa:	e015      	b.n	8009128 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80090fc:	2300      	movs	r3, #0
 80090fe:	9300      	str	r3, [sp, #0]
 8009100:	2300      	movs	r3, #0
 8009102:	693a      	ldr	r2, [r7, #16]
 8009104:	2100      	movs	r1, #0
 8009106:	68f8      	ldr	r0, [r7, #12]
 8009108:	f7ff fd68 	bl	8008bdc <xTimerGenericCommand>
 800910c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d109      	bne.n	8009128 <prvSwitchTimerLists+0x98>
 8009114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009118:	f383 8811 	msr	BASEPRI, r3
 800911c:	f3bf 8f6f 	isb	sy
 8009120:	f3bf 8f4f 	dsb	sy
 8009124:	603b      	str	r3, [r7, #0]
 8009126:	e7fe      	b.n	8009126 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009128:	4b09      	ldr	r3, [pc, #36]	; (8009150 <prvSwitchTimerLists+0xc0>)
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d1b2      	bne.n	8009098 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009132:	4b07      	ldr	r3, [pc, #28]	; (8009150 <prvSwitchTimerLists+0xc0>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009138:	4b06      	ldr	r3, [pc, #24]	; (8009154 <prvSwitchTimerLists+0xc4>)
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	4a04      	ldr	r2, [pc, #16]	; (8009150 <prvSwitchTimerLists+0xc0>)
 800913e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009140:	4a04      	ldr	r2, [pc, #16]	; (8009154 <prvSwitchTimerLists+0xc4>)
 8009142:	697b      	ldr	r3, [r7, #20]
 8009144:	6013      	str	r3, [r2, #0]
}
 8009146:	bf00      	nop
 8009148:	3718      	adds	r7, #24
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}
 800914e:	bf00      	nop
 8009150:	20000df8 	.word	0x20000df8
 8009154:	20000dfc 	.word	0x20000dfc

08009158 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b082      	sub	sp, #8
 800915c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800915e:	f000 f965 	bl	800942c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009162:	4b15      	ldr	r3, [pc, #84]	; (80091b8 <prvCheckForValidListAndQueue+0x60>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d120      	bne.n	80091ac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800916a:	4814      	ldr	r0, [pc, #80]	; (80091bc <prvCheckForValidListAndQueue+0x64>)
 800916c:	f7fe f87e 	bl	800726c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009170:	4813      	ldr	r0, [pc, #76]	; (80091c0 <prvCheckForValidListAndQueue+0x68>)
 8009172:	f7fe f87b 	bl	800726c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009176:	4b13      	ldr	r3, [pc, #76]	; (80091c4 <prvCheckForValidListAndQueue+0x6c>)
 8009178:	4a10      	ldr	r2, [pc, #64]	; (80091bc <prvCheckForValidListAndQueue+0x64>)
 800917a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800917c:	4b12      	ldr	r3, [pc, #72]	; (80091c8 <prvCheckForValidListAndQueue+0x70>)
 800917e:	4a10      	ldr	r2, [pc, #64]	; (80091c0 <prvCheckForValidListAndQueue+0x68>)
 8009180:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009182:	2300      	movs	r3, #0
 8009184:	9300      	str	r3, [sp, #0]
 8009186:	4b11      	ldr	r3, [pc, #68]	; (80091cc <prvCheckForValidListAndQueue+0x74>)
 8009188:	4a11      	ldr	r2, [pc, #68]	; (80091d0 <prvCheckForValidListAndQueue+0x78>)
 800918a:	2110      	movs	r1, #16
 800918c:	200a      	movs	r0, #10
 800918e:	f7fe f989 	bl	80074a4 <xQueueGenericCreateStatic>
 8009192:	4602      	mov	r2, r0
 8009194:	4b08      	ldr	r3, [pc, #32]	; (80091b8 <prvCheckForValidListAndQueue+0x60>)
 8009196:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009198:	4b07      	ldr	r3, [pc, #28]	; (80091b8 <prvCheckForValidListAndQueue+0x60>)
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d005      	beq.n	80091ac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80091a0:	4b05      	ldr	r3, [pc, #20]	; (80091b8 <prvCheckForValidListAndQueue+0x60>)
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	490b      	ldr	r1, [pc, #44]	; (80091d4 <prvCheckForValidListAndQueue+0x7c>)
 80091a6:	4618      	mov	r0, r3
 80091a8:	f7fe fd8c 	bl	8007cc4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80091ac:	f000 f96c 	bl	8009488 <vPortExitCritical>
}
 80091b0:	bf00      	nop
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}
 80091b6:	bf00      	nop
 80091b8:	20000e00 	.word	0x20000e00
 80091bc:	20000dd0 	.word	0x20000dd0
 80091c0:	20000de4 	.word	0x20000de4
 80091c4:	20000df8 	.word	0x20000df8
 80091c8:	20000dfc 	.word	0x20000dfc
 80091cc:	20000eac 	.word	0x20000eac
 80091d0:	20000e0c 	.word	0x20000e0c
 80091d4:	0800aae4 	.word	0x0800aae4

080091d8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80091d8:	b480      	push	{r7}
 80091da:	b085      	sub	sp, #20
 80091dc:	af00      	add	r7, sp, #0
 80091de:	60f8      	str	r0, [r7, #12]
 80091e0:	60b9      	str	r1, [r7, #8]
 80091e2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	3b04      	subs	r3, #4
 80091e8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80091f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	3b04      	subs	r3, #4
 80091f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	f023 0201 	bic.w	r2, r3, #1
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	3b04      	subs	r3, #4
 8009206:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009208:	4a0c      	ldr	r2, [pc, #48]	; (800923c <pxPortInitialiseStack+0x64>)
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	3b14      	subs	r3, #20
 8009212:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009214:	687a      	ldr	r2, [r7, #4]
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	3b04      	subs	r3, #4
 800921e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	f06f 0202 	mvn.w	r2, #2
 8009226:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	3b20      	subs	r3, #32
 800922c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800922e:	68fb      	ldr	r3, [r7, #12]
}
 8009230:	4618      	mov	r0, r3
 8009232:	3714      	adds	r7, #20
 8009234:	46bd      	mov	sp, r7
 8009236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923a:	4770      	bx	lr
 800923c:	08009241 	.word	0x08009241

08009240 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009240:	b480      	push	{r7}
 8009242:	b085      	sub	sp, #20
 8009244:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009246:	2300      	movs	r3, #0
 8009248:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800924a:	4b11      	ldr	r3, [pc, #68]	; (8009290 <prvTaskExitError+0x50>)
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009252:	d009      	beq.n	8009268 <prvTaskExitError+0x28>
 8009254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009258:	f383 8811 	msr	BASEPRI, r3
 800925c:	f3bf 8f6f 	isb	sy
 8009260:	f3bf 8f4f 	dsb	sy
 8009264:	60fb      	str	r3, [r7, #12]
 8009266:	e7fe      	b.n	8009266 <prvTaskExitError+0x26>
 8009268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800926c:	f383 8811 	msr	BASEPRI, r3
 8009270:	f3bf 8f6f 	isb	sy
 8009274:	f3bf 8f4f 	dsb	sy
 8009278:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800927a:	bf00      	nop
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d0fc      	beq.n	800927c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009282:	bf00      	nop
 8009284:	3714      	adds	r7, #20
 8009286:	46bd      	mov	sp, r7
 8009288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928c:	4770      	bx	lr
 800928e:	bf00      	nop
 8009290:	20000010 	.word	0x20000010
	...

080092a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80092a0:	4b07      	ldr	r3, [pc, #28]	; (80092c0 <pxCurrentTCBConst2>)
 80092a2:	6819      	ldr	r1, [r3, #0]
 80092a4:	6808      	ldr	r0, [r1, #0]
 80092a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092aa:	f380 8809 	msr	PSP, r0
 80092ae:	f3bf 8f6f 	isb	sy
 80092b2:	f04f 0000 	mov.w	r0, #0
 80092b6:	f380 8811 	msr	BASEPRI, r0
 80092ba:	4770      	bx	lr
 80092bc:	f3af 8000 	nop.w

080092c0 <pxCurrentTCBConst2>:
 80092c0:	200008d0 	.word	0x200008d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80092c4:	bf00      	nop
 80092c6:	bf00      	nop

080092c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80092c8:	4808      	ldr	r0, [pc, #32]	; (80092ec <prvPortStartFirstTask+0x24>)
 80092ca:	6800      	ldr	r0, [r0, #0]
 80092cc:	6800      	ldr	r0, [r0, #0]
 80092ce:	f380 8808 	msr	MSP, r0
 80092d2:	f04f 0000 	mov.w	r0, #0
 80092d6:	f380 8814 	msr	CONTROL, r0
 80092da:	b662      	cpsie	i
 80092dc:	b661      	cpsie	f
 80092de:	f3bf 8f4f 	dsb	sy
 80092e2:	f3bf 8f6f 	isb	sy
 80092e6:	df00      	svc	0
 80092e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80092ea:	bf00      	nop
 80092ec:	e000ed08 	.word	0xe000ed08

080092f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b086      	sub	sp, #24
 80092f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80092f6:	4b44      	ldr	r3, [pc, #272]	; (8009408 <xPortStartScheduler+0x118>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	4a44      	ldr	r2, [pc, #272]	; (800940c <xPortStartScheduler+0x11c>)
 80092fc:	4293      	cmp	r3, r2
 80092fe:	d109      	bne.n	8009314 <xPortStartScheduler+0x24>
 8009300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009304:	f383 8811 	msr	BASEPRI, r3
 8009308:	f3bf 8f6f 	isb	sy
 800930c:	f3bf 8f4f 	dsb	sy
 8009310:	613b      	str	r3, [r7, #16]
 8009312:	e7fe      	b.n	8009312 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009314:	4b3c      	ldr	r3, [pc, #240]	; (8009408 <xPortStartScheduler+0x118>)
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	4a3d      	ldr	r2, [pc, #244]	; (8009410 <xPortStartScheduler+0x120>)
 800931a:	4293      	cmp	r3, r2
 800931c:	d109      	bne.n	8009332 <xPortStartScheduler+0x42>
 800931e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009322:	f383 8811 	msr	BASEPRI, r3
 8009326:	f3bf 8f6f 	isb	sy
 800932a:	f3bf 8f4f 	dsb	sy
 800932e:	60fb      	str	r3, [r7, #12]
 8009330:	e7fe      	b.n	8009330 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009332:	4b38      	ldr	r3, [pc, #224]	; (8009414 <xPortStartScheduler+0x124>)
 8009334:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009336:	697b      	ldr	r3, [r7, #20]
 8009338:	781b      	ldrb	r3, [r3, #0]
 800933a:	b2db      	uxtb	r3, r3
 800933c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800933e:	697b      	ldr	r3, [r7, #20]
 8009340:	22ff      	movs	r2, #255	; 0xff
 8009342:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009344:	697b      	ldr	r3, [r7, #20]
 8009346:	781b      	ldrb	r3, [r3, #0]
 8009348:	b2db      	uxtb	r3, r3
 800934a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800934c:	78fb      	ldrb	r3, [r7, #3]
 800934e:	b2db      	uxtb	r3, r3
 8009350:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009354:	b2da      	uxtb	r2, r3
 8009356:	4b30      	ldr	r3, [pc, #192]	; (8009418 <xPortStartScheduler+0x128>)
 8009358:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800935a:	4b30      	ldr	r3, [pc, #192]	; (800941c <xPortStartScheduler+0x12c>)
 800935c:	2207      	movs	r2, #7
 800935e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009360:	e009      	b.n	8009376 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8009362:	4b2e      	ldr	r3, [pc, #184]	; (800941c <xPortStartScheduler+0x12c>)
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	3b01      	subs	r3, #1
 8009368:	4a2c      	ldr	r2, [pc, #176]	; (800941c <xPortStartScheduler+0x12c>)
 800936a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800936c:	78fb      	ldrb	r3, [r7, #3]
 800936e:	b2db      	uxtb	r3, r3
 8009370:	005b      	lsls	r3, r3, #1
 8009372:	b2db      	uxtb	r3, r3
 8009374:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009376:	78fb      	ldrb	r3, [r7, #3]
 8009378:	b2db      	uxtb	r3, r3
 800937a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800937e:	2b80      	cmp	r3, #128	; 0x80
 8009380:	d0ef      	beq.n	8009362 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009382:	4b26      	ldr	r3, [pc, #152]	; (800941c <xPortStartScheduler+0x12c>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f1c3 0307 	rsb	r3, r3, #7
 800938a:	2b04      	cmp	r3, #4
 800938c:	d009      	beq.n	80093a2 <xPortStartScheduler+0xb2>
 800938e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009392:	f383 8811 	msr	BASEPRI, r3
 8009396:	f3bf 8f6f 	isb	sy
 800939a:	f3bf 8f4f 	dsb	sy
 800939e:	60bb      	str	r3, [r7, #8]
 80093a0:	e7fe      	b.n	80093a0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80093a2:	4b1e      	ldr	r3, [pc, #120]	; (800941c <xPortStartScheduler+0x12c>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	021b      	lsls	r3, r3, #8
 80093a8:	4a1c      	ldr	r2, [pc, #112]	; (800941c <xPortStartScheduler+0x12c>)
 80093aa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80093ac:	4b1b      	ldr	r3, [pc, #108]	; (800941c <xPortStartScheduler+0x12c>)
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80093b4:	4a19      	ldr	r2, [pc, #100]	; (800941c <xPortStartScheduler+0x12c>)
 80093b6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	b2da      	uxtb	r2, r3
 80093bc:	697b      	ldr	r3, [r7, #20]
 80093be:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80093c0:	4b17      	ldr	r3, [pc, #92]	; (8009420 <xPortStartScheduler+0x130>)
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	4a16      	ldr	r2, [pc, #88]	; (8009420 <xPortStartScheduler+0x130>)
 80093c6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80093ca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80093cc:	4b14      	ldr	r3, [pc, #80]	; (8009420 <xPortStartScheduler+0x130>)
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	4a13      	ldr	r2, [pc, #76]	; (8009420 <xPortStartScheduler+0x130>)
 80093d2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80093d6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80093d8:	f000 f8d6 	bl	8009588 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80093dc:	4b11      	ldr	r3, [pc, #68]	; (8009424 <xPortStartScheduler+0x134>)
 80093de:	2200      	movs	r2, #0
 80093e0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80093e2:	f000 f8f5 	bl	80095d0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80093e6:	4b10      	ldr	r3, [pc, #64]	; (8009428 <xPortStartScheduler+0x138>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	4a0f      	ldr	r2, [pc, #60]	; (8009428 <xPortStartScheduler+0x138>)
 80093ec:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80093f0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80093f2:	f7ff ff69 	bl	80092c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80093f6:	f7ff f86b 	bl	80084d0 <vTaskSwitchContext>
	prvTaskExitError();
 80093fa:	f7ff ff21 	bl	8009240 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80093fe:	2300      	movs	r3, #0
}
 8009400:	4618      	mov	r0, r3
 8009402:	3718      	adds	r7, #24
 8009404:	46bd      	mov	sp, r7
 8009406:	bd80      	pop	{r7, pc}
 8009408:	e000ed00 	.word	0xe000ed00
 800940c:	410fc271 	.word	0x410fc271
 8009410:	410fc270 	.word	0x410fc270
 8009414:	e000e400 	.word	0xe000e400
 8009418:	20000efc 	.word	0x20000efc
 800941c:	20000f00 	.word	0x20000f00
 8009420:	e000ed20 	.word	0xe000ed20
 8009424:	20000010 	.word	0x20000010
 8009428:	e000ef34 	.word	0xe000ef34

0800942c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800942c:	b480      	push	{r7}
 800942e:	b083      	sub	sp, #12
 8009430:	af00      	add	r7, sp, #0
 8009432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009436:	f383 8811 	msr	BASEPRI, r3
 800943a:	f3bf 8f6f 	isb	sy
 800943e:	f3bf 8f4f 	dsb	sy
 8009442:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009444:	4b0e      	ldr	r3, [pc, #56]	; (8009480 <vPortEnterCritical+0x54>)
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	3301      	adds	r3, #1
 800944a:	4a0d      	ldr	r2, [pc, #52]	; (8009480 <vPortEnterCritical+0x54>)
 800944c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800944e:	4b0c      	ldr	r3, [pc, #48]	; (8009480 <vPortEnterCritical+0x54>)
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	2b01      	cmp	r3, #1
 8009454:	d10e      	bne.n	8009474 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009456:	4b0b      	ldr	r3, [pc, #44]	; (8009484 <vPortEnterCritical+0x58>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	b2db      	uxtb	r3, r3
 800945c:	2b00      	cmp	r3, #0
 800945e:	d009      	beq.n	8009474 <vPortEnterCritical+0x48>
 8009460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009464:	f383 8811 	msr	BASEPRI, r3
 8009468:	f3bf 8f6f 	isb	sy
 800946c:	f3bf 8f4f 	dsb	sy
 8009470:	603b      	str	r3, [r7, #0]
 8009472:	e7fe      	b.n	8009472 <vPortEnterCritical+0x46>
	}
}
 8009474:	bf00      	nop
 8009476:	370c      	adds	r7, #12
 8009478:	46bd      	mov	sp, r7
 800947a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947e:	4770      	bx	lr
 8009480:	20000010 	.word	0x20000010
 8009484:	e000ed04 	.word	0xe000ed04

08009488 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009488:	b480      	push	{r7}
 800948a:	b083      	sub	sp, #12
 800948c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800948e:	4b11      	ldr	r3, [pc, #68]	; (80094d4 <vPortExitCritical+0x4c>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d109      	bne.n	80094aa <vPortExitCritical+0x22>
 8009496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800949a:	f383 8811 	msr	BASEPRI, r3
 800949e:	f3bf 8f6f 	isb	sy
 80094a2:	f3bf 8f4f 	dsb	sy
 80094a6:	607b      	str	r3, [r7, #4]
 80094a8:	e7fe      	b.n	80094a8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80094aa:	4b0a      	ldr	r3, [pc, #40]	; (80094d4 <vPortExitCritical+0x4c>)
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	3b01      	subs	r3, #1
 80094b0:	4a08      	ldr	r2, [pc, #32]	; (80094d4 <vPortExitCritical+0x4c>)
 80094b2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80094b4:	4b07      	ldr	r3, [pc, #28]	; (80094d4 <vPortExitCritical+0x4c>)
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d104      	bne.n	80094c6 <vPortExitCritical+0x3e>
 80094bc:	2300      	movs	r3, #0
 80094be:	603b      	str	r3, [r7, #0]
	__asm volatile
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80094c6:	bf00      	nop
 80094c8:	370c      	adds	r7, #12
 80094ca:	46bd      	mov	sp, r7
 80094cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d0:	4770      	bx	lr
 80094d2:	bf00      	nop
 80094d4:	20000010 	.word	0x20000010
	...

080094e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80094e0:	f3ef 8009 	mrs	r0, PSP
 80094e4:	f3bf 8f6f 	isb	sy
 80094e8:	4b15      	ldr	r3, [pc, #84]	; (8009540 <pxCurrentTCBConst>)
 80094ea:	681a      	ldr	r2, [r3, #0]
 80094ec:	f01e 0f10 	tst.w	lr, #16
 80094f0:	bf08      	it	eq
 80094f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80094f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094fa:	6010      	str	r0, [r2, #0]
 80094fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009500:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009504:	f380 8811 	msr	BASEPRI, r0
 8009508:	f3bf 8f4f 	dsb	sy
 800950c:	f3bf 8f6f 	isb	sy
 8009510:	f7fe ffde 	bl	80084d0 <vTaskSwitchContext>
 8009514:	f04f 0000 	mov.w	r0, #0
 8009518:	f380 8811 	msr	BASEPRI, r0
 800951c:	bc09      	pop	{r0, r3}
 800951e:	6819      	ldr	r1, [r3, #0]
 8009520:	6808      	ldr	r0, [r1, #0]
 8009522:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009526:	f01e 0f10 	tst.w	lr, #16
 800952a:	bf08      	it	eq
 800952c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009530:	f380 8809 	msr	PSP, r0
 8009534:	f3bf 8f6f 	isb	sy
 8009538:	4770      	bx	lr
 800953a:	bf00      	nop
 800953c:	f3af 8000 	nop.w

08009540 <pxCurrentTCBConst>:
 8009540:	200008d0 	.word	0x200008d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009544:	bf00      	nop
 8009546:	bf00      	nop

08009548 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b082      	sub	sp, #8
 800954c:	af00      	add	r7, sp, #0
	__asm volatile
 800954e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009552:	f383 8811 	msr	BASEPRI, r3
 8009556:	f3bf 8f6f 	isb	sy
 800955a:	f3bf 8f4f 	dsb	sy
 800955e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009560:	f7fe fefe 	bl	8008360 <xTaskIncrementTick>
 8009564:	4603      	mov	r3, r0
 8009566:	2b00      	cmp	r3, #0
 8009568:	d003      	beq.n	8009572 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800956a:	4b06      	ldr	r3, [pc, #24]	; (8009584 <SysTick_Handler+0x3c>)
 800956c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009570:	601a      	str	r2, [r3, #0]
 8009572:	2300      	movs	r3, #0
 8009574:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800957c:	bf00      	nop
 800957e:	3708      	adds	r7, #8
 8009580:	46bd      	mov	sp, r7
 8009582:	bd80      	pop	{r7, pc}
 8009584:	e000ed04 	.word	0xe000ed04

08009588 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009588:	b480      	push	{r7}
 800958a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800958c:	4b0b      	ldr	r3, [pc, #44]	; (80095bc <vPortSetupTimerInterrupt+0x34>)
 800958e:	2200      	movs	r2, #0
 8009590:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009592:	4b0b      	ldr	r3, [pc, #44]	; (80095c0 <vPortSetupTimerInterrupt+0x38>)
 8009594:	2200      	movs	r2, #0
 8009596:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009598:	4b0a      	ldr	r3, [pc, #40]	; (80095c4 <vPortSetupTimerInterrupt+0x3c>)
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	4a0a      	ldr	r2, [pc, #40]	; (80095c8 <vPortSetupTimerInterrupt+0x40>)
 800959e:	fba2 2303 	umull	r2, r3, r2, r3
 80095a2:	099b      	lsrs	r3, r3, #6
 80095a4:	4a09      	ldr	r2, [pc, #36]	; (80095cc <vPortSetupTimerInterrupt+0x44>)
 80095a6:	3b01      	subs	r3, #1
 80095a8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80095aa:	4b04      	ldr	r3, [pc, #16]	; (80095bc <vPortSetupTimerInterrupt+0x34>)
 80095ac:	2207      	movs	r2, #7
 80095ae:	601a      	str	r2, [r3, #0]
}
 80095b0:	bf00      	nop
 80095b2:	46bd      	mov	sp, r7
 80095b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b8:	4770      	bx	lr
 80095ba:	bf00      	nop
 80095bc:	e000e010 	.word	0xe000e010
 80095c0:	e000e018 	.word	0xe000e018
 80095c4:	20000004 	.word	0x20000004
 80095c8:	10624dd3 	.word	0x10624dd3
 80095cc:	e000e014 	.word	0xe000e014

080095d0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80095d0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80095e0 <vPortEnableVFP+0x10>
 80095d4:	6801      	ldr	r1, [r0, #0]
 80095d6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80095da:	6001      	str	r1, [r0, #0]
 80095dc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80095de:	bf00      	nop
 80095e0:	e000ed88 	.word	0xe000ed88

080095e4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80095e4:	b480      	push	{r7}
 80095e6:	b085      	sub	sp, #20
 80095e8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80095ea:	f3ef 8305 	mrs	r3, IPSR
 80095ee:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	2b0f      	cmp	r3, #15
 80095f4:	d913      	bls.n	800961e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80095f6:	4a16      	ldr	r2, [pc, #88]	; (8009650 <vPortValidateInterruptPriority+0x6c>)
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	4413      	add	r3, r2
 80095fc:	781b      	ldrb	r3, [r3, #0]
 80095fe:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009600:	4b14      	ldr	r3, [pc, #80]	; (8009654 <vPortValidateInterruptPriority+0x70>)
 8009602:	781b      	ldrb	r3, [r3, #0]
 8009604:	7afa      	ldrb	r2, [r7, #11]
 8009606:	429a      	cmp	r2, r3
 8009608:	d209      	bcs.n	800961e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800960a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800960e:	f383 8811 	msr	BASEPRI, r3
 8009612:	f3bf 8f6f 	isb	sy
 8009616:	f3bf 8f4f 	dsb	sy
 800961a:	607b      	str	r3, [r7, #4]
 800961c:	e7fe      	b.n	800961c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800961e:	4b0e      	ldr	r3, [pc, #56]	; (8009658 <vPortValidateInterruptPriority+0x74>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009626:	4b0d      	ldr	r3, [pc, #52]	; (800965c <vPortValidateInterruptPriority+0x78>)
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	429a      	cmp	r2, r3
 800962c:	d909      	bls.n	8009642 <vPortValidateInterruptPriority+0x5e>
 800962e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009632:	f383 8811 	msr	BASEPRI, r3
 8009636:	f3bf 8f6f 	isb	sy
 800963a:	f3bf 8f4f 	dsb	sy
 800963e:	603b      	str	r3, [r7, #0]
 8009640:	e7fe      	b.n	8009640 <vPortValidateInterruptPriority+0x5c>
	}
 8009642:	bf00      	nop
 8009644:	3714      	adds	r7, #20
 8009646:	46bd      	mov	sp, r7
 8009648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964c:	4770      	bx	lr
 800964e:	bf00      	nop
 8009650:	e000e3f0 	.word	0xe000e3f0
 8009654:	20000efc 	.word	0x20000efc
 8009658:	e000ed0c 	.word	0xe000ed0c
 800965c:	20000f00 	.word	0x20000f00

08009660 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b08a      	sub	sp, #40	; 0x28
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009668:	2300      	movs	r3, #0
 800966a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800966c:	f7fe fdbe 	bl	80081ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009670:	4b57      	ldr	r3, [pc, #348]	; (80097d0 <pvPortMalloc+0x170>)
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d101      	bne.n	800967c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009678:	f000 f90c 	bl	8009894 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800967c:	4b55      	ldr	r3, [pc, #340]	; (80097d4 <pvPortMalloc+0x174>)
 800967e:	681a      	ldr	r2, [r3, #0]
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	4013      	ands	r3, r2
 8009684:	2b00      	cmp	r3, #0
 8009686:	f040 808c 	bne.w	80097a2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d01c      	beq.n	80096ca <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8009690:	2208      	movs	r2, #8
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	4413      	add	r3, r2
 8009696:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f003 0307 	and.w	r3, r3, #7
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d013      	beq.n	80096ca <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	f023 0307 	bic.w	r3, r3, #7
 80096a8:	3308      	adds	r3, #8
 80096aa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f003 0307 	and.w	r3, r3, #7
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d009      	beq.n	80096ca <pvPortMalloc+0x6a>
 80096b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ba:	f383 8811 	msr	BASEPRI, r3
 80096be:	f3bf 8f6f 	isb	sy
 80096c2:	f3bf 8f4f 	dsb	sy
 80096c6:	617b      	str	r3, [r7, #20]
 80096c8:	e7fe      	b.n	80096c8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d068      	beq.n	80097a2 <pvPortMalloc+0x142>
 80096d0:	4b41      	ldr	r3, [pc, #260]	; (80097d8 <pvPortMalloc+0x178>)
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	687a      	ldr	r2, [r7, #4]
 80096d6:	429a      	cmp	r2, r3
 80096d8:	d863      	bhi.n	80097a2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80096da:	4b40      	ldr	r3, [pc, #256]	; (80097dc <pvPortMalloc+0x17c>)
 80096dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80096de:	4b3f      	ldr	r3, [pc, #252]	; (80097dc <pvPortMalloc+0x17c>)
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80096e4:	e004      	b.n	80096f0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80096e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80096ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80096f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096f2:	685b      	ldr	r3, [r3, #4]
 80096f4:	687a      	ldr	r2, [r7, #4]
 80096f6:	429a      	cmp	r2, r3
 80096f8:	d903      	bls.n	8009702 <pvPortMalloc+0xa2>
 80096fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d1f1      	bne.n	80096e6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009702:	4b33      	ldr	r3, [pc, #204]	; (80097d0 <pvPortMalloc+0x170>)
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009708:	429a      	cmp	r2, r3
 800970a:	d04a      	beq.n	80097a2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800970c:	6a3b      	ldr	r3, [r7, #32]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	2208      	movs	r2, #8
 8009712:	4413      	add	r3, r2
 8009714:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009718:	681a      	ldr	r2, [r3, #0]
 800971a:	6a3b      	ldr	r3, [r7, #32]
 800971c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800971e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009720:	685a      	ldr	r2, [r3, #4]
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	1ad2      	subs	r2, r2, r3
 8009726:	2308      	movs	r3, #8
 8009728:	005b      	lsls	r3, r3, #1
 800972a:	429a      	cmp	r2, r3
 800972c:	d91e      	bls.n	800976c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800972e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	4413      	add	r3, r2
 8009734:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009736:	69bb      	ldr	r3, [r7, #24]
 8009738:	f003 0307 	and.w	r3, r3, #7
 800973c:	2b00      	cmp	r3, #0
 800973e:	d009      	beq.n	8009754 <pvPortMalloc+0xf4>
 8009740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009744:	f383 8811 	msr	BASEPRI, r3
 8009748:	f3bf 8f6f 	isb	sy
 800974c:	f3bf 8f4f 	dsb	sy
 8009750:	613b      	str	r3, [r7, #16]
 8009752:	e7fe      	b.n	8009752 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009756:	685a      	ldr	r2, [r3, #4]
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	1ad2      	subs	r2, r2, r3
 800975c:	69bb      	ldr	r3, [r7, #24]
 800975e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009762:	687a      	ldr	r2, [r7, #4]
 8009764:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009766:	69b8      	ldr	r0, [r7, #24]
 8009768:	f000 f8f6 	bl	8009958 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800976c:	4b1a      	ldr	r3, [pc, #104]	; (80097d8 <pvPortMalloc+0x178>)
 800976e:	681a      	ldr	r2, [r3, #0]
 8009770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009772:	685b      	ldr	r3, [r3, #4]
 8009774:	1ad3      	subs	r3, r2, r3
 8009776:	4a18      	ldr	r2, [pc, #96]	; (80097d8 <pvPortMalloc+0x178>)
 8009778:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800977a:	4b17      	ldr	r3, [pc, #92]	; (80097d8 <pvPortMalloc+0x178>)
 800977c:	681a      	ldr	r2, [r3, #0]
 800977e:	4b18      	ldr	r3, [pc, #96]	; (80097e0 <pvPortMalloc+0x180>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	429a      	cmp	r2, r3
 8009784:	d203      	bcs.n	800978e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009786:	4b14      	ldr	r3, [pc, #80]	; (80097d8 <pvPortMalloc+0x178>)
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	4a15      	ldr	r2, [pc, #84]	; (80097e0 <pvPortMalloc+0x180>)
 800978c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800978e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009790:	685a      	ldr	r2, [r3, #4]
 8009792:	4b10      	ldr	r3, [pc, #64]	; (80097d4 <pvPortMalloc+0x174>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	431a      	orrs	r2, r3
 8009798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800979a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800979c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800979e:	2200      	movs	r2, #0
 80097a0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80097a2:	f7fe fd31 	bl	8008208 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80097a6:	69fb      	ldr	r3, [r7, #28]
 80097a8:	f003 0307 	and.w	r3, r3, #7
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d009      	beq.n	80097c4 <pvPortMalloc+0x164>
 80097b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097b4:	f383 8811 	msr	BASEPRI, r3
 80097b8:	f3bf 8f6f 	isb	sy
 80097bc:	f3bf 8f4f 	dsb	sy
 80097c0:	60fb      	str	r3, [r7, #12]
 80097c2:	e7fe      	b.n	80097c2 <pvPortMalloc+0x162>
	return pvReturn;
 80097c4:	69fb      	ldr	r3, [r7, #28]
}
 80097c6:	4618      	mov	r0, r3
 80097c8:	3728      	adds	r7, #40	; 0x28
 80097ca:	46bd      	mov	sp, r7
 80097cc:	bd80      	pop	{r7, pc}
 80097ce:	bf00      	nop
 80097d0:	20004b0c 	.word	0x20004b0c
 80097d4:	20004b18 	.word	0x20004b18
 80097d8:	20004b10 	.word	0x20004b10
 80097dc:	20004b04 	.word	0x20004b04
 80097e0:	20004b14 	.word	0x20004b14

080097e4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b086      	sub	sp, #24
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d046      	beq.n	8009884 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80097f6:	2308      	movs	r3, #8
 80097f8:	425b      	negs	r3, r3
 80097fa:	697a      	ldr	r2, [r7, #20]
 80097fc:	4413      	add	r3, r2
 80097fe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009800:	697b      	ldr	r3, [r7, #20]
 8009802:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009804:	693b      	ldr	r3, [r7, #16]
 8009806:	685a      	ldr	r2, [r3, #4]
 8009808:	4b20      	ldr	r3, [pc, #128]	; (800988c <vPortFree+0xa8>)
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	4013      	ands	r3, r2
 800980e:	2b00      	cmp	r3, #0
 8009810:	d109      	bne.n	8009826 <vPortFree+0x42>
 8009812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009816:	f383 8811 	msr	BASEPRI, r3
 800981a:	f3bf 8f6f 	isb	sy
 800981e:	f3bf 8f4f 	dsb	sy
 8009822:	60fb      	str	r3, [r7, #12]
 8009824:	e7fe      	b.n	8009824 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009826:	693b      	ldr	r3, [r7, #16]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d009      	beq.n	8009842 <vPortFree+0x5e>
 800982e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009832:	f383 8811 	msr	BASEPRI, r3
 8009836:	f3bf 8f6f 	isb	sy
 800983a:	f3bf 8f4f 	dsb	sy
 800983e:	60bb      	str	r3, [r7, #8]
 8009840:	e7fe      	b.n	8009840 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009842:	693b      	ldr	r3, [r7, #16]
 8009844:	685a      	ldr	r2, [r3, #4]
 8009846:	4b11      	ldr	r3, [pc, #68]	; (800988c <vPortFree+0xa8>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	4013      	ands	r3, r2
 800984c:	2b00      	cmp	r3, #0
 800984e:	d019      	beq.n	8009884 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009850:	693b      	ldr	r3, [r7, #16]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d115      	bne.n	8009884 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009858:	693b      	ldr	r3, [r7, #16]
 800985a:	685a      	ldr	r2, [r3, #4]
 800985c:	4b0b      	ldr	r3, [pc, #44]	; (800988c <vPortFree+0xa8>)
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	43db      	mvns	r3, r3
 8009862:	401a      	ands	r2, r3
 8009864:	693b      	ldr	r3, [r7, #16]
 8009866:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009868:	f7fe fcc0 	bl	80081ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800986c:	693b      	ldr	r3, [r7, #16]
 800986e:	685a      	ldr	r2, [r3, #4]
 8009870:	4b07      	ldr	r3, [pc, #28]	; (8009890 <vPortFree+0xac>)
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	4413      	add	r3, r2
 8009876:	4a06      	ldr	r2, [pc, #24]	; (8009890 <vPortFree+0xac>)
 8009878:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800987a:	6938      	ldr	r0, [r7, #16]
 800987c:	f000 f86c 	bl	8009958 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009880:	f7fe fcc2 	bl	8008208 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009884:	bf00      	nop
 8009886:	3718      	adds	r7, #24
 8009888:	46bd      	mov	sp, r7
 800988a:	bd80      	pop	{r7, pc}
 800988c:	20004b18 	.word	0x20004b18
 8009890:	20004b10 	.word	0x20004b10

08009894 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009894:	b480      	push	{r7}
 8009896:	b085      	sub	sp, #20
 8009898:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800989a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800989e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80098a0:	4b27      	ldr	r3, [pc, #156]	; (8009940 <prvHeapInit+0xac>)
 80098a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	f003 0307 	and.w	r3, r3, #7
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d00c      	beq.n	80098c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	3307      	adds	r3, #7
 80098b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	f023 0307 	bic.w	r3, r3, #7
 80098ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80098bc:	68ba      	ldr	r2, [r7, #8]
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	1ad3      	subs	r3, r2, r3
 80098c2:	4a1f      	ldr	r2, [pc, #124]	; (8009940 <prvHeapInit+0xac>)
 80098c4:	4413      	add	r3, r2
 80098c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80098cc:	4a1d      	ldr	r2, [pc, #116]	; (8009944 <prvHeapInit+0xb0>)
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80098d2:	4b1c      	ldr	r3, [pc, #112]	; (8009944 <prvHeapInit+0xb0>)
 80098d4:	2200      	movs	r2, #0
 80098d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	68ba      	ldr	r2, [r7, #8]
 80098dc:	4413      	add	r3, r2
 80098de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80098e0:	2208      	movs	r2, #8
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	1a9b      	subs	r3, r3, r2
 80098e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	f023 0307 	bic.w	r3, r3, #7
 80098ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	4a15      	ldr	r2, [pc, #84]	; (8009948 <prvHeapInit+0xb4>)
 80098f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80098f6:	4b14      	ldr	r3, [pc, #80]	; (8009948 <prvHeapInit+0xb4>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	2200      	movs	r2, #0
 80098fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80098fe:	4b12      	ldr	r3, [pc, #72]	; (8009948 <prvHeapInit+0xb4>)
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	2200      	movs	r2, #0
 8009904:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	68fa      	ldr	r2, [r7, #12]
 800990e:	1ad2      	subs	r2, r2, r3
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009914:	4b0c      	ldr	r3, [pc, #48]	; (8009948 <prvHeapInit+0xb4>)
 8009916:	681a      	ldr	r2, [r3, #0]
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	685b      	ldr	r3, [r3, #4]
 8009920:	4a0a      	ldr	r2, [pc, #40]	; (800994c <prvHeapInit+0xb8>)
 8009922:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	685b      	ldr	r3, [r3, #4]
 8009928:	4a09      	ldr	r2, [pc, #36]	; (8009950 <prvHeapInit+0xbc>)
 800992a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800992c:	4b09      	ldr	r3, [pc, #36]	; (8009954 <prvHeapInit+0xc0>)
 800992e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009932:	601a      	str	r2, [r3, #0]
}
 8009934:	bf00      	nop
 8009936:	3714      	adds	r7, #20
 8009938:	46bd      	mov	sp, r7
 800993a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993e:	4770      	bx	lr
 8009940:	20000f04 	.word	0x20000f04
 8009944:	20004b04 	.word	0x20004b04
 8009948:	20004b0c 	.word	0x20004b0c
 800994c:	20004b14 	.word	0x20004b14
 8009950:	20004b10 	.word	0x20004b10
 8009954:	20004b18 	.word	0x20004b18

08009958 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009958:	b480      	push	{r7}
 800995a:	b085      	sub	sp, #20
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009960:	4b28      	ldr	r3, [pc, #160]	; (8009a04 <prvInsertBlockIntoFreeList+0xac>)
 8009962:	60fb      	str	r3, [r7, #12]
 8009964:	e002      	b.n	800996c <prvInsertBlockIntoFreeList+0x14>
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	60fb      	str	r3, [r7, #12]
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	687a      	ldr	r2, [r7, #4]
 8009972:	429a      	cmp	r2, r3
 8009974:	d8f7      	bhi.n	8009966 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	685b      	ldr	r3, [r3, #4]
 800997e:	68ba      	ldr	r2, [r7, #8]
 8009980:	4413      	add	r3, r2
 8009982:	687a      	ldr	r2, [r7, #4]
 8009984:	429a      	cmp	r2, r3
 8009986:	d108      	bne.n	800999a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	685a      	ldr	r2, [r3, #4]
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	685b      	ldr	r3, [r3, #4]
 8009990:	441a      	add	r2, r3
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	685b      	ldr	r3, [r3, #4]
 80099a2:	68ba      	ldr	r2, [r7, #8]
 80099a4:	441a      	add	r2, r3
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	429a      	cmp	r2, r3
 80099ac:	d118      	bne.n	80099e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	681a      	ldr	r2, [r3, #0]
 80099b2:	4b15      	ldr	r3, [pc, #84]	; (8009a08 <prvInsertBlockIntoFreeList+0xb0>)
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	429a      	cmp	r2, r3
 80099b8:	d00d      	beq.n	80099d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	685a      	ldr	r2, [r3, #4]
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	685b      	ldr	r3, [r3, #4]
 80099c4:	441a      	add	r2, r3
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	681a      	ldr	r2, [r3, #0]
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	601a      	str	r2, [r3, #0]
 80099d4:	e008      	b.n	80099e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80099d6:	4b0c      	ldr	r3, [pc, #48]	; (8009a08 <prvInsertBlockIntoFreeList+0xb0>)
 80099d8:	681a      	ldr	r2, [r3, #0]
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	601a      	str	r2, [r3, #0]
 80099de:	e003      	b.n	80099e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	681a      	ldr	r2, [r3, #0]
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80099e8:	68fa      	ldr	r2, [r7, #12]
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	429a      	cmp	r2, r3
 80099ee:	d002      	beq.n	80099f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	687a      	ldr	r2, [r7, #4]
 80099f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80099f6:	bf00      	nop
 80099f8:	3714      	adds	r7, #20
 80099fa:	46bd      	mov	sp, r7
 80099fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a00:	4770      	bx	lr
 8009a02:	bf00      	nop
 8009a04:	20004b04 	.word	0x20004b04
 8009a08:	20004b0c 	.word	0x20004b0c

08009a0c <atoi>:
 8009a0c:	220a      	movs	r2, #10
 8009a0e:	2100      	movs	r1, #0
 8009a10:	f000 b8d2 	b.w	8009bb8 <strtol>

08009a14 <__errno>:
 8009a14:	4b01      	ldr	r3, [pc, #4]	; (8009a1c <__errno+0x8>)
 8009a16:	6818      	ldr	r0, [r3, #0]
 8009a18:	4770      	bx	lr
 8009a1a:	bf00      	nop
 8009a1c:	20000014 	.word	0x20000014

08009a20 <__libc_init_array>:
 8009a20:	b570      	push	{r4, r5, r6, lr}
 8009a22:	4e0d      	ldr	r6, [pc, #52]	; (8009a58 <__libc_init_array+0x38>)
 8009a24:	4c0d      	ldr	r4, [pc, #52]	; (8009a5c <__libc_init_array+0x3c>)
 8009a26:	1ba4      	subs	r4, r4, r6
 8009a28:	10a4      	asrs	r4, r4, #2
 8009a2a:	2500      	movs	r5, #0
 8009a2c:	42a5      	cmp	r5, r4
 8009a2e:	d109      	bne.n	8009a44 <__libc_init_array+0x24>
 8009a30:	4e0b      	ldr	r6, [pc, #44]	; (8009a60 <__libc_init_array+0x40>)
 8009a32:	4c0c      	ldr	r4, [pc, #48]	; (8009a64 <__libc_init_array+0x44>)
 8009a34:	f000 ffc6 	bl	800a9c4 <_init>
 8009a38:	1ba4      	subs	r4, r4, r6
 8009a3a:	10a4      	asrs	r4, r4, #2
 8009a3c:	2500      	movs	r5, #0
 8009a3e:	42a5      	cmp	r5, r4
 8009a40:	d105      	bne.n	8009a4e <__libc_init_array+0x2e>
 8009a42:	bd70      	pop	{r4, r5, r6, pc}
 8009a44:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009a48:	4798      	blx	r3
 8009a4a:	3501      	adds	r5, #1
 8009a4c:	e7ee      	b.n	8009a2c <__libc_init_array+0xc>
 8009a4e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009a52:	4798      	blx	r3
 8009a54:	3501      	adds	r5, #1
 8009a56:	e7f2      	b.n	8009a3e <__libc_init_array+0x1e>
 8009a58:	0800adb0 	.word	0x0800adb0
 8009a5c:	0800adb0 	.word	0x0800adb0
 8009a60:	0800adb0 	.word	0x0800adb0
 8009a64:	0800adb4 	.word	0x0800adb4

08009a68 <memcpy>:
 8009a68:	b510      	push	{r4, lr}
 8009a6a:	1e43      	subs	r3, r0, #1
 8009a6c:	440a      	add	r2, r1
 8009a6e:	4291      	cmp	r1, r2
 8009a70:	d100      	bne.n	8009a74 <memcpy+0xc>
 8009a72:	bd10      	pop	{r4, pc}
 8009a74:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a78:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a7c:	e7f7      	b.n	8009a6e <memcpy+0x6>

08009a7e <memset>:
 8009a7e:	4402      	add	r2, r0
 8009a80:	4603      	mov	r3, r0
 8009a82:	4293      	cmp	r3, r2
 8009a84:	d100      	bne.n	8009a88 <memset+0xa>
 8009a86:	4770      	bx	lr
 8009a88:	f803 1b01 	strb.w	r1, [r3], #1
 8009a8c:	e7f9      	b.n	8009a82 <memset+0x4>
	...

08009a90 <iprintf>:
 8009a90:	b40f      	push	{r0, r1, r2, r3}
 8009a92:	4b0a      	ldr	r3, [pc, #40]	; (8009abc <iprintf+0x2c>)
 8009a94:	b513      	push	{r0, r1, r4, lr}
 8009a96:	681c      	ldr	r4, [r3, #0]
 8009a98:	b124      	cbz	r4, 8009aa4 <iprintf+0x14>
 8009a9a:	69a3      	ldr	r3, [r4, #24]
 8009a9c:	b913      	cbnz	r3, 8009aa4 <iprintf+0x14>
 8009a9e:	4620      	mov	r0, r4
 8009aa0:	f000 f8e0 	bl	8009c64 <__sinit>
 8009aa4:	ab05      	add	r3, sp, #20
 8009aa6:	9a04      	ldr	r2, [sp, #16]
 8009aa8:	68a1      	ldr	r1, [r4, #8]
 8009aaa:	9301      	str	r3, [sp, #4]
 8009aac:	4620      	mov	r0, r4
 8009aae:	f000 fa4b 	bl	8009f48 <_vfiprintf_r>
 8009ab2:	b002      	add	sp, #8
 8009ab4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ab8:	b004      	add	sp, #16
 8009aba:	4770      	bx	lr
 8009abc:	20000014 	.word	0x20000014

08009ac0 <_strtol_l.isra.0>:
 8009ac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ac4:	4680      	mov	r8, r0
 8009ac6:	4689      	mov	r9, r1
 8009ac8:	4692      	mov	sl, r2
 8009aca:	461e      	mov	r6, r3
 8009acc:	460f      	mov	r7, r1
 8009ace:	463d      	mov	r5, r7
 8009ad0:	9808      	ldr	r0, [sp, #32]
 8009ad2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009ad6:	f000 f94f 	bl	8009d78 <__locale_ctype_ptr_l>
 8009ada:	4420      	add	r0, r4
 8009adc:	7843      	ldrb	r3, [r0, #1]
 8009ade:	f013 0308 	ands.w	r3, r3, #8
 8009ae2:	d132      	bne.n	8009b4a <_strtol_l.isra.0+0x8a>
 8009ae4:	2c2d      	cmp	r4, #45	; 0x2d
 8009ae6:	d132      	bne.n	8009b4e <_strtol_l.isra.0+0x8e>
 8009ae8:	787c      	ldrb	r4, [r7, #1]
 8009aea:	1cbd      	adds	r5, r7, #2
 8009aec:	2201      	movs	r2, #1
 8009aee:	2e00      	cmp	r6, #0
 8009af0:	d05d      	beq.n	8009bae <_strtol_l.isra.0+0xee>
 8009af2:	2e10      	cmp	r6, #16
 8009af4:	d109      	bne.n	8009b0a <_strtol_l.isra.0+0x4a>
 8009af6:	2c30      	cmp	r4, #48	; 0x30
 8009af8:	d107      	bne.n	8009b0a <_strtol_l.isra.0+0x4a>
 8009afa:	782b      	ldrb	r3, [r5, #0]
 8009afc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009b00:	2b58      	cmp	r3, #88	; 0x58
 8009b02:	d14f      	bne.n	8009ba4 <_strtol_l.isra.0+0xe4>
 8009b04:	786c      	ldrb	r4, [r5, #1]
 8009b06:	2610      	movs	r6, #16
 8009b08:	3502      	adds	r5, #2
 8009b0a:	2a00      	cmp	r2, #0
 8009b0c:	bf14      	ite	ne
 8009b0e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8009b12:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8009b16:	2700      	movs	r7, #0
 8009b18:	fbb1 fcf6 	udiv	ip, r1, r6
 8009b1c:	4638      	mov	r0, r7
 8009b1e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8009b22:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8009b26:	2b09      	cmp	r3, #9
 8009b28:	d817      	bhi.n	8009b5a <_strtol_l.isra.0+0x9a>
 8009b2a:	461c      	mov	r4, r3
 8009b2c:	42a6      	cmp	r6, r4
 8009b2e:	dd23      	ble.n	8009b78 <_strtol_l.isra.0+0xb8>
 8009b30:	1c7b      	adds	r3, r7, #1
 8009b32:	d007      	beq.n	8009b44 <_strtol_l.isra.0+0x84>
 8009b34:	4584      	cmp	ip, r0
 8009b36:	d31c      	bcc.n	8009b72 <_strtol_l.isra.0+0xb2>
 8009b38:	d101      	bne.n	8009b3e <_strtol_l.isra.0+0x7e>
 8009b3a:	45a6      	cmp	lr, r4
 8009b3c:	db19      	blt.n	8009b72 <_strtol_l.isra.0+0xb2>
 8009b3e:	fb00 4006 	mla	r0, r0, r6, r4
 8009b42:	2701      	movs	r7, #1
 8009b44:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009b48:	e7eb      	b.n	8009b22 <_strtol_l.isra.0+0x62>
 8009b4a:	462f      	mov	r7, r5
 8009b4c:	e7bf      	b.n	8009ace <_strtol_l.isra.0+0xe>
 8009b4e:	2c2b      	cmp	r4, #43	; 0x2b
 8009b50:	bf04      	itt	eq
 8009b52:	1cbd      	addeq	r5, r7, #2
 8009b54:	787c      	ldrbeq	r4, [r7, #1]
 8009b56:	461a      	mov	r2, r3
 8009b58:	e7c9      	b.n	8009aee <_strtol_l.isra.0+0x2e>
 8009b5a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8009b5e:	2b19      	cmp	r3, #25
 8009b60:	d801      	bhi.n	8009b66 <_strtol_l.isra.0+0xa6>
 8009b62:	3c37      	subs	r4, #55	; 0x37
 8009b64:	e7e2      	b.n	8009b2c <_strtol_l.isra.0+0x6c>
 8009b66:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8009b6a:	2b19      	cmp	r3, #25
 8009b6c:	d804      	bhi.n	8009b78 <_strtol_l.isra.0+0xb8>
 8009b6e:	3c57      	subs	r4, #87	; 0x57
 8009b70:	e7dc      	b.n	8009b2c <_strtol_l.isra.0+0x6c>
 8009b72:	f04f 37ff 	mov.w	r7, #4294967295
 8009b76:	e7e5      	b.n	8009b44 <_strtol_l.isra.0+0x84>
 8009b78:	1c7b      	adds	r3, r7, #1
 8009b7a:	d108      	bne.n	8009b8e <_strtol_l.isra.0+0xce>
 8009b7c:	2322      	movs	r3, #34	; 0x22
 8009b7e:	f8c8 3000 	str.w	r3, [r8]
 8009b82:	4608      	mov	r0, r1
 8009b84:	f1ba 0f00 	cmp.w	sl, #0
 8009b88:	d107      	bne.n	8009b9a <_strtol_l.isra.0+0xda>
 8009b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b8e:	b102      	cbz	r2, 8009b92 <_strtol_l.isra.0+0xd2>
 8009b90:	4240      	negs	r0, r0
 8009b92:	f1ba 0f00 	cmp.w	sl, #0
 8009b96:	d0f8      	beq.n	8009b8a <_strtol_l.isra.0+0xca>
 8009b98:	b10f      	cbz	r7, 8009b9e <_strtol_l.isra.0+0xde>
 8009b9a:	f105 39ff 	add.w	r9, r5, #4294967295
 8009b9e:	f8ca 9000 	str.w	r9, [sl]
 8009ba2:	e7f2      	b.n	8009b8a <_strtol_l.isra.0+0xca>
 8009ba4:	2430      	movs	r4, #48	; 0x30
 8009ba6:	2e00      	cmp	r6, #0
 8009ba8:	d1af      	bne.n	8009b0a <_strtol_l.isra.0+0x4a>
 8009baa:	2608      	movs	r6, #8
 8009bac:	e7ad      	b.n	8009b0a <_strtol_l.isra.0+0x4a>
 8009bae:	2c30      	cmp	r4, #48	; 0x30
 8009bb0:	d0a3      	beq.n	8009afa <_strtol_l.isra.0+0x3a>
 8009bb2:	260a      	movs	r6, #10
 8009bb4:	e7a9      	b.n	8009b0a <_strtol_l.isra.0+0x4a>
	...

08009bb8 <strtol>:
 8009bb8:	4b08      	ldr	r3, [pc, #32]	; (8009bdc <strtol+0x24>)
 8009bba:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009bbc:	681c      	ldr	r4, [r3, #0]
 8009bbe:	4d08      	ldr	r5, [pc, #32]	; (8009be0 <strtol+0x28>)
 8009bc0:	6a23      	ldr	r3, [r4, #32]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	bf08      	it	eq
 8009bc6:	462b      	moveq	r3, r5
 8009bc8:	9300      	str	r3, [sp, #0]
 8009bca:	4613      	mov	r3, r2
 8009bcc:	460a      	mov	r2, r1
 8009bce:	4601      	mov	r1, r0
 8009bd0:	4620      	mov	r0, r4
 8009bd2:	f7ff ff75 	bl	8009ac0 <_strtol_l.isra.0>
 8009bd6:	b003      	add	sp, #12
 8009bd8:	bd30      	pop	{r4, r5, pc}
 8009bda:	bf00      	nop
 8009bdc:	20000014 	.word	0x20000014
 8009be0:	20000078 	.word	0x20000078

08009be4 <std>:
 8009be4:	2300      	movs	r3, #0
 8009be6:	b510      	push	{r4, lr}
 8009be8:	4604      	mov	r4, r0
 8009bea:	e9c0 3300 	strd	r3, r3, [r0]
 8009bee:	6083      	str	r3, [r0, #8]
 8009bf0:	8181      	strh	r1, [r0, #12]
 8009bf2:	6643      	str	r3, [r0, #100]	; 0x64
 8009bf4:	81c2      	strh	r2, [r0, #14]
 8009bf6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009bfa:	6183      	str	r3, [r0, #24]
 8009bfc:	4619      	mov	r1, r3
 8009bfe:	2208      	movs	r2, #8
 8009c00:	305c      	adds	r0, #92	; 0x5c
 8009c02:	f7ff ff3c 	bl	8009a7e <memset>
 8009c06:	4b05      	ldr	r3, [pc, #20]	; (8009c1c <std+0x38>)
 8009c08:	6263      	str	r3, [r4, #36]	; 0x24
 8009c0a:	4b05      	ldr	r3, [pc, #20]	; (8009c20 <std+0x3c>)
 8009c0c:	62a3      	str	r3, [r4, #40]	; 0x28
 8009c0e:	4b05      	ldr	r3, [pc, #20]	; (8009c24 <std+0x40>)
 8009c10:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009c12:	4b05      	ldr	r3, [pc, #20]	; (8009c28 <std+0x44>)
 8009c14:	6224      	str	r4, [r4, #32]
 8009c16:	6323      	str	r3, [r4, #48]	; 0x30
 8009c18:	bd10      	pop	{r4, pc}
 8009c1a:	bf00      	nop
 8009c1c:	0800a4a5 	.word	0x0800a4a5
 8009c20:	0800a4c7 	.word	0x0800a4c7
 8009c24:	0800a4ff 	.word	0x0800a4ff
 8009c28:	0800a523 	.word	0x0800a523

08009c2c <_cleanup_r>:
 8009c2c:	4901      	ldr	r1, [pc, #4]	; (8009c34 <_cleanup_r+0x8>)
 8009c2e:	f000 b885 	b.w	8009d3c <_fwalk_reent>
 8009c32:	bf00      	nop
 8009c34:	0800a819 	.word	0x0800a819

08009c38 <__sfmoreglue>:
 8009c38:	b570      	push	{r4, r5, r6, lr}
 8009c3a:	1e4a      	subs	r2, r1, #1
 8009c3c:	2568      	movs	r5, #104	; 0x68
 8009c3e:	4355      	muls	r5, r2
 8009c40:	460e      	mov	r6, r1
 8009c42:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009c46:	f000 f8fb 	bl	8009e40 <_malloc_r>
 8009c4a:	4604      	mov	r4, r0
 8009c4c:	b140      	cbz	r0, 8009c60 <__sfmoreglue+0x28>
 8009c4e:	2100      	movs	r1, #0
 8009c50:	e9c0 1600 	strd	r1, r6, [r0]
 8009c54:	300c      	adds	r0, #12
 8009c56:	60a0      	str	r0, [r4, #8]
 8009c58:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009c5c:	f7ff ff0f 	bl	8009a7e <memset>
 8009c60:	4620      	mov	r0, r4
 8009c62:	bd70      	pop	{r4, r5, r6, pc}

08009c64 <__sinit>:
 8009c64:	6983      	ldr	r3, [r0, #24]
 8009c66:	b510      	push	{r4, lr}
 8009c68:	4604      	mov	r4, r0
 8009c6a:	bb33      	cbnz	r3, 8009cba <__sinit+0x56>
 8009c6c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8009c70:	6503      	str	r3, [r0, #80]	; 0x50
 8009c72:	4b12      	ldr	r3, [pc, #72]	; (8009cbc <__sinit+0x58>)
 8009c74:	4a12      	ldr	r2, [pc, #72]	; (8009cc0 <__sinit+0x5c>)
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	6282      	str	r2, [r0, #40]	; 0x28
 8009c7a:	4298      	cmp	r0, r3
 8009c7c:	bf04      	itt	eq
 8009c7e:	2301      	moveq	r3, #1
 8009c80:	6183      	streq	r3, [r0, #24]
 8009c82:	f000 f81f 	bl	8009cc4 <__sfp>
 8009c86:	6060      	str	r0, [r4, #4]
 8009c88:	4620      	mov	r0, r4
 8009c8a:	f000 f81b 	bl	8009cc4 <__sfp>
 8009c8e:	60a0      	str	r0, [r4, #8]
 8009c90:	4620      	mov	r0, r4
 8009c92:	f000 f817 	bl	8009cc4 <__sfp>
 8009c96:	2200      	movs	r2, #0
 8009c98:	60e0      	str	r0, [r4, #12]
 8009c9a:	2104      	movs	r1, #4
 8009c9c:	6860      	ldr	r0, [r4, #4]
 8009c9e:	f7ff ffa1 	bl	8009be4 <std>
 8009ca2:	2201      	movs	r2, #1
 8009ca4:	2109      	movs	r1, #9
 8009ca6:	68a0      	ldr	r0, [r4, #8]
 8009ca8:	f7ff ff9c 	bl	8009be4 <std>
 8009cac:	2202      	movs	r2, #2
 8009cae:	2112      	movs	r1, #18
 8009cb0:	68e0      	ldr	r0, [r4, #12]
 8009cb2:	f7ff ff97 	bl	8009be4 <std>
 8009cb6:	2301      	movs	r3, #1
 8009cb8:	61a3      	str	r3, [r4, #24]
 8009cba:	bd10      	pop	{r4, pc}
 8009cbc:	0800ac04 	.word	0x0800ac04
 8009cc0:	08009c2d 	.word	0x08009c2d

08009cc4 <__sfp>:
 8009cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cc6:	4b1b      	ldr	r3, [pc, #108]	; (8009d34 <__sfp+0x70>)
 8009cc8:	681e      	ldr	r6, [r3, #0]
 8009cca:	69b3      	ldr	r3, [r6, #24]
 8009ccc:	4607      	mov	r7, r0
 8009cce:	b913      	cbnz	r3, 8009cd6 <__sfp+0x12>
 8009cd0:	4630      	mov	r0, r6
 8009cd2:	f7ff ffc7 	bl	8009c64 <__sinit>
 8009cd6:	3648      	adds	r6, #72	; 0x48
 8009cd8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009cdc:	3b01      	subs	r3, #1
 8009cde:	d503      	bpl.n	8009ce8 <__sfp+0x24>
 8009ce0:	6833      	ldr	r3, [r6, #0]
 8009ce2:	b133      	cbz	r3, 8009cf2 <__sfp+0x2e>
 8009ce4:	6836      	ldr	r6, [r6, #0]
 8009ce6:	e7f7      	b.n	8009cd8 <__sfp+0x14>
 8009ce8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009cec:	b16d      	cbz	r5, 8009d0a <__sfp+0x46>
 8009cee:	3468      	adds	r4, #104	; 0x68
 8009cf0:	e7f4      	b.n	8009cdc <__sfp+0x18>
 8009cf2:	2104      	movs	r1, #4
 8009cf4:	4638      	mov	r0, r7
 8009cf6:	f7ff ff9f 	bl	8009c38 <__sfmoreglue>
 8009cfa:	6030      	str	r0, [r6, #0]
 8009cfc:	2800      	cmp	r0, #0
 8009cfe:	d1f1      	bne.n	8009ce4 <__sfp+0x20>
 8009d00:	230c      	movs	r3, #12
 8009d02:	603b      	str	r3, [r7, #0]
 8009d04:	4604      	mov	r4, r0
 8009d06:	4620      	mov	r0, r4
 8009d08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d0a:	4b0b      	ldr	r3, [pc, #44]	; (8009d38 <__sfp+0x74>)
 8009d0c:	6665      	str	r5, [r4, #100]	; 0x64
 8009d0e:	e9c4 5500 	strd	r5, r5, [r4]
 8009d12:	60a5      	str	r5, [r4, #8]
 8009d14:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8009d18:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8009d1c:	2208      	movs	r2, #8
 8009d1e:	4629      	mov	r1, r5
 8009d20:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009d24:	f7ff feab 	bl	8009a7e <memset>
 8009d28:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009d2c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009d30:	e7e9      	b.n	8009d06 <__sfp+0x42>
 8009d32:	bf00      	nop
 8009d34:	0800ac04 	.word	0x0800ac04
 8009d38:	ffff0001 	.word	0xffff0001

08009d3c <_fwalk_reent>:
 8009d3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d40:	4680      	mov	r8, r0
 8009d42:	4689      	mov	r9, r1
 8009d44:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009d48:	2600      	movs	r6, #0
 8009d4a:	b914      	cbnz	r4, 8009d52 <_fwalk_reent+0x16>
 8009d4c:	4630      	mov	r0, r6
 8009d4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d52:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8009d56:	3f01      	subs	r7, #1
 8009d58:	d501      	bpl.n	8009d5e <_fwalk_reent+0x22>
 8009d5a:	6824      	ldr	r4, [r4, #0]
 8009d5c:	e7f5      	b.n	8009d4a <_fwalk_reent+0xe>
 8009d5e:	89ab      	ldrh	r3, [r5, #12]
 8009d60:	2b01      	cmp	r3, #1
 8009d62:	d907      	bls.n	8009d74 <_fwalk_reent+0x38>
 8009d64:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009d68:	3301      	adds	r3, #1
 8009d6a:	d003      	beq.n	8009d74 <_fwalk_reent+0x38>
 8009d6c:	4629      	mov	r1, r5
 8009d6e:	4640      	mov	r0, r8
 8009d70:	47c8      	blx	r9
 8009d72:	4306      	orrs	r6, r0
 8009d74:	3568      	adds	r5, #104	; 0x68
 8009d76:	e7ee      	b.n	8009d56 <_fwalk_reent+0x1a>

08009d78 <__locale_ctype_ptr_l>:
 8009d78:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8009d7c:	4770      	bx	lr

08009d7e <__ascii_mbtowc>:
 8009d7e:	b082      	sub	sp, #8
 8009d80:	b901      	cbnz	r1, 8009d84 <__ascii_mbtowc+0x6>
 8009d82:	a901      	add	r1, sp, #4
 8009d84:	b142      	cbz	r2, 8009d98 <__ascii_mbtowc+0x1a>
 8009d86:	b14b      	cbz	r3, 8009d9c <__ascii_mbtowc+0x1e>
 8009d88:	7813      	ldrb	r3, [r2, #0]
 8009d8a:	600b      	str	r3, [r1, #0]
 8009d8c:	7812      	ldrb	r2, [r2, #0]
 8009d8e:	1c10      	adds	r0, r2, #0
 8009d90:	bf18      	it	ne
 8009d92:	2001      	movne	r0, #1
 8009d94:	b002      	add	sp, #8
 8009d96:	4770      	bx	lr
 8009d98:	4610      	mov	r0, r2
 8009d9a:	e7fb      	b.n	8009d94 <__ascii_mbtowc+0x16>
 8009d9c:	f06f 0001 	mvn.w	r0, #1
 8009da0:	e7f8      	b.n	8009d94 <__ascii_mbtowc+0x16>
	...

08009da4 <_free_r>:
 8009da4:	b538      	push	{r3, r4, r5, lr}
 8009da6:	4605      	mov	r5, r0
 8009da8:	2900      	cmp	r1, #0
 8009daa:	d045      	beq.n	8009e38 <_free_r+0x94>
 8009dac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009db0:	1f0c      	subs	r4, r1, #4
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	bfb8      	it	lt
 8009db6:	18e4      	addlt	r4, r4, r3
 8009db8:	f000 fdce 	bl	800a958 <__malloc_lock>
 8009dbc:	4a1f      	ldr	r2, [pc, #124]	; (8009e3c <_free_r+0x98>)
 8009dbe:	6813      	ldr	r3, [r2, #0]
 8009dc0:	4610      	mov	r0, r2
 8009dc2:	b933      	cbnz	r3, 8009dd2 <_free_r+0x2e>
 8009dc4:	6063      	str	r3, [r4, #4]
 8009dc6:	6014      	str	r4, [r2, #0]
 8009dc8:	4628      	mov	r0, r5
 8009dca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009dce:	f000 bdc4 	b.w	800a95a <__malloc_unlock>
 8009dd2:	42a3      	cmp	r3, r4
 8009dd4:	d90c      	bls.n	8009df0 <_free_r+0x4c>
 8009dd6:	6821      	ldr	r1, [r4, #0]
 8009dd8:	1862      	adds	r2, r4, r1
 8009dda:	4293      	cmp	r3, r2
 8009ddc:	bf04      	itt	eq
 8009dde:	681a      	ldreq	r2, [r3, #0]
 8009de0:	685b      	ldreq	r3, [r3, #4]
 8009de2:	6063      	str	r3, [r4, #4]
 8009de4:	bf04      	itt	eq
 8009de6:	1852      	addeq	r2, r2, r1
 8009de8:	6022      	streq	r2, [r4, #0]
 8009dea:	6004      	str	r4, [r0, #0]
 8009dec:	e7ec      	b.n	8009dc8 <_free_r+0x24>
 8009dee:	4613      	mov	r3, r2
 8009df0:	685a      	ldr	r2, [r3, #4]
 8009df2:	b10a      	cbz	r2, 8009df8 <_free_r+0x54>
 8009df4:	42a2      	cmp	r2, r4
 8009df6:	d9fa      	bls.n	8009dee <_free_r+0x4a>
 8009df8:	6819      	ldr	r1, [r3, #0]
 8009dfa:	1858      	adds	r0, r3, r1
 8009dfc:	42a0      	cmp	r0, r4
 8009dfe:	d10b      	bne.n	8009e18 <_free_r+0x74>
 8009e00:	6820      	ldr	r0, [r4, #0]
 8009e02:	4401      	add	r1, r0
 8009e04:	1858      	adds	r0, r3, r1
 8009e06:	4282      	cmp	r2, r0
 8009e08:	6019      	str	r1, [r3, #0]
 8009e0a:	d1dd      	bne.n	8009dc8 <_free_r+0x24>
 8009e0c:	6810      	ldr	r0, [r2, #0]
 8009e0e:	6852      	ldr	r2, [r2, #4]
 8009e10:	605a      	str	r2, [r3, #4]
 8009e12:	4401      	add	r1, r0
 8009e14:	6019      	str	r1, [r3, #0]
 8009e16:	e7d7      	b.n	8009dc8 <_free_r+0x24>
 8009e18:	d902      	bls.n	8009e20 <_free_r+0x7c>
 8009e1a:	230c      	movs	r3, #12
 8009e1c:	602b      	str	r3, [r5, #0]
 8009e1e:	e7d3      	b.n	8009dc8 <_free_r+0x24>
 8009e20:	6820      	ldr	r0, [r4, #0]
 8009e22:	1821      	adds	r1, r4, r0
 8009e24:	428a      	cmp	r2, r1
 8009e26:	bf04      	itt	eq
 8009e28:	6811      	ldreq	r1, [r2, #0]
 8009e2a:	6852      	ldreq	r2, [r2, #4]
 8009e2c:	6062      	str	r2, [r4, #4]
 8009e2e:	bf04      	itt	eq
 8009e30:	1809      	addeq	r1, r1, r0
 8009e32:	6021      	streq	r1, [r4, #0]
 8009e34:	605c      	str	r4, [r3, #4]
 8009e36:	e7c7      	b.n	8009dc8 <_free_r+0x24>
 8009e38:	bd38      	pop	{r3, r4, r5, pc}
 8009e3a:	bf00      	nop
 8009e3c:	20004b1c 	.word	0x20004b1c

08009e40 <_malloc_r>:
 8009e40:	b570      	push	{r4, r5, r6, lr}
 8009e42:	1ccd      	adds	r5, r1, #3
 8009e44:	f025 0503 	bic.w	r5, r5, #3
 8009e48:	3508      	adds	r5, #8
 8009e4a:	2d0c      	cmp	r5, #12
 8009e4c:	bf38      	it	cc
 8009e4e:	250c      	movcc	r5, #12
 8009e50:	2d00      	cmp	r5, #0
 8009e52:	4606      	mov	r6, r0
 8009e54:	db01      	blt.n	8009e5a <_malloc_r+0x1a>
 8009e56:	42a9      	cmp	r1, r5
 8009e58:	d903      	bls.n	8009e62 <_malloc_r+0x22>
 8009e5a:	230c      	movs	r3, #12
 8009e5c:	6033      	str	r3, [r6, #0]
 8009e5e:	2000      	movs	r0, #0
 8009e60:	bd70      	pop	{r4, r5, r6, pc}
 8009e62:	f000 fd79 	bl	800a958 <__malloc_lock>
 8009e66:	4a21      	ldr	r2, [pc, #132]	; (8009eec <_malloc_r+0xac>)
 8009e68:	6814      	ldr	r4, [r2, #0]
 8009e6a:	4621      	mov	r1, r4
 8009e6c:	b991      	cbnz	r1, 8009e94 <_malloc_r+0x54>
 8009e6e:	4c20      	ldr	r4, [pc, #128]	; (8009ef0 <_malloc_r+0xb0>)
 8009e70:	6823      	ldr	r3, [r4, #0]
 8009e72:	b91b      	cbnz	r3, 8009e7c <_malloc_r+0x3c>
 8009e74:	4630      	mov	r0, r6
 8009e76:	f000 fb05 	bl	800a484 <_sbrk_r>
 8009e7a:	6020      	str	r0, [r4, #0]
 8009e7c:	4629      	mov	r1, r5
 8009e7e:	4630      	mov	r0, r6
 8009e80:	f000 fb00 	bl	800a484 <_sbrk_r>
 8009e84:	1c43      	adds	r3, r0, #1
 8009e86:	d124      	bne.n	8009ed2 <_malloc_r+0x92>
 8009e88:	230c      	movs	r3, #12
 8009e8a:	6033      	str	r3, [r6, #0]
 8009e8c:	4630      	mov	r0, r6
 8009e8e:	f000 fd64 	bl	800a95a <__malloc_unlock>
 8009e92:	e7e4      	b.n	8009e5e <_malloc_r+0x1e>
 8009e94:	680b      	ldr	r3, [r1, #0]
 8009e96:	1b5b      	subs	r3, r3, r5
 8009e98:	d418      	bmi.n	8009ecc <_malloc_r+0x8c>
 8009e9a:	2b0b      	cmp	r3, #11
 8009e9c:	d90f      	bls.n	8009ebe <_malloc_r+0x7e>
 8009e9e:	600b      	str	r3, [r1, #0]
 8009ea0:	50cd      	str	r5, [r1, r3]
 8009ea2:	18cc      	adds	r4, r1, r3
 8009ea4:	4630      	mov	r0, r6
 8009ea6:	f000 fd58 	bl	800a95a <__malloc_unlock>
 8009eaa:	f104 000b 	add.w	r0, r4, #11
 8009eae:	1d23      	adds	r3, r4, #4
 8009eb0:	f020 0007 	bic.w	r0, r0, #7
 8009eb4:	1ac3      	subs	r3, r0, r3
 8009eb6:	d0d3      	beq.n	8009e60 <_malloc_r+0x20>
 8009eb8:	425a      	negs	r2, r3
 8009eba:	50e2      	str	r2, [r4, r3]
 8009ebc:	e7d0      	b.n	8009e60 <_malloc_r+0x20>
 8009ebe:	428c      	cmp	r4, r1
 8009ec0:	684b      	ldr	r3, [r1, #4]
 8009ec2:	bf16      	itet	ne
 8009ec4:	6063      	strne	r3, [r4, #4]
 8009ec6:	6013      	streq	r3, [r2, #0]
 8009ec8:	460c      	movne	r4, r1
 8009eca:	e7eb      	b.n	8009ea4 <_malloc_r+0x64>
 8009ecc:	460c      	mov	r4, r1
 8009ece:	6849      	ldr	r1, [r1, #4]
 8009ed0:	e7cc      	b.n	8009e6c <_malloc_r+0x2c>
 8009ed2:	1cc4      	adds	r4, r0, #3
 8009ed4:	f024 0403 	bic.w	r4, r4, #3
 8009ed8:	42a0      	cmp	r0, r4
 8009eda:	d005      	beq.n	8009ee8 <_malloc_r+0xa8>
 8009edc:	1a21      	subs	r1, r4, r0
 8009ede:	4630      	mov	r0, r6
 8009ee0:	f000 fad0 	bl	800a484 <_sbrk_r>
 8009ee4:	3001      	adds	r0, #1
 8009ee6:	d0cf      	beq.n	8009e88 <_malloc_r+0x48>
 8009ee8:	6025      	str	r5, [r4, #0]
 8009eea:	e7db      	b.n	8009ea4 <_malloc_r+0x64>
 8009eec:	20004b1c 	.word	0x20004b1c
 8009ef0:	20004b20 	.word	0x20004b20

08009ef4 <__sfputc_r>:
 8009ef4:	6893      	ldr	r3, [r2, #8]
 8009ef6:	3b01      	subs	r3, #1
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	b410      	push	{r4}
 8009efc:	6093      	str	r3, [r2, #8]
 8009efe:	da08      	bge.n	8009f12 <__sfputc_r+0x1e>
 8009f00:	6994      	ldr	r4, [r2, #24]
 8009f02:	42a3      	cmp	r3, r4
 8009f04:	db01      	blt.n	8009f0a <__sfputc_r+0x16>
 8009f06:	290a      	cmp	r1, #10
 8009f08:	d103      	bne.n	8009f12 <__sfputc_r+0x1e>
 8009f0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f0e:	f000 bb0d 	b.w	800a52c <__swbuf_r>
 8009f12:	6813      	ldr	r3, [r2, #0]
 8009f14:	1c58      	adds	r0, r3, #1
 8009f16:	6010      	str	r0, [r2, #0]
 8009f18:	7019      	strb	r1, [r3, #0]
 8009f1a:	4608      	mov	r0, r1
 8009f1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f20:	4770      	bx	lr

08009f22 <__sfputs_r>:
 8009f22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f24:	4606      	mov	r6, r0
 8009f26:	460f      	mov	r7, r1
 8009f28:	4614      	mov	r4, r2
 8009f2a:	18d5      	adds	r5, r2, r3
 8009f2c:	42ac      	cmp	r4, r5
 8009f2e:	d101      	bne.n	8009f34 <__sfputs_r+0x12>
 8009f30:	2000      	movs	r0, #0
 8009f32:	e007      	b.n	8009f44 <__sfputs_r+0x22>
 8009f34:	463a      	mov	r2, r7
 8009f36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f3a:	4630      	mov	r0, r6
 8009f3c:	f7ff ffda 	bl	8009ef4 <__sfputc_r>
 8009f40:	1c43      	adds	r3, r0, #1
 8009f42:	d1f3      	bne.n	8009f2c <__sfputs_r+0xa>
 8009f44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009f48 <_vfiprintf_r>:
 8009f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f4c:	460c      	mov	r4, r1
 8009f4e:	b09d      	sub	sp, #116	; 0x74
 8009f50:	4617      	mov	r7, r2
 8009f52:	461d      	mov	r5, r3
 8009f54:	4606      	mov	r6, r0
 8009f56:	b118      	cbz	r0, 8009f60 <_vfiprintf_r+0x18>
 8009f58:	6983      	ldr	r3, [r0, #24]
 8009f5a:	b90b      	cbnz	r3, 8009f60 <_vfiprintf_r+0x18>
 8009f5c:	f7ff fe82 	bl	8009c64 <__sinit>
 8009f60:	4b7c      	ldr	r3, [pc, #496]	; (800a154 <_vfiprintf_r+0x20c>)
 8009f62:	429c      	cmp	r4, r3
 8009f64:	d158      	bne.n	800a018 <_vfiprintf_r+0xd0>
 8009f66:	6874      	ldr	r4, [r6, #4]
 8009f68:	89a3      	ldrh	r3, [r4, #12]
 8009f6a:	0718      	lsls	r0, r3, #28
 8009f6c:	d55e      	bpl.n	800a02c <_vfiprintf_r+0xe4>
 8009f6e:	6923      	ldr	r3, [r4, #16]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d05b      	beq.n	800a02c <_vfiprintf_r+0xe4>
 8009f74:	2300      	movs	r3, #0
 8009f76:	9309      	str	r3, [sp, #36]	; 0x24
 8009f78:	2320      	movs	r3, #32
 8009f7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009f7e:	2330      	movs	r3, #48	; 0x30
 8009f80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009f84:	9503      	str	r5, [sp, #12]
 8009f86:	f04f 0b01 	mov.w	fp, #1
 8009f8a:	46b8      	mov	r8, r7
 8009f8c:	4645      	mov	r5, r8
 8009f8e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009f92:	b10b      	cbz	r3, 8009f98 <_vfiprintf_r+0x50>
 8009f94:	2b25      	cmp	r3, #37	; 0x25
 8009f96:	d154      	bne.n	800a042 <_vfiprintf_r+0xfa>
 8009f98:	ebb8 0a07 	subs.w	sl, r8, r7
 8009f9c:	d00b      	beq.n	8009fb6 <_vfiprintf_r+0x6e>
 8009f9e:	4653      	mov	r3, sl
 8009fa0:	463a      	mov	r2, r7
 8009fa2:	4621      	mov	r1, r4
 8009fa4:	4630      	mov	r0, r6
 8009fa6:	f7ff ffbc 	bl	8009f22 <__sfputs_r>
 8009faa:	3001      	adds	r0, #1
 8009fac:	f000 80c2 	beq.w	800a134 <_vfiprintf_r+0x1ec>
 8009fb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fb2:	4453      	add	r3, sl
 8009fb4:	9309      	str	r3, [sp, #36]	; 0x24
 8009fb6:	f898 3000 	ldrb.w	r3, [r8]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	f000 80ba 	beq.w	800a134 <_vfiprintf_r+0x1ec>
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	f04f 32ff 	mov.w	r2, #4294967295
 8009fc6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009fca:	9304      	str	r3, [sp, #16]
 8009fcc:	9307      	str	r3, [sp, #28]
 8009fce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009fd2:	931a      	str	r3, [sp, #104]	; 0x68
 8009fd4:	46a8      	mov	r8, r5
 8009fd6:	2205      	movs	r2, #5
 8009fd8:	f818 1b01 	ldrb.w	r1, [r8], #1
 8009fdc:	485e      	ldr	r0, [pc, #376]	; (800a158 <_vfiprintf_r+0x210>)
 8009fde:	f7f6 f8f7 	bl	80001d0 <memchr>
 8009fe2:	9b04      	ldr	r3, [sp, #16]
 8009fe4:	bb78      	cbnz	r0, 800a046 <_vfiprintf_r+0xfe>
 8009fe6:	06d9      	lsls	r1, r3, #27
 8009fe8:	bf44      	itt	mi
 8009fea:	2220      	movmi	r2, #32
 8009fec:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009ff0:	071a      	lsls	r2, r3, #28
 8009ff2:	bf44      	itt	mi
 8009ff4:	222b      	movmi	r2, #43	; 0x2b
 8009ff6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009ffa:	782a      	ldrb	r2, [r5, #0]
 8009ffc:	2a2a      	cmp	r2, #42	; 0x2a
 8009ffe:	d02a      	beq.n	800a056 <_vfiprintf_r+0x10e>
 800a000:	9a07      	ldr	r2, [sp, #28]
 800a002:	46a8      	mov	r8, r5
 800a004:	2000      	movs	r0, #0
 800a006:	250a      	movs	r5, #10
 800a008:	4641      	mov	r1, r8
 800a00a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a00e:	3b30      	subs	r3, #48	; 0x30
 800a010:	2b09      	cmp	r3, #9
 800a012:	d969      	bls.n	800a0e8 <_vfiprintf_r+0x1a0>
 800a014:	b360      	cbz	r0, 800a070 <_vfiprintf_r+0x128>
 800a016:	e024      	b.n	800a062 <_vfiprintf_r+0x11a>
 800a018:	4b50      	ldr	r3, [pc, #320]	; (800a15c <_vfiprintf_r+0x214>)
 800a01a:	429c      	cmp	r4, r3
 800a01c:	d101      	bne.n	800a022 <_vfiprintf_r+0xda>
 800a01e:	68b4      	ldr	r4, [r6, #8]
 800a020:	e7a2      	b.n	8009f68 <_vfiprintf_r+0x20>
 800a022:	4b4f      	ldr	r3, [pc, #316]	; (800a160 <_vfiprintf_r+0x218>)
 800a024:	429c      	cmp	r4, r3
 800a026:	bf08      	it	eq
 800a028:	68f4      	ldreq	r4, [r6, #12]
 800a02a:	e79d      	b.n	8009f68 <_vfiprintf_r+0x20>
 800a02c:	4621      	mov	r1, r4
 800a02e:	4630      	mov	r0, r6
 800a030:	f000 faee 	bl	800a610 <__swsetup_r>
 800a034:	2800      	cmp	r0, #0
 800a036:	d09d      	beq.n	8009f74 <_vfiprintf_r+0x2c>
 800a038:	f04f 30ff 	mov.w	r0, #4294967295
 800a03c:	b01d      	add	sp, #116	; 0x74
 800a03e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a042:	46a8      	mov	r8, r5
 800a044:	e7a2      	b.n	8009f8c <_vfiprintf_r+0x44>
 800a046:	4a44      	ldr	r2, [pc, #272]	; (800a158 <_vfiprintf_r+0x210>)
 800a048:	1a80      	subs	r0, r0, r2
 800a04a:	fa0b f000 	lsl.w	r0, fp, r0
 800a04e:	4318      	orrs	r0, r3
 800a050:	9004      	str	r0, [sp, #16]
 800a052:	4645      	mov	r5, r8
 800a054:	e7be      	b.n	8009fd4 <_vfiprintf_r+0x8c>
 800a056:	9a03      	ldr	r2, [sp, #12]
 800a058:	1d11      	adds	r1, r2, #4
 800a05a:	6812      	ldr	r2, [r2, #0]
 800a05c:	9103      	str	r1, [sp, #12]
 800a05e:	2a00      	cmp	r2, #0
 800a060:	db01      	blt.n	800a066 <_vfiprintf_r+0x11e>
 800a062:	9207      	str	r2, [sp, #28]
 800a064:	e004      	b.n	800a070 <_vfiprintf_r+0x128>
 800a066:	4252      	negs	r2, r2
 800a068:	f043 0302 	orr.w	r3, r3, #2
 800a06c:	9207      	str	r2, [sp, #28]
 800a06e:	9304      	str	r3, [sp, #16]
 800a070:	f898 3000 	ldrb.w	r3, [r8]
 800a074:	2b2e      	cmp	r3, #46	; 0x2e
 800a076:	d10e      	bne.n	800a096 <_vfiprintf_r+0x14e>
 800a078:	f898 3001 	ldrb.w	r3, [r8, #1]
 800a07c:	2b2a      	cmp	r3, #42	; 0x2a
 800a07e:	d138      	bne.n	800a0f2 <_vfiprintf_r+0x1aa>
 800a080:	9b03      	ldr	r3, [sp, #12]
 800a082:	1d1a      	adds	r2, r3, #4
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	9203      	str	r2, [sp, #12]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	bfb8      	it	lt
 800a08c:	f04f 33ff 	movlt.w	r3, #4294967295
 800a090:	f108 0802 	add.w	r8, r8, #2
 800a094:	9305      	str	r3, [sp, #20]
 800a096:	4d33      	ldr	r5, [pc, #204]	; (800a164 <_vfiprintf_r+0x21c>)
 800a098:	f898 1000 	ldrb.w	r1, [r8]
 800a09c:	2203      	movs	r2, #3
 800a09e:	4628      	mov	r0, r5
 800a0a0:	f7f6 f896 	bl	80001d0 <memchr>
 800a0a4:	b140      	cbz	r0, 800a0b8 <_vfiprintf_r+0x170>
 800a0a6:	2340      	movs	r3, #64	; 0x40
 800a0a8:	1b40      	subs	r0, r0, r5
 800a0aa:	fa03 f000 	lsl.w	r0, r3, r0
 800a0ae:	9b04      	ldr	r3, [sp, #16]
 800a0b0:	4303      	orrs	r3, r0
 800a0b2:	f108 0801 	add.w	r8, r8, #1
 800a0b6:	9304      	str	r3, [sp, #16]
 800a0b8:	f898 1000 	ldrb.w	r1, [r8]
 800a0bc:	482a      	ldr	r0, [pc, #168]	; (800a168 <_vfiprintf_r+0x220>)
 800a0be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a0c2:	2206      	movs	r2, #6
 800a0c4:	f108 0701 	add.w	r7, r8, #1
 800a0c8:	f7f6 f882 	bl	80001d0 <memchr>
 800a0cc:	2800      	cmp	r0, #0
 800a0ce:	d037      	beq.n	800a140 <_vfiprintf_r+0x1f8>
 800a0d0:	4b26      	ldr	r3, [pc, #152]	; (800a16c <_vfiprintf_r+0x224>)
 800a0d2:	bb1b      	cbnz	r3, 800a11c <_vfiprintf_r+0x1d4>
 800a0d4:	9b03      	ldr	r3, [sp, #12]
 800a0d6:	3307      	adds	r3, #7
 800a0d8:	f023 0307 	bic.w	r3, r3, #7
 800a0dc:	3308      	adds	r3, #8
 800a0de:	9303      	str	r3, [sp, #12]
 800a0e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0e2:	444b      	add	r3, r9
 800a0e4:	9309      	str	r3, [sp, #36]	; 0x24
 800a0e6:	e750      	b.n	8009f8a <_vfiprintf_r+0x42>
 800a0e8:	fb05 3202 	mla	r2, r5, r2, r3
 800a0ec:	2001      	movs	r0, #1
 800a0ee:	4688      	mov	r8, r1
 800a0f0:	e78a      	b.n	800a008 <_vfiprintf_r+0xc0>
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	f108 0801 	add.w	r8, r8, #1
 800a0f8:	9305      	str	r3, [sp, #20]
 800a0fa:	4619      	mov	r1, r3
 800a0fc:	250a      	movs	r5, #10
 800a0fe:	4640      	mov	r0, r8
 800a100:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a104:	3a30      	subs	r2, #48	; 0x30
 800a106:	2a09      	cmp	r2, #9
 800a108:	d903      	bls.n	800a112 <_vfiprintf_r+0x1ca>
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d0c3      	beq.n	800a096 <_vfiprintf_r+0x14e>
 800a10e:	9105      	str	r1, [sp, #20]
 800a110:	e7c1      	b.n	800a096 <_vfiprintf_r+0x14e>
 800a112:	fb05 2101 	mla	r1, r5, r1, r2
 800a116:	2301      	movs	r3, #1
 800a118:	4680      	mov	r8, r0
 800a11a:	e7f0      	b.n	800a0fe <_vfiprintf_r+0x1b6>
 800a11c:	ab03      	add	r3, sp, #12
 800a11e:	9300      	str	r3, [sp, #0]
 800a120:	4622      	mov	r2, r4
 800a122:	4b13      	ldr	r3, [pc, #76]	; (800a170 <_vfiprintf_r+0x228>)
 800a124:	a904      	add	r1, sp, #16
 800a126:	4630      	mov	r0, r6
 800a128:	f3af 8000 	nop.w
 800a12c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a130:	4681      	mov	r9, r0
 800a132:	d1d5      	bne.n	800a0e0 <_vfiprintf_r+0x198>
 800a134:	89a3      	ldrh	r3, [r4, #12]
 800a136:	065b      	lsls	r3, r3, #25
 800a138:	f53f af7e 	bmi.w	800a038 <_vfiprintf_r+0xf0>
 800a13c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a13e:	e77d      	b.n	800a03c <_vfiprintf_r+0xf4>
 800a140:	ab03      	add	r3, sp, #12
 800a142:	9300      	str	r3, [sp, #0]
 800a144:	4622      	mov	r2, r4
 800a146:	4b0a      	ldr	r3, [pc, #40]	; (800a170 <_vfiprintf_r+0x228>)
 800a148:	a904      	add	r1, sp, #16
 800a14a:	4630      	mov	r0, r6
 800a14c:	f000 f888 	bl	800a260 <_printf_i>
 800a150:	e7ec      	b.n	800a12c <_vfiprintf_r+0x1e4>
 800a152:	bf00      	nop
 800a154:	0800ac28 	.word	0x0800ac28
 800a158:	0800ac72 	.word	0x0800ac72
 800a15c:	0800ac48 	.word	0x0800ac48
 800a160:	0800ac08 	.word	0x0800ac08
 800a164:	0800ac78 	.word	0x0800ac78
 800a168:	0800ac7c 	.word	0x0800ac7c
 800a16c:	00000000 	.word	0x00000000
 800a170:	08009f23 	.word	0x08009f23

0800a174 <_printf_common>:
 800a174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a178:	4691      	mov	r9, r2
 800a17a:	461f      	mov	r7, r3
 800a17c:	688a      	ldr	r2, [r1, #8]
 800a17e:	690b      	ldr	r3, [r1, #16]
 800a180:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a184:	4293      	cmp	r3, r2
 800a186:	bfb8      	it	lt
 800a188:	4613      	movlt	r3, r2
 800a18a:	f8c9 3000 	str.w	r3, [r9]
 800a18e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a192:	4606      	mov	r6, r0
 800a194:	460c      	mov	r4, r1
 800a196:	b112      	cbz	r2, 800a19e <_printf_common+0x2a>
 800a198:	3301      	adds	r3, #1
 800a19a:	f8c9 3000 	str.w	r3, [r9]
 800a19e:	6823      	ldr	r3, [r4, #0]
 800a1a0:	0699      	lsls	r1, r3, #26
 800a1a2:	bf42      	ittt	mi
 800a1a4:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a1a8:	3302      	addmi	r3, #2
 800a1aa:	f8c9 3000 	strmi.w	r3, [r9]
 800a1ae:	6825      	ldr	r5, [r4, #0]
 800a1b0:	f015 0506 	ands.w	r5, r5, #6
 800a1b4:	d107      	bne.n	800a1c6 <_printf_common+0x52>
 800a1b6:	f104 0a19 	add.w	sl, r4, #25
 800a1ba:	68e3      	ldr	r3, [r4, #12]
 800a1bc:	f8d9 2000 	ldr.w	r2, [r9]
 800a1c0:	1a9b      	subs	r3, r3, r2
 800a1c2:	42ab      	cmp	r3, r5
 800a1c4:	dc28      	bgt.n	800a218 <_printf_common+0xa4>
 800a1c6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a1ca:	6822      	ldr	r2, [r4, #0]
 800a1cc:	3300      	adds	r3, #0
 800a1ce:	bf18      	it	ne
 800a1d0:	2301      	movne	r3, #1
 800a1d2:	0692      	lsls	r2, r2, #26
 800a1d4:	d42d      	bmi.n	800a232 <_printf_common+0xbe>
 800a1d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a1da:	4639      	mov	r1, r7
 800a1dc:	4630      	mov	r0, r6
 800a1de:	47c0      	blx	r8
 800a1e0:	3001      	adds	r0, #1
 800a1e2:	d020      	beq.n	800a226 <_printf_common+0xb2>
 800a1e4:	6823      	ldr	r3, [r4, #0]
 800a1e6:	68e5      	ldr	r5, [r4, #12]
 800a1e8:	f8d9 2000 	ldr.w	r2, [r9]
 800a1ec:	f003 0306 	and.w	r3, r3, #6
 800a1f0:	2b04      	cmp	r3, #4
 800a1f2:	bf08      	it	eq
 800a1f4:	1aad      	subeq	r5, r5, r2
 800a1f6:	68a3      	ldr	r3, [r4, #8]
 800a1f8:	6922      	ldr	r2, [r4, #16]
 800a1fa:	bf0c      	ite	eq
 800a1fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a200:	2500      	movne	r5, #0
 800a202:	4293      	cmp	r3, r2
 800a204:	bfc4      	itt	gt
 800a206:	1a9b      	subgt	r3, r3, r2
 800a208:	18ed      	addgt	r5, r5, r3
 800a20a:	f04f 0900 	mov.w	r9, #0
 800a20e:	341a      	adds	r4, #26
 800a210:	454d      	cmp	r5, r9
 800a212:	d11a      	bne.n	800a24a <_printf_common+0xd6>
 800a214:	2000      	movs	r0, #0
 800a216:	e008      	b.n	800a22a <_printf_common+0xb6>
 800a218:	2301      	movs	r3, #1
 800a21a:	4652      	mov	r2, sl
 800a21c:	4639      	mov	r1, r7
 800a21e:	4630      	mov	r0, r6
 800a220:	47c0      	blx	r8
 800a222:	3001      	adds	r0, #1
 800a224:	d103      	bne.n	800a22e <_printf_common+0xba>
 800a226:	f04f 30ff 	mov.w	r0, #4294967295
 800a22a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a22e:	3501      	adds	r5, #1
 800a230:	e7c3      	b.n	800a1ba <_printf_common+0x46>
 800a232:	18e1      	adds	r1, r4, r3
 800a234:	1c5a      	adds	r2, r3, #1
 800a236:	2030      	movs	r0, #48	; 0x30
 800a238:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a23c:	4422      	add	r2, r4
 800a23e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a242:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a246:	3302      	adds	r3, #2
 800a248:	e7c5      	b.n	800a1d6 <_printf_common+0x62>
 800a24a:	2301      	movs	r3, #1
 800a24c:	4622      	mov	r2, r4
 800a24e:	4639      	mov	r1, r7
 800a250:	4630      	mov	r0, r6
 800a252:	47c0      	blx	r8
 800a254:	3001      	adds	r0, #1
 800a256:	d0e6      	beq.n	800a226 <_printf_common+0xb2>
 800a258:	f109 0901 	add.w	r9, r9, #1
 800a25c:	e7d8      	b.n	800a210 <_printf_common+0x9c>
	...

0800a260 <_printf_i>:
 800a260:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a264:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a268:	460c      	mov	r4, r1
 800a26a:	7e09      	ldrb	r1, [r1, #24]
 800a26c:	b085      	sub	sp, #20
 800a26e:	296e      	cmp	r1, #110	; 0x6e
 800a270:	4617      	mov	r7, r2
 800a272:	4606      	mov	r6, r0
 800a274:	4698      	mov	r8, r3
 800a276:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a278:	f000 80b3 	beq.w	800a3e2 <_printf_i+0x182>
 800a27c:	d822      	bhi.n	800a2c4 <_printf_i+0x64>
 800a27e:	2963      	cmp	r1, #99	; 0x63
 800a280:	d036      	beq.n	800a2f0 <_printf_i+0x90>
 800a282:	d80a      	bhi.n	800a29a <_printf_i+0x3a>
 800a284:	2900      	cmp	r1, #0
 800a286:	f000 80b9 	beq.w	800a3fc <_printf_i+0x19c>
 800a28a:	2958      	cmp	r1, #88	; 0x58
 800a28c:	f000 8083 	beq.w	800a396 <_printf_i+0x136>
 800a290:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a294:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a298:	e032      	b.n	800a300 <_printf_i+0xa0>
 800a29a:	2964      	cmp	r1, #100	; 0x64
 800a29c:	d001      	beq.n	800a2a2 <_printf_i+0x42>
 800a29e:	2969      	cmp	r1, #105	; 0x69
 800a2a0:	d1f6      	bne.n	800a290 <_printf_i+0x30>
 800a2a2:	6820      	ldr	r0, [r4, #0]
 800a2a4:	6813      	ldr	r3, [r2, #0]
 800a2a6:	0605      	lsls	r5, r0, #24
 800a2a8:	f103 0104 	add.w	r1, r3, #4
 800a2ac:	d52a      	bpl.n	800a304 <_printf_i+0xa4>
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	6011      	str	r1, [r2, #0]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	da03      	bge.n	800a2be <_printf_i+0x5e>
 800a2b6:	222d      	movs	r2, #45	; 0x2d
 800a2b8:	425b      	negs	r3, r3
 800a2ba:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a2be:	486f      	ldr	r0, [pc, #444]	; (800a47c <_printf_i+0x21c>)
 800a2c0:	220a      	movs	r2, #10
 800a2c2:	e039      	b.n	800a338 <_printf_i+0xd8>
 800a2c4:	2973      	cmp	r1, #115	; 0x73
 800a2c6:	f000 809d 	beq.w	800a404 <_printf_i+0x1a4>
 800a2ca:	d808      	bhi.n	800a2de <_printf_i+0x7e>
 800a2cc:	296f      	cmp	r1, #111	; 0x6f
 800a2ce:	d020      	beq.n	800a312 <_printf_i+0xb2>
 800a2d0:	2970      	cmp	r1, #112	; 0x70
 800a2d2:	d1dd      	bne.n	800a290 <_printf_i+0x30>
 800a2d4:	6823      	ldr	r3, [r4, #0]
 800a2d6:	f043 0320 	orr.w	r3, r3, #32
 800a2da:	6023      	str	r3, [r4, #0]
 800a2dc:	e003      	b.n	800a2e6 <_printf_i+0x86>
 800a2de:	2975      	cmp	r1, #117	; 0x75
 800a2e0:	d017      	beq.n	800a312 <_printf_i+0xb2>
 800a2e2:	2978      	cmp	r1, #120	; 0x78
 800a2e4:	d1d4      	bne.n	800a290 <_printf_i+0x30>
 800a2e6:	2378      	movs	r3, #120	; 0x78
 800a2e8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a2ec:	4864      	ldr	r0, [pc, #400]	; (800a480 <_printf_i+0x220>)
 800a2ee:	e055      	b.n	800a39c <_printf_i+0x13c>
 800a2f0:	6813      	ldr	r3, [r2, #0]
 800a2f2:	1d19      	adds	r1, r3, #4
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	6011      	str	r1, [r2, #0]
 800a2f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a2fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a300:	2301      	movs	r3, #1
 800a302:	e08c      	b.n	800a41e <_printf_i+0x1be>
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	6011      	str	r1, [r2, #0]
 800a308:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a30c:	bf18      	it	ne
 800a30e:	b21b      	sxthne	r3, r3
 800a310:	e7cf      	b.n	800a2b2 <_printf_i+0x52>
 800a312:	6813      	ldr	r3, [r2, #0]
 800a314:	6825      	ldr	r5, [r4, #0]
 800a316:	1d18      	adds	r0, r3, #4
 800a318:	6010      	str	r0, [r2, #0]
 800a31a:	0628      	lsls	r0, r5, #24
 800a31c:	d501      	bpl.n	800a322 <_printf_i+0xc2>
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	e002      	b.n	800a328 <_printf_i+0xc8>
 800a322:	0668      	lsls	r0, r5, #25
 800a324:	d5fb      	bpl.n	800a31e <_printf_i+0xbe>
 800a326:	881b      	ldrh	r3, [r3, #0]
 800a328:	4854      	ldr	r0, [pc, #336]	; (800a47c <_printf_i+0x21c>)
 800a32a:	296f      	cmp	r1, #111	; 0x6f
 800a32c:	bf14      	ite	ne
 800a32e:	220a      	movne	r2, #10
 800a330:	2208      	moveq	r2, #8
 800a332:	2100      	movs	r1, #0
 800a334:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a338:	6865      	ldr	r5, [r4, #4]
 800a33a:	60a5      	str	r5, [r4, #8]
 800a33c:	2d00      	cmp	r5, #0
 800a33e:	f2c0 8095 	blt.w	800a46c <_printf_i+0x20c>
 800a342:	6821      	ldr	r1, [r4, #0]
 800a344:	f021 0104 	bic.w	r1, r1, #4
 800a348:	6021      	str	r1, [r4, #0]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d13d      	bne.n	800a3ca <_printf_i+0x16a>
 800a34e:	2d00      	cmp	r5, #0
 800a350:	f040 808e 	bne.w	800a470 <_printf_i+0x210>
 800a354:	4665      	mov	r5, ip
 800a356:	2a08      	cmp	r2, #8
 800a358:	d10b      	bne.n	800a372 <_printf_i+0x112>
 800a35a:	6823      	ldr	r3, [r4, #0]
 800a35c:	07db      	lsls	r3, r3, #31
 800a35e:	d508      	bpl.n	800a372 <_printf_i+0x112>
 800a360:	6923      	ldr	r3, [r4, #16]
 800a362:	6862      	ldr	r2, [r4, #4]
 800a364:	429a      	cmp	r2, r3
 800a366:	bfde      	ittt	le
 800a368:	2330      	movle	r3, #48	; 0x30
 800a36a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a36e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a372:	ebac 0305 	sub.w	r3, ip, r5
 800a376:	6123      	str	r3, [r4, #16]
 800a378:	f8cd 8000 	str.w	r8, [sp]
 800a37c:	463b      	mov	r3, r7
 800a37e:	aa03      	add	r2, sp, #12
 800a380:	4621      	mov	r1, r4
 800a382:	4630      	mov	r0, r6
 800a384:	f7ff fef6 	bl	800a174 <_printf_common>
 800a388:	3001      	adds	r0, #1
 800a38a:	d14d      	bne.n	800a428 <_printf_i+0x1c8>
 800a38c:	f04f 30ff 	mov.w	r0, #4294967295
 800a390:	b005      	add	sp, #20
 800a392:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a396:	4839      	ldr	r0, [pc, #228]	; (800a47c <_printf_i+0x21c>)
 800a398:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a39c:	6813      	ldr	r3, [r2, #0]
 800a39e:	6821      	ldr	r1, [r4, #0]
 800a3a0:	1d1d      	adds	r5, r3, #4
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	6015      	str	r5, [r2, #0]
 800a3a6:	060a      	lsls	r2, r1, #24
 800a3a8:	d50b      	bpl.n	800a3c2 <_printf_i+0x162>
 800a3aa:	07ca      	lsls	r2, r1, #31
 800a3ac:	bf44      	itt	mi
 800a3ae:	f041 0120 	orrmi.w	r1, r1, #32
 800a3b2:	6021      	strmi	r1, [r4, #0]
 800a3b4:	b91b      	cbnz	r3, 800a3be <_printf_i+0x15e>
 800a3b6:	6822      	ldr	r2, [r4, #0]
 800a3b8:	f022 0220 	bic.w	r2, r2, #32
 800a3bc:	6022      	str	r2, [r4, #0]
 800a3be:	2210      	movs	r2, #16
 800a3c0:	e7b7      	b.n	800a332 <_printf_i+0xd2>
 800a3c2:	064d      	lsls	r5, r1, #25
 800a3c4:	bf48      	it	mi
 800a3c6:	b29b      	uxthmi	r3, r3
 800a3c8:	e7ef      	b.n	800a3aa <_printf_i+0x14a>
 800a3ca:	4665      	mov	r5, ip
 800a3cc:	fbb3 f1f2 	udiv	r1, r3, r2
 800a3d0:	fb02 3311 	mls	r3, r2, r1, r3
 800a3d4:	5cc3      	ldrb	r3, [r0, r3]
 800a3d6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a3da:	460b      	mov	r3, r1
 800a3dc:	2900      	cmp	r1, #0
 800a3de:	d1f5      	bne.n	800a3cc <_printf_i+0x16c>
 800a3e0:	e7b9      	b.n	800a356 <_printf_i+0xf6>
 800a3e2:	6813      	ldr	r3, [r2, #0]
 800a3e4:	6825      	ldr	r5, [r4, #0]
 800a3e6:	6961      	ldr	r1, [r4, #20]
 800a3e8:	1d18      	adds	r0, r3, #4
 800a3ea:	6010      	str	r0, [r2, #0]
 800a3ec:	0628      	lsls	r0, r5, #24
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	d501      	bpl.n	800a3f6 <_printf_i+0x196>
 800a3f2:	6019      	str	r1, [r3, #0]
 800a3f4:	e002      	b.n	800a3fc <_printf_i+0x19c>
 800a3f6:	066a      	lsls	r2, r5, #25
 800a3f8:	d5fb      	bpl.n	800a3f2 <_printf_i+0x192>
 800a3fa:	8019      	strh	r1, [r3, #0]
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	6123      	str	r3, [r4, #16]
 800a400:	4665      	mov	r5, ip
 800a402:	e7b9      	b.n	800a378 <_printf_i+0x118>
 800a404:	6813      	ldr	r3, [r2, #0]
 800a406:	1d19      	adds	r1, r3, #4
 800a408:	6011      	str	r1, [r2, #0]
 800a40a:	681d      	ldr	r5, [r3, #0]
 800a40c:	6862      	ldr	r2, [r4, #4]
 800a40e:	2100      	movs	r1, #0
 800a410:	4628      	mov	r0, r5
 800a412:	f7f5 fedd 	bl	80001d0 <memchr>
 800a416:	b108      	cbz	r0, 800a41c <_printf_i+0x1bc>
 800a418:	1b40      	subs	r0, r0, r5
 800a41a:	6060      	str	r0, [r4, #4]
 800a41c:	6863      	ldr	r3, [r4, #4]
 800a41e:	6123      	str	r3, [r4, #16]
 800a420:	2300      	movs	r3, #0
 800a422:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a426:	e7a7      	b.n	800a378 <_printf_i+0x118>
 800a428:	6923      	ldr	r3, [r4, #16]
 800a42a:	462a      	mov	r2, r5
 800a42c:	4639      	mov	r1, r7
 800a42e:	4630      	mov	r0, r6
 800a430:	47c0      	blx	r8
 800a432:	3001      	adds	r0, #1
 800a434:	d0aa      	beq.n	800a38c <_printf_i+0x12c>
 800a436:	6823      	ldr	r3, [r4, #0]
 800a438:	079b      	lsls	r3, r3, #30
 800a43a:	d413      	bmi.n	800a464 <_printf_i+0x204>
 800a43c:	68e0      	ldr	r0, [r4, #12]
 800a43e:	9b03      	ldr	r3, [sp, #12]
 800a440:	4298      	cmp	r0, r3
 800a442:	bfb8      	it	lt
 800a444:	4618      	movlt	r0, r3
 800a446:	e7a3      	b.n	800a390 <_printf_i+0x130>
 800a448:	2301      	movs	r3, #1
 800a44a:	464a      	mov	r2, r9
 800a44c:	4639      	mov	r1, r7
 800a44e:	4630      	mov	r0, r6
 800a450:	47c0      	blx	r8
 800a452:	3001      	adds	r0, #1
 800a454:	d09a      	beq.n	800a38c <_printf_i+0x12c>
 800a456:	3501      	adds	r5, #1
 800a458:	68e3      	ldr	r3, [r4, #12]
 800a45a:	9a03      	ldr	r2, [sp, #12]
 800a45c:	1a9b      	subs	r3, r3, r2
 800a45e:	42ab      	cmp	r3, r5
 800a460:	dcf2      	bgt.n	800a448 <_printf_i+0x1e8>
 800a462:	e7eb      	b.n	800a43c <_printf_i+0x1dc>
 800a464:	2500      	movs	r5, #0
 800a466:	f104 0919 	add.w	r9, r4, #25
 800a46a:	e7f5      	b.n	800a458 <_printf_i+0x1f8>
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d1ac      	bne.n	800a3ca <_printf_i+0x16a>
 800a470:	7803      	ldrb	r3, [r0, #0]
 800a472:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a476:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a47a:	e76c      	b.n	800a356 <_printf_i+0xf6>
 800a47c:	0800ac83 	.word	0x0800ac83
 800a480:	0800ac94 	.word	0x0800ac94

0800a484 <_sbrk_r>:
 800a484:	b538      	push	{r3, r4, r5, lr}
 800a486:	4c06      	ldr	r4, [pc, #24]	; (800a4a0 <_sbrk_r+0x1c>)
 800a488:	2300      	movs	r3, #0
 800a48a:	4605      	mov	r5, r0
 800a48c:	4608      	mov	r0, r1
 800a48e:	6023      	str	r3, [r4, #0]
 800a490:	f7f7 fe6e 	bl	8002170 <_sbrk>
 800a494:	1c43      	adds	r3, r0, #1
 800a496:	d102      	bne.n	800a49e <_sbrk_r+0x1a>
 800a498:	6823      	ldr	r3, [r4, #0]
 800a49a:	b103      	cbz	r3, 800a49e <_sbrk_r+0x1a>
 800a49c:	602b      	str	r3, [r5, #0]
 800a49e:	bd38      	pop	{r3, r4, r5, pc}
 800a4a0:	20006404 	.word	0x20006404

0800a4a4 <__sread>:
 800a4a4:	b510      	push	{r4, lr}
 800a4a6:	460c      	mov	r4, r1
 800a4a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4ac:	f000 fa56 	bl	800a95c <_read_r>
 800a4b0:	2800      	cmp	r0, #0
 800a4b2:	bfab      	itete	ge
 800a4b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a4b6:	89a3      	ldrhlt	r3, [r4, #12]
 800a4b8:	181b      	addge	r3, r3, r0
 800a4ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a4be:	bfac      	ite	ge
 800a4c0:	6563      	strge	r3, [r4, #84]	; 0x54
 800a4c2:	81a3      	strhlt	r3, [r4, #12]
 800a4c4:	bd10      	pop	{r4, pc}

0800a4c6 <__swrite>:
 800a4c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4ca:	461f      	mov	r7, r3
 800a4cc:	898b      	ldrh	r3, [r1, #12]
 800a4ce:	05db      	lsls	r3, r3, #23
 800a4d0:	4605      	mov	r5, r0
 800a4d2:	460c      	mov	r4, r1
 800a4d4:	4616      	mov	r6, r2
 800a4d6:	d505      	bpl.n	800a4e4 <__swrite+0x1e>
 800a4d8:	2302      	movs	r3, #2
 800a4da:	2200      	movs	r2, #0
 800a4dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4e0:	f000 f9c4 	bl	800a86c <_lseek_r>
 800a4e4:	89a3      	ldrh	r3, [r4, #12]
 800a4e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a4ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a4ee:	81a3      	strh	r3, [r4, #12]
 800a4f0:	4632      	mov	r2, r6
 800a4f2:	463b      	mov	r3, r7
 800a4f4:	4628      	mov	r0, r5
 800a4f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a4fa:	f000 b877 	b.w	800a5ec <_write_r>

0800a4fe <__sseek>:
 800a4fe:	b510      	push	{r4, lr}
 800a500:	460c      	mov	r4, r1
 800a502:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a506:	f000 f9b1 	bl	800a86c <_lseek_r>
 800a50a:	1c43      	adds	r3, r0, #1
 800a50c:	89a3      	ldrh	r3, [r4, #12]
 800a50e:	bf15      	itete	ne
 800a510:	6560      	strne	r0, [r4, #84]	; 0x54
 800a512:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a516:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a51a:	81a3      	strheq	r3, [r4, #12]
 800a51c:	bf18      	it	ne
 800a51e:	81a3      	strhne	r3, [r4, #12]
 800a520:	bd10      	pop	{r4, pc}

0800a522 <__sclose>:
 800a522:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a526:	f000 b8e1 	b.w	800a6ec <_close_r>
	...

0800a52c <__swbuf_r>:
 800a52c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a52e:	460e      	mov	r6, r1
 800a530:	4614      	mov	r4, r2
 800a532:	4605      	mov	r5, r0
 800a534:	b118      	cbz	r0, 800a53e <__swbuf_r+0x12>
 800a536:	6983      	ldr	r3, [r0, #24]
 800a538:	b90b      	cbnz	r3, 800a53e <__swbuf_r+0x12>
 800a53a:	f7ff fb93 	bl	8009c64 <__sinit>
 800a53e:	4b21      	ldr	r3, [pc, #132]	; (800a5c4 <__swbuf_r+0x98>)
 800a540:	429c      	cmp	r4, r3
 800a542:	d12a      	bne.n	800a59a <__swbuf_r+0x6e>
 800a544:	686c      	ldr	r4, [r5, #4]
 800a546:	69a3      	ldr	r3, [r4, #24]
 800a548:	60a3      	str	r3, [r4, #8]
 800a54a:	89a3      	ldrh	r3, [r4, #12]
 800a54c:	071a      	lsls	r2, r3, #28
 800a54e:	d52e      	bpl.n	800a5ae <__swbuf_r+0x82>
 800a550:	6923      	ldr	r3, [r4, #16]
 800a552:	b363      	cbz	r3, 800a5ae <__swbuf_r+0x82>
 800a554:	6923      	ldr	r3, [r4, #16]
 800a556:	6820      	ldr	r0, [r4, #0]
 800a558:	1ac0      	subs	r0, r0, r3
 800a55a:	6963      	ldr	r3, [r4, #20]
 800a55c:	b2f6      	uxtb	r6, r6
 800a55e:	4283      	cmp	r3, r0
 800a560:	4637      	mov	r7, r6
 800a562:	dc04      	bgt.n	800a56e <__swbuf_r+0x42>
 800a564:	4621      	mov	r1, r4
 800a566:	4628      	mov	r0, r5
 800a568:	f000 f956 	bl	800a818 <_fflush_r>
 800a56c:	bb28      	cbnz	r0, 800a5ba <__swbuf_r+0x8e>
 800a56e:	68a3      	ldr	r3, [r4, #8]
 800a570:	3b01      	subs	r3, #1
 800a572:	60a3      	str	r3, [r4, #8]
 800a574:	6823      	ldr	r3, [r4, #0]
 800a576:	1c5a      	adds	r2, r3, #1
 800a578:	6022      	str	r2, [r4, #0]
 800a57a:	701e      	strb	r6, [r3, #0]
 800a57c:	6963      	ldr	r3, [r4, #20]
 800a57e:	3001      	adds	r0, #1
 800a580:	4283      	cmp	r3, r0
 800a582:	d004      	beq.n	800a58e <__swbuf_r+0x62>
 800a584:	89a3      	ldrh	r3, [r4, #12]
 800a586:	07db      	lsls	r3, r3, #31
 800a588:	d519      	bpl.n	800a5be <__swbuf_r+0x92>
 800a58a:	2e0a      	cmp	r6, #10
 800a58c:	d117      	bne.n	800a5be <__swbuf_r+0x92>
 800a58e:	4621      	mov	r1, r4
 800a590:	4628      	mov	r0, r5
 800a592:	f000 f941 	bl	800a818 <_fflush_r>
 800a596:	b190      	cbz	r0, 800a5be <__swbuf_r+0x92>
 800a598:	e00f      	b.n	800a5ba <__swbuf_r+0x8e>
 800a59a:	4b0b      	ldr	r3, [pc, #44]	; (800a5c8 <__swbuf_r+0x9c>)
 800a59c:	429c      	cmp	r4, r3
 800a59e:	d101      	bne.n	800a5a4 <__swbuf_r+0x78>
 800a5a0:	68ac      	ldr	r4, [r5, #8]
 800a5a2:	e7d0      	b.n	800a546 <__swbuf_r+0x1a>
 800a5a4:	4b09      	ldr	r3, [pc, #36]	; (800a5cc <__swbuf_r+0xa0>)
 800a5a6:	429c      	cmp	r4, r3
 800a5a8:	bf08      	it	eq
 800a5aa:	68ec      	ldreq	r4, [r5, #12]
 800a5ac:	e7cb      	b.n	800a546 <__swbuf_r+0x1a>
 800a5ae:	4621      	mov	r1, r4
 800a5b0:	4628      	mov	r0, r5
 800a5b2:	f000 f82d 	bl	800a610 <__swsetup_r>
 800a5b6:	2800      	cmp	r0, #0
 800a5b8:	d0cc      	beq.n	800a554 <__swbuf_r+0x28>
 800a5ba:	f04f 37ff 	mov.w	r7, #4294967295
 800a5be:	4638      	mov	r0, r7
 800a5c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5c2:	bf00      	nop
 800a5c4:	0800ac28 	.word	0x0800ac28
 800a5c8:	0800ac48 	.word	0x0800ac48
 800a5cc:	0800ac08 	.word	0x0800ac08

0800a5d0 <__ascii_wctomb>:
 800a5d0:	b149      	cbz	r1, 800a5e6 <__ascii_wctomb+0x16>
 800a5d2:	2aff      	cmp	r2, #255	; 0xff
 800a5d4:	bf85      	ittet	hi
 800a5d6:	238a      	movhi	r3, #138	; 0x8a
 800a5d8:	6003      	strhi	r3, [r0, #0]
 800a5da:	700a      	strbls	r2, [r1, #0]
 800a5dc:	f04f 30ff 	movhi.w	r0, #4294967295
 800a5e0:	bf98      	it	ls
 800a5e2:	2001      	movls	r0, #1
 800a5e4:	4770      	bx	lr
 800a5e6:	4608      	mov	r0, r1
 800a5e8:	4770      	bx	lr
	...

0800a5ec <_write_r>:
 800a5ec:	b538      	push	{r3, r4, r5, lr}
 800a5ee:	4c07      	ldr	r4, [pc, #28]	; (800a60c <_write_r+0x20>)
 800a5f0:	4605      	mov	r5, r0
 800a5f2:	4608      	mov	r0, r1
 800a5f4:	4611      	mov	r1, r2
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	6022      	str	r2, [r4, #0]
 800a5fa:	461a      	mov	r2, r3
 800a5fc:	f7f7 fd67 	bl	80020ce <_write>
 800a600:	1c43      	adds	r3, r0, #1
 800a602:	d102      	bne.n	800a60a <_write_r+0x1e>
 800a604:	6823      	ldr	r3, [r4, #0]
 800a606:	b103      	cbz	r3, 800a60a <_write_r+0x1e>
 800a608:	602b      	str	r3, [r5, #0]
 800a60a:	bd38      	pop	{r3, r4, r5, pc}
 800a60c:	20006404 	.word	0x20006404

0800a610 <__swsetup_r>:
 800a610:	4b32      	ldr	r3, [pc, #200]	; (800a6dc <__swsetup_r+0xcc>)
 800a612:	b570      	push	{r4, r5, r6, lr}
 800a614:	681d      	ldr	r5, [r3, #0]
 800a616:	4606      	mov	r6, r0
 800a618:	460c      	mov	r4, r1
 800a61a:	b125      	cbz	r5, 800a626 <__swsetup_r+0x16>
 800a61c:	69ab      	ldr	r3, [r5, #24]
 800a61e:	b913      	cbnz	r3, 800a626 <__swsetup_r+0x16>
 800a620:	4628      	mov	r0, r5
 800a622:	f7ff fb1f 	bl	8009c64 <__sinit>
 800a626:	4b2e      	ldr	r3, [pc, #184]	; (800a6e0 <__swsetup_r+0xd0>)
 800a628:	429c      	cmp	r4, r3
 800a62a:	d10f      	bne.n	800a64c <__swsetup_r+0x3c>
 800a62c:	686c      	ldr	r4, [r5, #4]
 800a62e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a632:	b29a      	uxth	r2, r3
 800a634:	0715      	lsls	r5, r2, #28
 800a636:	d42c      	bmi.n	800a692 <__swsetup_r+0x82>
 800a638:	06d0      	lsls	r0, r2, #27
 800a63a:	d411      	bmi.n	800a660 <__swsetup_r+0x50>
 800a63c:	2209      	movs	r2, #9
 800a63e:	6032      	str	r2, [r6, #0]
 800a640:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a644:	81a3      	strh	r3, [r4, #12]
 800a646:	f04f 30ff 	mov.w	r0, #4294967295
 800a64a:	e03e      	b.n	800a6ca <__swsetup_r+0xba>
 800a64c:	4b25      	ldr	r3, [pc, #148]	; (800a6e4 <__swsetup_r+0xd4>)
 800a64e:	429c      	cmp	r4, r3
 800a650:	d101      	bne.n	800a656 <__swsetup_r+0x46>
 800a652:	68ac      	ldr	r4, [r5, #8]
 800a654:	e7eb      	b.n	800a62e <__swsetup_r+0x1e>
 800a656:	4b24      	ldr	r3, [pc, #144]	; (800a6e8 <__swsetup_r+0xd8>)
 800a658:	429c      	cmp	r4, r3
 800a65a:	bf08      	it	eq
 800a65c:	68ec      	ldreq	r4, [r5, #12]
 800a65e:	e7e6      	b.n	800a62e <__swsetup_r+0x1e>
 800a660:	0751      	lsls	r1, r2, #29
 800a662:	d512      	bpl.n	800a68a <__swsetup_r+0x7a>
 800a664:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a666:	b141      	cbz	r1, 800a67a <__swsetup_r+0x6a>
 800a668:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a66c:	4299      	cmp	r1, r3
 800a66e:	d002      	beq.n	800a676 <__swsetup_r+0x66>
 800a670:	4630      	mov	r0, r6
 800a672:	f7ff fb97 	bl	8009da4 <_free_r>
 800a676:	2300      	movs	r3, #0
 800a678:	6363      	str	r3, [r4, #52]	; 0x34
 800a67a:	89a3      	ldrh	r3, [r4, #12]
 800a67c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a680:	81a3      	strh	r3, [r4, #12]
 800a682:	2300      	movs	r3, #0
 800a684:	6063      	str	r3, [r4, #4]
 800a686:	6923      	ldr	r3, [r4, #16]
 800a688:	6023      	str	r3, [r4, #0]
 800a68a:	89a3      	ldrh	r3, [r4, #12]
 800a68c:	f043 0308 	orr.w	r3, r3, #8
 800a690:	81a3      	strh	r3, [r4, #12]
 800a692:	6923      	ldr	r3, [r4, #16]
 800a694:	b94b      	cbnz	r3, 800a6aa <__swsetup_r+0x9a>
 800a696:	89a3      	ldrh	r3, [r4, #12]
 800a698:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a69c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a6a0:	d003      	beq.n	800a6aa <__swsetup_r+0x9a>
 800a6a2:	4621      	mov	r1, r4
 800a6a4:	4630      	mov	r0, r6
 800a6a6:	f000 f917 	bl	800a8d8 <__smakebuf_r>
 800a6aa:	89a2      	ldrh	r2, [r4, #12]
 800a6ac:	f012 0301 	ands.w	r3, r2, #1
 800a6b0:	d00c      	beq.n	800a6cc <__swsetup_r+0xbc>
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	60a3      	str	r3, [r4, #8]
 800a6b6:	6963      	ldr	r3, [r4, #20]
 800a6b8:	425b      	negs	r3, r3
 800a6ba:	61a3      	str	r3, [r4, #24]
 800a6bc:	6923      	ldr	r3, [r4, #16]
 800a6be:	b953      	cbnz	r3, 800a6d6 <__swsetup_r+0xc6>
 800a6c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6c4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800a6c8:	d1ba      	bne.n	800a640 <__swsetup_r+0x30>
 800a6ca:	bd70      	pop	{r4, r5, r6, pc}
 800a6cc:	0792      	lsls	r2, r2, #30
 800a6ce:	bf58      	it	pl
 800a6d0:	6963      	ldrpl	r3, [r4, #20]
 800a6d2:	60a3      	str	r3, [r4, #8]
 800a6d4:	e7f2      	b.n	800a6bc <__swsetup_r+0xac>
 800a6d6:	2000      	movs	r0, #0
 800a6d8:	e7f7      	b.n	800a6ca <__swsetup_r+0xba>
 800a6da:	bf00      	nop
 800a6dc:	20000014 	.word	0x20000014
 800a6e0:	0800ac28 	.word	0x0800ac28
 800a6e4:	0800ac48 	.word	0x0800ac48
 800a6e8:	0800ac08 	.word	0x0800ac08

0800a6ec <_close_r>:
 800a6ec:	b538      	push	{r3, r4, r5, lr}
 800a6ee:	4c06      	ldr	r4, [pc, #24]	; (800a708 <_close_r+0x1c>)
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	4605      	mov	r5, r0
 800a6f4:	4608      	mov	r0, r1
 800a6f6:	6023      	str	r3, [r4, #0]
 800a6f8:	f7f7 fd05 	bl	8002106 <_close>
 800a6fc:	1c43      	adds	r3, r0, #1
 800a6fe:	d102      	bne.n	800a706 <_close_r+0x1a>
 800a700:	6823      	ldr	r3, [r4, #0]
 800a702:	b103      	cbz	r3, 800a706 <_close_r+0x1a>
 800a704:	602b      	str	r3, [r5, #0]
 800a706:	bd38      	pop	{r3, r4, r5, pc}
 800a708:	20006404 	.word	0x20006404

0800a70c <__sflush_r>:
 800a70c:	898a      	ldrh	r2, [r1, #12]
 800a70e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a712:	4605      	mov	r5, r0
 800a714:	0710      	lsls	r0, r2, #28
 800a716:	460c      	mov	r4, r1
 800a718:	d458      	bmi.n	800a7cc <__sflush_r+0xc0>
 800a71a:	684b      	ldr	r3, [r1, #4]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	dc05      	bgt.n	800a72c <__sflush_r+0x20>
 800a720:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a722:	2b00      	cmp	r3, #0
 800a724:	dc02      	bgt.n	800a72c <__sflush_r+0x20>
 800a726:	2000      	movs	r0, #0
 800a728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a72c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a72e:	2e00      	cmp	r6, #0
 800a730:	d0f9      	beq.n	800a726 <__sflush_r+0x1a>
 800a732:	2300      	movs	r3, #0
 800a734:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a738:	682f      	ldr	r7, [r5, #0]
 800a73a:	6a21      	ldr	r1, [r4, #32]
 800a73c:	602b      	str	r3, [r5, #0]
 800a73e:	d032      	beq.n	800a7a6 <__sflush_r+0x9a>
 800a740:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a742:	89a3      	ldrh	r3, [r4, #12]
 800a744:	075a      	lsls	r2, r3, #29
 800a746:	d505      	bpl.n	800a754 <__sflush_r+0x48>
 800a748:	6863      	ldr	r3, [r4, #4]
 800a74a:	1ac0      	subs	r0, r0, r3
 800a74c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a74e:	b10b      	cbz	r3, 800a754 <__sflush_r+0x48>
 800a750:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a752:	1ac0      	subs	r0, r0, r3
 800a754:	2300      	movs	r3, #0
 800a756:	4602      	mov	r2, r0
 800a758:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a75a:	6a21      	ldr	r1, [r4, #32]
 800a75c:	4628      	mov	r0, r5
 800a75e:	47b0      	blx	r6
 800a760:	1c43      	adds	r3, r0, #1
 800a762:	89a3      	ldrh	r3, [r4, #12]
 800a764:	d106      	bne.n	800a774 <__sflush_r+0x68>
 800a766:	6829      	ldr	r1, [r5, #0]
 800a768:	291d      	cmp	r1, #29
 800a76a:	d848      	bhi.n	800a7fe <__sflush_r+0xf2>
 800a76c:	4a29      	ldr	r2, [pc, #164]	; (800a814 <__sflush_r+0x108>)
 800a76e:	40ca      	lsrs	r2, r1
 800a770:	07d6      	lsls	r6, r2, #31
 800a772:	d544      	bpl.n	800a7fe <__sflush_r+0xf2>
 800a774:	2200      	movs	r2, #0
 800a776:	6062      	str	r2, [r4, #4]
 800a778:	04d9      	lsls	r1, r3, #19
 800a77a:	6922      	ldr	r2, [r4, #16]
 800a77c:	6022      	str	r2, [r4, #0]
 800a77e:	d504      	bpl.n	800a78a <__sflush_r+0x7e>
 800a780:	1c42      	adds	r2, r0, #1
 800a782:	d101      	bne.n	800a788 <__sflush_r+0x7c>
 800a784:	682b      	ldr	r3, [r5, #0]
 800a786:	b903      	cbnz	r3, 800a78a <__sflush_r+0x7e>
 800a788:	6560      	str	r0, [r4, #84]	; 0x54
 800a78a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a78c:	602f      	str	r7, [r5, #0]
 800a78e:	2900      	cmp	r1, #0
 800a790:	d0c9      	beq.n	800a726 <__sflush_r+0x1a>
 800a792:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a796:	4299      	cmp	r1, r3
 800a798:	d002      	beq.n	800a7a0 <__sflush_r+0x94>
 800a79a:	4628      	mov	r0, r5
 800a79c:	f7ff fb02 	bl	8009da4 <_free_r>
 800a7a0:	2000      	movs	r0, #0
 800a7a2:	6360      	str	r0, [r4, #52]	; 0x34
 800a7a4:	e7c0      	b.n	800a728 <__sflush_r+0x1c>
 800a7a6:	2301      	movs	r3, #1
 800a7a8:	4628      	mov	r0, r5
 800a7aa:	47b0      	blx	r6
 800a7ac:	1c41      	adds	r1, r0, #1
 800a7ae:	d1c8      	bne.n	800a742 <__sflush_r+0x36>
 800a7b0:	682b      	ldr	r3, [r5, #0]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d0c5      	beq.n	800a742 <__sflush_r+0x36>
 800a7b6:	2b1d      	cmp	r3, #29
 800a7b8:	d001      	beq.n	800a7be <__sflush_r+0xb2>
 800a7ba:	2b16      	cmp	r3, #22
 800a7bc:	d101      	bne.n	800a7c2 <__sflush_r+0xb6>
 800a7be:	602f      	str	r7, [r5, #0]
 800a7c0:	e7b1      	b.n	800a726 <__sflush_r+0x1a>
 800a7c2:	89a3      	ldrh	r3, [r4, #12]
 800a7c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7c8:	81a3      	strh	r3, [r4, #12]
 800a7ca:	e7ad      	b.n	800a728 <__sflush_r+0x1c>
 800a7cc:	690f      	ldr	r7, [r1, #16]
 800a7ce:	2f00      	cmp	r7, #0
 800a7d0:	d0a9      	beq.n	800a726 <__sflush_r+0x1a>
 800a7d2:	0793      	lsls	r3, r2, #30
 800a7d4:	680e      	ldr	r6, [r1, #0]
 800a7d6:	bf08      	it	eq
 800a7d8:	694b      	ldreq	r3, [r1, #20]
 800a7da:	600f      	str	r7, [r1, #0]
 800a7dc:	bf18      	it	ne
 800a7de:	2300      	movne	r3, #0
 800a7e0:	eba6 0807 	sub.w	r8, r6, r7
 800a7e4:	608b      	str	r3, [r1, #8]
 800a7e6:	f1b8 0f00 	cmp.w	r8, #0
 800a7ea:	dd9c      	ble.n	800a726 <__sflush_r+0x1a>
 800a7ec:	4643      	mov	r3, r8
 800a7ee:	463a      	mov	r2, r7
 800a7f0:	6a21      	ldr	r1, [r4, #32]
 800a7f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a7f4:	4628      	mov	r0, r5
 800a7f6:	47b0      	blx	r6
 800a7f8:	2800      	cmp	r0, #0
 800a7fa:	dc06      	bgt.n	800a80a <__sflush_r+0xfe>
 800a7fc:	89a3      	ldrh	r3, [r4, #12]
 800a7fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a802:	81a3      	strh	r3, [r4, #12]
 800a804:	f04f 30ff 	mov.w	r0, #4294967295
 800a808:	e78e      	b.n	800a728 <__sflush_r+0x1c>
 800a80a:	4407      	add	r7, r0
 800a80c:	eba8 0800 	sub.w	r8, r8, r0
 800a810:	e7e9      	b.n	800a7e6 <__sflush_r+0xda>
 800a812:	bf00      	nop
 800a814:	20400001 	.word	0x20400001

0800a818 <_fflush_r>:
 800a818:	b538      	push	{r3, r4, r5, lr}
 800a81a:	690b      	ldr	r3, [r1, #16]
 800a81c:	4605      	mov	r5, r0
 800a81e:	460c      	mov	r4, r1
 800a820:	b1db      	cbz	r3, 800a85a <_fflush_r+0x42>
 800a822:	b118      	cbz	r0, 800a82c <_fflush_r+0x14>
 800a824:	6983      	ldr	r3, [r0, #24]
 800a826:	b90b      	cbnz	r3, 800a82c <_fflush_r+0x14>
 800a828:	f7ff fa1c 	bl	8009c64 <__sinit>
 800a82c:	4b0c      	ldr	r3, [pc, #48]	; (800a860 <_fflush_r+0x48>)
 800a82e:	429c      	cmp	r4, r3
 800a830:	d109      	bne.n	800a846 <_fflush_r+0x2e>
 800a832:	686c      	ldr	r4, [r5, #4]
 800a834:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a838:	b17b      	cbz	r3, 800a85a <_fflush_r+0x42>
 800a83a:	4621      	mov	r1, r4
 800a83c:	4628      	mov	r0, r5
 800a83e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a842:	f7ff bf63 	b.w	800a70c <__sflush_r>
 800a846:	4b07      	ldr	r3, [pc, #28]	; (800a864 <_fflush_r+0x4c>)
 800a848:	429c      	cmp	r4, r3
 800a84a:	d101      	bne.n	800a850 <_fflush_r+0x38>
 800a84c:	68ac      	ldr	r4, [r5, #8]
 800a84e:	e7f1      	b.n	800a834 <_fflush_r+0x1c>
 800a850:	4b05      	ldr	r3, [pc, #20]	; (800a868 <_fflush_r+0x50>)
 800a852:	429c      	cmp	r4, r3
 800a854:	bf08      	it	eq
 800a856:	68ec      	ldreq	r4, [r5, #12]
 800a858:	e7ec      	b.n	800a834 <_fflush_r+0x1c>
 800a85a:	2000      	movs	r0, #0
 800a85c:	bd38      	pop	{r3, r4, r5, pc}
 800a85e:	bf00      	nop
 800a860:	0800ac28 	.word	0x0800ac28
 800a864:	0800ac48 	.word	0x0800ac48
 800a868:	0800ac08 	.word	0x0800ac08

0800a86c <_lseek_r>:
 800a86c:	b538      	push	{r3, r4, r5, lr}
 800a86e:	4c07      	ldr	r4, [pc, #28]	; (800a88c <_lseek_r+0x20>)
 800a870:	4605      	mov	r5, r0
 800a872:	4608      	mov	r0, r1
 800a874:	4611      	mov	r1, r2
 800a876:	2200      	movs	r2, #0
 800a878:	6022      	str	r2, [r4, #0]
 800a87a:	461a      	mov	r2, r3
 800a87c:	f7f7 fc6a 	bl	8002154 <_lseek>
 800a880:	1c43      	adds	r3, r0, #1
 800a882:	d102      	bne.n	800a88a <_lseek_r+0x1e>
 800a884:	6823      	ldr	r3, [r4, #0]
 800a886:	b103      	cbz	r3, 800a88a <_lseek_r+0x1e>
 800a888:	602b      	str	r3, [r5, #0]
 800a88a:	bd38      	pop	{r3, r4, r5, pc}
 800a88c:	20006404 	.word	0x20006404

0800a890 <__swhatbuf_r>:
 800a890:	b570      	push	{r4, r5, r6, lr}
 800a892:	460e      	mov	r6, r1
 800a894:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a898:	2900      	cmp	r1, #0
 800a89a:	b096      	sub	sp, #88	; 0x58
 800a89c:	4614      	mov	r4, r2
 800a89e:	461d      	mov	r5, r3
 800a8a0:	da07      	bge.n	800a8b2 <__swhatbuf_r+0x22>
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	602b      	str	r3, [r5, #0]
 800a8a6:	89b3      	ldrh	r3, [r6, #12]
 800a8a8:	061a      	lsls	r2, r3, #24
 800a8aa:	d410      	bmi.n	800a8ce <__swhatbuf_r+0x3e>
 800a8ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a8b0:	e00e      	b.n	800a8d0 <__swhatbuf_r+0x40>
 800a8b2:	466a      	mov	r2, sp
 800a8b4:	f000 f864 	bl	800a980 <_fstat_r>
 800a8b8:	2800      	cmp	r0, #0
 800a8ba:	dbf2      	blt.n	800a8a2 <__swhatbuf_r+0x12>
 800a8bc:	9a01      	ldr	r2, [sp, #4]
 800a8be:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a8c2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a8c6:	425a      	negs	r2, r3
 800a8c8:	415a      	adcs	r2, r3
 800a8ca:	602a      	str	r2, [r5, #0]
 800a8cc:	e7ee      	b.n	800a8ac <__swhatbuf_r+0x1c>
 800a8ce:	2340      	movs	r3, #64	; 0x40
 800a8d0:	2000      	movs	r0, #0
 800a8d2:	6023      	str	r3, [r4, #0]
 800a8d4:	b016      	add	sp, #88	; 0x58
 800a8d6:	bd70      	pop	{r4, r5, r6, pc}

0800a8d8 <__smakebuf_r>:
 800a8d8:	898b      	ldrh	r3, [r1, #12]
 800a8da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a8dc:	079d      	lsls	r5, r3, #30
 800a8de:	4606      	mov	r6, r0
 800a8e0:	460c      	mov	r4, r1
 800a8e2:	d507      	bpl.n	800a8f4 <__smakebuf_r+0x1c>
 800a8e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a8e8:	6023      	str	r3, [r4, #0]
 800a8ea:	6123      	str	r3, [r4, #16]
 800a8ec:	2301      	movs	r3, #1
 800a8ee:	6163      	str	r3, [r4, #20]
 800a8f0:	b002      	add	sp, #8
 800a8f2:	bd70      	pop	{r4, r5, r6, pc}
 800a8f4:	ab01      	add	r3, sp, #4
 800a8f6:	466a      	mov	r2, sp
 800a8f8:	f7ff ffca 	bl	800a890 <__swhatbuf_r>
 800a8fc:	9900      	ldr	r1, [sp, #0]
 800a8fe:	4605      	mov	r5, r0
 800a900:	4630      	mov	r0, r6
 800a902:	f7ff fa9d 	bl	8009e40 <_malloc_r>
 800a906:	b948      	cbnz	r0, 800a91c <__smakebuf_r+0x44>
 800a908:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a90c:	059a      	lsls	r2, r3, #22
 800a90e:	d4ef      	bmi.n	800a8f0 <__smakebuf_r+0x18>
 800a910:	f023 0303 	bic.w	r3, r3, #3
 800a914:	f043 0302 	orr.w	r3, r3, #2
 800a918:	81a3      	strh	r3, [r4, #12]
 800a91a:	e7e3      	b.n	800a8e4 <__smakebuf_r+0xc>
 800a91c:	4b0d      	ldr	r3, [pc, #52]	; (800a954 <__smakebuf_r+0x7c>)
 800a91e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a920:	89a3      	ldrh	r3, [r4, #12]
 800a922:	6020      	str	r0, [r4, #0]
 800a924:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a928:	81a3      	strh	r3, [r4, #12]
 800a92a:	9b00      	ldr	r3, [sp, #0]
 800a92c:	6163      	str	r3, [r4, #20]
 800a92e:	9b01      	ldr	r3, [sp, #4]
 800a930:	6120      	str	r0, [r4, #16]
 800a932:	b15b      	cbz	r3, 800a94c <__smakebuf_r+0x74>
 800a934:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a938:	4630      	mov	r0, r6
 800a93a:	f000 f833 	bl	800a9a4 <_isatty_r>
 800a93e:	b128      	cbz	r0, 800a94c <__smakebuf_r+0x74>
 800a940:	89a3      	ldrh	r3, [r4, #12]
 800a942:	f023 0303 	bic.w	r3, r3, #3
 800a946:	f043 0301 	orr.w	r3, r3, #1
 800a94a:	81a3      	strh	r3, [r4, #12]
 800a94c:	89a3      	ldrh	r3, [r4, #12]
 800a94e:	431d      	orrs	r5, r3
 800a950:	81a5      	strh	r5, [r4, #12]
 800a952:	e7cd      	b.n	800a8f0 <__smakebuf_r+0x18>
 800a954:	08009c2d 	.word	0x08009c2d

0800a958 <__malloc_lock>:
 800a958:	4770      	bx	lr

0800a95a <__malloc_unlock>:
 800a95a:	4770      	bx	lr

0800a95c <_read_r>:
 800a95c:	b538      	push	{r3, r4, r5, lr}
 800a95e:	4c07      	ldr	r4, [pc, #28]	; (800a97c <_read_r+0x20>)
 800a960:	4605      	mov	r5, r0
 800a962:	4608      	mov	r0, r1
 800a964:	4611      	mov	r1, r2
 800a966:	2200      	movs	r2, #0
 800a968:	6022      	str	r2, [r4, #0]
 800a96a:	461a      	mov	r2, r3
 800a96c:	f7f7 fb92 	bl	8002094 <_read>
 800a970:	1c43      	adds	r3, r0, #1
 800a972:	d102      	bne.n	800a97a <_read_r+0x1e>
 800a974:	6823      	ldr	r3, [r4, #0]
 800a976:	b103      	cbz	r3, 800a97a <_read_r+0x1e>
 800a978:	602b      	str	r3, [r5, #0]
 800a97a:	bd38      	pop	{r3, r4, r5, pc}
 800a97c:	20006404 	.word	0x20006404

0800a980 <_fstat_r>:
 800a980:	b538      	push	{r3, r4, r5, lr}
 800a982:	4c07      	ldr	r4, [pc, #28]	; (800a9a0 <_fstat_r+0x20>)
 800a984:	2300      	movs	r3, #0
 800a986:	4605      	mov	r5, r0
 800a988:	4608      	mov	r0, r1
 800a98a:	4611      	mov	r1, r2
 800a98c:	6023      	str	r3, [r4, #0]
 800a98e:	f7f7 fbc6 	bl	800211e <_fstat>
 800a992:	1c43      	adds	r3, r0, #1
 800a994:	d102      	bne.n	800a99c <_fstat_r+0x1c>
 800a996:	6823      	ldr	r3, [r4, #0]
 800a998:	b103      	cbz	r3, 800a99c <_fstat_r+0x1c>
 800a99a:	602b      	str	r3, [r5, #0]
 800a99c:	bd38      	pop	{r3, r4, r5, pc}
 800a99e:	bf00      	nop
 800a9a0:	20006404 	.word	0x20006404

0800a9a4 <_isatty_r>:
 800a9a4:	b538      	push	{r3, r4, r5, lr}
 800a9a6:	4c06      	ldr	r4, [pc, #24]	; (800a9c0 <_isatty_r+0x1c>)
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	4605      	mov	r5, r0
 800a9ac:	4608      	mov	r0, r1
 800a9ae:	6023      	str	r3, [r4, #0]
 800a9b0:	f7f7 fbc5 	bl	800213e <_isatty>
 800a9b4:	1c43      	adds	r3, r0, #1
 800a9b6:	d102      	bne.n	800a9be <_isatty_r+0x1a>
 800a9b8:	6823      	ldr	r3, [r4, #0]
 800a9ba:	b103      	cbz	r3, 800a9be <_isatty_r+0x1a>
 800a9bc:	602b      	str	r3, [r5, #0]
 800a9be:	bd38      	pop	{r3, r4, r5, pc}
 800a9c0:	20006404 	.word	0x20006404

0800a9c4 <_init>:
 800a9c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9c6:	bf00      	nop
 800a9c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9ca:	bc08      	pop	{r3}
 800a9cc:	469e      	mov	lr, r3
 800a9ce:	4770      	bx	lr

0800a9d0 <_fini>:
 800a9d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9d2:	bf00      	nop
 800a9d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9d6:	bc08      	pop	{r3}
 800a9d8:	469e      	mov	lr, r3
 800a9da:	4770      	bx	lr
