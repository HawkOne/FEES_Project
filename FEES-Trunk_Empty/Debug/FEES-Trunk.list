
FEES-Trunk.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ea08  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000560  0800eb98  0800eb98  0001eb98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f0f8  0800f0f8  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800f0f8  0800f0f8  0001f0f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f100  0800f100  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f100  0800f100  0001f100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f104  0800f104  0001f104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800f108  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006228  200001e0  0800f2e8  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006408  0800f2e8  00026408  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025703  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004091  00000000  00000000  00045913  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001dd0  00000000  00000000  000499a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001c30  00000000  00000000  0004b778  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000258c5  00000000  00000000  0004d3a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00017360  00000000  00000000  00072c6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e06d2  00000000  00000000  00089fcd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016a69f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008eac  00000000  00000000  0016a71c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800eb80 	.word	0x0800eb80

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800eb80 	.word	0x0800eb80

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <FEES_SOS>:

#include <string.h>



void FEES_SOS(int delay){
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
	  HAL_GPIO_WritePin(GPIOD_BASE, GPIO_PIN_12, GPIO_PIN_SET);
 8000f90:	2201      	movs	r2, #1
 8000f92:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f96:	485a      	ldr	r0, [pc, #360]	; (8001100 <FEES_SOS+0x178>)
 8000f98:	f002 fbaa 	bl	80036f0 <HAL_GPIO_WritePin>

	  // S = . . .
	  HAL_GPIO_TogglePin(GPIOD_BASE, GPIO_PIN_12); 	HAL_Delay(delay); 	  	HAL_GPIO_TogglePin(GPIOD_BASE, GPIO_PIN_12);	  HAL_Delay(delay);
 8000f9c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fa0:	4857      	ldr	r0, [pc, #348]	; (8001100 <FEES_SOS+0x178>)
 8000fa2:	f002 fbbe 	bl	8003722 <HAL_GPIO_TogglePin>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f001 fe7f 	bl	8002cac <HAL_Delay>
 8000fae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fb2:	4853      	ldr	r0, [pc, #332]	; (8001100 <FEES_SOS+0x178>)
 8000fb4:	f002 fbb5 	bl	8003722 <HAL_GPIO_TogglePin>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f001 fe76 	bl	8002cac <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOD_BASE, GPIO_PIN_12); 	HAL_Delay(delay); 	  	HAL_GPIO_TogglePin(GPIOD_BASE, GPIO_PIN_12);	  HAL_Delay(delay);
 8000fc0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fc4:	484e      	ldr	r0, [pc, #312]	; (8001100 <FEES_SOS+0x178>)
 8000fc6:	f002 fbac 	bl	8003722 <HAL_GPIO_TogglePin>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f001 fe6d 	bl	8002cac <HAL_Delay>
 8000fd2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fd6:	484a      	ldr	r0, [pc, #296]	; (8001100 <FEES_SOS+0x178>)
 8000fd8:	f002 fba3 	bl	8003722 <HAL_GPIO_TogglePin>
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f001 fe64 	bl	8002cac <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOD_BASE, GPIO_PIN_12); 	HAL_Delay(delay); 	  	HAL_GPIO_TogglePin(GPIOD_BASE, GPIO_PIN_12);	  HAL_Delay(delay);
 8000fe4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fe8:	4845      	ldr	r0, [pc, #276]	; (8001100 <FEES_SOS+0x178>)
 8000fea:	f002 fb9a 	bl	8003722 <HAL_GPIO_TogglePin>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f001 fe5b 	bl	8002cac <HAL_Delay>
 8000ff6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ffa:	4841      	ldr	r0, [pc, #260]	; (8001100 <FEES_SOS+0x178>)
 8000ffc:	f002 fb91 	bl	8003722 <HAL_GPIO_TogglePin>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	4618      	mov	r0, r3
 8001004:	f001 fe52 	bl	8002cac <HAL_Delay>
	  // O = - - -
	  HAL_GPIO_TogglePin(GPIOD_BASE, GPIO_PIN_12);	HAL_Delay(delay*2); 	HAL_GPIO_TogglePin(GPIOD_BASE, GPIO_PIN_12);	  HAL_Delay(delay*2);
 8001008:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800100c:	483c      	ldr	r0, [pc, #240]	; (8001100 <FEES_SOS+0x178>)
 800100e:	f002 fb88 	bl	8003722 <HAL_GPIO_TogglePin>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	4618      	mov	r0, r3
 8001018:	f001 fe48 	bl	8002cac <HAL_Delay>
 800101c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001020:	4837      	ldr	r0, [pc, #220]	; (8001100 <FEES_SOS+0x178>)
 8001022:	f002 fb7e 	bl	8003722 <HAL_GPIO_TogglePin>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	4618      	mov	r0, r3
 800102c:	f001 fe3e 	bl	8002cac <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOD_BASE, GPIO_PIN_12);	HAL_Delay(delay*2); 	HAL_GPIO_TogglePin(GPIOD_BASE, GPIO_PIN_12);	  HAL_Delay(delay*2);
 8001030:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001034:	4832      	ldr	r0, [pc, #200]	; (8001100 <FEES_SOS+0x178>)
 8001036:	f002 fb74 	bl	8003722 <HAL_GPIO_TogglePin>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	4618      	mov	r0, r3
 8001040:	f001 fe34 	bl	8002cac <HAL_Delay>
 8001044:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001048:	482d      	ldr	r0, [pc, #180]	; (8001100 <FEES_SOS+0x178>)
 800104a:	f002 fb6a 	bl	8003722 <HAL_GPIO_TogglePin>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	4618      	mov	r0, r3
 8001054:	f001 fe2a 	bl	8002cac <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOD_BASE, GPIO_PIN_12);	HAL_Delay(delay*2); 	HAL_GPIO_TogglePin(GPIOD_BASE, GPIO_PIN_12);	  HAL_Delay(delay*2);
 8001058:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800105c:	4828      	ldr	r0, [pc, #160]	; (8001100 <FEES_SOS+0x178>)
 800105e:	f002 fb60 	bl	8003722 <HAL_GPIO_TogglePin>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	4618      	mov	r0, r3
 8001068:	f001 fe20 	bl	8002cac <HAL_Delay>
 800106c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001070:	4823      	ldr	r0, [pc, #140]	; (8001100 <FEES_SOS+0x178>)
 8001072:	f002 fb56 	bl	8003722 <HAL_GPIO_TogglePin>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	4618      	mov	r0, r3
 800107c:	f001 fe16 	bl	8002cac <HAL_Delay>
	  // S = . . .
	  HAL_GPIO_TogglePin(GPIOD_BASE, GPIO_PIN_12); 	HAL_Delay(delay); 	  	HAL_GPIO_TogglePin(GPIOD_BASE, GPIO_PIN_12);	  HAL_Delay(delay);
 8001080:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001084:	481e      	ldr	r0, [pc, #120]	; (8001100 <FEES_SOS+0x178>)
 8001086:	f002 fb4c 	bl	8003722 <HAL_GPIO_TogglePin>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4618      	mov	r0, r3
 800108e:	f001 fe0d 	bl	8002cac <HAL_Delay>
 8001092:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001096:	481a      	ldr	r0, [pc, #104]	; (8001100 <FEES_SOS+0x178>)
 8001098:	f002 fb43 	bl	8003722 <HAL_GPIO_TogglePin>
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	4618      	mov	r0, r3
 80010a0:	f001 fe04 	bl	8002cac <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOD_BASE, GPIO_PIN_12); 	HAL_Delay(delay); 	  	HAL_GPIO_TogglePin(GPIOD_BASE, GPIO_PIN_12);	  HAL_Delay(delay);
 80010a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010a8:	4815      	ldr	r0, [pc, #84]	; (8001100 <FEES_SOS+0x178>)
 80010aa:	f002 fb3a 	bl	8003722 <HAL_GPIO_TogglePin>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4618      	mov	r0, r3
 80010b2:	f001 fdfb 	bl	8002cac <HAL_Delay>
 80010b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010ba:	4811      	ldr	r0, [pc, #68]	; (8001100 <FEES_SOS+0x178>)
 80010bc:	f002 fb31 	bl	8003722 <HAL_GPIO_TogglePin>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	4618      	mov	r0, r3
 80010c4:	f001 fdf2 	bl	8002cac <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOD_BASE, GPIO_PIN_12); 	HAL_Delay(delay); 	  	HAL_GPIO_TogglePin(GPIOD_BASE, GPIO_PIN_12);	  HAL_Delay(delay);
 80010c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010cc:	480c      	ldr	r0, [pc, #48]	; (8001100 <FEES_SOS+0x178>)
 80010ce:	f002 fb28 	bl	8003722 <HAL_GPIO_TogglePin>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f001 fde9 	bl	8002cac <HAL_Delay>
 80010da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010de:	4808      	ldr	r0, [pc, #32]	; (8001100 <FEES_SOS+0x178>)
 80010e0:	f002 fb1f 	bl	8003722 <HAL_GPIO_TogglePin>
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	4618      	mov	r0, r3
 80010e8:	f001 fde0 	bl	8002cac <HAL_Delay>

	  HAL_GPIO_WritePin(GPIOD_BASE, GPIO_PIN_12, GPIO_PIN_SET);
 80010ec:	2201      	movs	r2, #1
 80010ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010f2:	4803      	ldr	r0, [pc, #12]	; (8001100 <FEES_SOS+0x178>)
 80010f4:	f002 fafc 	bl	80036f0 <HAL_GPIO_WritePin>
}
 80010f8:	bf00      	nop
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	40020c00 	.word	0x40020c00

08001104 <led_on>:
	  HAL_GPIO_WritePin(GPIOD_BASE, GPIO_PIN_12, GPIO_PIN_SET);
}



void led_on()	{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart3, (uint8_t *)  "ACCENDO!\n\r", 10, 100);
 8001108:	2364      	movs	r3, #100	; 0x64
 800110a:	220a      	movs	r2, #10
 800110c:	4905      	ldr	r1, [pc, #20]	; (8001124 <led_on+0x20>)
 800110e:	4806      	ldr	r0, [pc, #24]	; (8001128 <led_on+0x24>)
 8001110:	f005 fe7f 	bl	8006e12 <HAL_UART_Transmit>
	HAL_GPIO_WritePin(GPIOD_BASE, GPIO_PIN_12, GPIO_PIN_RESET);
 8001114:	2200      	movs	r2, #0
 8001116:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800111a:	4804      	ldr	r0, [pc, #16]	; (800112c <led_on+0x28>)
 800111c:	f002 fae8 	bl	80036f0 <HAL_GPIO_WritePin>
}
 8001120:	bf00      	nop
 8001122:	bd80      	pop	{r7, pc}
 8001124:	0800eb98 	.word	0x0800eb98
 8001128:	200051e8 	.word	0x200051e8
 800112c:	40020c00 	.word	0x40020c00

08001130 <led_off>:
void led_off(){
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart3, (uint8_t *)  "SPENGO!\n\r", 9, 100);
 8001134:	2364      	movs	r3, #100	; 0x64
 8001136:	2209      	movs	r2, #9
 8001138:	4905      	ldr	r1, [pc, #20]	; (8001150 <led_off+0x20>)
 800113a:	4806      	ldr	r0, [pc, #24]	; (8001154 <led_off+0x24>)
 800113c:	f005 fe69 	bl	8006e12 <HAL_UART_Transmit>
	HAL_GPIO_WritePin(GPIOD_BASE, GPIO_PIN_12, GPIO_PIN_SET);
 8001140:	2201      	movs	r2, #1
 8001142:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001146:	4804      	ldr	r0, [pc, #16]	; (8001158 <led_off+0x28>)
 8001148:	f002 fad2 	bl	80036f0 <HAL_GPIO_WritePin>
}
 800114c:	bf00      	nop
 800114e:	bd80      	pop	{r7, pc}
 8001150:	0800eba4 	.word	0x0800eba4
 8001154:	200051e8 	.word	0x200051e8
 8001158:	40020c00 	.word	0x40020c00

0800115c <State_Updater>:


void State_Updater(){
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
	int a = atoi(rx_buffer);
 8001162:	4821      	ldr	r0, [pc, #132]	; (80011e8 <State_Updater+0x8c>)
 8001164:	f009 ff8a 	bl	800b07c <atoi>
 8001168:	6078      	str	r0, [r7, #4]

	if(a == 00) led_off();
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d101      	bne.n	8001174 <State_Updater+0x18>
 8001170:	f7ff ffde 	bl	8001130 <led_off>

	if(a == 01) led_on() ;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2b01      	cmp	r3, #1
 8001178:	d101      	bne.n	800117e <State_Updater+0x22>
 800117a:	f7ff ffc3 	bl	8001104 <led_on>
	if(a == 02) led_off() ;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2b02      	cmp	r3, #2
 8001182:	d101      	bne.n	8001188 <State_Updater+0x2c>
 8001184:	f7ff ffd4 	bl	8001130 <led_off>

	if(a == 03) led_on() ;//FEES_test(200) ;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2b03      	cmp	r3, #3
 800118c:	d101      	bne.n	8001192 <State_Updater+0x36>
 800118e:	f7ff ffb9 	bl	8001104 <led_on>
	if(a == 04) led_off() ;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2b04      	cmp	r3, #4
 8001196:	d101      	bne.n	800119c <State_Updater+0x40>
 8001198:	f7ff ffca 	bl	8001130 <led_off>

	if(a == 05) FLAG=1 ;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2b05      	cmp	r3, #5
 80011a0:	d102      	bne.n	80011a8 <State_Updater+0x4c>
 80011a2:	4b12      	ldr	r3, [pc, #72]	; (80011ec <State_Updater+0x90>)
 80011a4:	2201      	movs	r2, #1
 80011a6:	601a      	str	r2, [r3, #0]
	if(a == 06) FLAG=0 ;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2b06      	cmp	r3, #6
 80011ac:	d102      	bne.n	80011b4 <State_Updater+0x58>
 80011ae:	4b0f      	ldr	r3, [pc, #60]	; (80011ec <State_Updater+0x90>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]

	if(a == 07) TESTING=1 ;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2b07      	cmp	r3, #7
 80011b8:	d102      	bne.n	80011c0 <State_Updater+0x64>
 80011ba:	4b0d      	ldr	r3, [pc, #52]	; (80011f0 <State_Updater+0x94>)
 80011bc:	2201      	movs	r2, #1
 80011be:	601a      	str	r2, [r3, #0]
	if(a == 8) TESTING= 0 ;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2b08      	cmp	r3, #8
 80011c4:	d102      	bne.n	80011cc <State_Updater+0x70>
 80011c6:	4b0a      	ldr	r3, [pc, #40]	; (80011f0 <State_Updater+0x94>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]

	if(a == 9) led_on() ;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2b09      	cmp	r3, #9
 80011d0:	d101      	bne.n	80011d6 <State_Updater+0x7a>
 80011d2:	f7ff ff97 	bl	8001104 <led_on>
	if(a == 10) led_off() ;//FEES_TEST(1) ;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2b0a      	cmp	r3, #10
 80011da:	d101      	bne.n	80011e0 <State_Updater+0x84>
 80011dc:	f7ff ffa8 	bl	8001130 <led_off>


}
 80011e0:	bf00      	nop
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20004b24 	.word	0x20004b24
 80011ec:	20000200 	.word	0x20000200
 80011f0:	200001fc 	.word	0x200001fc

080011f4 <FEES_Init>:


void FEES_Init(){
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0

	// TEST I2C Busses
	HAL_I2C_Init(&hi2c1);
 80011f8:	488c      	ldr	r0, [pc, #560]	; (800142c <FEES_Init+0x238>)
 80011fa:	f002 faad 	bl	8003758 <HAL_I2C_Init>
	HAL_I2C_Init(&hi2c2);
 80011fe:	488c      	ldr	r0, [pc, #560]	; (8001430 <FEES_Init+0x23c>)
 8001200:	f002 faaa 	bl	8003758 <HAL_I2C_Init>

	// TEST SPI
	HAL_SPI_Init(&hspi1);
 8001204:	488b      	ldr	r0, [pc, #556]	; (8001434 <FEES_Init+0x240>)
 8001206:	f004 fdf5 	bl	8005df4 <HAL_SPI_Init>
	HAL_SPI_Init(&hspi2);
 800120a:	488b      	ldr	r0, [pc, #556]	; (8001438 <FEES_Init+0x244>)
 800120c:	f004 fdf2 	bl	8005df4 <HAL_SPI_Init>
	HAL_SPI_Init(&hspi3);
 8001210:	488a      	ldr	r0, [pc, #552]	; (800143c <FEES_Init+0x248>)
 8001212:	f004 fdef 	bl	8005df4 <HAL_SPI_Init>

    // Battery Heater PWM
    PWM_HEATER.PORT__BASE = GPIOC ;
 8001216:	4b8a      	ldr	r3, [pc, #552]	; (8001440 <FEES_Init+0x24c>)
 8001218:	4a8a      	ldr	r2, [pc, #552]	; (8001444 <FEES_Init+0x250>)
 800121a:	601a      	str	r2, [r3, #0]
    PWM_HEATER.pin_number =  8;
 800121c:	4b88      	ldr	r3, [pc, #544]	; (8001440 <FEES_Init+0x24c>)
 800121e:	2208      	movs	r2, #8
 8001220:	605a      	str	r2, [r3, #4]

    // PWM COILS - MagnetoTorquers
    PWM_X_COIL.PORT__BASE = GPIOA ;
 8001222:	4b89      	ldr	r3, [pc, #548]	; (8001448 <FEES_Init+0x254>)
 8001224:	4a89      	ldr	r2, [pc, #548]	; (800144c <FEES_Init+0x258>)
 8001226:	601a      	str	r2, [r3, #0]
    PWM_X_COIL.pin_number =  0;
 8001228:	4b87      	ldr	r3, [pc, #540]	; (8001448 <FEES_Init+0x254>)
 800122a:	2200      	movs	r2, #0
 800122c:	605a      	str	r2, [r3, #4]

    PWM_Y_COIL.PORT__BASE = GPIOA ;
 800122e:	4b88      	ldr	r3, [pc, #544]	; (8001450 <FEES_Init+0x25c>)
 8001230:	4a86      	ldr	r2, [pc, #536]	; (800144c <FEES_Init+0x258>)
 8001232:	601a      	str	r2, [r3, #0]
    PWM_Y_COIL.pin_number =  1;
 8001234:	4b86      	ldr	r3, [pc, #536]	; (8001450 <FEES_Init+0x25c>)
 8001236:	2201      	movs	r2, #1
 8001238:	605a      	str	r2, [r3, #4]

    PWM_Z_COIL.PORT__BASE = GPIOA ;
 800123a:	4b86      	ldr	r3, [pc, #536]	; (8001454 <FEES_Init+0x260>)
 800123c:	4a83      	ldr	r2, [pc, #524]	; (800144c <FEES_Init+0x258>)
 800123e:	601a      	str	r2, [r3, #0]
    PWM_Z_COIL.pin_number =  2;
 8001240:	4b84      	ldr	r3, [pc, #528]	; (8001454 <FEES_Init+0x260>)
 8001242:	2202      	movs	r2, #2
 8001244:	605a      	str	r2, [r3, #4]

    // Direction PWM Magnetometers
    DIR_X_COIL.PORT__BASE = GPIOE ;
 8001246:	4b84      	ldr	r3, [pc, #528]	; (8001458 <FEES_Init+0x264>)
 8001248:	4a84      	ldr	r2, [pc, #528]	; (800145c <FEES_Init+0x268>)
 800124a:	601a      	str	r2, [r3, #0]
    DIR_X_COIL.pin_number =  7;
 800124c:	4b82      	ldr	r3, [pc, #520]	; (8001458 <FEES_Init+0x264>)
 800124e:	2207      	movs	r2, #7
 8001250:	605a      	str	r2, [r3, #4]

    DIR_Y_COIL.PORT__BASE = GPIOE ;
 8001252:	4b83      	ldr	r3, [pc, #524]	; (8001460 <FEES_Init+0x26c>)
 8001254:	4a81      	ldr	r2, [pc, #516]	; (800145c <FEES_Init+0x268>)
 8001256:	601a      	str	r2, [r3, #0]
    DIR_Y_COIL.pin_number =  8;
 8001258:	4b81      	ldr	r3, [pc, #516]	; (8001460 <FEES_Init+0x26c>)
 800125a:	2208      	movs	r2, #8
 800125c:	605a      	str	r2, [r3, #4]

    DIR_Z_COIL.PORT__BASE = GPIOE ;
 800125e:	4b81      	ldr	r3, [pc, #516]	; (8001464 <FEES_Init+0x270>)
 8001260:	4a7e      	ldr	r2, [pc, #504]	; (800145c <FEES_Init+0x268>)
 8001262:	601a      	str	r2, [r3, #0]
    DIR_Z_COIL.pin_number =  9;
 8001264:	4b7f      	ldr	r3, [pc, #508]	; (8001464 <FEES_Init+0x270>)
 8001266:	2209      	movs	r2, #9
 8001268:	605a      	str	r2, [r3, #4]

    //GPIO DI CONTROLLO E WATCHDOG
    WATCHDOG.PORT__BASE = GPIOB ;
 800126a:	4b7f      	ldr	r3, [pc, #508]	; (8001468 <FEES_Init+0x274>)
 800126c:	4a7f      	ldr	r2, [pc, #508]	; (800146c <FEES_Init+0x278>)
 800126e:	601a      	str	r2, [r3, #0]
    WATCHDOG.pin_number =  5;
 8001270:	4b7d      	ldr	r3, [pc, #500]	; (8001468 <FEES_Init+0x274>)
 8001272:	2205      	movs	r2, #5
 8001274:	605a      	str	r2, [r3, #4]

    UHF_RESET.PORT__BASE = GPIOC ;
 8001276:	4b7e      	ldr	r3, [pc, #504]	; (8001470 <FEES_Init+0x27c>)
 8001278:	4a72      	ldr	r2, [pc, #456]	; (8001444 <FEES_Init+0x250>)
 800127a:	601a      	str	r2, [r3, #0]
    UHF_RESET.pin_number =  13;
 800127c:	4b7c      	ldr	r3, [pc, #496]	; (8001470 <FEES_Init+0x27c>)
 800127e:	220d      	movs	r2, #13
 8001280:	605a      	str	r2, [r3, #4]

    RAD_RESET.PORT__BASE = GPIOC ;
 8001282:	4b7c      	ldr	r3, [pc, #496]	; (8001474 <FEES_Init+0x280>)
 8001284:	4a6f      	ldr	r2, [pc, #444]	; (8001444 <FEES_Init+0x250>)
 8001286:	601a      	str	r2, [r3, #0]
    RAD_RESET.pin_number =  15;
 8001288:	4b7a      	ldr	r3, [pc, #488]	; (8001474 <FEES_Init+0x280>)
 800128a:	220f      	movs	r2, #15
 800128c:	605a      	str	r2, [r3, #4]

    TMTC_WD.PORT__BASE = GPIOD ;
 800128e:	4b7a      	ldr	r3, [pc, #488]	; (8001478 <FEES_Init+0x284>)
 8001290:	4a7a      	ldr	r2, [pc, #488]	; (800147c <FEES_Init+0x288>)
 8001292:	601a      	str	r2, [r3, #0]
    TMTC_WD.pin_number =  12;
 8001294:	4b78      	ldr	r3, [pc, #480]	; (8001478 <FEES_Init+0x284>)
 8001296:	220c      	movs	r2, #12
 8001298:	605a      	str	r2, [r3, #4]

    RSBY_KEEP_EN.PORT__BASE = GPIOB ;
 800129a:	4b79      	ldr	r3, [pc, #484]	; (8001480 <FEES_Init+0x28c>)
 800129c:	4a73      	ldr	r2, [pc, #460]	; (800146c <FEES_Init+0x278>)
 800129e:	601a      	str	r2, [r3, #0]
    RSBY_KEEP_EN.pin_number =  0;
 80012a0:	4b77      	ldr	r3, [pc, #476]	; (8001480 <FEES_Init+0x28c>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	605a      	str	r2, [r3, #4]


    //GPIO DI CONTROLLO Alimentazione (Power Control)
    ANA_PWR_ON.PORT__BASE = GPIOE ;
 80012a6:	4b77      	ldr	r3, [pc, #476]	; (8001484 <FEES_Init+0x290>)
 80012a8:	4a6c      	ldr	r2, [pc, #432]	; (800145c <FEES_Init+0x268>)
 80012aa:	601a      	str	r2, [r3, #0]
    ANA_PWR_ON.pin_number =  0;
 80012ac:	4b75      	ldr	r3, [pc, #468]	; (8001484 <FEES_Init+0x290>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	605a      	str	r2, [r3, #4]

    RAD_PWR_ON.PORT__BASE = GPIOE ;
 80012b2:	4b75      	ldr	r3, [pc, #468]	; (8001488 <FEES_Init+0x294>)
 80012b4:	4a69      	ldr	r2, [pc, #420]	; (800145c <FEES_Init+0x268>)
 80012b6:	601a      	str	r2, [r3, #0]
    RAD_PWR_ON.pin_number =  1;
 80012b8:	4b73      	ldr	r3, [pc, #460]	; (8001488 <FEES_Init+0x294>)
 80012ba:	2201      	movs	r2, #1
 80012bc:	605a      	str	r2, [r3, #4]

    GPS_PWR_ON.PORT__BASE = GPIOE ;
 80012be:	4b73      	ldr	r3, [pc, #460]	; (800148c <FEES_Init+0x298>)
 80012c0:	4a66      	ldr	r2, [pc, #408]	; (800145c <FEES_Init+0x268>)
 80012c2:	601a      	str	r2, [r3, #0]
    GPS_PWR_ON.pin_number =  2;
 80012c4:	4b71      	ldr	r3, [pc, #452]	; (800148c <FEES_Init+0x298>)
 80012c6:	2202      	movs	r2, #2
 80012c8:	605a      	str	r2, [r3, #4]

    SBD_PWR_ON.PORT__BASE = GPIOE ;
 80012ca:	4b71      	ldr	r3, [pc, #452]	; (8001490 <FEES_Init+0x29c>)
 80012cc:	4a63      	ldr	r2, [pc, #396]	; (800145c <FEES_Init+0x268>)
 80012ce:	601a      	str	r2, [r3, #0]
    SBD_PWR_ON.pin_number =  3;
 80012d0:	4b6f      	ldr	r3, [pc, #444]	; (8001490 <FEES_Init+0x29c>)
 80012d2:	2203      	movs	r2, #3
 80012d4:	605a      	str	r2, [r3, #4]

    RSBY_PWR_ON.PORT__BASE = GPIOE ;
 80012d6:	4b6f      	ldr	r3, [pc, #444]	; (8001494 <FEES_Init+0x2a0>)
 80012d8:	4a60      	ldr	r2, [pc, #384]	; (800145c <FEES_Init+0x268>)
 80012da:	601a      	str	r2, [r3, #0]
    RSBY_PWR_ON.pin_number =  6;
 80012dc:	4b6d      	ldr	r3, [pc, #436]	; (8001494 <FEES_Init+0x2a0>)
 80012de:	2206      	movs	r2, #6
 80012e0:	605a      	str	r2, [r3, #4]


    // SPI SMART PINS - Sensors
    CS_NAND.PORT__BASE = GPIOE ;
 80012e2:	4b6d      	ldr	r3, [pc, #436]	; (8001498 <FEES_Init+0x2a4>)
 80012e4:	4a5d      	ldr	r2, [pc, #372]	; (800145c <FEES_Init+0x268>)
 80012e6:	601a      	str	r2, [r3, #0]
    CS_NAND.pin_number =  4;
 80012e8:	4b6b      	ldr	r3, [pc, #428]	; (8001498 <FEES_Init+0x2a4>)
 80012ea:	2204      	movs	r2, #4
 80012ec:	605a      	str	r2, [r3, #4]

    CS_LORA.PORT__BASE = GPIOE ;
 80012ee:	4b6b      	ldr	r3, [pc, #428]	; (800149c <FEES_Init+0x2a8>)
 80012f0:	4a5a      	ldr	r2, [pc, #360]	; (800145c <FEES_Init+0x268>)
 80012f2:	601a      	str	r2, [r3, #0]
    CS_LORA.pin_number =  5;
 80012f4:	4b69      	ldr	r3, [pc, #420]	; (800149c <FEES_Init+0x2a8>)
 80012f6:	2205      	movs	r2, #5
 80012f8:	605a      	str	r2, [r3, #4]

    CS_RADFET.PORT__BASE = GPIOA ;
 80012fa:	4b69      	ldr	r3, [pc, #420]	; (80014a0 <FEES_Init+0x2ac>)
 80012fc:	4a53      	ldr	r2, [pc, #332]	; (800144c <FEES_Init+0x258>)
 80012fe:	601a      	str	r2, [r3, #0]
    CS_RADFET.pin_number = 4 ;
 8001300:	4b67      	ldr	r3, [pc, #412]	; (80014a0 <FEES_Init+0x2ac>)
 8001302:	2204      	movs	r2, #4
 8001304:	605a      	str	r2, [r3, #4]

    CS_EEPROM.PORT__BASE = GPIOD;
 8001306:	4b67      	ldr	r3, [pc, #412]	; (80014a4 <FEES_Init+0x2b0>)
 8001308:	4a5c      	ldr	r2, [pc, #368]	; (800147c <FEES_Init+0x288>)
 800130a:	601a      	str	r2, [r3, #0]
    CS_EEPROM.pin_number =  10;
 800130c:	4b65      	ldr	r3, [pc, #404]	; (80014a4 <FEES_Init+0x2b0>)
 800130e:	220a      	movs	r2, #10
 8001310:	605a      	str	r2, [r3, #4]

    CS_FRAM.PORT__BASE =  GPIOD;
 8001312:	4b65      	ldr	r3, [pc, #404]	; (80014a8 <FEES_Init+0x2b4>)
 8001314:	4a59      	ldr	r2, [pc, #356]	; (800147c <FEES_Init+0x288>)
 8001316:	601a      	str	r2, [r3, #0]
    CS_FRAM.pin_number =  11;
 8001318:	4b63      	ldr	r3, [pc, #396]	; (80014a8 <FEES_Init+0x2b4>)
 800131a:	220b      	movs	r2, #11
 800131c:	605a      	str	r2, [r3, #4]

    CS_PSD1_AMP.PORT__BASE = GPIOC  ;
 800131e:	4b63      	ldr	r3, [pc, #396]	; (80014ac <FEES_Init+0x2b8>)
 8001320:	4a48      	ldr	r2, [pc, #288]	; (8001444 <FEES_Init+0x250>)
 8001322:	601a      	str	r2, [r3, #0]
    CS_PSD1_AMP.pin_number =  4;
 8001324:	4b61      	ldr	r3, [pc, #388]	; (80014ac <FEES_Init+0x2b8>)
 8001326:	2204      	movs	r2, #4
 8001328:	605a      	str	r2, [r3, #4]

    CS_PSD2_AMP.PORT__BASE =  GPIOC;
 800132a:	4b61      	ldr	r3, [pc, #388]	; (80014b0 <FEES_Init+0x2bc>)
 800132c:	4a45      	ldr	r2, [pc, #276]	; (8001444 <FEES_Init+0x250>)
 800132e:	601a      	str	r2, [r3, #0]
    CS_PSD2_AMP.pin_number =  5;
 8001330:	4b5f      	ldr	r3, [pc, #380]	; (80014b0 <FEES_Init+0x2bc>)
 8001332:	2205      	movs	r2, #5
 8001334:	605a      	str	r2, [r3, #4]

    CS_GYRO.PORT__BASE =  GPIOE;
 8001336:	4b5f      	ldr	r3, [pc, #380]	; (80014b4 <FEES_Init+0x2c0>)
 8001338:	4a48      	ldr	r2, [pc, #288]	; (800145c <FEES_Init+0x268>)
 800133a:	601a      	str	r2, [r3, #0]
    CS_GYRO.pin_number =  10;
 800133c:	4b5d      	ldr	r3, [pc, #372]	; (80014b4 <FEES_Init+0x2c0>)
 800133e:	220a      	movs	r2, #10
 8001340:	605a      	str	r2, [r3, #4]

    CS_GYRO2.PORT__BASE =  GPIOD;
 8001342:	4b5d      	ldr	r3, [pc, #372]	; (80014b8 <FEES_Init+0x2c4>)
 8001344:	4a4d      	ldr	r2, [pc, #308]	; (800147c <FEES_Init+0x288>)
 8001346:	601a      	str	r2, [r3, #0]
    CS_GYRO2.pin_number =  14;
 8001348:	4b5b      	ldr	r3, [pc, #364]	; (80014b8 <FEES_Init+0x2c4>)
 800134a:	220e      	movs	r2, #14
 800134c:	605a      	str	r2, [r3, #4]

    EN_ADC1.PORT__BASE = GPIOE ;
 800134e:	4b5b      	ldr	r3, [pc, #364]	; (80014bc <FEES_Init+0x2c8>)
 8001350:	4a42      	ldr	r2, [pc, #264]	; (800145c <FEES_Init+0x268>)
 8001352:	601a      	str	r2, [r3, #0]
    EN_ADC1.pin_number =  11;
 8001354:	4b59      	ldr	r3, [pc, #356]	; (80014bc <FEES_Init+0x2c8>)
 8001356:	220b      	movs	r2, #11
 8001358:	605a      	str	r2, [r3, #4]

    EN_ADC2.PORT__BASE = GPIOE ;
 800135a:	4b59      	ldr	r3, [pc, #356]	; (80014c0 <FEES_Init+0x2cc>)
 800135c:	4a3f      	ldr	r2, [pc, #252]	; (800145c <FEES_Init+0x268>)
 800135e:	601a      	str	r2, [r3, #0]
    EN_ADC2.pin_number =  13 ;
 8001360:	4b57      	ldr	r3, [pc, #348]	; (80014c0 <FEES_Init+0x2cc>)
 8001362:	220d      	movs	r2, #13
 8001364:	605a      	str	r2, [r3, #4]

    EN_ADC3.PORT__BASE = GPIOE ;
 8001366:	4b57      	ldr	r3, [pc, #348]	; (80014c4 <FEES_Init+0x2d0>)
 8001368:	4a3c      	ldr	r2, [pc, #240]	; (800145c <FEES_Init+0x268>)
 800136a:	601a      	str	r2, [r3, #0]
    EN_ADC3.pin_number =  12 ;
 800136c:	4b55      	ldr	r3, [pc, #340]	; (80014c4 <FEES_Init+0x2d0>)
 800136e:	220c      	movs	r2, #12
 8001370:	605a      	str	r2, [r3, #4]

    EXT_SPI_EN.PORT__BASE = GPIOC ;
 8001372:	4b55      	ldr	r3, [pc, #340]	; (80014c8 <FEES_Init+0x2d4>)
 8001374:	4a33      	ldr	r2, [pc, #204]	; (8001444 <FEES_Init+0x250>)
 8001376:	601a      	str	r2, [r3, #0]
    EXT_SPI_EN.pin_number =  9 ;
 8001378:	4b53      	ldr	r3, [pc, #332]	; (80014c8 <FEES_Init+0x2d4>)
 800137a:	2209      	movs	r2, #9
 800137c:	605a      	str	r2, [r3, #4]

    // GPIO EXTRA
    EX_GPIO1.PORT__BASE = GPIOB;
 800137e:	4b53      	ldr	r3, [pc, #332]	; (80014cc <FEES_Init+0x2d8>)
 8001380:	4a3a      	ldr	r2, [pc, #232]	; (800146c <FEES_Init+0x278>)
 8001382:	601a      	str	r2, [r3, #0]
    EX_GPIO1.pin_number =  1;
 8001384:	4b51      	ldr	r3, [pc, #324]	; (80014cc <FEES_Init+0x2d8>)
 8001386:	2201      	movs	r2, #1
 8001388:	605a      	str	r2, [r3, #4]

    EX_GPIO2.PORT__BASE =  GPIOB;
 800138a:	4b51      	ldr	r3, [pc, #324]	; (80014d0 <FEES_Init+0x2dc>)
 800138c:	4a37      	ldr	r2, [pc, #220]	; (800146c <FEES_Init+0x278>)
 800138e:	601a      	str	r2, [r3, #0]
    EX_GPIO2.pin_number =  12;
 8001390:	4b4f      	ldr	r3, [pc, #316]	; (80014d0 <FEES_Init+0x2dc>)
 8001392:	220c      	movs	r2, #12
 8001394:	605a      	str	r2, [r3, #4]

    EX_GPIO3.PORT__BASE =  GPIOA;
 8001396:	4b4f      	ldr	r3, [pc, #316]	; (80014d4 <FEES_Init+0x2e0>)
 8001398:	4a2c      	ldr	r2, [pc, #176]	; (800144c <FEES_Init+0x258>)
 800139a:	601a      	str	r2, [r3, #0]
    EX_GPIO3.pin_number =  3;
 800139c:	4b4d      	ldr	r3, [pc, #308]	; (80014d4 <FEES_Init+0x2e0>)
 800139e:	2203      	movs	r2, #3
 80013a0:	605a      	str	r2, [r3, #4]

    EX_GPIO4.PORT__BASE =  GPIOA;
 80013a2:	4b4d      	ldr	r3, [pc, #308]	; (80014d8 <FEES_Init+0x2e4>)
 80013a4:	4a29      	ldr	r2, [pc, #164]	; (800144c <FEES_Init+0x258>)
 80013a6:	601a      	str	r2, [r3, #0]
    EX_GPIO4.pin_number =  10;
 80013a8:	4b4b      	ldr	r3, [pc, #300]	; (80014d8 <FEES_Init+0x2e4>)
 80013aa:	220a      	movs	r2, #10
 80013ac:	605a      	str	r2, [r3, #4]


  		// Select
    PSD1_SEL0.PORT__BASE = GPIOC ;
 80013ae:	4b4b      	ldr	r3, [pc, #300]	; (80014dc <FEES_Init+0x2e8>)
 80013b0:	4a24      	ldr	r2, [pc, #144]	; (8001444 <FEES_Init+0x250>)
 80013b2:	601a      	str	r2, [r3, #0]
    PSD1_SEL0.pin_number = 1 ;
 80013b4:	4b49      	ldr	r3, [pc, #292]	; (80014dc <FEES_Init+0x2e8>)
 80013b6:	2201      	movs	r2, #1
 80013b8:	605a      	str	r2, [r3, #4]

    PSD1_SEL1.PORT__BASE = GPIOC ;
 80013ba:	4b49      	ldr	r3, [pc, #292]	; (80014e0 <FEES_Init+0x2ec>)
 80013bc:	4a21      	ldr	r2, [pc, #132]	; (8001444 <FEES_Init+0x250>)
 80013be:	601a      	str	r2, [r3, #0]
    PSD1_SEL1.pin_number = 0 ;
 80013c0:	4b47      	ldr	r3, [pc, #284]	; (80014e0 <FEES_Init+0x2ec>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	605a      	str	r2, [r3, #4]

    PSD2_SEL0.PORT__BASE = GPIOC ;
 80013c6:	4b47      	ldr	r3, [pc, #284]	; (80014e4 <FEES_Init+0x2f0>)
 80013c8:	4a1e      	ldr	r2, [pc, #120]	; (8001444 <FEES_Init+0x250>)
 80013ca:	601a      	str	r2, [r3, #0]
    PSD2_SEL0.pin_number = 3 ;
 80013cc:	4b45      	ldr	r3, [pc, #276]	; (80014e4 <FEES_Init+0x2f0>)
 80013ce:	2203      	movs	r2, #3
 80013d0:	605a      	str	r2, [r3, #4]

    PSD2_SEL1.PORT__BASE = GPIOC ;
 80013d2:	4b45      	ldr	r3, [pc, #276]	; (80014e8 <FEES_Init+0x2f4>)
 80013d4:	4a1b      	ldr	r2, [pc, #108]	; (8001444 <FEES_Init+0x250>)
 80013d6:	601a      	str	r2, [r3, #0]
    PSD2_SEL1.pin_number = 2 ;
 80013d8:	4b43      	ldr	r3, [pc, #268]	; (80014e8 <FEES_Init+0x2f4>)
 80013da:	2202      	movs	r2, #2
 80013dc:	605a      	str	r2, [r3, #4]

 		// IMU
    INT_GYRO1.PORT__BASE = GPIOD ;
 80013de:	4b43      	ldr	r3, [pc, #268]	; (80014ec <FEES_Init+0x2f8>)
 80013e0:	4a26      	ldr	r2, [pc, #152]	; (800147c <FEES_Init+0x288>)
 80013e2:	601a      	str	r2, [r3, #0]
    INT_GYRO1.pin_number = 13 ;
 80013e4:	4b41      	ldr	r3, [pc, #260]	; (80014ec <FEES_Init+0x2f8>)
 80013e6:	220d      	movs	r2, #13
 80013e8:	605a      	str	r2, [r3, #4]

    INT_GYRO2.PORT__BASE = GPIOD;
 80013ea:	4b41      	ldr	r3, [pc, #260]	; (80014f0 <FEES_Init+0x2fc>)
 80013ec:	4a23      	ldr	r2, [pc, #140]	; (800147c <FEES_Init+0x288>)
 80013ee:	601a      	str	r2, [r3, #0]
    INT_GYRO2.pin_number = 15 ;
 80013f0:	4b3f      	ldr	r3, [pc, #252]	; (80014f0 <FEES_Init+0x2fc>)
 80013f2:	220f      	movs	r2, #15
 80013f4:	605a      	str	r2, [r3, #4]
  		// Radex
    RAD_RESET.PORT__BASE = GPIOC  ;
 80013f6:	4b1f      	ldr	r3, [pc, #124]	; (8001474 <FEES_Init+0x280>)
 80013f8:	4a12      	ldr	r2, [pc, #72]	; (8001444 <FEES_Init+0x250>)
 80013fa:	601a      	str	r2, [r3, #0]
    RAD_RESET.pin_number = 15 ;
 80013fc:	4b1d      	ldr	r3, [pc, #116]	; (8001474 <FEES_Init+0x280>)
 80013fe:	220f      	movs	r2, #15
 8001400:	605a      	str	r2, [r3, #4]

    RADFET_OWB.PORT__BASE = GPIOC ;
 8001402:	4b3c      	ldr	r3, [pc, #240]	; (80014f4 <FEES_Init+0x300>)
 8001404:	4a0f      	ldr	r2, [pc, #60]	; (8001444 <FEES_Init+0x250>)
 8001406:	601a      	str	r2, [r3, #0]
    RADFET_OWB.pin_number = 14 ;
 8001408:	4b3a      	ldr	r3, [pc, #232]	; (80014f4 <FEES_Init+0x300>)
 800140a:	220e      	movs	r2, #14
 800140c:	605a      	str	r2, [r3, #4]
  		//SDB
    SDB_ON_OFF.PORT__BASE = GPIOD ;
 800140e:	4b3a      	ldr	r3, [pc, #232]	; (80014f8 <FEES_Init+0x304>)
 8001410:	4a1a      	ldr	r2, [pc, #104]	; (800147c <FEES_Init+0x288>)
 8001412:	601a      	str	r2, [r3, #0]
    SDB_ON_OFF.pin_number =  7;
 8001414:	4b38      	ldr	r3, [pc, #224]	; (80014f8 <FEES_Init+0x304>)
 8001416:	2207      	movs	r2, #7
 8001418:	605a      	str	r2, [r3, #4]

    SDB_SER_RI.PORT__BASE = GPIOE ;
 800141a:	4b38      	ldr	r3, [pc, #224]	; (80014fc <FEES_Init+0x308>)
 800141c:	4a0f      	ldr	r2, [pc, #60]	; (800145c <FEES_Init+0x268>)
 800141e:	601a      	str	r2, [r3, #0]
    SDB_SER_RI.pin_number = 14 ;
 8001420:	4b36      	ldr	r3, [pc, #216]	; (80014fc <FEES_Init+0x308>)
 8001422:	220e      	movs	r2, #14
 8001424:	605a      	str	r2, [r3, #4]

    SDB_SER_NET.PORT__BASE = GPIOE ;
 8001426:	4b36      	ldr	r3, [pc, #216]	; (8001500 <FEES_Init+0x30c>)
 8001428:	e06c      	b.n	8001504 <FEES_Init+0x310>
 800142a:	bf00      	nop
 800142c:	20005234 	.word	0x20005234
 8001430:	20005708 	.word	0x20005708
 8001434:	20006248 	.word	0x20006248
 8001438:	20004b6c 	.word	0x20004b6c
 800143c:	200057f0 	.word	0x200057f0
 8001440:	2000575c 	.word	0x2000575c
 8001444:	40020800 	.word	0x40020800
 8001448:	20005ad4 	.word	0x20005ad4
 800144c:	40020000 	.word	0x40020000
 8001450:	200057a4 	.word	0x200057a4
 8001454:	20005848 	.word	0x20005848
 8001458:	20006338 	.word	0x20006338
 800145c:	40021000 	.word	0x40021000
 8001460:	20005798 	.word	0x20005798
 8001464:	20005cec 	.word	0x20005cec
 8001468:	20006368 	.word	0x20006368
 800146c:	40020400 	.word	0x40020400
 8001470:	20005a68 	.word	0x20005a68
 8001474:	20005854 	.word	0x20005854
 8001478:	200051d0 	.word	0x200051d0
 800147c:	40020c00 	.word	0x40020c00
 8001480:	200059a4 	.word	0x200059a4
 8001484:	20005abc 	.word	0x20005abc
 8001488:	20004b2c 	.word	0x20004b2c
 800148c:	20005910 	.word	0x20005910
 8001490:	20005228 	.word	0x20005228
 8001494:	20005768 	.word	0x20005768
 8001498:	20005a74 	.word	0x20005a74
 800149c:	20004b48 	.word	0x20004b48
 80014a0:	200059f0 	.word	0x200059f0
 80014a4:	20006374 	.word	0x20006374
 80014a8:	20005d04 	.word	0x20005d04
 80014ac:	20004b54 	.word	0x20004b54
 80014b0:	200051c4 	.word	0x200051c4
 80014b4:	20005988 	.word	0x20005988
 80014b8:	20005a5c 	.word	0x20005a5c
 80014bc:	20005aa4 	.word	0x20005aa4
 80014c0:	2000578c 	.word	0x2000578c
 80014c4:	2000569c 	.word	0x2000569c
 80014c8:	20004b60 	.word	0x20004b60
 80014cc:	20005d70 	.word	0x20005d70
 80014d0:	20004b3c 	.word	0x20004b3c
 80014d4:	20005780 	.word	0x20005780
 80014d8:	20005a98 	.word	0x20005a98
 80014dc:	20005998 	.word	0x20005998
 80014e0:	200051dc 	.word	0x200051dc
 80014e4:	2000632c 	.word	0x2000632c
 80014e8:	20005a80 	.word	0x20005a80
 80014ec:	20005cf8 	.word	0x20005cf8
 80014f0:	20005774 	.word	0x20005774
 80014f4:	20006344 	.word	0x20006344
 80014f8:	20005ac8 	.word	0x20005ac8
 80014fc:	20005fdc 	.word	0x20005fdc
 8001500:	20005a8c 	.word	0x20005a8c
 8001504:	4a18      	ldr	r2, [pc, #96]	; (8001568 <FEES_Init+0x374>)
 8001506:	601a      	str	r2, [r3, #0]
    SDB_SER_NET.pin_number = 15 ;
 8001508:	4b18      	ldr	r3, [pc, #96]	; (800156c <FEES_Init+0x378>)
 800150a:	220f      	movs	r2, #15
 800150c:	605a      	str	r2, [r3, #4]

    SDB_SER_DCD.PORT__BASE = GPIOD ;
 800150e:	4b18      	ldr	r3, [pc, #96]	; (8001570 <FEES_Init+0x37c>)
 8001510:	4a18      	ldr	r2, [pc, #96]	; (8001574 <FEES_Init+0x380>)
 8001512:	601a      	str	r2, [r3, #0]
    SDB_SER_DCD.pin_number = 0 ;
 8001514:	4b16      	ldr	r3, [pc, #88]	; (8001570 <FEES_Init+0x37c>)
 8001516:	2200      	movs	r2, #0
 8001518:	605a      	str	r2, [r3, #4]

    SDB_SER_DSR.PORT__BASE = GPIOD ;
 800151a:	4b17      	ldr	r3, [pc, #92]	; (8001578 <FEES_Init+0x384>)
 800151c:	4a15      	ldr	r2, [pc, #84]	; (8001574 <FEES_Init+0x380>)
 800151e:	601a      	str	r2, [r3, #0]
    SDB_SER_DSR.pin_number = 1;
 8001520:	4b15      	ldr	r3, [pc, #84]	; (8001578 <FEES_Init+0x384>)
 8001522:	2201      	movs	r2, #1
 8001524:	605a      	str	r2, [r3, #4]

    SDB_SER_DTR.PORT__BASE = GPIOD ;
 8001526:	4b15      	ldr	r3, [pc, #84]	; (800157c <FEES_Init+0x388>)
 8001528:	4a12      	ldr	r2, [pc, #72]	; (8001574 <FEES_Init+0x380>)
 800152a:	601a      	str	r2, [r3, #0]
    SDB_SER_DTR.pin_number = 2 ;
 800152c:	4b13      	ldr	r3, [pc, #76]	; (800157c <FEES_Init+0x388>)
 800152e:	2202      	movs	r2, #2
 8001530:	605a      	str	r2, [r3, #4]

    USB_VBUS.PORT__BASE = GPIOA ;
 8001532:	4b13      	ldr	r3, [pc, #76]	; (8001580 <FEES_Init+0x38c>)
 8001534:	4a13      	ldr	r2, [pc, #76]	; (8001584 <FEES_Init+0x390>)
 8001536:	601a      	str	r2, [r3, #0]
    USB_VBUS.pin_number = 9 ;
 8001538:	4b11      	ldr	r3, [pc, #68]	; (8001580 <FEES_Init+0x38c>)
 800153a:	2209      	movs	r2, #9
 800153c:	605a      	str	r2, [r3, #4]
  		// Other
    PGOOD.PORT__BASE = GPIOA ;
 800153e:	4b12      	ldr	r3, [pc, #72]	; (8001588 <FEES_Init+0x394>)
 8001540:	4a10      	ldr	r2, [pc, #64]	; (8001584 <FEES_Init+0x390>)
 8001542:	601a      	str	r2, [r3, #0]
    PGOOD.pin_number = 8 ;
 8001544:	4b10      	ldr	r3, [pc, #64]	; (8001588 <FEES_Init+0x394>)
 8001546:	2208      	movs	r2, #8
 8001548:	605a      	str	r2, [r3, #4]

    JTAG_TMS.PORT__BASE = GPIOA ;
 800154a:	4b10      	ldr	r3, [pc, #64]	; (800158c <FEES_Init+0x398>)
 800154c:	4a0d      	ldr	r2, [pc, #52]	; (8001584 <FEES_Init+0x390>)
 800154e:	601a      	str	r2, [r3, #0]
    JTAG_TMS.pin_number = 13 ;
 8001550:	4b0e      	ldr	r3, [pc, #56]	; (800158c <FEES_Init+0x398>)
 8001552:	220d      	movs	r2, #13
 8001554:	605a      	str	r2, [r3, #4]

    JTAG_TCK.PORT__BASE = GPIOA ;
 8001556:	4b0e      	ldr	r3, [pc, #56]	; (8001590 <FEES_Init+0x39c>)
 8001558:	4a0a      	ldr	r2, [pc, #40]	; (8001584 <FEES_Init+0x390>)
 800155a:	601a      	str	r2, [r3, #0]
    JTAG_TCK.pin_number = 14 ;
 800155c:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <FEES_Init+0x39c>)
 800155e:	220e      	movs	r2, #14
 8001560:	605a      	str	r2, [r3, #4]

}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	40021000 	.word	0x40021000
 800156c:	20005a8c 	.word	0x20005a8c
 8001570:	20005ae0 	.word	0x20005ae0
 8001574:	40020c00 	.word	0x40020c00
 8001578:	20005ab0 	.word	0x20005ab0
 800157c:	2000635c 	.word	0x2000635c
 8001580:	20005d7c 	.word	0x20005d7c
 8001584:	40020000 	.word	0x40020000
 8001588:	20006350 	.word	0x20006350
 800158c:	20005f88 	.word	0x20005f88
 8001590:	2000597c 	.word	0x2000597c

08001594 <FEES_Startup_PWM_BATTERY>:
		  HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
		  osDelay(1000);*/
	}
}

void FEES_Startup_PWM_BATTERY(){
 8001594:	b580      	push	{r7, lr}
 8001596:	b08a      	sub	sp, #40	; 0x28
 8001598:	af00      	add	r7, sp, #0
	  int i=1;
 800159a:	2301      	movs	r3, #1
 800159c:	627b      	str	r3, [r7, #36]	; 0x24
	  while(i<11){
 800159e:	e08c      	b.n	80016ba <FEES_Startup_PWM_BATTERY+0x126>
		  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015a0:	f107 031c 	add.w	r3, r7, #28
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
		  TIM_OC_InitTypeDef sConfigOC = {0};
 80015aa:	463b      	mov	r3, r7
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	605a      	str	r2, [r3, #4]
 80015b2:	609a      	str	r2, [r3, #8]
 80015b4:	60da      	str	r2, [r3, #12]
 80015b6:	611a      	str	r2, [r3, #16]
 80015b8:	615a      	str	r2, [r3, #20]
 80015ba:	619a      	str	r2, [r3, #24]
		  htim3.Instance = TIM3;
 80015bc:	4b45      	ldr	r3, [pc, #276]	; (80016d4 <FEES_Startup_PWM_BATTERY+0x140>)
 80015be:	4a46      	ldr	r2, [pc, #280]	; (80016d8 <FEES_Startup_PWM_BATTERY+0x144>)
 80015c0:	601a      	str	r2, [r3, #0]
		  if(i==1){htim3.Init.Prescaler  = 160-1;}
 80015c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d102      	bne.n	80015ce <FEES_Startup_PWM_BATTERY+0x3a>
 80015c8:	4b42      	ldr	r3, [pc, #264]	; (80016d4 <FEES_Startup_PWM_BATTERY+0x140>)
 80015ca:	229f      	movs	r2, #159	; 0x9f
 80015cc:	605a      	str	r2, [r3, #4]
		  if(i==2){htim3.Init.Prescaler  = 150-1;}
 80015ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d102      	bne.n	80015da <FEES_Startup_PWM_BATTERY+0x46>
 80015d4:	4b3f      	ldr	r3, [pc, #252]	; (80016d4 <FEES_Startup_PWM_BATTERY+0x140>)
 80015d6:	2295      	movs	r2, #149	; 0x95
 80015d8:	605a      	str	r2, [r3, #4]
		  if(i==3){htim3.Init.Prescaler  = 140-1;}
 80015da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015dc:	2b03      	cmp	r3, #3
 80015de:	d102      	bne.n	80015e6 <FEES_Startup_PWM_BATTERY+0x52>
 80015e0:	4b3c      	ldr	r3, [pc, #240]	; (80016d4 <FEES_Startup_PWM_BATTERY+0x140>)
 80015e2:	228b      	movs	r2, #139	; 0x8b
 80015e4:	605a      	str	r2, [r3, #4]
		  if(i==4){htim3.Init.Prescaler  = 130-1;}
 80015e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e8:	2b04      	cmp	r3, #4
 80015ea:	d102      	bne.n	80015f2 <FEES_Startup_PWM_BATTERY+0x5e>
 80015ec:	4b39      	ldr	r3, [pc, #228]	; (80016d4 <FEES_Startup_PWM_BATTERY+0x140>)
 80015ee:	2281      	movs	r2, #129	; 0x81
 80015f0:	605a      	str	r2, [r3, #4]
		  if(i==5){htim3.Init.Prescaler  = 120-1;}
 80015f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f4:	2b05      	cmp	r3, #5
 80015f6:	d102      	bne.n	80015fe <FEES_Startup_PWM_BATTERY+0x6a>
 80015f8:	4b36      	ldr	r3, [pc, #216]	; (80016d4 <FEES_Startup_PWM_BATTERY+0x140>)
 80015fa:	2277      	movs	r2, #119	; 0x77
 80015fc:	605a      	str	r2, [r3, #4]
		  if(i==6){htim3.Init.Prescaler  = 110-1;}
 80015fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001600:	2b06      	cmp	r3, #6
 8001602:	d102      	bne.n	800160a <FEES_Startup_PWM_BATTERY+0x76>
 8001604:	4b33      	ldr	r3, [pc, #204]	; (80016d4 <FEES_Startup_PWM_BATTERY+0x140>)
 8001606:	226d      	movs	r2, #109	; 0x6d
 8001608:	605a      	str	r2, [r3, #4]
		  if(i==7){htim3.Init.Prescaler  = 100-1;}
 800160a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160c:	2b07      	cmp	r3, #7
 800160e:	d102      	bne.n	8001616 <FEES_Startup_PWM_BATTERY+0x82>
 8001610:	4b30      	ldr	r3, [pc, #192]	; (80016d4 <FEES_Startup_PWM_BATTERY+0x140>)
 8001612:	2263      	movs	r2, #99	; 0x63
 8001614:	605a      	str	r2, [r3, #4]
		  if(i==8){htim3.Init.Prescaler  = 90-1;}
 8001616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001618:	2b08      	cmp	r3, #8
 800161a:	d102      	bne.n	8001622 <FEES_Startup_PWM_BATTERY+0x8e>
 800161c:	4b2d      	ldr	r3, [pc, #180]	; (80016d4 <FEES_Startup_PWM_BATTERY+0x140>)
 800161e:	2259      	movs	r2, #89	; 0x59
 8001620:	605a      	str	r2, [r3, #4]
		  if(i==9){htim3.Init.Prescaler  = 80-1;}
 8001622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001624:	2b09      	cmp	r3, #9
 8001626:	d102      	bne.n	800162e <FEES_Startup_PWM_BATTERY+0x9a>
 8001628:	4b2a      	ldr	r3, [pc, #168]	; (80016d4 <FEES_Startup_PWM_BATTERY+0x140>)
 800162a:	224f      	movs	r2, #79	; 0x4f
 800162c:	605a      	str	r2, [r3, #4]
		  if(i==10){htim3.Init.Prescaler = 70-1;}
 800162e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001630:	2b0a      	cmp	r3, #10
 8001632:	d102      	bne.n	800163a <FEES_Startup_PWM_BATTERY+0xa6>
 8001634:	4b27      	ldr	r3, [pc, #156]	; (80016d4 <FEES_Startup_PWM_BATTERY+0x140>)
 8001636:	2245      	movs	r2, #69	; 0x45
 8001638:	605a      	str	r2, [r3, #4]

		  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800163a:	4b26      	ldr	r3, [pc, #152]	; (80016d4 <FEES_Startup_PWM_BATTERY+0x140>)
 800163c:	2200      	movs	r2, #0
 800163e:	609a      	str	r2, [r3, #8]
		  htim3.Init.Period = 100-1;
 8001640:	4b24      	ldr	r3, [pc, #144]	; (80016d4 <FEES_Startup_PWM_BATTERY+0x140>)
 8001642:	2263      	movs	r2, #99	; 0x63
 8001644:	60da      	str	r2, [r3, #12]
		  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001646:	4b23      	ldr	r3, [pc, #140]	; (80016d4 <FEES_Startup_PWM_BATTERY+0x140>)
 8001648:	2200      	movs	r2, #0
 800164a:	611a      	str	r2, [r3, #16]
		  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800164c:	4b21      	ldr	r3, [pc, #132]	; (80016d4 <FEES_Startup_PWM_BATTERY+0x140>)
 800164e:	2280      	movs	r2, #128	; 0x80
 8001650:	619a      	str	r2, [r3, #24]
		  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK){Error_Handler();}
 8001652:	4820      	ldr	r0, [pc, #128]	; (80016d4 <FEES_Startup_PWM_BATTERY+0x140>)
 8001654:	f004 fc81 	bl	8005f5a <HAL_TIM_PWM_Init>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <FEES_Startup_PWM_BATTERY+0xce>
 800165e:	f000 fe63 	bl	8002328 <Error_Handler>

		  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001662:	2300      	movs	r3, #0
 8001664:	61fb      	str	r3, [r7, #28]
		  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001666:	2300      	movs	r3, #0
 8001668:	623b      	str	r3, [r7, #32]
		  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK){ Error_Handler();}
 800166a:	f107 031c 	add.w	r3, r7, #28
 800166e:	4619      	mov	r1, r3
 8001670:	4818      	ldr	r0, [pc, #96]	; (80016d4 <FEES_Startup_PWM_BATTERY+0x140>)
 8001672:	f005 faf1 	bl	8006c58 <HAL_TIMEx_MasterConfigSynchronization>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <FEES_Startup_PWM_BATTERY+0xec>
 800167c:	f000 fe54 	bl	8002328 <Error_Handler>

		  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001680:	2360      	movs	r3, #96	; 0x60
 8001682:	603b      	str	r3, [r7, #0]
		  sConfigOC.Pulse = 50-1;
 8001684:	2331      	movs	r3, #49	; 0x31
 8001686:	607b      	str	r3, [r7, #4]
		  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001688:	2300      	movs	r3, #0
 800168a:	60bb      	str	r3, [r7, #8]
		  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800168c:	2300      	movs	r3, #0
 800168e:	613b      	str	r3, [r7, #16]
		  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK){ Error_Handler();}
 8001690:	463b      	mov	r3, r7
 8001692:	2208      	movs	r2, #8
 8001694:	4619      	mov	r1, r3
 8001696:	480f      	ldr	r0, [pc, #60]	; (80016d4 <FEES_Startup_PWM_BATTERY+0x140>)
 8001698:	f004 fe28 	bl	80062ec <HAL_TIM_PWM_ConfigChannel>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <FEES_Startup_PWM_BATTERY+0x112>
 80016a2:	f000 fe41 	bl	8002328 <Error_Handler>
		  i++;
 80016a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a8:	3301      	adds	r3, #1
 80016aa:	627b      	str	r3, [r7, #36]	; 0x24
		  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80016ac:	2108      	movs	r1, #8
 80016ae:	4809      	ldr	r0, [pc, #36]	; (80016d4 <FEES_Startup_PWM_BATTERY+0x140>)
 80016b0:	f004 fc7e 	bl	8005fb0 <HAL_TIM_PWM_Start>
		  HAL_Delay(50);
 80016b4:	2032      	movs	r0, #50	; 0x32
 80016b6:	f001 faf9 	bl	8002cac <HAL_Delay>
	  while(i<11){
 80016ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016bc:	2b0a      	cmp	r3, #10
 80016be:	f77f af6f 	ble.w	80015a0 <FEES_Startup_PWM_BATTERY+0xc>
		  }
	  HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 80016c2:	2108      	movs	r1, #8
 80016c4:	4803      	ldr	r0, [pc, #12]	; (80016d4 <FEES_Startup_PWM_BATTERY+0x140>)
 80016c6:	f004 fcb1 	bl	800602c <HAL_TIM_PWM_Stop>
}
 80016ca:	bf00      	nop
 80016cc:	3728      	adds	r7, #40	; 0x28
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	200057b0 	.word	0x200057b0
 80016d8:	40000400 	.word	0x40000400

080016dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016dc:	b5b0      	push	{r4, r5, r7, lr}
 80016de:	b086      	sub	sp, #24
 80016e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016e2:	f001 faa1 	bl	8002c28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016e6:	f000 f8a3 	bl	8001830 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016ea:	f000 fc19 	bl	8001f20 <MX_GPIO_Init>
  MX_I2C1_Init();
 80016ee:	f000 f959 	bl	80019a4 <MX_I2C1_Init>
  MX_I2C2_Init();
 80016f2:	f000 f985 	bl	8001a00 <MX_I2C2_Init>
  MX_SPI1_Init();
 80016f6:	f000 f9b1 	bl	8001a5c <MX_SPI1_Init>
  MX_SPI2_Init();
 80016fa:	f000 f9e5 	bl	8001ac8 <MX_SPI2_Init>
  MX_SPI3_Init();
 80016fe:	f000 fa19 	bl	8001b34 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8001702:	f000 fb37 	bl	8001d74 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001706:	f000 fb89 	bl	8001e1c <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 800170a:	f000 fbb1 	bl	8001e70 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 800170e:	f000 f8f7 	bl	8001900 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8001712:	f000 fb59 	bl	8001dc8 <MX_USART2_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001716:	f000 fbd5 	bl	8001ec4 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 800171a:	f000 fa41 	bl	8001ba0 <MX_TIM2_Init>
  MX_TIM3_Init();
 800171e:	f000 facf 	bl	8001cc0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  FEES_Init();
 8001722:	f7ff fd67 	bl	80011f4 <FEES_Init>

  //HAL_GPIO_WritePin(GPIOD_BASE, GPIO_PIN_12, GPIO_PIN_SET);

  HAL_UART_Receive_IT(&huart3, (uint8_t *) rx_buffer, 2);	// Enable the USART2 in RX mode under Interrupt  2Characters
 8001726:	2202      	movs	r2, #2
 8001728:	4929      	ldr	r1, [pc, #164]	; (80017d0 <main+0xf4>)
 800172a:	482a      	ldr	r0, [pc, #168]	; (80017d4 <main+0xf8>)
 800172c:	f005 fc0a 	bl	8006f44 <HAL_UART_Receive_IT>


   char StringInit[]= "== Accenzione == \n\r";
 8001730:	4b29      	ldr	r3, [pc, #164]	; (80017d8 <main+0xfc>)
 8001732:	1d3c      	adds	r4, r7, #4
 8001734:	461d      	mov	r5, r3
 8001736:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001738:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800173a:	682b      	ldr	r3, [r5, #0]
 800173c:	6023      	str	r3, [r4, #0]
   HAL_UART_Transmit(&huart3, (uint8_t *)  StringInit, sizeof(StringInit)-1, 100);
 800173e:	1d39      	adds	r1, r7, #4
 8001740:	2364      	movs	r3, #100	; 0x64
 8001742:	2213      	movs	r2, #19
 8001744:	4823      	ldr	r0, [pc, #140]	; (80017d4 <main+0xf8>)
 8001746:	f005 fb64 	bl	8006e12 <HAL_UART_Transmit>

   // Init Procedure
   FEES_SOS(50);
 800174a:	2032      	movs	r0, #50	; 0x32
 800174c:	f7ff fc1c 	bl	8000f88 <FEES_SOS>

   FEES_Startup_PWM_BATTERY(50); // STARTUP ALERT
 8001750:	2032      	movs	r0, #50	; 0x32
 8001752:	f7ff ff1f 	bl	8001594 <FEES_Startup_PWM_BATTERY>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001756:	f006 ff4f 	bl	80085f8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800175a:	4a20      	ldr	r2, [pc, #128]	; (80017dc <main+0x100>)
 800175c:	2100      	movs	r1, #0
 800175e:	4820      	ldr	r0, [pc, #128]	; (80017e0 <main+0x104>)
 8001760:	f006 ffb4 	bl	80086cc <osThreadNew>
 8001764:	4602      	mov	r2, r0
 8001766:	4b1f      	ldr	r3, [pc, #124]	; (80017e4 <main+0x108>)
 8001768:	601a      	str	r2, [r3, #0]

  /* creation of Task1 */
  Task1Handle = osThreadNew(Task01, NULL, &Task1_attributes);
 800176a:	4a1f      	ldr	r2, [pc, #124]	; (80017e8 <main+0x10c>)
 800176c:	2100      	movs	r1, #0
 800176e:	481f      	ldr	r0, [pc, #124]	; (80017ec <main+0x110>)
 8001770:	f006 ffac 	bl	80086cc <osThreadNew>
 8001774:	4602      	mov	r2, r0
 8001776:	4b1e      	ldr	r3, [pc, #120]	; (80017f0 <main+0x114>)
 8001778:	601a      	str	r2, [r3, #0]

  /* creation of Task2 */
  Task2Handle = osThreadNew(Task02, NULL, &Task2_attributes);
 800177a:	4a1e      	ldr	r2, [pc, #120]	; (80017f4 <main+0x118>)
 800177c:	2100      	movs	r1, #0
 800177e:	481e      	ldr	r0, [pc, #120]	; (80017f8 <main+0x11c>)
 8001780:	f006 ffa4 	bl	80086cc <osThreadNew>
 8001784:	4602      	mov	r2, r0
 8001786:	4b1d      	ldr	r3, [pc, #116]	; (80017fc <main+0x120>)
 8001788:	601a      	str	r2, [r3, #0]

  /* creation of Task3 */
  Task3Handle = osThreadNew(Task03, NULL, &Task3_attributes);
 800178a:	4a1d      	ldr	r2, [pc, #116]	; (8001800 <main+0x124>)
 800178c:	2100      	movs	r1, #0
 800178e:	481d      	ldr	r0, [pc, #116]	; (8001804 <main+0x128>)
 8001790:	f006 ff9c 	bl	80086cc <osThreadNew>
 8001794:	4602      	mov	r2, r0
 8001796:	4b1c      	ldr	r3, [pc, #112]	; (8001808 <main+0x12c>)
 8001798:	601a      	str	r2, [r3, #0]

  /* creation of Task4 */
  Task4Handle = osThreadNew(Task04, NULL, &Task4_attributes);
 800179a:	4a1c      	ldr	r2, [pc, #112]	; (800180c <main+0x130>)
 800179c:	2100      	movs	r1, #0
 800179e:	481c      	ldr	r0, [pc, #112]	; (8001810 <main+0x134>)
 80017a0:	f006 ff94 	bl	80086cc <osThreadNew>
 80017a4:	4602      	mov	r2, r0
 80017a6:	4b1b      	ldr	r3, [pc, #108]	; (8001814 <main+0x138>)
 80017a8:	601a      	str	r2, [r3, #0]

  /* creation of Task5 */
  Task5Handle = osThreadNew(Task05, NULL, &Task5_attributes);
 80017aa:	4a1b      	ldr	r2, [pc, #108]	; (8001818 <main+0x13c>)
 80017ac:	2100      	movs	r1, #0
 80017ae:	481b      	ldr	r0, [pc, #108]	; (800181c <main+0x140>)
 80017b0:	f006 ff8c 	bl	80086cc <osThreadNew>
 80017b4:	4602      	mov	r2, r0
 80017b6:	4b1a      	ldr	r3, [pc, #104]	; (8001820 <main+0x144>)
 80017b8:	601a      	str	r2, [r3, #0]

  /* creation of Task6 */
  Task6Handle = osThreadNew(Task06, NULL, &Task6_attributes);
 80017ba:	4a1a      	ldr	r2, [pc, #104]	; (8001824 <main+0x148>)
 80017bc:	2100      	movs	r1, #0
 80017be:	481a      	ldr	r0, [pc, #104]	; (8001828 <main+0x14c>)
 80017c0:	f006 ff84 	bl	80086cc <osThreadNew>
 80017c4:	4602      	mov	r2, r0
 80017c6:	4b19      	ldr	r3, [pc, #100]	; (800182c <main+0x150>)
 80017c8:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80017ca:	f006 ff49 	bl	8008660 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80017ce:	e7fe      	b.n	80017ce <main+0xf2>
 80017d0:	20004b24 	.word	0x20004b24
 80017d4:	200051e8 	.word	0x200051e8
 80017d8:	0800ec4c 	.word	0x0800ec4c
 80017dc:	0800ecc8 	.word	0x0800ecc8
 80017e0:	08002175 	.word	0x08002175
 80017e4:	20004b38 	.word	0x20004b38
 80017e8:	0800ecec 	.word	0x0800ecec
 80017ec:	08002189 	.word	0x08002189
 80017f0:	200058c4 	.word	0x200058c4
 80017f4:	0800ed10 	.word	0x0800ed10
 80017f8:	080021c5 	.word	0x080021c5
 80017fc:	20005fd8 	.word	0x20005fd8
 8001800:	0800ed34 	.word	0x0800ed34
 8001804:	080021d5 	.word	0x080021d5
 8001808:	20005fd4 	.word	0x20005fd4
 800180c:	0800ed58 	.word	0x0800ed58
 8001810:	080021e9 	.word	0x080021e9
 8001814:	20005994 	.word	0x20005994
 8001818:	0800ed7c 	.word	0x0800ed7c
 800181c:	080022e5 	.word	0x080022e5
 8001820:	20004b28 	.word	0x20004b28
 8001824:	0800eda0 	.word	0x0800eda0
 8001828:	080022f5 	.word	0x080022f5
 800182c:	200058c0 	.word	0x200058c0

08001830 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b094      	sub	sp, #80	; 0x50
 8001834:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001836:	f107 0320 	add.w	r3, r7, #32
 800183a:	2230      	movs	r2, #48	; 0x30
 800183c:	2100      	movs	r1, #0
 800183e:	4618      	mov	r0, r3
 8001840:	f009 fc55 	bl	800b0ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001844:	f107 030c 	add.w	r3, r7, #12
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	605a      	str	r2, [r3, #4]
 800184e:	609a      	str	r2, [r3, #8]
 8001850:	60da      	str	r2, [r3, #12]
 8001852:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001854:	2300      	movs	r3, #0
 8001856:	60bb      	str	r3, [r7, #8]
 8001858:	4b27      	ldr	r3, [pc, #156]	; (80018f8 <SystemClock_Config+0xc8>)
 800185a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185c:	4a26      	ldr	r2, [pc, #152]	; (80018f8 <SystemClock_Config+0xc8>)
 800185e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001862:	6413      	str	r3, [r2, #64]	; 0x40
 8001864:	4b24      	ldr	r3, [pc, #144]	; (80018f8 <SystemClock_Config+0xc8>)
 8001866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001868:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800186c:	60bb      	str	r3, [r7, #8]
 800186e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001870:	2300      	movs	r3, #0
 8001872:	607b      	str	r3, [r7, #4]
 8001874:	4b21      	ldr	r3, [pc, #132]	; (80018fc <SystemClock_Config+0xcc>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a20      	ldr	r2, [pc, #128]	; (80018fc <SystemClock_Config+0xcc>)
 800187a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800187e:	6013      	str	r3, [r2, #0]
 8001880:	4b1e      	ldr	r3, [pc, #120]	; (80018fc <SystemClock_Config+0xcc>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001888:	607b      	str	r3, [r7, #4]
 800188a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800188c:	2301      	movs	r3, #1
 800188e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001890:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001894:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001896:	2302      	movs	r3, #2
 8001898:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800189a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800189e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80018a0:	2304      	movs	r3, #4
 80018a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80018a4:	2360      	movs	r3, #96	; 0x60
 80018a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 80018a8:	2306      	movs	r3, #6
 80018aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80018ac:	2304      	movs	r3, #4
 80018ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018b0:	f107 0320 	add.w	r3, r7, #32
 80018b4:	4618      	mov	r0, r3
 80018b6:	f003 fe09 	bl	80054cc <HAL_RCC_OscConfig>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80018c0:	f000 fd32 	bl	8002328 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018c4:	230f      	movs	r3, #15
 80018c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018c8:	2302      	movs	r3, #2
 80018ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80018cc:	2380      	movs	r3, #128	; 0x80
 80018ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018d0:	2300      	movs	r3, #0
 80018d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018d4:	2300      	movs	r3, #0
 80018d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80018d8:	f107 030c 	add.w	r3, r7, #12
 80018dc:	2100      	movs	r1, #0
 80018de:	4618      	mov	r0, r3
 80018e0:	f004 f864 	bl	80059ac <HAL_RCC_ClockConfig>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80018ea:	f000 fd1d 	bl	8002328 <Error_Handler>
  }
}
 80018ee:	bf00      	nop
 80018f0:	3750      	adds	r7, #80	; 0x50
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	40023800 	.word	0x40023800
 80018fc:	40007000 	.word	0x40007000

08001900 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001906:	463b      	mov	r3, r7
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	605a      	str	r2, [r3, #4]
 800190e:	609a      	str	r2, [r3, #8]
 8001910:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001912:	4b21      	ldr	r3, [pc, #132]	; (8001998 <MX_ADC1_Init+0x98>)
 8001914:	4a21      	ldr	r2, [pc, #132]	; (800199c <MX_ADC1_Init+0x9c>)
 8001916:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001918:	4b1f      	ldr	r3, [pc, #124]	; (8001998 <MX_ADC1_Init+0x98>)
 800191a:	2200      	movs	r2, #0
 800191c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800191e:	4b1e      	ldr	r3, [pc, #120]	; (8001998 <MX_ADC1_Init+0x98>)
 8001920:	2200      	movs	r2, #0
 8001922:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001924:	4b1c      	ldr	r3, [pc, #112]	; (8001998 <MX_ADC1_Init+0x98>)
 8001926:	2200      	movs	r2, #0
 8001928:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800192a:	4b1b      	ldr	r3, [pc, #108]	; (8001998 <MX_ADC1_Init+0x98>)
 800192c:	2200      	movs	r2, #0
 800192e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001930:	4b19      	ldr	r3, [pc, #100]	; (8001998 <MX_ADC1_Init+0x98>)
 8001932:	2200      	movs	r2, #0
 8001934:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001938:	4b17      	ldr	r3, [pc, #92]	; (8001998 <MX_ADC1_Init+0x98>)
 800193a:	2200      	movs	r2, #0
 800193c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800193e:	4b16      	ldr	r3, [pc, #88]	; (8001998 <MX_ADC1_Init+0x98>)
 8001940:	4a17      	ldr	r2, [pc, #92]	; (80019a0 <MX_ADC1_Init+0xa0>)
 8001942:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001944:	4b14      	ldr	r3, [pc, #80]	; (8001998 <MX_ADC1_Init+0x98>)
 8001946:	2200      	movs	r2, #0
 8001948:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800194a:	4b13      	ldr	r3, [pc, #76]	; (8001998 <MX_ADC1_Init+0x98>)
 800194c:	2201      	movs	r2, #1
 800194e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001950:	4b11      	ldr	r3, [pc, #68]	; (8001998 <MX_ADC1_Init+0x98>)
 8001952:	2200      	movs	r2, #0
 8001954:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001958:	4b0f      	ldr	r3, [pc, #60]	; (8001998 <MX_ADC1_Init+0x98>)
 800195a:	2201      	movs	r2, #1
 800195c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800195e:	480e      	ldr	r0, [pc, #56]	; (8001998 <MX_ADC1_Init+0x98>)
 8001960:	f001 f9c6 	bl	8002cf0 <HAL_ADC_Init>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800196a:	f000 fcdd 	bl	8002328 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800196e:	2310      	movs	r3, #16
 8001970:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001972:	2301      	movs	r3, #1
 8001974:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001976:	2300      	movs	r3, #0
 8001978:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800197a:	463b      	mov	r3, r7
 800197c:	4619      	mov	r1, r3
 800197e:	4806      	ldr	r0, [pc, #24]	; (8001998 <MX_ADC1_Init+0x98>)
 8001980:	f001 f9fa 	bl	8002d78 <HAL_ADC_ConfigChannel>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800198a:	f000 fccd 	bl	8002328 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800198e:	bf00      	nop
 8001990:	3710      	adds	r7, #16
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	200058c8 	.word	0x200058c8
 800199c:	40012000 	.word	0x40012000
 80019a0:	0f000001 	.word	0x0f000001

080019a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80019a8:	4b12      	ldr	r3, [pc, #72]	; (80019f4 <MX_I2C1_Init+0x50>)
 80019aa:	4a13      	ldr	r2, [pc, #76]	; (80019f8 <MX_I2C1_Init+0x54>)
 80019ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80019ae:	4b11      	ldr	r3, [pc, #68]	; (80019f4 <MX_I2C1_Init+0x50>)
 80019b0:	4a12      	ldr	r2, [pc, #72]	; (80019fc <MX_I2C1_Init+0x58>)
 80019b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019b4:	4b0f      	ldr	r3, [pc, #60]	; (80019f4 <MX_I2C1_Init+0x50>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80019ba:	4b0e      	ldr	r3, [pc, #56]	; (80019f4 <MX_I2C1_Init+0x50>)
 80019bc:	2200      	movs	r2, #0
 80019be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019c0:	4b0c      	ldr	r3, [pc, #48]	; (80019f4 <MX_I2C1_Init+0x50>)
 80019c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019c8:	4b0a      	ldr	r3, [pc, #40]	; (80019f4 <MX_I2C1_Init+0x50>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80019ce:	4b09      	ldr	r3, [pc, #36]	; (80019f4 <MX_I2C1_Init+0x50>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019d4:	4b07      	ldr	r3, [pc, #28]	; (80019f4 <MX_I2C1_Init+0x50>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019da:	4b06      	ldr	r3, [pc, #24]	; (80019f4 <MX_I2C1_Init+0x50>)
 80019dc:	2200      	movs	r2, #0
 80019de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019e0:	4804      	ldr	r0, [pc, #16]	; (80019f4 <MX_I2C1_Init+0x50>)
 80019e2:	f001 feb9 	bl	8003758 <HAL_I2C_Init>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80019ec:	f000 fc9c 	bl	8002328 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80019f0:	bf00      	nop
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	20005234 	.word	0x20005234
 80019f8:	40005400 	.word	0x40005400
 80019fc:	00061a80 	.word	0x00061a80

08001a00 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001a04:	4b12      	ldr	r3, [pc, #72]	; (8001a50 <MX_I2C2_Init+0x50>)
 8001a06:	4a13      	ldr	r2, [pc, #76]	; (8001a54 <MX_I2C2_Init+0x54>)
 8001a08:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001a0a:	4b11      	ldr	r3, [pc, #68]	; (8001a50 <MX_I2C2_Init+0x50>)
 8001a0c:	4a12      	ldr	r2, [pc, #72]	; (8001a58 <MX_I2C2_Init+0x58>)
 8001a0e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a10:	4b0f      	ldr	r3, [pc, #60]	; (8001a50 <MX_I2C2_Init+0x50>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001a16:	4b0e      	ldr	r3, [pc, #56]	; (8001a50 <MX_I2C2_Init+0x50>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a1c:	4b0c      	ldr	r3, [pc, #48]	; (8001a50 <MX_I2C2_Init+0x50>)
 8001a1e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a22:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a24:	4b0a      	ldr	r3, [pc, #40]	; (8001a50 <MX_I2C2_Init+0x50>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001a2a:	4b09      	ldr	r3, [pc, #36]	; (8001a50 <MX_I2C2_Init+0x50>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a30:	4b07      	ldr	r3, [pc, #28]	; (8001a50 <MX_I2C2_Init+0x50>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a36:	4b06      	ldr	r3, [pc, #24]	; (8001a50 <MX_I2C2_Init+0x50>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001a3c:	4804      	ldr	r0, [pc, #16]	; (8001a50 <MX_I2C2_Init+0x50>)
 8001a3e:	f001 fe8b 	bl	8003758 <HAL_I2C_Init>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001a48:	f000 fc6e 	bl	8002328 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001a4c:	bf00      	nop
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	20005708 	.word	0x20005708
 8001a54:	40005800 	.word	0x40005800
 8001a58:	00061a80 	.word	0x00061a80

08001a5c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001a60:	4b17      	ldr	r3, [pc, #92]	; (8001ac0 <MX_SPI1_Init+0x64>)
 8001a62:	4a18      	ldr	r2, [pc, #96]	; (8001ac4 <MX_SPI1_Init+0x68>)
 8001a64:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a66:	4b16      	ldr	r3, [pc, #88]	; (8001ac0 <MX_SPI1_Init+0x64>)
 8001a68:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a6c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a6e:	4b14      	ldr	r3, [pc, #80]	; (8001ac0 <MX_SPI1_Init+0x64>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a74:	4b12      	ldr	r3, [pc, #72]	; (8001ac0 <MX_SPI1_Init+0x64>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a7a:	4b11      	ldr	r3, [pc, #68]	; (8001ac0 <MX_SPI1_Init+0x64>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a80:	4b0f      	ldr	r3, [pc, #60]	; (8001ac0 <MX_SPI1_Init+0x64>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a86:	4b0e      	ldr	r3, [pc, #56]	; (8001ac0 <MX_SPI1_Init+0x64>)
 8001a88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a8c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a8e:	4b0c      	ldr	r3, [pc, #48]	; (8001ac0 <MX_SPI1_Init+0x64>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a94:	4b0a      	ldr	r3, [pc, #40]	; (8001ac0 <MX_SPI1_Init+0x64>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a9a:	4b09      	ldr	r3, [pc, #36]	; (8001ac0 <MX_SPI1_Init+0x64>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001aa0:	4b07      	ldr	r3, [pc, #28]	; (8001ac0 <MX_SPI1_Init+0x64>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001aa6:	4b06      	ldr	r3, [pc, #24]	; (8001ac0 <MX_SPI1_Init+0x64>)
 8001aa8:	220a      	movs	r2, #10
 8001aaa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001aac:	4804      	ldr	r0, [pc, #16]	; (8001ac0 <MX_SPI1_Init+0x64>)
 8001aae:	f004 f9a1 	bl	8005df4 <HAL_SPI_Init>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001ab8:	f000 fc36 	bl	8002328 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001abc:	bf00      	nop
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	20006248 	.word	0x20006248
 8001ac4:	40013000 	.word	0x40013000

08001ac8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001acc:	4b17      	ldr	r3, [pc, #92]	; (8001b2c <MX_SPI2_Init+0x64>)
 8001ace:	4a18      	ldr	r2, [pc, #96]	; (8001b30 <MX_SPI2_Init+0x68>)
 8001ad0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001ad2:	4b16      	ldr	r3, [pc, #88]	; (8001b2c <MX_SPI2_Init+0x64>)
 8001ad4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ad8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001ada:	4b14      	ldr	r3, [pc, #80]	; (8001b2c <MX_SPI2_Init+0x64>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ae0:	4b12      	ldr	r3, [pc, #72]	; (8001b2c <MX_SPI2_Init+0x64>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ae6:	4b11      	ldr	r3, [pc, #68]	; (8001b2c <MX_SPI2_Init+0x64>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001aec:	4b0f      	ldr	r3, [pc, #60]	; (8001b2c <MX_SPI2_Init+0x64>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001af2:	4b0e      	ldr	r3, [pc, #56]	; (8001b2c <MX_SPI2_Init+0x64>)
 8001af4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001af8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001afa:	4b0c      	ldr	r3, [pc, #48]	; (8001b2c <MX_SPI2_Init+0x64>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b00:	4b0a      	ldr	r3, [pc, #40]	; (8001b2c <MX_SPI2_Init+0x64>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b06:	4b09      	ldr	r3, [pc, #36]	; (8001b2c <MX_SPI2_Init+0x64>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b0c:	4b07      	ldr	r3, [pc, #28]	; (8001b2c <MX_SPI2_Init+0x64>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001b12:	4b06      	ldr	r3, [pc, #24]	; (8001b2c <MX_SPI2_Init+0x64>)
 8001b14:	220a      	movs	r2, #10
 8001b16:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001b18:	4804      	ldr	r0, [pc, #16]	; (8001b2c <MX_SPI2_Init+0x64>)
 8001b1a:	f004 f96b 	bl	8005df4 <HAL_SPI_Init>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001b24:	f000 fc00 	bl	8002328 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001b28:	bf00      	nop
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	20004b6c 	.word	0x20004b6c
 8001b30:	40003800 	.word	0x40003800

08001b34 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001b38:	4b17      	ldr	r3, [pc, #92]	; (8001b98 <MX_SPI3_Init+0x64>)
 8001b3a:	4a18      	ldr	r2, [pc, #96]	; (8001b9c <MX_SPI3_Init+0x68>)
 8001b3c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001b3e:	4b16      	ldr	r3, [pc, #88]	; (8001b98 <MX_SPI3_Init+0x64>)
 8001b40:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b44:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001b46:	4b14      	ldr	r3, [pc, #80]	; (8001b98 <MX_SPI3_Init+0x64>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b4c:	4b12      	ldr	r3, [pc, #72]	; (8001b98 <MX_SPI3_Init+0x64>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b52:	4b11      	ldr	r3, [pc, #68]	; (8001b98 <MX_SPI3_Init+0x64>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b58:	4b0f      	ldr	r3, [pc, #60]	; (8001b98 <MX_SPI3_Init+0x64>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001b5e:	4b0e      	ldr	r3, [pc, #56]	; (8001b98 <MX_SPI3_Init+0x64>)
 8001b60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b64:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b66:	4b0c      	ldr	r3, [pc, #48]	; (8001b98 <MX_SPI3_Init+0x64>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b6c:	4b0a      	ldr	r3, [pc, #40]	; (8001b98 <MX_SPI3_Init+0x64>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b72:	4b09      	ldr	r3, [pc, #36]	; (8001b98 <MX_SPI3_Init+0x64>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b78:	4b07      	ldr	r3, [pc, #28]	; (8001b98 <MX_SPI3_Init+0x64>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001b7e:	4b06      	ldr	r3, [pc, #24]	; (8001b98 <MX_SPI3_Init+0x64>)
 8001b80:	220a      	movs	r2, #10
 8001b82:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001b84:	4804      	ldr	r0, [pc, #16]	; (8001b98 <MX_SPI3_Init+0x64>)
 8001b86:	f004 f935 	bl	8005df4 <HAL_SPI_Init>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001b90:	f000 fbca 	bl	8002328 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001b94:	bf00      	nop
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	200057f0 	.word	0x200057f0
 8001b9c:	40003c00 	.word	0x40003c00

08001ba0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b08e      	sub	sp, #56	; 0x38
 8001ba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ba6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001baa:	2200      	movs	r2, #0
 8001bac:	601a      	str	r2, [r3, #0]
 8001bae:	605a      	str	r2, [r3, #4]
 8001bb0:	609a      	str	r2, [r3, #8]
 8001bb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bb4:	f107 0320 	add.w	r3, r7, #32
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bbe:	1d3b      	adds	r3, r7, #4
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	605a      	str	r2, [r3, #4]
 8001bc6:	609a      	str	r2, [r3, #8]
 8001bc8:	60da      	str	r2, [r3, #12]
 8001bca:	611a      	str	r2, [r3, #16]
 8001bcc:	615a      	str	r2, [r3, #20]
 8001bce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001bd0:	4b3a      	ldr	r3, [pc, #232]	; (8001cbc <MX_TIM2_Init+0x11c>)
 8001bd2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bd6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1600-1;
 8001bd8:	4b38      	ldr	r3, [pc, #224]	; (8001cbc <MX_TIM2_Init+0x11c>)
 8001bda:	f240 623f 	movw	r2, #1599	; 0x63f
 8001bde:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001be0:	4b36      	ldr	r3, [pc, #216]	; (8001cbc <MX_TIM2_Init+0x11c>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8001be6:	4b35      	ldr	r3, [pc, #212]	; (8001cbc <MX_TIM2_Init+0x11c>)
 8001be8:	2263      	movs	r2, #99	; 0x63
 8001bea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bec:	4b33      	ldr	r3, [pc, #204]	; (8001cbc <MX_TIM2_Init+0x11c>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001bf2:	4b32      	ldr	r3, [pc, #200]	; (8001cbc <MX_TIM2_Init+0x11c>)
 8001bf4:	2280      	movs	r2, #128	; 0x80
 8001bf6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001bf8:	4830      	ldr	r0, [pc, #192]	; (8001cbc <MX_TIM2_Init+0x11c>)
 8001bfa:	f004 f95f 	bl	8005ebc <HAL_TIM_Base_Init>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001c04:	f000 fb90 	bl	8002328 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c0c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c12:	4619      	mov	r1, r3
 8001c14:	4829      	ldr	r0, [pc, #164]	; (8001cbc <MX_TIM2_Init+0x11c>)
 8001c16:	f004 fc2f 	bl	8006478 <HAL_TIM_ConfigClockSource>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001c20:	f000 fb82 	bl	8002328 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001c24:	4825      	ldr	r0, [pc, #148]	; (8001cbc <MX_TIM2_Init+0x11c>)
 8001c26:	f004 f998 	bl	8005f5a <HAL_TIM_PWM_Init>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001c30:	f000 fb7a 	bl	8002328 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c34:	2300      	movs	r3, #0
 8001c36:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c3c:	f107 0320 	add.w	r3, r7, #32
 8001c40:	4619      	mov	r1, r3
 8001c42:	481e      	ldr	r0, [pc, #120]	; (8001cbc <MX_TIM2_Init+0x11c>)
 8001c44:	f005 f808 	bl	8006c58 <HAL_TIMEx_MasterConfigSynchronization>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001c4e:	f000 fb6b 	bl	8002328 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c52:	2360      	movs	r3, #96	; 0x60
 8001c54:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50-1;
 8001c56:	2331      	movs	r3, #49	; 0x31
 8001c58:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c62:	1d3b      	adds	r3, r7, #4
 8001c64:	2200      	movs	r2, #0
 8001c66:	4619      	mov	r1, r3
 8001c68:	4814      	ldr	r0, [pc, #80]	; (8001cbc <MX_TIM2_Init+0x11c>)
 8001c6a:	f004 fb3f 	bl	80062ec <HAL_TIM_PWM_ConfigChannel>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001c74:	f000 fb58 	bl	8002328 <Error_Handler>
  }
  sConfigOC.Pulse = 25-1;
 8001c78:	2318      	movs	r3, #24
 8001c7a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c7c:	1d3b      	adds	r3, r7, #4
 8001c7e:	2204      	movs	r2, #4
 8001c80:	4619      	mov	r1, r3
 8001c82:	480e      	ldr	r0, [pc, #56]	; (8001cbc <MX_TIM2_Init+0x11c>)
 8001c84:	f004 fb32 	bl	80062ec <HAL_TIM_PWM_ConfigChannel>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8001c8e:	f000 fb4b 	bl	8002328 <Error_Handler>
  }
  sConfigOC.Pulse = 750-1;
 8001c92:	f240 23ed 	movw	r3, #749	; 0x2ed
 8001c96:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c98:	1d3b      	adds	r3, r7, #4
 8001c9a:	2208      	movs	r2, #8
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4807      	ldr	r0, [pc, #28]	; (8001cbc <MX_TIM2_Init+0x11c>)
 8001ca0:	f004 fb24 	bl	80062ec <HAL_TIM_PWM_ConfigChannel>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <MX_TIM2_Init+0x10e>
  {
    Error_Handler();
 8001caa:	f000 fb3d 	bl	8002328 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001cae:	4803      	ldr	r0, [pc, #12]	; (8001cbc <MX_TIM2_Init+0x11c>)
 8001cb0:	f000 fd02 	bl	80026b8 <HAL_TIM_MspPostInit>

}
 8001cb4:	bf00      	nop
 8001cb6:	3738      	adds	r7, #56	; 0x38
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	200062a0 	.word	0x200062a0

08001cc0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b08a      	sub	sp, #40	; 0x28
 8001cc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cc6:	f107 0320 	add.w	r3, r7, #32
 8001cca:	2200      	movs	r2, #0
 8001ccc:	601a      	str	r2, [r3, #0]
 8001cce:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cd0:	1d3b      	adds	r3, r7, #4
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	601a      	str	r2, [r3, #0]
 8001cd6:	605a      	str	r2, [r3, #4]
 8001cd8:	609a      	str	r2, [r3, #8]
 8001cda:	60da      	str	r2, [r3, #12]
 8001cdc:	611a      	str	r2, [r3, #16]
 8001cde:	615a      	str	r2, [r3, #20]
 8001ce0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ce2:	4b22      	ldr	r3, [pc, #136]	; (8001d6c <MX_TIM3_Init+0xac>)
 8001ce4:	4a22      	ldr	r2, [pc, #136]	; (8001d70 <MX_TIM3_Init+0xb0>)
 8001ce6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1600-1;
 8001ce8:	4b20      	ldr	r3, [pc, #128]	; (8001d6c <MX_TIM3_Init+0xac>)
 8001cea:	f240 623f 	movw	r2, #1599	; 0x63f
 8001cee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cf0:	4b1e      	ldr	r3, [pc, #120]	; (8001d6c <MX_TIM3_Init+0xac>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8001cf6:	4b1d      	ldr	r3, [pc, #116]	; (8001d6c <MX_TIM3_Init+0xac>)
 8001cf8:	2263      	movs	r2, #99	; 0x63
 8001cfa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cfc:	4b1b      	ldr	r3, [pc, #108]	; (8001d6c <MX_TIM3_Init+0xac>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d02:	4b1a      	ldr	r3, [pc, #104]	; (8001d6c <MX_TIM3_Init+0xac>)
 8001d04:	2280      	movs	r2, #128	; 0x80
 8001d06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001d08:	4818      	ldr	r0, [pc, #96]	; (8001d6c <MX_TIM3_Init+0xac>)
 8001d0a:	f004 f926 	bl	8005f5a <HAL_TIM_PWM_Init>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001d14:	f000 fb08 	bl	8002328 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d20:	f107 0320 	add.w	r3, r7, #32
 8001d24:	4619      	mov	r1, r3
 8001d26:	4811      	ldr	r0, [pc, #68]	; (8001d6c <MX_TIM3_Init+0xac>)
 8001d28:	f004 ff96 	bl	8006c58 <HAL_TIMEx_MasterConfigSynchronization>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001d32:	f000 faf9 	bl	8002328 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d36:	2360      	movs	r3, #96	; 0x60
 8001d38:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50-1;
 8001d3a:	2331      	movs	r3, #49	; 0x31
 8001d3c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d42:	2300      	movs	r3, #0
 8001d44:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d46:	1d3b      	adds	r3, r7, #4
 8001d48:	2208      	movs	r2, #8
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	4807      	ldr	r0, [pc, #28]	; (8001d6c <MX_TIM3_Init+0xac>)
 8001d4e:	f004 facd 	bl	80062ec <HAL_TIM_PWM_ConfigChannel>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d001      	beq.n	8001d5c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001d58:	f000 fae6 	bl	8002328 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001d5c:	4803      	ldr	r0, [pc, #12]	; (8001d6c <MX_TIM3_Init+0xac>)
 8001d5e:	f000 fcab 	bl	80026b8 <HAL_TIM_MspPostInit>

}
 8001d62:	bf00      	nop
 8001d64:	3728      	adds	r7, #40	; 0x28
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	200057b0 	.word	0x200057b0
 8001d70:	40000400 	.word	0x40000400

08001d74 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d78:	4b11      	ldr	r3, [pc, #68]	; (8001dc0 <MX_USART1_UART_Init+0x4c>)
 8001d7a:	4a12      	ldr	r2, [pc, #72]	; (8001dc4 <MX_USART1_UART_Init+0x50>)
 8001d7c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001d7e:	4b10      	ldr	r3, [pc, #64]	; (8001dc0 <MX_USART1_UART_Init+0x4c>)
 8001d80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d84:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d86:	4b0e      	ldr	r3, [pc, #56]	; (8001dc0 <MX_USART1_UART_Init+0x4c>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d8c:	4b0c      	ldr	r3, [pc, #48]	; (8001dc0 <MX_USART1_UART_Init+0x4c>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d92:	4b0b      	ldr	r3, [pc, #44]	; (8001dc0 <MX_USART1_UART_Init+0x4c>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d98:	4b09      	ldr	r3, [pc, #36]	; (8001dc0 <MX_USART1_UART_Init+0x4c>)
 8001d9a:	220c      	movs	r2, #12
 8001d9c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d9e:	4b08      	ldr	r3, [pc, #32]	; (8001dc0 <MX_USART1_UART_Init+0x4c>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001da4:	4b06      	ldr	r3, [pc, #24]	; (8001dc0 <MX_USART1_UART_Init+0x4c>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001daa:	4805      	ldr	r0, [pc, #20]	; (8001dc0 <MX_USART1_UART_Init+0x4c>)
 8001dac:	f004 ffe4 	bl	8006d78 <HAL_UART_Init>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001db6:	f000 fab7 	bl	8002328 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001dba:	bf00      	nop
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	200059b0 	.word	0x200059b0
 8001dc4:	40011000 	.word	0x40011000

08001dc8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001dcc:	4b11      	ldr	r3, [pc, #68]	; (8001e14 <MX_USART2_UART_Init+0x4c>)
 8001dce:	4a12      	ldr	r2, [pc, #72]	; (8001e18 <MX_USART2_UART_Init+0x50>)
 8001dd0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001dd2:	4b10      	ldr	r3, [pc, #64]	; (8001e14 <MX_USART2_UART_Init+0x4c>)
 8001dd4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001dd8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001dda:	4b0e      	ldr	r3, [pc, #56]	; (8001e14 <MX_USART2_UART_Init+0x4c>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001de0:	4b0c      	ldr	r3, [pc, #48]	; (8001e14 <MX_USART2_UART_Init+0x4c>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001de6:	4b0b      	ldr	r3, [pc, #44]	; (8001e14 <MX_USART2_UART_Init+0x4c>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001dec:	4b09      	ldr	r3, [pc, #36]	; (8001e14 <MX_USART2_UART_Init+0x4c>)
 8001dee:	220c      	movs	r2, #12
 8001df0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001df2:	4b08      	ldr	r3, [pc, #32]	; (8001e14 <MX_USART2_UART_Init+0x4c>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001df8:	4b06      	ldr	r3, [pc, #24]	; (8001e14 <MX_USART2_UART_Init+0x4c>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001dfe:	4805      	ldr	r0, [pc, #20]	; (8001e14 <MX_USART2_UART_Init+0x4c>)
 8001e00:	f004 ffba 	bl	8006d78 <HAL_UART_Init>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001e0a:	f000 fa8d 	bl	8002328 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e0e:	bf00      	nop
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	200062ec 	.word	0x200062ec
 8001e18:	40004400 	.word	0x40004400

08001e1c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001e20:	4b11      	ldr	r3, [pc, #68]	; (8001e68 <MX_USART3_UART_Init+0x4c>)
 8001e22:	4a12      	ldr	r2, [pc, #72]	; (8001e6c <MX_USART3_UART_Init+0x50>)
 8001e24:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 57600;
 8001e26:	4b10      	ldr	r3, [pc, #64]	; (8001e68 <MX_USART3_UART_Init+0x4c>)
 8001e28:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001e2c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001e2e:	4b0e      	ldr	r3, [pc, #56]	; (8001e68 <MX_USART3_UART_Init+0x4c>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001e34:	4b0c      	ldr	r3, [pc, #48]	; (8001e68 <MX_USART3_UART_Init+0x4c>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001e3a:	4b0b      	ldr	r3, [pc, #44]	; (8001e68 <MX_USART3_UART_Init+0x4c>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001e40:	4b09      	ldr	r3, [pc, #36]	; (8001e68 <MX_USART3_UART_Init+0x4c>)
 8001e42:	220c      	movs	r2, #12
 8001e44:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e46:	4b08      	ldr	r3, [pc, #32]	; (8001e68 <MX_USART3_UART_Init+0x4c>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e4c:	4b06      	ldr	r3, [pc, #24]	; (8001e68 <MX_USART3_UART_Init+0x4c>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001e52:	4805      	ldr	r0, [pc, #20]	; (8001e68 <MX_USART3_UART_Init+0x4c>)
 8001e54:	f004 ff90 	bl	8006d78 <HAL_UART_Init>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001e5e:	f000 fa63 	bl	8002328 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001e62:	bf00      	nop
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	200051e8 	.word	0x200051e8
 8001e6c:	40004800 	.word	0x40004800

08001e70 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001e74:	4b11      	ldr	r3, [pc, #68]	; (8001ebc <MX_USART6_UART_Init+0x4c>)
 8001e76:	4a12      	ldr	r2, [pc, #72]	; (8001ec0 <MX_USART6_UART_Init+0x50>)
 8001e78:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001e7a:	4b10      	ldr	r3, [pc, #64]	; (8001ebc <MX_USART6_UART_Init+0x4c>)
 8001e7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e80:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001e82:	4b0e      	ldr	r3, [pc, #56]	; (8001ebc <MX_USART6_UART_Init+0x4c>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001e88:	4b0c      	ldr	r3, [pc, #48]	; (8001ebc <MX_USART6_UART_Init+0x4c>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001e8e:	4b0b      	ldr	r3, [pc, #44]	; (8001ebc <MX_USART6_UART_Init+0x4c>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001e94:	4b09      	ldr	r3, [pc, #36]	; (8001ebc <MX_USART6_UART_Init+0x4c>)
 8001e96:	220c      	movs	r2, #12
 8001e98:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e9a:	4b08      	ldr	r3, [pc, #32]	; (8001ebc <MX_USART6_UART_Init+0x4c>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ea0:	4b06      	ldr	r3, [pc, #24]	; (8001ebc <MX_USART6_UART_Init+0x4c>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001ea6:	4805      	ldr	r0, [pc, #20]	; (8001ebc <MX_USART6_UART_Init+0x4c>)
 8001ea8:	f004 ff66 	bl	8006d78 <HAL_UART_Init>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001eb2:	f000 fa39 	bl	8002328 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001eb6:	bf00      	nop
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	20005f94 	.word	0x20005f94
 8001ec0:	40011400 	.word	0x40011400

08001ec4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001ec8:	4b14      	ldr	r3, [pc, #80]	; (8001f1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001eca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001ece:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001ed0:	4b12      	ldr	r3, [pc, #72]	; (8001f1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ed2:	2204      	movs	r2, #4
 8001ed4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001ed6:	4b11      	ldr	r3, [pc, #68]	; (8001f1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ed8:	2202      	movs	r2, #2
 8001eda:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001edc:	4b0f      	ldr	r3, [pc, #60]	; (8001f1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001ee2:	4b0e      	ldr	r3, [pc, #56]	; (8001f1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ee4:	2202      	movs	r2, #2
 8001ee6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001ee8:	4b0c      	ldr	r3, [pc, #48]	; (8001f1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001eee:	4b0b      	ldr	r3, [pc, #44]	; (8001f1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001ef4:	4b09      	ldr	r3, [pc, #36]	; (8001f1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001efa:	4b08      	ldr	r3, [pc, #32]	; (8001f1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001efc:	2201      	movs	r2, #1
 8001efe:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001f00:	4b06      	ldr	r3, [pc, #24]	; (8001f1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001f06:	4805      	ldr	r0, [pc, #20]	; (8001f1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f08:	f002 fbaf 	bl	800466a <HAL_PCD_Init>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001f12:	f000 fa09 	bl	8002328 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001f16:	bf00      	nop
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	20005294 	.word	0x20005294

08001f20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b08c      	sub	sp, #48	; 0x30
 8001f24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f26:	f107 031c 	add.w	r3, r7, #28
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	601a      	str	r2, [r3, #0]
 8001f2e:	605a      	str	r2, [r3, #4]
 8001f30:	609a      	str	r2, [r3, #8]
 8001f32:	60da      	str	r2, [r3, #12]
 8001f34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f36:	2300      	movs	r3, #0
 8001f38:	61bb      	str	r3, [r7, #24]
 8001f3a:	4b6e      	ldr	r3, [pc, #440]	; (80020f4 <MX_GPIO_Init+0x1d4>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3e:	4a6d      	ldr	r2, [pc, #436]	; (80020f4 <MX_GPIO_Init+0x1d4>)
 8001f40:	f043 0310 	orr.w	r3, r3, #16
 8001f44:	6313      	str	r3, [r2, #48]	; 0x30
 8001f46:	4b6b      	ldr	r3, [pc, #428]	; (80020f4 <MX_GPIO_Init+0x1d4>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4a:	f003 0310 	and.w	r3, r3, #16
 8001f4e:	61bb      	str	r3, [r7, #24]
 8001f50:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f52:	2300      	movs	r3, #0
 8001f54:	617b      	str	r3, [r7, #20]
 8001f56:	4b67      	ldr	r3, [pc, #412]	; (80020f4 <MX_GPIO_Init+0x1d4>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5a:	4a66      	ldr	r2, [pc, #408]	; (80020f4 <MX_GPIO_Init+0x1d4>)
 8001f5c:	f043 0304 	orr.w	r3, r3, #4
 8001f60:	6313      	str	r3, [r2, #48]	; 0x30
 8001f62:	4b64      	ldr	r3, [pc, #400]	; (80020f4 <MX_GPIO_Init+0x1d4>)
 8001f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f66:	f003 0304 	and.w	r3, r3, #4
 8001f6a:	617b      	str	r3, [r7, #20]
 8001f6c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f6e:	2300      	movs	r3, #0
 8001f70:	613b      	str	r3, [r7, #16]
 8001f72:	4b60      	ldr	r3, [pc, #384]	; (80020f4 <MX_GPIO_Init+0x1d4>)
 8001f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f76:	4a5f      	ldr	r2, [pc, #380]	; (80020f4 <MX_GPIO_Init+0x1d4>)
 8001f78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f7e:	4b5d      	ldr	r3, [pc, #372]	; (80020f4 <MX_GPIO_Init+0x1d4>)
 8001f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f86:	613b      	str	r3, [r7, #16]
 8001f88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	60fb      	str	r3, [r7, #12]
 8001f8e:	4b59      	ldr	r3, [pc, #356]	; (80020f4 <MX_GPIO_Init+0x1d4>)
 8001f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f92:	4a58      	ldr	r2, [pc, #352]	; (80020f4 <MX_GPIO_Init+0x1d4>)
 8001f94:	f043 0301 	orr.w	r3, r3, #1
 8001f98:	6313      	str	r3, [r2, #48]	; 0x30
 8001f9a:	4b56      	ldr	r3, [pc, #344]	; (80020f4 <MX_GPIO_Init+0x1d4>)
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9e:	f003 0301 	and.w	r3, r3, #1
 8001fa2:	60fb      	str	r3, [r7, #12]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	60bb      	str	r3, [r7, #8]
 8001faa:	4b52      	ldr	r3, [pc, #328]	; (80020f4 <MX_GPIO_Init+0x1d4>)
 8001fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fae:	4a51      	ldr	r2, [pc, #324]	; (80020f4 <MX_GPIO_Init+0x1d4>)
 8001fb0:	f043 0302 	orr.w	r3, r3, #2
 8001fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fb6:	4b4f      	ldr	r3, [pc, #316]	; (80020f4 <MX_GPIO_Init+0x1d4>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	60bb      	str	r3, [r7, #8]
 8001fc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	607b      	str	r3, [r7, #4]
 8001fc6:	4b4b      	ldr	r3, [pc, #300]	; (80020f4 <MX_GPIO_Init+0x1d4>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fca:	4a4a      	ldr	r2, [pc, #296]	; (80020f4 <MX_GPIO_Init+0x1d4>)
 8001fcc:	f043 0308 	orr.w	r3, r3, #8
 8001fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fd2:	4b48      	ldr	r3, [pc, #288]	; (80020f4 <MX_GPIO_Init+0x1d4>)
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd6:	f003 0308 	and.w	r3, r3, #8
 8001fda:	607b      	str	r3, [r7, #4]
 8001fdc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPS_PWR_ON_Pin|SBD_PWR_ON_Pin|CS_NAND_Pin|CS_LORA_Pin
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001fe4:	4844      	ldr	r0, [pc, #272]	; (80020f8 <MX_GPIO_Init+0x1d8>)
 8001fe6:	f001 fb83 	bl	80036f0 <HAL_GPIO_WritePin>
                          |RSBY_ON_Pin|DIR_COIL_X_Pin|DIR_COIL_Y_Pin|DIR_COIL_Z_Pin
                          |CS_GYRO_Pin|EN_ADC1_Pin|EN_ADC3_Pin|EN_ADC2_Pin
                          |SBD_SER_RI_Pin|SBD_SER_NET_Pin|ANA_PWR_ON_Pin|RAD_PWR_ON_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, UHF_RESET_Pin|RADFET_OWB_Pin|RAD_RESET_Pin|PSD1_SEL0_Pin
 8001fea:	2200      	movs	r2, #0
 8001fec:	f24e 213e 	movw	r1, #57918	; 0xe23e
 8001ff0:	4842      	ldr	r0, [pc, #264]	; (80020fc <MX_GPIO_Init+0x1dc>)
 8001ff2:	f001 fb7d 	bl	80036f0 <HAL_GPIO_WritePin>
                          |PSD2_SEL1_Pin|PSD2_SEL0_Pin|PSD1_AMP_CS_Pin|PSD2_AMP_CS_Pin
                          |EX_SPI_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PSD1_SEL1_GPIO_Port, PSD1_SEL1_Pin, GPIO_PIN_SET);
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	2101      	movs	r1, #1
 8001ffa:	4840      	ldr	r0, [pc, #256]	; (80020fc <MX_GPIO_Init+0x1dc>)
 8001ffc:	f001 fb78 	bl	80036f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EX_GPIO3_Pin|CS_RADFET_Pin|EX_GPIO4_Pin, GPIO_PIN_RESET);
 8002000:	2200      	movs	r2, #0
 8002002:	f44f 6183 	mov.w	r1, #1048	; 0x418
 8002006:	483e      	ldr	r0, [pc, #248]	; (8002100 <MX_GPIO_Init+0x1e0>)
 8002008:	f001 fb72 	bl	80036f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RSBY_KEEP_EN_Pin|EX_GPIO1_Pin|EX_GPIO2_Pin|WATCHDOG_Pin, GPIO_PIN_RESET);
 800200c:	2200      	movs	r2, #0
 800200e:	f241 0123 	movw	r1, #4131	; 0x1023
 8002012:	483c      	ldr	r0, [pc, #240]	; (8002104 <MX_GPIO_Init+0x1e4>)
 8002014:	f001 fb6c 	bl	80036f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CS_EEPROM_Pin|CS_FRAM_Pin|TMTC_MCU_WD_Pin|INT_GYRO_Pin
 8002018:	2200      	movs	r2, #0
 800201a:	f64f 419f 	movw	r1, #64671	; 0xfc9f
 800201e:	483a      	ldr	r0, [pc, #232]	; (8002108 <MX_GPIO_Init+0x1e8>)
 8002020:	f001 fb66 	bl	80036f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GPS_PWR_ON_Pin SBD_PWR_ON_Pin CS_NAND_Pin CS_LORA_Pin
                           RSBY_ON_Pin DIR_COIL_X_Pin DIR_COIL_Y_Pin DIR_COIL_Z_Pin
                           CS_GYRO_Pin EN_ADC1_Pin EN_ADC3_Pin EN_ADC2_Pin
                           SBD_SER_RI_Pin SBD_SER_NET_Pin ANA_PWR_ON_Pin RAD_PWR_ON_Pin */
  GPIO_InitStruct.Pin = GPS_PWR_ON_Pin|SBD_PWR_ON_Pin|CS_NAND_Pin|CS_LORA_Pin
 8002024:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002028:	61fb      	str	r3, [r7, #28]
                          |RSBY_ON_Pin|DIR_COIL_X_Pin|DIR_COIL_Y_Pin|DIR_COIL_Z_Pin
                          |CS_GYRO_Pin|EN_ADC1_Pin|EN_ADC3_Pin|EN_ADC2_Pin
                          |SBD_SER_RI_Pin|SBD_SER_NET_Pin|ANA_PWR_ON_Pin|RAD_PWR_ON_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800202a:	2301      	movs	r3, #1
 800202c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202e:	2300      	movs	r3, #0
 8002030:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002032:	2300      	movs	r3, #0
 8002034:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002036:	f107 031c 	add.w	r3, r7, #28
 800203a:	4619      	mov	r1, r3
 800203c:	482e      	ldr	r0, [pc, #184]	; (80020f8 <MX_GPIO_Init+0x1d8>)
 800203e:	f001 f9bd 	bl	80033bc <HAL_GPIO_Init>

  /*Configure GPIO pins : UHF_RESET_Pin RADFET_OWB_Pin RAD_RESET_Pin PSD1_SEL1_Pin
                           PSD1_SEL0_Pin PSD2_SEL1_Pin PSD2_SEL0_Pin PSD1_AMP_CS_Pin
                           PSD2_AMP_CS_Pin EX_SPI_EN_Pin */
  GPIO_InitStruct.Pin = UHF_RESET_Pin|RADFET_OWB_Pin|RAD_RESET_Pin|PSD1_SEL1_Pin
 8002042:	f24e 233f 	movw	r3, #57919	; 0xe23f
 8002046:	61fb      	str	r3, [r7, #28]
                          |PSD1_SEL0_Pin|PSD2_SEL1_Pin|PSD2_SEL0_Pin|PSD1_AMP_CS_Pin
                          |PSD2_AMP_CS_Pin|EX_SPI_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002048:	2301      	movs	r3, #1
 800204a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204c:	2300      	movs	r3, #0
 800204e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002050:	2300      	movs	r3, #0
 8002052:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002054:	f107 031c 	add.w	r3, r7, #28
 8002058:	4619      	mov	r1, r3
 800205a:	4828      	ldr	r0, [pc, #160]	; (80020fc <MX_GPIO_Init+0x1dc>)
 800205c:	f001 f9ae 	bl	80033bc <HAL_GPIO_Init>

  /*Configure GPIO pins : EX_GPIO3_Pin CS_RADFET_Pin EX_GPIO4_Pin */
  GPIO_InitStruct.Pin = EX_GPIO3_Pin|CS_RADFET_Pin|EX_GPIO4_Pin;
 8002060:	f44f 6383 	mov.w	r3, #1048	; 0x418
 8002064:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002066:	2301      	movs	r3, #1
 8002068:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206a:	2300      	movs	r3, #0
 800206c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800206e:	2300      	movs	r3, #0
 8002070:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002072:	f107 031c 	add.w	r3, r7, #28
 8002076:	4619      	mov	r1, r3
 8002078:	4821      	ldr	r0, [pc, #132]	; (8002100 <MX_GPIO_Init+0x1e0>)
 800207a:	f001 f99f 	bl	80033bc <HAL_GPIO_Init>

  /*Configure GPIO pins : RSBY_KEEP_EN_Pin EX_GPIO1_Pin EX_GPIO2_Pin WATCHDOG_Pin */
  GPIO_InitStruct.Pin = RSBY_KEEP_EN_Pin|EX_GPIO1_Pin|EX_GPIO2_Pin|WATCHDOG_Pin;
 800207e:	f241 0323 	movw	r3, #4131	; 0x1023
 8002082:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002084:	2301      	movs	r3, #1
 8002086:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002088:	2300      	movs	r3, #0
 800208a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800208c:	2300      	movs	r3, #0
 800208e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002090:	f107 031c 	add.w	r3, r7, #28
 8002094:	4619      	mov	r1, r3
 8002096:	481b      	ldr	r0, [pc, #108]	; (8002104 <MX_GPIO_Init+0x1e4>)
 8002098:	f001 f990 	bl	80033bc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800209c:	2304      	movs	r3, #4
 800209e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020a0:	2300      	movs	r3, #0
 80020a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a4:	2300      	movs	r3, #0
 80020a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80020a8:	f107 031c 	add.w	r3, r7, #28
 80020ac:	4619      	mov	r1, r3
 80020ae:	4815      	ldr	r0, [pc, #84]	; (8002104 <MX_GPIO_Init+0x1e4>)
 80020b0:	f001 f984 	bl	80033bc <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_EEPROM_Pin CS_FRAM_Pin TMTC_MCU_WD_Pin INT_GYRO_Pin
                           CS_GYRO2_Pin INT_GYRO2_Pin SBD_SER_DCD_Pin SBD_SER_DSR_Pin
                           SBD_SER_DTR_Pin SBD_SER_CTS_Pin SBD_SER_RTS_Pin SBD_ON_OFF_Pin */
  GPIO_InitStruct.Pin = CS_EEPROM_Pin|CS_FRAM_Pin|TMTC_MCU_WD_Pin|INT_GYRO_Pin
 80020b4:	f64f 439f 	movw	r3, #64671	; 0xfc9f
 80020b8:	61fb      	str	r3, [r7, #28]
                          |CS_GYRO2_Pin|INT_GYRO2_Pin|SBD_SER_DCD_Pin|SBD_SER_DSR_Pin
                          |SBD_SER_DTR_Pin|SBD_SER_CTS_Pin|SBD_SER_RTS_Pin|SBD_ON_OFF_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020ba:	2301      	movs	r3, #1
 80020bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020be:	2300      	movs	r3, #0
 80020c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c2:	2300      	movs	r3, #0
 80020c4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020c6:	f107 031c 	add.w	r3, r7, #28
 80020ca:	4619      	mov	r1, r3
 80020cc:	480e      	ldr	r0, [pc, #56]	; (8002108 <MX_GPIO_Init+0x1e8>)
 80020ce:	f001 f975 	bl	80033bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PGOOD_Pin */
  GPIO_InitStruct.Pin = PGOOD_Pin;
 80020d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020d8:	2300      	movs	r3, #0
 80020da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020dc:	2300      	movs	r3, #0
 80020de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PGOOD_GPIO_Port, &GPIO_InitStruct);
 80020e0:	f107 031c 	add.w	r3, r7, #28
 80020e4:	4619      	mov	r1, r3
 80020e6:	4806      	ldr	r0, [pc, #24]	; (8002100 <MX_GPIO_Init+0x1e0>)
 80020e8:	f001 f968 	bl	80033bc <HAL_GPIO_Init>

}
 80020ec:	bf00      	nop
 80020ee:	3730      	adds	r7, #48	; 0x30
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	40023800 	.word	0x40023800
 80020f8:	40021000 	.word	0x40021000
 80020fc:	40020800 	.word	0x40020800
 8002100:	40020000 	.word	0x40020000
 8002104:	40020400 	.word	0x40020400
 8002108:	40020c00 	.word	0x40020c00

0800210c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

// RX char from USART3 in Interrupt mode
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
	  RxData=TRUE;
 8002114:	4b12      	ldr	r3, [pc, #72]	; (8002160 <HAL_UART_RxCpltCallback+0x54>)
 8002116:	2201      	movs	r2, #1
 8002118:	601a      	str	r2, [r3, #0]
	  HAL_UART_Transmit(&huart3,  (uint8_t *) newline, sizeof(newline), 100);
 800211a:	2364      	movs	r3, #100	; 0x64
 800211c:	2204      	movs	r2, #4
 800211e:	4911      	ldr	r1, [pc, #68]	; (8002164 <HAL_UART_RxCpltCallback+0x58>)
 8002120:	4811      	ldr	r0, [pc, #68]	; (8002168 <HAL_UART_RxCpltCallback+0x5c>)
 8002122:	f004 fe76 	bl	8006e12 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart3,  (uint8_t *) " - I RECEIVED : ", 16 , 100);
 8002126:	2364      	movs	r3, #100	; 0x64
 8002128:	2210      	movs	r2, #16
 800212a:	4910      	ldr	r1, [pc, #64]	; (800216c <HAL_UART_RxCpltCallback+0x60>)
 800212c:	480e      	ldr	r0, [pc, #56]	; (8002168 <HAL_UART_RxCpltCallback+0x5c>)
 800212e:	f004 fe70 	bl	8006e12 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart3,  (uint8_t *) rx_buffer, sizeof(rx_buffer), 100);
 8002132:	2364      	movs	r3, #100	; 0x64
 8002134:	2202      	movs	r2, #2
 8002136:	490e      	ldr	r1, [pc, #56]	; (8002170 <HAL_UART_RxCpltCallback+0x64>)
 8002138:	480b      	ldr	r0, [pc, #44]	; (8002168 <HAL_UART_RxCpltCallback+0x5c>)
 800213a:	f004 fe6a 	bl	8006e12 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart3,  (uint8_t *) newline, sizeof(newline), 100);
 800213e:	2364      	movs	r3, #100	; 0x64
 8002140:	2204      	movs	r2, #4
 8002142:	4908      	ldr	r1, [pc, #32]	; (8002164 <HAL_UART_RxCpltCallback+0x58>)
 8002144:	4808      	ldr	r0, [pc, #32]	; (8002168 <HAL_UART_RxCpltCallback+0x5c>)
 8002146:	f004 fe64 	bl	8006e12 <HAL_UART_Transmit>

	 // if(huart2.Instance->RDR != 13) huart2.Instance->RDR = 13;

  // Restart USART in Rx in Interrupt mode
  HAL_UART_Receive_IT(&huart3, (uint8_t *)  rx_buffer, sizeof(rx_buffer));
 800214a:	2202      	movs	r2, #2
 800214c:	4908      	ldr	r1, [pc, #32]	; (8002170 <HAL_UART_RxCpltCallback+0x64>)
 800214e:	4806      	ldr	r0, [pc, #24]	; (8002168 <HAL_UART_RxCpltCallback+0x5c>)
 8002150:	f004 fef8 	bl	8006f44 <HAL_UART_Receive_IT>

  State_Updater();
 8002154:	f7ff f802 	bl	800115c <State_Updater>
}
 8002158:	bf00      	nop
 800215a:	3708      	adds	r7, #8
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	20000204 	.word	0x20000204
 8002164:	0800ecc4 	.word	0x0800ecc4
 8002168:	200051e8 	.word	0x200051e8
 800216c:	0800ec60 	.word	0x0800ec60
 8002170:	20004b24 	.word	0x20004b24

08002174 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b088      	sub	sp, #32
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	  if(0){   char StringBuffer[]= "== Sono Vivo == \n\r";
	  	  	  	  HAL_UART_Transmit(&huart3, (uint8_t *)  StringBuffer, sizeof(StringBuffer)-1, 100);
	  	  	  }
    osDelay(1000);
 800217c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002180:	f006 fb4a 	bl	8008818 <osDelay>
	  if(0){   char StringBuffer[]= "== Sono Vivo == \n\r";
 8002184:	e7fa      	b.n	800217c <StartDefaultTask+0x8>
	...

08002188 <Task01>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task01 */
void Task01(void *argument)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task01 */
  /* Infinite loop */
  for(;;)
  {
	 // BATTERY_PID_FUNCTION();
	  osDelay(100);
 8002190:	2064      	movs	r0, #100	; 0x64
 8002192:	f006 fb41 	bl	8008818 <osDelay>

	// FEES_Pin_Toggle('d',15);  	// CS_NAND - Led BLU ( D 5 )
	  int delayvar=100;
 8002196:	2364      	movs	r3, #100	; 0x64
 8002198:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_WritePin(WATCHDOG_GPIO_Port,WATCHDOG_Pin, 1);
 800219a:	2201      	movs	r2, #1
 800219c:	2120      	movs	r1, #32
 800219e:	4808      	ldr	r0, [pc, #32]	; (80021c0 <Task01+0x38>)
 80021a0:	f001 faa6 	bl	80036f0 <HAL_GPIO_WritePin>
	  osDelay(delayvar);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	4618      	mov	r0, r3
 80021a8:	f006 fb36 	bl	8008818 <osDelay>
	  HAL_GPIO_WritePin(WATCHDOG_GPIO_Port,WATCHDOG_Pin, 0);
 80021ac:	2200      	movs	r2, #0
 80021ae:	2120      	movs	r1, #32
 80021b0:	4803      	ldr	r0, [pc, #12]	; (80021c0 <Task01+0x38>)
 80021b2:	f001 fa9d 	bl	80036f0 <HAL_GPIO_WritePin>
	  osDelay(delayvar);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	4618      	mov	r0, r3
 80021ba:	f006 fb2d 	bl	8008818 <osDelay>
  {
 80021be:	e7e7      	b.n	8002190 <Task01+0x8>
 80021c0:	40020400 	.word	0x40020400

080021c4 <Task02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task02 */
void Task02(void *argument)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]

	  //HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);	// X-Coil PWM
	  //HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);	// Y-Coil PWM
	  //HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);	// Z-Coil PWM

	  osDelay(100);
 80021cc:	2064      	movs	r0, #100	; 0x64
 80021ce:	f006 fb23 	bl	8008818 <osDelay>
 80021d2:	e7fb      	b.n	80021cc <Task02+0x8>

080021d4 <Task03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task03 */
void Task03(void *argument)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN Task03 */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(1000);
 80021dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80021e0:	f006 fb1a 	bl	8008818 <osDelay>
 80021e4:	e7fa      	b.n	80021dc <Task03+0x8>
	...

080021e8 <Task04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task04 */
void Task04(void *argument)
{
 80021e8:	b5b0      	push	{r4, r5, r7, lr}
 80021ea:	b09e      	sub	sp, #120	; 0x78
 80021ec:	af02      	add	r7, sp, #8
 80021ee:	6078      	str	r0, [r7, #4]


	char cmd_send[2];
	char cmd_receive[2];

	float a=0;
 80021f0:	f04f 0300 	mov.w	r3, #0
 80021f4:	66bb      	str	r3, [r7, #104]	; 0x68

  /* USER CODE BEGIN Task04 */
  /* Infinite loop */
  for(;;)
  {
		cmd_send[0]= LM75B_Temp;
 80021f6:	2300      	movs	r3, #0
 80021f8:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
		cmd_send[1]= 0;
 80021fc:	2300      	movs	r3, #0
 80021fe:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61

		cmd_receive[0]=0;
 8002202:	2300      	movs	r3, #0
 8002204:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
		cmd_receive[1]=0;
 8002208:	2300      	movs	r3, #0
 800220a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

		HAL_I2C_Master_Transmit(&hi2c2,LM75B_ADDR<<1,cmd_send,2,100);
 800220e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002212:	2364      	movs	r3, #100	; 0x64
 8002214:	9300      	str	r3, [sp, #0]
 8002216:	2302      	movs	r3, #2
 8002218:	2190      	movs	r1, #144	; 0x90
 800221a:	482e      	ldr	r0, [pc, #184]	; (80022d4 <Task04+0xec>)
 800221c:	f001 fbd4 	bl	80039c8 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(	&hi2c2,LM75B_ADDR<<1,cmd_receive,2,100);
 8002220:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002224:	2364      	movs	r3, #100	; 0x64
 8002226:	9300      	str	r3, [sp, #0]
 8002228:	2302      	movs	r3, #2
 800222a:	2190      	movs	r1, #144	; 0x90
 800222c:	4829      	ldr	r0, [pc, #164]	; (80022d4 <Task04+0xec>)
 800222e:	f001 fcc9 	bl	8003bc4 <HAL_I2C_Master_Receive>

		uint16_t bufferint = (cmd_receive[1] | (cmd_receive[0]<<8))>>5;
 8002232:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8002236:	461a      	mov	r2, r3
 8002238:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800223c:	021b      	lsls	r3, r3, #8
 800223e:	4313      	orrs	r3, r2
 8002240:	115b      	asrs	r3, r3, #5
 8002242:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
		if (bufferint > 2048 ) bufferint = (bufferint & 1111111111) | 100000000000000 ;// Test senza 2^11 con 2^15  ( sposto l'1 in avanti)
 8002246:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800224a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800224e:	d90a      	bls.n	8002266 <Task04+0x7e>
 8002250:	f9b7 206e 	ldrsh.w	r2, [r7, #110]	; 0x6e
 8002254:	f243 53c7 	movw	r3, #13767	; 0x35c7
 8002258:	4013      	ands	r3, r2
 800225a:	b21b      	sxth	r3, r3
 800225c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002260:	b21b      	sxth	r3, r3
 8002262:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
		a = (float)bufferint * 0.125;
 8002266:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800226a:	ee07 3a90 	vmov	s15, r3
 800226e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002272:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8002276:	ee67 7a87 	vmul.f32	s15, s15, s14
 800227a:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
//		sprintf(buf,"Temperature: %d - %d \r\n" ,cmd_receive[0] , cmd_receive[1]); // %f  \n" ,a); //cmd_receive[0],(cmd_receive[1]/128)*5);
//		HAL_UART_Transmit( &huart3,buf,sizeof(buf),100);

		//strlen(Messaggio)

		char Messaggio[]= " - FEES SYSTEM TESTING - \n\r";
 800227e:	4b16      	ldr	r3, [pc, #88]	; (80022d8 <Task04+0xf0>)
 8002280:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8002284:	461d      	mov	r5, r3
 8002286:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002288:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800228a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800228e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		HAL_UART_Transmit( &huart3,Messaggio,15,100);
 8002292:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8002296:	2364      	movs	r3, #100	; 0x64
 8002298:	220f      	movs	r2, #15
 800229a:	4810      	ldr	r0, [pc, #64]	; (80022dc <Task04+0xf4>)
 800229c:	f004 fdb9 	bl	8006e12 <HAL_UART_Transmit>

		char buffer[50];
		int buffer_len = sprintf(buffer,"Temperatura :  %.3f \n\r\n\n" , a); // %f  \n" ,a); //cmd_receive[0],(cmd_receive[1]/128)*5);
 80022a0:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80022a2:	f7fe f951 	bl	8000548 <__aeabi_f2d>
 80022a6:	4603      	mov	r3, r0
 80022a8:	460c      	mov	r4, r1
 80022aa:	f107 000c 	add.w	r0, r7, #12
 80022ae:	461a      	mov	r2, r3
 80022b0:	4623      	mov	r3, r4
 80022b2:	490b      	ldr	r1, [pc, #44]	; (80022e0 <Task04+0xf8>)
 80022b4:	f009 fd68 	bl	800bd88 <siprintf>
 80022b8:	6678      	str	r0, [r7, #100]	; 0x64
		HAL_UART_Transmit( &huart3,buffer,buffer_len,100);
 80022ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80022bc:	b29a      	uxth	r2, r3
 80022be:	f107 010c 	add.w	r1, r7, #12
 80022c2:	2364      	movs	r3, #100	; 0x64
 80022c4:	4805      	ldr	r0, [pc, #20]	; (80022dc <Task04+0xf4>)
 80022c6:	f004 fda4 	bl	8006e12 <HAL_UART_Transmit>

		//HAL_UART_Transmit( &huart3,"\n", 2,100);


	// 00000000 // 00000000
	osDelay(100);
 80022ca:	2064      	movs	r0, #100	; 0x64
 80022cc:	f006 faa4 	bl	8008818 <osDelay>
  {
 80022d0:	e791      	b.n	80021f6 <Task04+0xe>
 80022d2:	bf00      	nop
 80022d4:	20005708 	.word	0x20005708
 80022d8:	0800ec90 	.word	0x0800ec90
 80022dc:	200051e8 	.word	0x200051e8
 80022e0:	0800ec74 	.word	0x0800ec74

080022e4 <Task05>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task05 */
void Task05(void *argument)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {

	  //FEES_Pin_Toggle('d',12, 20); 	// TMTC_WD
	  osDelay(50);
 80022ec:	2032      	movs	r0, #50	; 0x32
 80022ee:	f006 fa93 	bl	8008818 <osDelay>
 80022f2:	e7fb      	b.n	80022ec <Task05+0x8>

080022f4 <Task06>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task06 */
void Task06(void *argument)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b086      	sub	sp, #24
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
	for(;;)
	  {


		osDelay(100);
 80022fc:	2064      	movs	r0, #100	; 0x64
 80022fe:	f006 fa8b 	bl	8008818 <osDelay>
 8002302:	e7fb      	b.n	80022fc <Task06+0x8>

08002304 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a04      	ldr	r2, [pc, #16]	; (8002324 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d101      	bne.n	800231a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002316:	f000 fca9 	bl	8002c6c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800231a:	bf00      	nop
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	40001000 	.word	0x40001000

08002328 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800232c:	bf00      	nop
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
	...

08002338 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800233e:	2300      	movs	r3, #0
 8002340:	607b      	str	r3, [r7, #4]
 8002342:	4b10      	ldr	r3, [pc, #64]	; (8002384 <HAL_MspInit+0x4c>)
 8002344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002346:	4a0f      	ldr	r2, [pc, #60]	; (8002384 <HAL_MspInit+0x4c>)
 8002348:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800234c:	6453      	str	r3, [r2, #68]	; 0x44
 800234e:	4b0d      	ldr	r3, [pc, #52]	; (8002384 <HAL_MspInit+0x4c>)
 8002350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002352:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002356:	607b      	str	r3, [r7, #4]
 8002358:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800235a:	2300      	movs	r3, #0
 800235c:	603b      	str	r3, [r7, #0]
 800235e:	4b09      	ldr	r3, [pc, #36]	; (8002384 <HAL_MspInit+0x4c>)
 8002360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002362:	4a08      	ldr	r2, [pc, #32]	; (8002384 <HAL_MspInit+0x4c>)
 8002364:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002368:	6413      	str	r3, [r2, #64]	; 0x40
 800236a:	4b06      	ldr	r3, [pc, #24]	; (8002384 <HAL_MspInit+0x4c>)
 800236c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002372:	603b      	str	r3, [r7, #0]
 8002374:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002376:	bf00      	nop
 8002378:	370c      	adds	r7, #12
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	40023800 	.word	0x40023800

08002388 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a0b      	ldr	r2, [pc, #44]	; (80023c4 <HAL_ADC_MspInit+0x3c>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d10d      	bne.n	80023b6 <HAL_ADC_MspInit+0x2e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800239a:	2300      	movs	r3, #0
 800239c:	60fb      	str	r3, [r7, #12]
 800239e:	4b0a      	ldr	r3, [pc, #40]	; (80023c8 <HAL_ADC_MspInit+0x40>)
 80023a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a2:	4a09      	ldr	r2, [pc, #36]	; (80023c8 <HAL_ADC_MspInit+0x40>)
 80023a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023a8:	6453      	str	r3, [r2, #68]	; 0x44
 80023aa:	4b07      	ldr	r3, [pc, #28]	; (80023c8 <HAL_ADC_MspInit+0x40>)
 80023ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b2:	60fb      	str	r3, [r7, #12]
 80023b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80023b6:	bf00      	nop
 80023b8:	3714      	adds	r7, #20
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	40012000 	.word	0x40012000
 80023c8:	40023800 	.word	0x40023800

080023cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b08c      	sub	sp, #48	; 0x30
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d4:	f107 031c 	add.w	r3, r7, #28
 80023d8:	2200      	movs	r2, #0
 80023da:	601a      	str	r2, [r3, #0]
 80023dc:	605a      	str	r2, [r3, #4]
 80023de:	609a      	str	r2, [r3, #8]
 80023e0:	60da      	str	r2, [r3, #12]
 80023e2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a33      	ldr	r2, [pc, #204]	; (80024b8 <HAL_I2C_MspInit+0xec>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d12d      	bne.n	800244a <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ee:	2300      	movs	r3, #0
 80023f0:	61bb      	str	r3, [r7, #24]
 80023f2:	4b32      	ldr	r3, [pc, #200]	; (80024bc <HAL_I2C_MspInit+0xf0>)
 80023f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f6:	4a31      	ldr	r2, [pc, #196]	; (80024bc <HAL_I2C_MspInit+0xf0>)
 80023f8:	f043 0302 	orr.w	r3, r3, #2
 80023fc:	6313      	str	r3, [r2, #48]	; 0x30
 80023fe:	4b2f      	ldr	r3, [pc, #188]	; (80024bc <HAL_I2C_MspInit+0xf0>)
 8002400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	61bb      	str	r3, [r7, #24]
 8002408:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800240a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800240e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002410:	2312      	movs	r3, #18
 8002412:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002414:	2301      	movs	r3, #1
 8002416:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002418:	2303      	movs	r3, #3
 800241a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800241c:	2304      	movs	r3, #4
 800241e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002420:	f107 031c 	add.w	r3, r7, #28
 8002424:	4619      	mov	r1, r3
 8002426:	4826      	ldr	r0, [pc, #152]	; (80024c0 <HAL_I2C_MspInit+0xf4>)
 8002428:	f000 ffc8 	bl	80033bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800242c:	2300      	movs	r3, #0
 800242e:	617b      	str	r3, [r7, #20]
 8002430:	4b22      	ldr	r3, [pc, #136]	; (80024bc <HAL_I2C_MspInit+0xf0>)
 8002432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002434:	4a21      	ldr	r2, [pc, #132]	; (80024bc <HAL_I2C_MspInit+0xf0>)
 8002436:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800243a:	6413      	str	r3, [r2, #64]	; 0x40
 800243c:	4b1f      	ldr	r3, [pc, #124]	; (80024bc <HAL_I2C_MspInit+0xf0>)
 800243e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002440:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002444:	617b      	str	r3, [r7, #20]
 8002446:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002448:	e031      	b.n	80024ae <HAL_I2C_MspInit+0xe2>
  else if(hi2c->Instance==I2C2)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a1d      	ldr	r2, [pc, #116]	; (80024c4 <HAL_I2C_MspInit+0xf8>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d12c      	bne.n	80024ae <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002454:	2300      	movs	r3, #0
 8002456:	613b      	str	r3, [r7, #16]
 8002458:	4b18      	ldr	r3, [pc, #96]	; (80024bc <HAL_I2C_MspInit+0xf0>)
 800245a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245c:	4a17      	ldr	r2, [pc, #92]	; (80024bc <HAL_I2C_MspInit+0xf0>)
 800245e:	f043 0302 	orr.w	r3, r3, #2
 8002462:	6313      	str	r3, [r2, #48]	; 0x30
 8002464:	4b15      	ldr	r3, [pc, #84]	; (80024bc <HAL_I2C_MspInit+0xf0>)
 8002466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002468:	f003 0302 	and.w	r3, r3, #2
 800246c:	613b      	str	r3, [r7, #16]
 800246e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002470:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002474:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002476:	2312      	movs	r3, #18
 8002478:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800247a:	2301      	movs	r3, #1
 800247c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800247e:	2303      	movs	r3, #3
 8002480:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002482:	2304      	movs	r3, #4
 8002484:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002486:	f107 031c 	add.w	r3, r7, #28
 800248a:	4619      	mov	r1, r3
 800248c:	480c      	ldr	r0, [pc, #48]	; (80024c0 <HAL_I2C_MspInit+0xf4>)
 800248e:	f000 ff95 	bl	80033bc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002492:	2300      	movs	r3, #0
 8002494:	60fb      	str	r3, [r7, #12]
 8002496:	4b09      	ldr	r3, [pc, #36]	; (80024bc <HAL_I2C_MspInit+0xf0>)
 8002498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249a:	4a08      	ldr	r2, [pc, #32]	; (80024bc <HAL_I2C_MspInit+0xf0>)
 800249c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80024a0:	6413      	str	r3, [r2, #64]	; 0x40
 80024a2:	4b06      	ldr	r3, [pc, #24]	; (80024bc <HAL_I2C_MspInit+0xf0>)
 80024a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024aa:	60fb      	str	r3, [r7, #12]
 80024ac:	68fb      	ldr	r3, [r7, #12]
}
 80024ae:	bf00      	nop
 80024b0:	3730      	adds	r7, #48	; 0x30
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	40005400 	.word	0x40005400
 80024bc:	40023800 	.word	0x40023800
 80024c0:	40020400 	.word	0x40020400
 80024c4:	40005800 	.word	0x40005800

080024c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b08e      	sub	sp, #56	; 0x38
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024d4:	2200      	movs	r2, #0
 80024d6:	601a      	str	r2, [r3, #0]
 80024d8:	605a      	str	r2, [r3, #4]
 80024da:	609a      	str	r2, [r3, #8]
 80024dc:	60da      	str	r2, [r3, #12]
 80024de:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a4c      	ldr	r2, [pc, #304]	; (8002618 <HAL_SPI_MspInit+0x150>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d12c      	bne.n	8002544 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80024ea:	2300      	movs	r3, #0
 80024ec:	623b      	str	r3, [r7, #32]
 80024ee:	4b4b      	ldr	r3, [pc, #300]	; (800261c <HAL_SPI_MspInit+0x154>)
 80024f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f2:	4a4a      	ldr	r2, [pc, #296]	; (800261c <HAL_SPI_MspInit+0x154>)
 80024f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80024f8:	6453      	str	r3, [r2, #68]	; 0x44
 80024fa:	4b48      	ldr	r3, [pc, #288]	; (800261c <HAL_SPI_MspInit+0x154>)
 80024fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002502:	623b      	str	r3, [r7, #32]
 8002504:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002506:	2300      	movs	r3, #0
 8002508:	61fb      	str	r3, [r7, #28]
 800250a:	4b44      	ldr	r3, [pc, #272]	; (800261c <HAL_SPI_MspInit+0x154>)
 800250c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250e:	4a43      	ldr	r2, [pc, #268]	; (800261c <HAL_SPI_MspInit+0x154>)
 8002510:	f043 0301 	orr.w	r3, r3, #1
 8002514:	6313      	str	r3, [r2, #48]	; 0x30
 8002516:	4b41      	ldr	r3, [pc, #260]	; (800261c <HAL_SPI_MspInit+0x154>)
 8002518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	61fb      	str	r3, [r7, #28]
 8002520:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002522:	23e0      	movs	r3, #224	; 0xe0
 8002524:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002526:	2302      	movs	r3, #2
 8002528:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252a:	2300      	movs	r3, #0
 800252c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800252e:	2303      	movs	r3, #3
 8002530:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002532:	2305      	movs	r3, #5
 8002534:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002536:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800253a:	4619      	mov	r1, r3
 800253c:	4838      	ldr	r0, [pc, #224]	; (8002620 <HAL_SPI_MspInit+0x158>)
 800253e:	f000 ff3d 	bl	80033bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002542:	e064      	b.n	800260e <HAL_SPI_MspInit+0x146>
  else if(hspi->Instance==SPI2)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a36      	ldr	r2, [pc, #216]	; (8002624 <HAL_SPI_MspInit+0x15c>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d12d      	bne.n	80025aa <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800254e:	2300      	movs	r3, #0
 8002550:	61bb      	str	r3, [r7, #24]
 8002552:	4b32      	ldr	r3, [pc, #200]	; (800261c <HAL_SPI_MspInit+0x154>)
 8002554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002556:	4a31      	ldr	r2, [pc, #196]	; (800261c <HAL_SPI_MspInit+0x154>)
 8002558:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800255c:	6413      	str	r3, [r2, #64]	; 0x40
 800255e:	4b2f      	ldr	r3, [pc, #188]	; (800261c <HAL_SPI_MspInit+0x154>)
 8002560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002562:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002566:	61bb      	str	r3, [r7, #24]
 8002568:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800256a:	2300      	movs	r3, #0
 800256c:	617b      	str	r3, [r7, #20]
 800256e:	4b2b      	ldr	r3, [pc, #172]	; (800261c <HAL_SPI_MspInit+0x154>)
 8002570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002572:	4a2a      	ldr	r2, [pc, #168]	; (800261c <HAL_SPI_MspInit+0x154>)
 8002574:	f043 0302 	orr.w	r3, r3, #2
 8002578:	6313      	str	r3, [r2, #48]	; 0x30
 800257a:	4b28      	ldr	r3, [pc, #160]	; (800261c <HAL_SPI_MspInit+0x154>)
 800257c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	617b      	str	r3, [r7, #20]
 8002584:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002586:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800258a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800258c:	2302      	movs	r3, #2
 800258e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002590:	2300      	movs	r3, #0
 8002592:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002594:	2303      	movs	r3, #3
 8002596:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002598:	2305      	movs	r3, #5
 800259a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800259c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025a0:	4619      	mov	r1, r3
 80025a2:	4821      	ldr	r0, [pc, #132]	; (8002628 <HAL_SPI_MspInit+0x160>)
 80025a4:	f000 ff0a 	bl	80033bc <HAL_GPIO_Init>
}
 80025a8:	e031      	b.n	800260e <HAL_SPI_MspInit+0x146>
  else if(hspi->Instance==SPI3)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a1f      	ldr	r2, [pc, #124]	; (800262c <HAL_SPI_MspInit+0x164>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d12c      	bne.n	800260e <HAL_SPI_MspInit+0x146>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80025b4:	2300      	movs	r3, #0
 80025b6:	613b      	str	r3, [r7, #16]
 80025b8:	4b18      	ldr	r3, [pc, #96]	; (800261c <HAL_SPI_MspInit+0x154>)
 80025ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025bc:	4a17      	ldr	r2, [pc, #92]	; (800261c <HAL_SPI_MspInit+0x154>)
 80025be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025c2:	6413      	str	r3, [r2, #64]	; 0x40
 80025c4:	4b15      	ldr	r3, [pc, #84]	; (800261c <HAL_SPI_MspInit+0x154>)
 80025c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025cc:	613b      	str	r3, [r7, #16]
 80025ce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025d0:	2300      	movs	r3, #0
 80025d2:	60fb      	str	r3, [r7, #12]
 80025d4:	4b11      	ldr	r3, [pc, #68]	; (800261c <HAL_SPI_MspInit+0x154>)
 80025d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d8:	4a10      	ldr	r2, [pc, #64]	; (800261c <HAL_SPI_MspInit+0x154>)
 80025da:	f043 0304 	orr.w	r3, r3, #4
 80025de:	6313      	str	r3, [r2, #48]	; 0x30
 80025e0:	4b0e      	ldr	r3, [pc, #56]	; (800261c <HAL_SPI_MspInit+0x154>)
 80025e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e4:	f003 0304 	and.w	r3, r3, #4
 80025e8:	60fb      	str	r3, [r7, #12]
 80025ea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80025ec:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80025f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f2:	2302      	movs	r3, #2
 80025f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f6:	2300      	movs	r3, #0
 80025f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025fa:	2303      	movs	r3, #3
 80025fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80025fe:	2306      	movs	r3, #6
 8002600:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002602:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002606:	4619      	mov	r1, r3
 8002608:	4809      	ldr	r0, [pc, #36]	; (8002630 <HAL_SPI_MspInit+0x168>)
 800260a:	f000 fed7 	bl	80033bc <HAL_GPIO_Init>
}
 800260e:	bf00      	nop
 8002610:	3738      	adds	r7, #56	; 0x38
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	40013000 	.word	0x40013000
 800261c:	40023800 	.word	0x40023800
 8002620:	40020000 	.word	0x40020000
 8002624:	40003800 	.word	0x40003800
 8002628:	40020400 	.word	0x40020400
 800262c:	40003c00 	.word	0x40003c00
 8002630:	40020800 	.word	0x40020800

08002634 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002634:	b480      	push	{r7}
 8002636:	b085      	sub	sp, #20
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002644:	d10d      	bne.n	8002662 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002646:	2300      	movs	r3, #0
 8002648:	60fb      	str	r3, [r7, #12]
 800264a:	4b09      	ldr	r3, [pc, #36]	; (8002670 <HAL_TIM_Base_MspInit+0x3c>)
 800264c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264e:	4a08      	ldr	r2, [pc, #32]	; (8002670 <HAL_TIM_Base_MspInit+0x3c>)
 8002650:	f043 0301 	orr.w	r3, r3, #1
 8002654:	6413      	str	r3, [r2, #64]	; 0x40
 8002656:	4b06      	ldr	r3, [pc, #24]	; (8002670 <HAL_TIM_Base_MspInit+0x3c>)
 8002658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265a:	f003 0301 	and.w	r3, r3, #1
 800265e:	60fb      	str	r3, [r7, #12]
 8002660:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002662:	bf00      	nop
 8002664:	3714      	adds	r7, #20
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	40023800 	.word	0x40023800

08002674 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002674:	b480      	push	{r7}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a0b      	ldr	r2, [pc, #44]	; (80026b0 <HAL_TIM_PWM_MspInit+0x3c>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d10d      	bne.n	80026a2 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002686:	2300      	movs	r3, #0
 8002688:	60fb      	str	r3, [r7, #12]
 800268a:	4b0a      	ldr	r3, [pc, #40]	; (80026b4 <HAL_TIM_PWM_MspInit+0x40>)
 800268c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268e:	4a09      	ldr	r2, [pc, #36]	; (80026b4 <HAL_TIM_PWM_MspInit+0x40>)
 8002690:	f043 0302 	orr.w	r3, r3, #2
 8002694:	6413      	str	r3, [r2, #64]	; 0x40
 8002696:	4b07      	ldr	r3, [pc, #28]	; (80026b4 <HAL_TIM_PWM_MspInit+0x40>)
 8002698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269a:	f003 0302 	and.w	r3, r3, #2
 800269e:	60fb      	str	r3, [r7, #12]
 80026a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80026a2:	bf00      	nop
 80026a4:	3714      	adds	r7, #20
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	40000400 	.word	0x40000400
 80026b4:	40023800 	.word	0x40023800

080026b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b08a      	sub	sp, #40	; 0x28
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026c0:	f107 0314 	add.w	r3, r7, #20
 80026c4:	2200      	movs	r2, #0
 80026c6:	601a      	str	r2, [r3, #0]
 80026c8:	605a      	str	r2, [r3, #4]
 80026ca:	609a      	str	r2, [r3, #8]
 80026cc:	60da      	str	r2, [r3, #12]
 80026ce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026d8:	d11e      	bne.n	8002718 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026da:	2300      	movs	r3, #0
 80026dc:	613b      	str	r3, [r7, #16]
 80026de:	4b22      	ldr	r3, [pc, #136]	; (8002768 <HAL_TIM_MspPostInit+0xb0>)
 80026e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e2:	4a21      	ldr	r2, [pc, #132]	; (8002768 <HAL_TIM_MspPostInit+0xb0>)
 80026e4:	f043 0301 	orr.w	r3, r3, #1
 80026e8:	6313      	str	r3, [r2, #48]	; 0x30
 80026ea:	4b1f      	ldr	r3, [pc, #124]	; (8002768 <HAL_TIM_MspPostInit+0xb0>)
 80026ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ee:	f003 0301 	and.w	r3, r3, #1
 80026f2:	613b      	str	r3, [r7, #16]
 80026f4:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|PWM_Y_COIL_Pin|PWM_Z_COIL_Pin;
 80026f6:	2307      	movs	r3, #7
 80026f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026fa:	2302      	movs	r3, #2
 80026fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fe:	2300      	movs	r3, #0
 8002700:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002702:	2300      	movs	r3, #0
 8002704:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002706:	2301      	movs	r3, #1
 8002708:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800270a:	f107 0314 	add.w	r3, r7, #20
 800270e:	4619      	mov	r1, r3
 8002710:	4816      	ldr	r0, [pc, #88]	; (800276c <HAL_TIM_MspPostInit+0xb4>)
 8002712:	f000 fe53 	bl	80033bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002716:	e023      	b.n	8002760 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a14      	ldr	r2, [pc, #80]	; (8002770 <HAL_TIM_MspPostInit+0xb8>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d11e      	bne.n	8002760 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002722:	2300      	movs	r3, #0
 8002724:	60fb      	str	r3, [r7, #12]
 8002726:	4b10      	ldr	r3, [pc, #64]	; (8002768 <HAL_TIM_MspPostInit+0xb0>)
 8002728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272a:	4a0f      	ldr	r2, [pc, #60]	; (8002768 <HAL_TIM_MspPostInit+0xb0>)
 800272c:	f043 0304 	orr.w	r3, r3, #4
 8002730:	6313      	str	r3, [r2, #48]	; 0x30
 8002732:	4b0d      	ldr	r3, [pc, #52]	; (8002768 <HAL_TIM_MspPostInit+0xb0>)
 8002734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002736:	f003 0304 	and.w	r3, r3, #4
 800273a:	60fb      	str	r3, [r7, #12]
 800273c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_HEATER_Pin;
 800273e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002742:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002744:	2302      	movs	r3, #2
 8002746:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002748:	2300      	movs	r3, #0
 800274a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800274c:	2300      	movs	r3, #0
 800274e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002750:	2302      	movs	r3, #2
 8002752:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_HEATER_GPIO_Port, &GPIO_InitStruct);
 8002754:	f107 0314 	add.w	r3, r7, #20
 8002758:	4619      	mov	r1, r3
 800275a:	4806      	ldr	r0, [pc, #24]	; (8002774 <HAL_TIM_MspPostInit+0xbc>)
 800275c:	f000 fe2e 	bl	80033bc <HAL_GPIO_Init>
}
 8002760:	bf00      	nop
 8002762:	3728      	adds	r7, #40	; 0x28
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	40023800 	.word	0x40023800
 800276c:	40020000 	.word	0x40020000
 8002770:	40000400 	.word	0x40000400
 8002774:	40020800 	.word	0x40020800

08002778 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b090      	sub	sp, #64	; 0x40
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002780:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002784:	2200      	movs	r2, #0
 8002786:	601a      	str	r2, [r3, #0]
 8002788:	605a      	str	r2, [r3, #4]
 800278a:	609a      	str	r2, [r3, #8]
 800278c:	60da      	str	r2, [r3, #12]
 800278e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a68      	ldr	r2, [pc, #416]	; (8002938 <HAL_UART_MspInit+0x1c0>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d12c      	bne.n	80027f4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800279a:	2300      	movs	r3, #0
 800279c:	62bb      	str	r3, [r7, #40]	; 0x28
 800279e:	4b67      	ldr	r3, [pc, #412]	; (800293c <HAL_UART_MspInit+0x1c4>)
 80027a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a2:	4a66      	ldr	r2, [pc, #408]	; (800293c <HAL_UART_MspInit+0x1c4>)
 80027a4:	f043 0310 	orr.w	r3, r3, #16
 80027a8:	6453      	str	r3, [r2, #68]	; 0x44
 80027aa:	4b64      	ldr	r3, [pc, #400]	; (800293c <HAL_UART_MspInit+0x1c4>)
 80027ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ae:	f003 0310 	and.w	r3, r3, #16
 80027b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80027b4:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027b6:	2300      	movs	r3, #0
 80027b8:	627b      	str	r3, [r7, #36]	; 0x24
 80027ba:	4b60      	ldr	r3, [pc, #384]	; (800293c <HAL_UART_MspInit+0x1c4>)
 80027bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027be:	4a5f      	ldr	r2, [pc, #380]	; (800293c <HAL_UART_MspInit+0x1c4>)
 80027c0:	f043 0302 	orr.w	r3, r3, #2
 80027c4:	6313      	str	r3, [r2, #48]	; 0x30
 80027c6:	4b5d      	ldr	r3, [pc, #372]	; (800293c <HAL_UART_MspInit+0x1c4>)
 80027c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ca:	f003 0302 	and.w	r3, r3, #2
 80027ce:	627b      	str	r3, [r7, #36]	; 0x24
 80027d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80027d2:	23c0      	movs	r3, #192	; 0xc0
 80027d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d6:	2302      	movs	r3, #2
 80027d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027da:	2300      	movs	r3, #0
 80027dc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027de:	2303      	movs	r3, #3
 80027e0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80027e2:	2307      	movs	r3, #7
 80027e4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027ea:	4619      	mov	r1, r3
 80027ec:	4854      	ldr	r0, [pc, #336]	; (8002940 <HAL_UART_MspInit+0x1c8>)
 80027ee:	f000 fde5 	bl	80033bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80027f2:	e09d      	b.n	8002930 <HAL_UART_MspInit+0x1b8>
  else if(huart->Instance==USART2)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a52      	ldr	r2, [pc, #328]	; (8002944 <HAL_UART_MspInit+0x1cc>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d12c      	bne.n	8002858 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80027fe:	2300      	movs	r3, #0
 8002800:	623b      	str	r3, [r7, #32]
 8002802:	4b4e      	ldr	r3, [pc, #312]	; (800293c <HAL_UART_MspInit+0x1c4>)
 8002804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002806:	4a4d      	ldr	r2, [pc, #308]	; (800293c <HAL_UART_MspInit+0x1c4>)
 8002808:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800280c:	6413      	str	r3, [r2, #64]	; 0x40
 800280e:	4b4b      	ldr	r3, [pc, #300]	; (800293c <HAL_UART_MspInit+0x1c4>)
 8002810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002816:	623b      	str	r3, [r7, #32]
 8002818:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800281a:	2300      	movs	r3, #0
 800281c:	61fb      	str	r3, [r7, #28]
 800281e:	4b47      	ldr	r3, [pc, #284]	; (800293c <HAL_UART_MspInit+0x1c4>)
 8002820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002822:	4a46      	ldr	r2, [pc, #280]	; (800293c <HAL_UART_MspInit+0x1c4>)
 8002824:	f043 0308 	orr.w	r3, r3, #8
 8002828:	6313      	str	r3, [r2, #48]	; 0x30
 800282a:	4b44      	ldr	r3, [pc, #272]	; (800293c <HAL_UART_MspInit+0x1c4>)
 800282c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282e:	f003 0308 	and.w	r3, r3, #8
 8002832:	61fb      	str	r3, [r7, #28]
 8002834:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002836:	2360      	movs	r3, #96	; 0x60
 8002838:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800283a:	2302      	movs	r3, #2
 800283c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800283e:	2300      	movs	r3, #0
 8002840:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002842:	2303      	movs	r3, #3
 8002844:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002846:	2307      	movs	r3, #7
 8002848:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800284a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800284e:	4619      	mov	r1, r3
 8002850:	483d      	ldr	r0, [pc, #244]	; (8002948 <HAL_UART_MspInit+0x1d0>)
 8002852:	f000 fdb3 	bl	80033bc <HAL_GPIO_Init>
}
 8002856:	e06b      	b.n	8002930 <HAL_UART_MspInit+0x1b8>
  else if(huart->Instance==USART3)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a3b      	ldr	r2, [pc, #236]	; (800294c <HAL_UART_MspInit+0x1d4>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d135      	bne.n	80028ce <HAL_UART_MspInit+0x156>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002862:	2300      	movs	r3, #0
 8002864:	61bb      	str	r3, [r7, #24]
 8002866:	4b35      	ldr	r3, [pc, #212]	; (800293c <HAL_UART_MspInit+0x1c4>)
 8002868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286a:	4a34      	ldr	r2, [pc, #208]	; (800293c <HAL_UART_MspInit+0x1c4>)
 800286c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002870:	6413      	str	r3, [r2, #64]	; 0x40
 8002872:	4b32      	ldr	r3, [pc, #200]	; (800293c <HAL_UART_MspInit+0x1c4>)
 8002874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002876:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800287a:	61bb      	str	r3, [r7, #24]
 800287c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800287e:	2300      	movs	r3, #0
 8002880:	617b      	str	r3, [r7, #20]
 8002882:	4b2e      	ldr	r3, [pc, #184]	; (800293c <HAL_UART_MspInit+0x1c4>)
 8002884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002886:	4a2d      	ldr	r2, [pc, #180]	; (800293c <HAL_UART_MspInit+0x1c4>)
 8002888:	f043 0308 	orr.w	r3, r3, #8
 800288c:	6313      	str	r3, [r2, #48]	; 0x30
 800288e:	4b2b      	ldr	r3, [pc, #172]	; (800293c <HAL_UART_MspInit+0x1c4>)
 8002890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002892:	f003 0308 	and.w	r3, r3, #8
 8002896:	617b      	str	r3, [r7, #20]
 8002898:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800289a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800289e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a0:	2302      	movs	r3, #2
 80028a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a4:	2300      	movs	r3, #0
 80028a6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028a8:	2303      	movs	r3, #3
 80028aa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80028ac:	2307      	movs	r3, #7
 80028ae:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028b4:	4619      	mov	r1, r3
 80028b6:	4824      	ldr	r0, [pc, #144]	; (8002948 <HAL_UART_MspInit+0x1d0>)
 80028b8:	f000 fd80 	bl	80033bc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80028bc:	2200      	movs	r2, #0
 80028be:	2100      	movs	r1, #0
 80028c0:	2027      	movs	r0, #39	; 0x27
 80028c2:	f000 fd2f 	bl	8003324 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80028c6:	2027      	movs	r0, #39	; 0x27
 80028c8:	f000 fd48 	bl	800335c <HAL_NVIC_EnableIRQ>
}
 80028cc:	e030      	b.n	8002930 <HAL_UART_MspInit+0x1b8>
  else if(huart->Instance==USART6)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a1f      	ldr	r2, [pc, #124]	; (8002950 <HAL_UART_MspInit+0x1d8>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d12b      	bne.n	8002930 <HAL_UART_MspInit+0x1b8>
    __HAL_RCC_USART6_CLK_ENABLE();
 80028d8:	2300      	movs	r3, #0
 80028da:	613b      	str	r3, [r7, #16]
 80028dc:	4b17      	ldr	r3, [pc, #92]	; (800293c <HAL_UART_MspInit+0x1c4>)
 80028de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e0:	4a16      	ldr	r2, [pc, #88]	; (800293c <HAL_UART_MspInit+0x1c4>)
 80028e2:	f043 0320 	orr.w	r3, r3, #32
 80028e6:	6453      	str	r3, [r2, #68]	; 0x44
 80028e8:	4b14      	ldr	r3, [pc, #80]	; (800293c <HAL_UART_MspInit+0x1c4>)
 80028ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ec:	f003 0320 	and.w	r3, r3, #32
 80028f0:	613b      	str	r3, [r7, #16]
 80028f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028f4:	2300      	movs	r3, #0
 80028f6:	60fb      	str	r3, [r7, #12]
 80028f8:	4b10      	ldr	r3, [pc, #64]	; (800293c <HAL_UART_MspInit+0x1c4>)
 80028fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fc:	4a0f      	ldr	r2, [pc, #60]	; (800293c <HAL_UART_MspInit+0x1c4>)
 80028fe:	f043 0304 	orr.w	r3, r3, #4
 8002902:	6313      	str	r3, [r2, #48]	; 0x30
 8002904:	4b0d      	ldr	r3, [pc, #52]	; (800293c <HAL_UART_MspInit+0x1c4>)
 8002906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002908:	f003 0304 	and.w	r3, r3, #4
 800290c:	60fb      	str	r3, [r7, #12]
 800290e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002910:	23c0      	movs	r3, #192	; 0xc0
 8002912:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002914:	2302      	movs	r3, #2
 8002916:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002918:	2300      	movs	r3, #0
 800291a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800291c:	2303      	movs	r3, #3
 800291e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002920:	2308      	movs	r3, #8
 8002922:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002924:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002928:	4619      	mov	r1, r3
 800292a:	480a      	ldr	r0, [pc, #40]	; (8002954 <HAL_UART_MspInit+0x1dc>)
 800292c:	f000 fd46 	bl	80033bc <HAL_GPIO_Init>
}
 8002930:	bf00      	nop
 8002932:	3740      	adds	r7, #64	; 0x40
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	40011000 	.word	0x40011000
 800293c:	40023800 	.word	0x40023800
 8002940:	40020400 	.word	0x40020400
 8002944:	40004400 	.word	0x40004400
 8002948:	40020c00 	.word	0x40020c00
 800294c:	40004800 	.word	0x40004800
 8002950:	40011400 	.word	0x40011400
 8002954:	40020800 	.word	0x40020800

08002958 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b08a      	sub	sp, #40	; 0x28
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002960:	f107 0314 	add.w	r3, r7, #20
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	605a      	str	r2, [r3, #4]
 800296a:	609a      	str	r2, [r3, #8]
 800296c:	60da      	str	r2, [r3, #12]
 800296e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002978:	d147      	bne.n	8002a0a <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800297a:	2300      	movs	r3, #0
 800297c:	613b      	str	r3, [r7, #16]
 800297e:	4b25      	ldr	r3, [pc, #148]	; (8002a14 <HAL_PCD_MspInit+0xbc>)
 8002980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002982:	4a24      	ldr	r2, [pc, #144]	; (8002a14 <HAL_PCD_MspInit+0xbc>)
 8002984:	f043 0301 	orr.w	r3, r3, #1
 8002988:	6313      	str	r3, [r2, #48]	; 0x30
 800298a:	4b22      	ldr	r3, [pc, #136]	; (8002a14 <HAL_PCD_MspInit+0xbc>)
 800298c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298e:	f003 0301 	and.w	r3, r3, #1
 8002992:	613b      	str	r3, [r7, #16]
 8002994:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002996:	f44f 7300 	mov.w	r3, #512	; 0x200
 800299a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800299c:	2300      	movs	r3, #0
 800299e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a0:	2300      	movs	r3, #0
 80029a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029a4:	f107 0314 	add.w	r3, r7, #20
 80029a8:	4619      	mov	r1, r3
 80029aa:	481b      	ldr	r0, [pc, #108]	; (8002a18 <HAL_PCD_MspInit+0xc0>)
 80029ac:	f000 fd06 	bl	80033bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80029b0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80029b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b6:	2302      	movs	r3, #2
 80029b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ba:	2300      	movs	r3, #0
 80029bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029be:	2300      	movs	r3, #0
 80029c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80029c2:	230a      	movs	r3, #10
 80029c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029c6:	f107 0314 	add.w	r3, r7, #20
 80029ca:	4619      	mov	r1, r3
 80029cc:	4812      	ldr	r0, [pc, #72]	; (8002a18 <HAL_PCD_MspInit+0xc0>)
 80029ce:	f000 fcf5 	bl	80033bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80029d2:	4b10      	ldr	r3, [pc, #64]	; (8002a14 <HAL_PCD_MspInit+0xbc>)
 80029d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029d6:	4a0f      	ldr	r2, [pc, #60]	; (8002a14 <HAL_PCD_MspInit+0xbc>)
 80029d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029dc:	6353      	str	r3, [r2, #52]	; 0x34
 80029de:	2300      	movs	r3, #0
 80029e0:	60fb      	str	r3, [r7, #12]
 80029e2:	4b0c      	ldr	r3, [pc, #48]	; (8002a14 <HAL_PCD_MspInit+0xbc>)
 80029e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e6:	4a0b      	ldr	r2, [pc, #44]	; (8002a14 <HAL_PCD_MspInit+0xbc>)
 80029e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029ec:	6453      	str	r3, [r2, #68]	; 0x44
 80029ee:	4b09      	ldr	r3, [pc, #36]	; (8002a14 <HAL_PCD_MspInit+0xbc>)
 80029f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029f6:	60fb      	str	r3, [r7, #12]
 80029f8:	68fb      	ldr	r3, [r7, #12]
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80029fa:	2200      	movs	r2, #0
 80029fc:	2100      	movs	r1, #0
 80029fe:	2043      	movs	r0, #67	; 0x43
 8002a00:	f000 fc90 	bl	8003324 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8002a04:	2043      	movs	r0, #67	; 0x43
 8002a06:	f000 fca9 	bl	800335c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002a0a:	bf00      	nop
 8002a0c:	3728      	adds	r7, #40	; 0x28
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	40023800 	.word	0x40023800
 8002a18:	40020000 	.word	0x40020000

08002a1c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b08c      	sub	sp, #48	; 0x30
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002a24:	2300      	movs	r3, #0
 8002a26:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	6879      	ldr	r1, [r7, #4]
 8002a30:	2036      	movs	r0, #54	; 0x36
 8002a32:	f000 fc77 	bl	8003324 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002a36:	2036      	movs	r0, #54	; 0x36
 8002a38:	f000 fc90 	bl	800335c <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	60fb      	str	r3, [r7, #12]
 8002a40:	4b1e      	ldr	r3, [pc, #120]	; (8002abc <HAL_InitTick+0xa0>)
 8002a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a44:	4a1d      	ldr	r2, [pc, #116]	; (8002abc <HAL_InitTick+0xa0>)
 8002a46:	f043 0310 	orr.w	r3, r3, #16
 8002a4a:	6413      	str	r3, [r2, #64]	; 0x40
 8002a4c:	4b1b      	ldr	r3, [pc, #108]	; (8002abc <HAL_InitTick+0xa0>)
 8002a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a50:	f003 0310 	and.w	r3, r3, #16
 8002a54:	60fb      	str	r3, [r7, #12]
 8002a56:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002a58:	f107 0210 	add.w	r2, r7, #16
 8002a5c:	f107 0314 	add.w	r3, r7, #20
 8002a60:	4611      	mov	r1, r2
 8002a62:	4618      	mov	r0, r3
 8002a64:	f003 f994 	bl	8005d90 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002a68:	f003 f96a 	bl	8005d40 <HAL_RCC_GetPCLK1Freq>
 8002a6c:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a70:	4a13      	ldr	r2, [pc, #76]	; (8002ac0 <HAL_InitTick+0xa4>)
 8002a72:	fba2 2303 	umull	r2, r3, r2, r3
 8002a76:	0c9b      	lsrs	r3, r3, #18
 8002a78:	3b01      	subs	r3, #1
 8002a7a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002a7c:	4b11      	ldr	r3, [pc, #68]	; (8002ac4 <HAL_InitTick+0xa8>)
 8002a7e:	4a12      	ldr	r2, [pc, #72]	; (8002ac8 <HAL_InitTick+0xac>)
 8002a80:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8002a82:	4b10      	ldr	r3, [pc, #64]	; (8002ac4 <HAL_InitTick+0xa8>)
 8002a84:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002a88:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002a8a:	4a0e      	ldr	r2, [pc, #56]	; (8002ac4 <HAL_InitTick+0xa8>)
 8002a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a8e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002a90:	4b0c      	ldr	r3, [pc, #48]	; (8002ac4 <HAL_InitTick+0xa8>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a96:	4b0b      	ldr	r3, [pc, #44]	; (8002ac4 <HAL_InitTick+0xa8>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002a9c:	4809      	ldr	r0, [pc, #36]	; (8002ac4 <HAL_InitTick+0xa8>)
 8002a9e:	f003 fa0d 	bl	8005ebc <HAL_TIM_Base_Init>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d104      	bne.n	8002ab2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002aa8:	4806      	ldr	r0, [pc, #24]	; (8002ac4 <HAL_InitTick+0xa8>)
 8002aaa:	f003 fa32 	bl	8005f12 <HAL_TIM_Base_Start_IT>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	e000      	b.n	8002ab4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3730      	adds	r7, #48	; 0x30
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	40023800 	.word	0x40023800
 8002ac0:	431bde83 	.word	0x431bde83
 8002ac4:	20006380 	.word	0x20006380
 8002ac8:	40001000 	.word	0x40001000

08002acc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002ad0:	bf00      	nop
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr

08002ada <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ada:	b480      	push	{r7}
 8002adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ade:	e7fe      	b.n	8002ade <HardFault_Handler+0x4>

08002ae0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ae4:	e7fe      	b.n	8002ae4 <MemManage_Handler+0x4>

08002ae6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ae6:	b480      	push	{r7}
 8002ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002aea:	e7fe      	b.n	8002aea <BusFault_Handler+0x4>

08002aec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002af0:	e7fe      	b.n	8002af0 <UsageFault_Handler+0x4>

08002af2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002af2:	b480      	push	{r7}
 8002af4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002af6:	bf00      	nop
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr

08002b00 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002b04:	4802      	ldr	r0, [pc, #8]	; (8002b10 <USART3_IRQHandler+0x10>)
 8002b06:	f004 fa73 	bl	8006ff0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002b0a:	bf00      	nop
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	200051e8 	.word	0x200051e8

08002b14 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002b18:	4802      	ldr	r0, [pc, #8]	; (8002b24 <TIM6_DAC_IRQHandler+0x10>)
 8002b1a:	f003 fadf 	bl	80060dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002b1e:	bf00      	nop
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	20006380 	.word	0x20006380

08002b28 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002b2c:	4802      	ldr	r0, [pc, #8]	; (8002b38 <OTG_FS_IRQHandler+0x10>)
 8002b2e:	f001 feb9 	bl	80048a4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002b32:	bf00      	nop
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	20005294 	.word	0x20005294

08002b3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b086      	sub	sp, #24
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b44:	4a14      	ldr	r2, [pc, #80]	; (8002b98 <_sbrk+0x5c>)
 8002b46:	4b15      	ldr	r3, [pc, #84]	; (8002b9c <_sbrk+0x60>)
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b50:	4b13      	ldr	r3, [pc, #76]	; (8002ba0 <_sbrk+0x64>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d102      	bne.n	8002b5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b58:	4b11      	ldr	r3, [pc, #68]	; (8002ba0 <_sbrk+0x64>)
 8002b5a:	4a12      	ldr	r2, [pc, #72]	; (8002ba4 <_sbrk+0x68>)
 8002b5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b5e:	4b10      	ldr	r3, [pc, #64]	; (8002ba0 <_sbrk+0x64>)
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4413      	add	r3, r2
 8002b66:	693a      	ldr	r2, [r7, #16]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d207      	bcs.n	8002b7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b6c:	f008 fa8a 	bl	800b084 <__errno>
 8002b70:	4602      	mov	r2, r0
 8002b72:	230c      	movs	r3, #12
 8002b74:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002b76:	f04f 33ff 	mov.w	r3, #4294967295
 8002b7a:	e009      	b.n	8002b90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b7c:	4b08      	ldr	r3, [pc, #32]	; (8002ba0 <_sbrk+0x64>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b82:	4b07      	ldr	r3, [pc, #28]	; (8002ba0 <_sbrk+0x64>)
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4413      	add	r3, r2
 8002b8a:	4a05      	ldr	r2, [pc, #20]	; (8002ba0 <_sbrk+0x64>)
 8002b8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3718      	adds	r7, #24
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	20020000 	.word	0x20020000
 8002b9c:	00000400 	.word	0x00000400
 8002ba0:	20000208 	.word	0x20000208
 8002ba4:	20006408 	.word	0x20006408

08002ba8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002bac:	4b08      	ldr	r3, [pc, #32]	; (8002bd0 <SystemInit+0x28>)
 8002bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bb2:	4a07      	ldr	r2, [pc, #28]	; (8002bd0 <SystemInit+0x28>)
 8002bb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002bb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002bbc:	4b04      	ldr	r3, [pc, #16]	; (8002bd0 <SystemInit+0x28>)
 8002bbe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002bc2:	609a      	str	r2, [r3, #8]
#endif
}
 8002bc4:	bf00      	nop
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop
 8002bd0:	e000ed00 	.word	0xe000ed00

08002bd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
 ldr   sp, =_estack     /* set stack pointer */
 8002bd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c0c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002bd8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002bda:	e003      	b.n	8002be4 <LoopCopyDataInit>

08002bdc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002bdc:	4b0c      	ldr	r3, [pc, #48]	; (8002c10 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002bde:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002be0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002be2:	3104      	adds	r1, #4

08002be4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002be4:	480b      	ldr	r0, [pc, #44]	; (8002c14 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002be6:	4b0c      	ldr	r3, [pc, #48]	; (8002c18 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002be8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002bea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002bec:	d3f6      	bcc.n	8002bdc <CopyDataInit>
  ldr  r2, =_sbss
 8002bee:	4a0b      	ldr	r2, [pc, #44]	; (8002c1c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002bf0:	e002      	b.n	8002bf8 <LoopFillZerobss>

08002bf2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002bf2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002bf4:	f842 3b04 	str.w	r3, [r2], #4

08002bf8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002bf8:	4b09      	ldr	r3, [pc, #36]	; (8002c20 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002bfa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002bfc:	d3f9      	bcc.n	8002bf2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002bfe:	f7ff ffd3 	bl	8002ba8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c02:	f008 fa45 	bl	800b090 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c06:	f7fe fd69 	bl	80016dc <main>
  bx  lr    
 8002c0a:	4770      	bx	lr
 ldr   sp, =_estack     /* set stack pointer */
 8002c0c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002c10:	0800f108 	.word	0x0800f108
  ldr  r0, =_sdata
 8002c14:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002c18:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8002c1c:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8002c20:	20006408 	.word	0x20006408

08002c24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c24:	e7fe      	b.n	8002c24 <ADC_IRQHandler>
	...

08002c28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c2c:	4b0e      	ldr	r3, [pc, #56]	; (8002c68 <HAL_Init+0x40>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a0d      	ldr	r2, [pc, #52]	; (8002c68 <HAL_Init+0x40>)
 8002c32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c38:	4b0b      	ldr	r3, [pc, #44]	; (8002c68 <HAL_Init+0x40>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a0a      	ldr	r2, [pc, #40]	; (8002c68 <HAL_Init+0x40>)
 8002c3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c44:	4b08      	ldr	r3, [pc, #32]	; (8002c68 <HAL_Init+0x40>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a07      	ldr	r2, [pc, #28]	; (8002c68 <HAL_Init+0x40>)
 8002c4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c50:	2003      	movs	r0, #3
 8002c52:	f000 fb5c 	bl	800330e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c56:	2000      	movs	r0, #0
 8002c58:	f7ff fee0 	bl	8002a1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c5c:	f7ff fb6c 	bl	8002338 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	40023c00 	.word	0x40023c00

08002c6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c70:	4b06      	ldr	r3, [pc, #24]	; (8002c8c <HAL_IncTick+0x20>)
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	461a      	mov	r2, r3
 8002c76:	4b06      	ldr	r3, [pc, #24]	; (8002c90 <HAL_IncTick+0x24>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4413      	add	r3, r2
 8002c7c:	4a04      	ldr	r2, [pc, #16]	; (8002c90 <HAL_IncTick+0x24>)
 8002c7e:	6013      	str	r3, [r2, #0]
}
 8002c80:	bf00      	nop
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
 8002c8a:	bf00      	nop
 8002c8c:	20000008 	.word	0x20000008
 8002c90:	200063c0 	.word	0x200063c0

08002c94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c94:	b480      	push	{r7}
 8002c96:	af00      	add	r7, sp, #0
  return uwTick;
 8002c98:	4b03      	ldr	r3, [pc, #12]	; (8002ca8 <HAL_GetTick+0x14>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop
 8002ca8:	200063c0 	.word	0x200063c0

08002cac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002cb4:	f7ff ffee 	bl	8002c94 <HAL_GetTick>
 8002cb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc4:	d005      	beq.n	8002cd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cc6:	4b09      	ldr	r3, [pc, #36]	; (8002cec <HAL_Delay+0x40>)
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	461a      	mov	r2, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	4413      	add	r3, r2
 8002cd0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002cd2:	bf00      	nop
 8002cd4:	f7ff ffde 	bl	8002c94 <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	68fa      	ldr	r2, [r7, #12]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d8f7      	bhi.n	8002cd4 <HAL_Delay+0x28>
  {
  }
}
 8002ce4:	bf00      	nop
 8002ce6:	3710      	adds	r7, #16
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	20000008 	.word	0x20000008

08002cf0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d101      	bne.n	8002d06 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e033      	b.n	8002d6e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d109      	bne.n	8002d22 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f7ff fb3a 	bl	8002388 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d26:	f003 0310 	and.w	r3, r3, #16
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d118      	bne.n	8002d60 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d32:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002d36:	f023 0302 	bic.w	r3, r3, #2
 8002d3a:	f043 0202 	orr.w	r2, r3, #2
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f000 f93a 	bl	8002fbc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d52:	f023 0303 	bic.w	r3, r3, #3
 8002d56:	f043 0201 	orr.w	r2, r3, #1
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	641a      	str	r2, [r3, #64]	; 0x40
 8002d5e:	e001      	b.n	8002d64 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3710      	adds	r7, #16
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
	...

08002d78 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b085      	sub	sp, #20
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002d82:	2300      	movs	r3, #0
 8002d84:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d101      	bne.n	8002d94 <HAL_ADC_ConfigChannel+0x1c>
 8002d90:	2302      	movs	r3, #2
 8002d92:	e105      	b.n	8002fa0 <HAL_ADC_ConfigChannel+0x228>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2b09      	cmp	r3, #9
 8002da2:	d925      	bls.n	8002df0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68d9      	ldr	r1, [r3, #12]
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	461a      	mov	r2, r3
 8002db2:	4613      	mov	r3, r2
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	4413      	add	r3, r2
 8002db8:	3b1e      	subs	r3, #30
 8002dba:	2207      	movs	r2, #7
 8002dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc0:	43da      	mvns	r2, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	400a      	ands	r2, r1
 8002dc8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	68d9      	ldr	r1, [r3, #12]
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	689a      	ldr	r2, [r3, #8]
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	4618      	mov	r0, r3
 8002ddc:	4603      	mov	r3, r0
 8002dde:	005b      	lsls	r3, r3, #1
 8002de0:	4403      	add	r3, r0
 8002de2:	3b1e      	subs	r3, #30
 8002de4:	409a      	lsls	r2, r3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	430a      	orrs	r2, r1
 8002dec:	60da      	str	r2, [r3, #12]
 8002dee:	e022      	b.n	8002e36 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	6919      	ldr	r1, [r3, #16]
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	4613      	mov	r3, r2
 8002e00:	005b      	lsls	r3, r3, #1
 8002e02:	4413      	add	r3, r2
 8002e04:	2207      	movs	r2, #7
 8002e06:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0a:	43da      	mvns	r2, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	400a      	ands	r2, r1
 8002e12:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	6919      	ldr	r1, [r3, #16]
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	689a      	ldr	r2, [r3, #8]
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	4618      	mov	r0, r3
 8002e26:	4603      	mov	r3, r0
 8002e28:	005b      	lsls	r3, r3, #1
 8002e2a:	4403      	add	r3, r0
 8002e2c:	409a      	lsls	r2, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	430a      	orrs	r2, r1
 8002e34:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	2b06      	cmp	r3, #6
 8002e3c:	d824      	bhi.n	8002e88 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	685a      	ldr	r2, [r3, #4]
 8002e48:	4613      	mov	r3, r2
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	4413      	add	r3, r2
 8002e4e:	3b05      	subs	r3, #5
 8002e50:	221f      	movs	r2, #31
 8002e52:	fa02 f303 	lsl.w	r3, r2, r3
 8002e56:	43da      	mvns	r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	400a      	ands	r2, r1
 8002e5e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	685a      	ldr	r2, [r3, #4]
 8002e72:	4613      	mov	r3, r2
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	4413      	add	r3, r2
 8002e78:	3b05      	subs	r3, #5
 8002e7a:	fa00 f203 	lsl.w	r2, r0, r3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	430a      	orrs	r2, r1
 8002e84:	635a      	str	r2, [r3, #52]	; 0x34
 8002e86:	e04c      	b.n	8002f22 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	2b0c      	cmp	r3, #12
 8002e8e:	d824      	bhi.n	8002eda <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	685a      	ldr	r2, [r3, #4]
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	4413      	add	r3, r2
 8002ea0:	3b23      	subs	r3, #35	; 0x23
 8002ea2:	221f      	movs	r2, #31
 8002ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea8:	43da      	mvns	r2, r3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	400a      	ands	r2, r1
 8002eb0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685a      	ldr	r2, [r3, #4]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	4413      	add	r3, r2
 8002eca:	3b23      	subs	r3, #35	; 0x23
 8002ecc:	fa00 f203 	lsl.w	r2, r0, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	430a      	orrs	r2, r1
 8002ed6:	631a      	str	r2, [r3, #48]	; 0x30
 8002ed8:	e023      	b.n	8002f22 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	685a      	ldr	r2, [r3, #4]
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	4413      	add	r3, r2
 8002eea:	3b41      	subs	r3, #65	; 0x41
 8002eec:	221f      	movs	r2, #31
 8002eee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef2:	43da      	mvns	r2, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	400a      	ands	r2, r1
 8002efa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	4618      	mov	r0, r3
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	685a      	ldr	r2, [r3, #4]
 8002f0e:	4613      	mov	r3, r2
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	4413      	add	r3, r2
 8002f14:	3b41      	subs	r3, #65	; 0x41
 8002f16:	fa00 f203 	lsl.w	r2, r0, r3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	430a      	orrs	r2, r1
 8002f20:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f22:	4b22      	ldr	r3, [pc, #136]	; (8002fac <HAL_ADC_ConfigChannel+0x234>)
 8002f24:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a21      	ldr	r2, [pc, #132]	; (8002fb0 <HAL_ADC_ConfigChannel+0x238>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d109      	bne.n	8002f44 <HAL_ADC_ConfigChannel+0x1cc>
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2b12      	cmp	r3, #18
 8002f36:	d105      	bne.n	8002f44 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a19      	ldr	r2, [pc, #100]	; (8002fb0 <HAL_ADC_ConfigChannel+0x238>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d123      	bne.n	8002f96 <HAL_ADC_ConfigChannel+0x21e>
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2b10      	cmp	r3, #16
 8002f54:	d003      	beq.n	8002f5e <HAL_ADC_ConfigChannel+0x1e6>
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	2b11      	cmp	r3, #17
 8002f5c:	d11b      	bne.n	8002f96 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2b10      	cmp	r3, #16
 8002f70:	d111      	bne.n	8002f96 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002f72:	4b10      	ldr	r3, [pc, #64]	; (8002fb4 <HAL_ADC_ConfigChannel+0x23c>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a10      	ldr	r2, [pc, #64]	; (8002fb8 <HAL_ADC_ConfigChannel+0x240>)
 8002f78:	fba2 2303 	umull	r2, r3, r2, r3
 8002f7c:	0c9a      	lsrs	r2, r3, #18
 8002f7e:	4613      	mov	r3, r2
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	4413      	add	r3, r2
 8002f84:	005b      	lsls	r3, r3, #1
 8002f86:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002f88:	e002      	b.n	8002f90 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	3b01      	subs	r3, #1
 8002f8e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d1f9      	bne.n	8002f8a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002f9e:	2300      	movs	r3, #0
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3714      	adds	r7, #20
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr
 8002fac:	40012300 	.word	0x40012300
 8002fb0:	40012000 	.word	0x40012000
 8002fb4:	20000000 	.word	0x20000000
 8002fb8:	431bde83 	.word	0x431bde83

08002fbc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b085      	sub	sp, #20
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002fc4:	4b79      	ldr	r3, [pc, #484]	; (80031ac <ADC_Init+0x1f0>)
 8002fc6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	685a      	ldr	r2, [r3, #4]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	431a      	orrs	r2, r3
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	685a      	ldr	r2, [r3, #4]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ff0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	6859      	ldr	r1, [r3, #4]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	691b      	ldr	r3, [r3, #16]
 8002ffc:	021a      	lsls	r2, r3, #8
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	430a      	orrs	r2, r1
 8003004:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	685a      	ldr	r2, [r3, #4]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003014:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	6859      	ldr	r1, [r3, #4]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	689a      	ldr	r2, [r3, #8]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	430a      	orrs	r2, r1
 8003026:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	689a      	ldr	r2, [r3, #8]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003036:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	6899      	ldr	r1, [r3, #8]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	68da      	ldr	r2, [r3, #12]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	430a      	orrs	r2, r1
 8003048:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800304e:	4a58      	ldr	r2, [pc, #352]	; (80031b0 <ADC_Init+0x1f4>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d022      	beq.n	800309a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	689a      	ldr	r2, [r3, #8]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003062:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	6899      	ldr	r1, [r3, #8]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	430a      	orrs	r2, r1
 8003074:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	689a      	ldr	r2, [r3, #8]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003084:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	6899      	ldr	r1, [r3, #8]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	430a      	orrs	r2, r1
 8003096:	609a      	str	r2, [r3, #8]
 8003098:	e00f      	b.n	80030ba <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	689a      	ldr	r2, [r3, #8]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80030a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	689a      	ldr	r2, [r3, #8]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80030b8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	689a      	ldr	r2, [r3, #8]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f022 0202 	bic.w	r2, r2, #2
 80030c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	6899      	ldr	r1, [r3, #8]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	7e1b      	ldrb	r3, [r3, #24]
 80030d4:	005a      	lsls	r2, r3, #1
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	430a      	orrs	r2, r1
 80030dc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d01b      	beq.n	8003120 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	685a      	ldr	r2, [r3, #4]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030f6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	685a      	ldr	r2, [r3, #4]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003106:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	6859      	ldr	r1, [r3, #4]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003112:	3b01      	subs	r3, #1
 8003114:	035a      	lsls	r2, r3, #13
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	430a      	orrs	r2, r1
 800311c:	605a      	str	r2, [r3, #4]
 800311e:	e007      	b.n	8003130 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	685a      	ldr	r2, [r3, #4]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800312e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800313e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	69db      	ldr	r3, [r3, #28]
 800314a:	3b01      	subs	r3, #1
 800314c:	051a      	lsls	r2, r3, #20
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	430a      	orrs	r2, r1
 8003154:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	689a      	ldr	r2, [r3, #8]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003164:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	6899      	ldr	r1, [r3, #8]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003172:	025a      	lsls	r2, r3, #9
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	430a      	orrs	r2, r1
 800317a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	689a      	ldr	r2, [r3, #8]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800318a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	6899      	ldr	r1, [r3, #8]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	695b      	ldr	r3, [r3, #20]
 8003196:	029a      	lsls	r2, r3, #10
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	430a      	orrs	r2, r1
 800319e:	609a      	str	r2, [r3, #8]
}
 80031a0:	bf00      	nop
 80031a2:	3714      	adds	r7, #20
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr
 80031ac:	40012300 	.word	0x40012300
 80031b0:	0f000001 	.word	0x0f000001

080031b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b085      	sub	sp, #20
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f003 0307 	and.w	r3, r3, #7
 80031c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031c4:	4b0c      	ldr	r3, [pc, #48]	; (80031f8 <__NVIC_SetPriorityGrouping+0x44>)
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031ca:	68ba      	ldr	r2, [r7, #8]
 80031cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031d0:	4013      	ands	r3, r2
 80031d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80031e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031e6:	4a04      	ldr	r2, [pc, #16]	; (80031f8 <__NVIC_SetPriorityGrouping+0x44>)
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	60d3      	str	r3, [r2, #12]
}
 80031ec:	bf00      	nop
 80031ee:	3714      	adds	r7, #20
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr
 80031f8:	e000ed00 	.word	0xe000ed00

080031fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031fc:	b480      	push	{r7}
 80031fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003200:	4b04      	ldr	r3, [pc, #16]	; (8003214 <__NVIC_GetPriorityGrouping+0x18>)
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	0a1b      	lsrs	r3, r3, #8
 8003206:	f003 0307 	and.w	r3, r3, #7
}
 800320a:	4618      	mov	r0, r3
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr
 8003214:	e000ed00 	.word	0xe000ed00

08003218 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	4603      	mov	r3, r0
 8003220:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003226:	2b00      	cmp	r3, #0
 8003228:	db0b      	blt.n	8003242 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800322a:	79fb      	ldrb	r3, [r7, #7]
 800322c:	f003 021f 	and.w	r2, r3, #31
 8003230:	4907      	ldr	r1, [pc, #28]	; (8003250 <__NVIC_EnableIRQ+0x38>)
 8003232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003236:	095b      	lsrs	r3, r3, #5
 8003238:	2001      	movs	r0, #1
 800323a:	fa00 f202 	lsl.w	r2, r0, r2
 800323e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003242:	bf00      	nop
 8003244:	370c      	adds	r7, #12
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	e000e100 	.word	0xe000e100

08003254 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	4603      	mov	r3, r0
 800325c:	6039      	str	r1, [r7, #0]
 800325e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003260:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003264:	2b00      	cmp	r3, #0
 8003266:	db0a      	blt.n	800327e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	b2da      	uxtb	r2, r3
 800326c:	490c      	ldr	r1, [pc, #48]	; (80032a0 <__NVIC_SetPriority+0x4c>)
 800326e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003272:	0112      	lsls	r2, r2, #4
 8003274:	b2d2      	uxtb	r2, r2
 8003276:	440b      	add	r3, r1
 8003278:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800327c:	e00a      	b.n	8003294 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	b2da      	uxtb	r2, r3
 8003282:	4908      	ldr	r1, [pc, #32]	; (80032a4 <__NVIC_SetPriority+0x50>)
 8003284:	79fb      	ldrb	r3, [r7, #7]
 8003286:	f003 030f 	and.w	r3, r3, #15
 800328a:	3b04      	subs	r3, #4
 800328c:	0112      	lsls	r2, r2, #4
 800328e:	b2d2      	uxtb	r2, r2
 8003290:	440b      	add	r3, r1
 8003292:	761a      	strb	r2, [r3, #24]
}
 8003294:	bf00      	nop
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr
 80032a0:	e000e100 	.word	0xe000e100
 80032a4:	e000ed00 	.word	0xe000ed00

080032a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b089      	sub	sp, #36	; 0x24
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	60b9      	str	r1, [r7, #8]
 80032b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f003 0307 	and.w	r3, r3, #7
 80032ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	f1c3 0307 	rsb	r3, r3, #7
 80032c2:	2b04      	cmp	r3, #4
 80032c4:	bf28      	it	cs
 80032c6:	2304      	movcs	r3, #4
 80032c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	3304      	adds	r3, #4
 80032ce:	2b06      	cmp	r3, #6
 80032d0:	d902      	bls.n	80032d8 <NVIC_EncodePriority+0x30>
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	3b03      	subs	r3, #3
 80032d6:	e000      	b.n	80032da <NVIC_EncodePriority+0x32>
 80032d8:	2300      	movs	r3, #0
 80032da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032dc:	f04f 32ff 	mov.w	r2, #4294967295
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	fa02 f303 	lsl.w	r3, r2, r3
 80032e6:	43da      	mvns	r2, r3
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	401a      	ands	r2, r3
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032f0:	f04f 31ff 	mov.w	r1, #4294967295
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	fa01 f303 	lsl.w	r3, r1, r3
 80032fa:	43d9      	mvns	r1, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003300:	4313      	orrs	r3, r2
         );
}
 8003302:	4618      	mov	r0, r3
 8003304:	3724      	adds	r7, #36	; 0x24
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr

0800330e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800330e:	b580      	push	{r7, lr}
 8003310:	b082      	sub	sp, #8
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f7ff ff4c 	bl	80031b4 <__NVIC_SetPriorityGrouping>
}
 800331c:	bf00      	nop
 800331e:	3708      	adds	r7, #8
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}

08003324 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003324:	b580      	push	{r7, lr}
 8003326:	b086      	sub	sp, #24
 8003328:	af00      	add	r7, sp, #0
 800332a:	4603      	mov	r3, r0
 800332c:	60b9      	str	r1, [r7, #8]
 800332e:	607a      	str	r2, [r7, #4]
 8003330:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003332:	2300      	movs	r3, #0
 8003334:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003336:	f7ff ff61 	bl	80031fc <__NVIC_GetPriorityGrouping>
 800333a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	68b9      	ldr	r1, [r7, #8]
 8003340:	6978      	ldr	r0, [r7, #20]
 8003342:	f7ff ffb1 	bl	80032a8 <NVIC_EncodePriority>
 8003346:	4602      	mov	r2, r0
 8003348:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800334c:	4611      	mov	r1, r2
 800334e:	4618      	mov	r0, r3
 8003350:	f7ff ff80 	bl	8003254 <__NVIC_SetPriority>
}
 8003354:	bf00      	nop
 8003356:	3718      	adds	r7, #24
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}

0800335c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0
 8003362:	4603      	mov	r3, r0
 8003364:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800336a:	4618      	mov	r0, r3
 800336c:	f7ff ff54 	bl	8003218 <__NVIC_EnableIRQ>
}
 8003370:	bf00      	nop
 8003372:	3708      	adds	r7, #8
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003386:	b2db      	uxtb	r3, r3
 8003388:	2b02      	cmp	r3, #2
 800338a:	d004      	beq.n	8003396 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2280      	movs	r2, #128	; 0x80
 8003390:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e00c      	b.n	80033b0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2205      	movs	r2, #5
 800339a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f022 0201 	bic.w	r2, r2, #1
 80033ac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80033ae:	2300      	movs	r3, #0
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	370c      	adds	r7, #12
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr

080033bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033bc:	b480      	push	{r7}
 80033be:	b089      	sub	sp, #36	; 0x24
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80033c6:	2300      	movs	r3, #0
 80033c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80033ca:	2300      	movs	r3, #0
 80033cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80033ce:	2300      	movs	r3, #0
 80033d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033d2:	2300      	movs	r3, #0
 80033d4:	61fb      	str	r3, [r7, #28]
 80033d6:	e16b      	b.n	80036b0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033d8:	2201      	movs	r2, #1
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	fa02 f303 	lsl.w	r3, r2, r3
 80033e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	697a      	ldr	r2, [r7, #20]
 80033e8:	4013      	ands	r3, r2
 80033ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033ec:	693a      	ldr	r2, [r7, #16]
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	f040 815a 	bne.w	80036aa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d00b      	beq.n	8003416 <HAL_GPIO_Init+0x5a>
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	2b02      	cmp	r3, #2
 8003404:	d007      	beq.n	8003416 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800340a:	2b11      	cmp	r3, #17
 800340c:	d003      	beq.n	8003416 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	2b12      	cmp	r3, #18
 8003414:	d130      	bne.n	8003478 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	005b      	lsls	r3, r3, #1
 8003420:	2203      	movs	r2, #3
 8003422:	fa02 f303 	lsl.w	r3, r2, r3
 8003426:	43db      	mvns	r3, r3
 8003428:	69ba      	ldr	r2, [r7, #24]
 800342a:	4013      	ands	r3, r2
 800342c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	68da      	ldr	r2, [r3, #12]
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	005b      	lsls	r3, r3, #1
 8003436:	fa02 f303 	lsl.w	r3, r2, r3
 800343a:	69ba      	ldr	r2, [r7, #24]
 800343c:	4313      	orrs	r3, r2
 800343e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	69ba      	ldr	r2, [r7, #24]
 8003444:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800344c:	2201      	movs	r2, #1
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	fa02 f303 	lsl.w	r3, r2, r3
 8003454:	43db      	mvns	r3, r3
 8003456:	69ba      	ldr	r2, [r7, #24]
 8003458:	4013      	ands	r3, r2
 800345a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	091b      	lsrs	r3, r3, #4
 8003462:	f003 0201 	and.w	r2, r3, #1
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	fa02 f303 	lsl.w	r3, r2, r3
 800346c:	69ba      	ldr	r2, [r7, #24]
 800346e:	4313      	orrs	r3, r2
 8003470:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	69ba      	ldr	r2, [r7, #24]
 8003476:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	005b      	lsls	r3, r3, #1
 8003482:	2203      	movs	r2, #3
 8003484:	fa02 f303 	lsl.w	r3, r2, r3
 8003488:	43db      	mvns	r3, r3
 800348a:	69ba      	ldr	r2, [r7, #24]
 800348c:	4013      	ands	r3, r2
 800348e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	689a      	ldr	r2, [r3, #8]
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	005b      	lsls	r3, r3, #1
 8003498:	fa02 f303 	lsl.w	r3, r2, r3
 800349c:	69ba      	ldr	r2, [r7, #24]
 800349e:	4313      	orrs	r3, r2
 80034a0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	69ba      	ldr	r2, [r7, #24]
 80034a6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d003      	beq.n	80034b8 <HAL_GPIO_Init+0xfc>
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	2b12      	cmp	r3, #18
 80034b6:	d123      	bne.n	8003500 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	08da      	lsrs	r2, r3, #3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	3208      	adds	r2, #8
 80034c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	f003 0307 	and.w	r3, r3, #7
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	220f      	movs	r2, #15
 80034d0:	fa02 f303 	lsl.w	r3, r2, r3
 80034d4:	43db      	mvns	r3, r3
 80034d6:	69ba      	ldr	r2, [r7, #24]
 80034d8:	4013      	ands	r3, r2
 80034da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	691a      	ldr	r2, [r3, #16]
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	f003 0307 	and.w	r3, r3, #7
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ec:	69ba      	ldr	r2, [r7, #24]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	08da      	lsrs	r2, r3, #3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	3208      	adds	r2, #8
 80034fa:	69b9      	ldr	r1, [r7, #24]
 80034fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	005b      	lsls	r3, r3, #1
 800350a:	2203      	movs	r2, #3
 800350c:	fa02 f303 	lsl.w	r3, r2, r3
 8003510:	43db      	mvns	r3, r3
 8003512:	69ba      	ldr	r2, [r7, #24]
 8003514:	4013      	ands	r3, r2
 8003516:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	f003 0203 	and.w	r2, r3, #3
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	005b      	lsls	r3, r3, #1
 8003524:	fa02 f303 	lsl.w	r3, r2, r3
 8003528:	69ba      	ldr	r2, [r7, #24]
 800352a:	4313      	orrs	r3, r2
 800352c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	69ba      	ldr	r2, [r7, #24]
 8003532:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800353c:	2b00      	cmp	r3, #0
 800353e:	f000 80b4 	beq.w	80036aa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003542:	2300      	movs	r3, #0
 8003544:	60fb      	str	r3, [r7, #12]
 8003546:	4b5f      	ldr	r3, [pc, #380]	; (80036c4 <HAL_GPIO_Init+0x308>)
 8003548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800354a:	4a5e      	ldr	r2, [pc, #376]	; (80036c4 <HAL_GPIO_Init+0x308>)
 800354c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003550:	6453      	str	r3, [r2, #68]	; 0x44
 8003552:	4b5c      	ldr	r3, [pc, #368]	; (80036c4 <HAL_GPIO_Init+0x308>)
 8003554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003556:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800355a:	60fb      	str	r3, [r7, #12]
 800355c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800355e:	4a5a      	ldr	r2, [pc, #360]	; (80036c8 <HAL_GPIO_Init+0x30c>)
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	089b      	lsrs	r3, r3, #2
 8003564:	3302      	adds	r3, #2
 8003566:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800356a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	f003 0303 	and.w	r3, r3, #3
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	220f      	movs	r2, #15
 8003576:	fa02 f303 	lsl.w	r3, r2, r3
 800357a:	43db      	mvns	r3, r3
 800357c:	69ba      	ldr	r2, [r7, #24]
 800357e:	4013      	ands	r3, r2
 8003580:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a51      	ldr	r2, [pc, #324]	; (80036cc <HAL_GPIO_Init+0x310>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d02b      	beq.n	80035e2 <HAL_GPIO_Init+0x226>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a50      	ldr	r2, [pc, #320]	; (80036d0 <HAL_GPIO_Init+0x314>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d025      	beq.n	80035de <HAL_GPIO_Init+0x222>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a4f      	ldr	r2, [pc, #316]	; (80036d4 <HAL_GPIO_Init+0x318>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d01f      	beq.n	80035da <HAL_GPIO_Init+0x21e>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a4e      	ldr	r2, [pc, #312]	; (80036d8 <HAL_GPIO_Init+0x31c>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d019      	beq.n	80035d6 <HAL_GPIO_Init+0x21a>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a4d      	ldr	r2, [pc, #308]	; (80036dc <HAL_GPIO_Init+0x320>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d013      	beq.n	80035d2 <HAL_GPIO_Init+0x216>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a4c      	ldr	r2, [pc, #304]	; (80036e0 <HAL_GPIO_Init+0x324>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d00d      	beq.n	80035ce <HAL_GPIO_Init+0x212>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a4b      	ldr	r2, [pc, #300]	; (80036e4 <HAL_GPIO_Init+0x328>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d007      	beq.n	80035ca <HAL_GPIO_Init+0x20e>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a4a      	ldr	r2, [pc, #296]	; (80036e8 <HAL_GPIO_Init+0x32c>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d101      	bne.n	80035c6 <HAL_GPIO_Init+0x20a>
 80035c2:	2307      	movs	r3, #7
 80035c4:	e00e      	b.n	80035e4 <HAL_GPIO_Init+0x228>
 80035c6:	2308      	movs	r3, #8
 80035c8:	e00c      	b.n	80035e4 <HAL_GPIO_Init+0x228>
 80035ca:	2306      	movs	r3, #6
 80035cc:	e00a      	b.n	80035e4 <HAL_GPIO_Init+0x228>
 80035ce:	2305      	movs	r3, #5
 80035d0:	e008      	b.n	80035e4 <HAL_GPIO_Init+0x228>
 80035d2:	2304      	movs	r3, #4
 80035d4:	e006      	b.n	80035e4 <HAL_GPIO_Init+0x228>
 80035d6:	2303      	movs	r3, #3
 80035d8:	e004      	b.n	80035e4 <HAL_GPIO_Init+0x228>
 80035da:	2302      	movs	r3, #2
 80035dc:	e002      	b.n	80035e4 <HAL_GPIO_Init+0x228>
 80035de:	2301      	movs	r3, #1
 80035e0:	e000      	b.n	80035e4 <HAL_GPIO_Init+0x228>
 80035e2:	2300      	movs	r3, #0
 80035e4:	69fa      	ldr	r2, [r7, #28]
 80035e6:	f002 0203 	and.w	r2, r2, #3
 80035ea:	0092      	lsls	r2, r2, #2
 80035ec:	4093      	lsls	r3, r2
 80035ee:	69ba      	ldr	r2, [r7, #24]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035f4:	4934      	ldr	r1, [pc, #208]	; (80036c8 <HAL_GPIO_Init+0x30c>)
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	089b      	lsrs	r3, r3, #2
 80035fa:	3302      	adds	r3, #2
 80035fc:	69ba      	ldr	r2, [r7, #24]
 80035fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003602:	4b3a      	ldr	r3, [pc, #232]	; (80036ec <HAL_GPIO_Init+0x330>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	43db      	mvns	r3, r3
 800360c:	69ba      	ldr	r2, [r7, #24]
 800360e:	4013      	ands	r3, r2
 8003610:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d003      	beq.n	8003626 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800361e:	69ba      	ldr	r2, [r7, #24]
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	4313      	orrs	r3, r2
 8003624:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003626:	4a31      	ldr	r2, [pc, #196]	; (80036ec <HAL_GPIO_Init+0x330>)
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800362c:	4b2f      	ldr	r3, [pc, #188]	; (80036ec <HAL_GPIO_Init+0x330>)
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	43db      	mvns	r3, r3
 8003636:	69ba      	ldr	r2, [r7, #24]
 8003638:	4013      	ands	r3, r2
 800363a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d003      	beq.n	8003650 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003648:	69ba      	ldr	r2, [r7, #24]
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	4313      	orrs	r3, r2
 800364e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003650:	4a26      	ldr	r2, [pc, #152]	; (80036ec <HAL_GPIO_Init+0x330>)
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003656:	4b25      	ldr	r3, [pc, #148]	; (80036ec <HAL_GPIO_Init+0x330>)
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	43db      	mvns	r3, r3
 8003660:	69ba      	ldr	r2, [r7, #24]
 8003662:	4013      	ands	r3, r2
 8003664:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d003      	beq.n	800367a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003672:	69ba      	ldr	r2, [r7, #24]
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	4313      	orrs	r3, r2
 8003678:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800367a:	4a1c      	ldr	r2, [pc, #112]	; (80036ec <HAL_GPIO_Init+0x330>)
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003680:	4b1a      	ldr	r3, [pc, #104]	; (80036ec <HAL_GPIO_Init+0x330>)
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	43db      	mvns	r3, r3
 800368a:	69ba      	ldr	r2, [r7, #24]
 800368c:	4013      	ands	r3, r2
 800368e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003698:	2b00      	cmp	r3, #0
 800369a:	d003      	beq.n	80036a4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800369c:	69ba      	ldr	r2, [r7, #24]
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80036a4:	4a11      	ldr	r2, [pc, #68]	; (80036ec <HAL_GPIO_Init+0x330>)
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	3301      	adds	r3, #1
 80036ae:	61fb      	str	r3, [r7, #28]
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	2b0f      	cmp	r3, #15
 80036b4:	f67f ae90 	bls.w	80033d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80036b8:	bf00      	nop
 80036ba:	3724      	adds	r7, #36	; 0x24
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr
 80036c4:	40023800 	.word	0x40023800
 80036c8:	40013800 	.word	0x40013800
 80036cc:	40020000 	.word	0x40020000
 80036d0:	40020400 	.word	0x40020400
 80036d4:	40020800 	.word	0x40020800
 80036d8:	40020c00 	.word	0x40020c00
 80036dc:	40021000 	.word	0x40021000
 80036e0:	40021400 	.word	0x40021400
 80036e4:	40021800 	.word	0x40021800
 80036e8:	40021c00 	.word	0x40021c00
 80036ec:	40013c00 	.word	0x40013c00

080036f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	460b      	mov	r3, r1
 80036fa:	807b      	strh	r3, [r7, #2]
 80036fc:	4613      	mov	r3, r2
 80036fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003700:	787b      	ldrb	r3, [r7, #1]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d003      	beq.n	800370e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003706:	887a      	ldrh	r2, [r7, #2]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800370c:	e003      	b.n	8003716 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800370e:	887b      	ldrh	r3, [r7, #2]
 8003710:	041a      	lsls	r2, r3, #16
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	619a      	str	r2, [r3, #24]
}
 8003716:	bf00      	nop
 8003718:	370c      	adds	r7, #12
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr

08003722 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003722:	b480      	push	{r7}
 8003724:	b083      	sub	sp, #12
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
 800372a:	460b      	mov	r3, r1
 800372c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	695a      	ldr	r2, [r3, #20]
 8003732:	887b      	ldrh	r3, [r7, #2]
 8003734:	401a      	ands	r2, r3
 8003736:	887b      	ldrh	r3, [r7, #2]
 8003738:	429a      	cmp	r2, r3
 800373a:	d104      	bne.n	8003746 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800373c:	887b      	ldrh	r3, [r7, #2]
 800373e:	041a      	lsls	r2, r3, #16
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003744:	e002      	b.n	800374c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8003746:	887a      	ldrh	r2, [r7, #2]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	619a      	str	r2, [r3, #24]
}
 800374c:	bf00      	nop
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d101      	bne.n	800376a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e11f      	b.n	80039aa <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003770:	b2db      	uxtb	r3, r3
 8003772:	2b00      	cmp	r3, #0
 8003774:	d106      	bne.n	8003784 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f7fe fe24 	bl	80023cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2224      	movs	r2, #36	; 0x24
 8003788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f022 0201 	bic.w	r2, r2, #1
 800379a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80037bc:	f002 fac0 	bl	8005d40 <HAL_RCC_GetPCLK1Freq>
 80037c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	4a7b      	ldr	r2, [pc, #492]	; (80039b4 <HAL_I2C_Init+0x25c>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d807      	bhi.n	80037dc <HAL_I2C_Init+0x84>
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	4a7a      	ldr	r2, [pc, #488]	; (80039b8 <HAL_I2C_Init+0x260>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	bf94      	ite	ls
 80037d4:	2301      	movls	r3, #1
 80037d6:	2300      	movhi	r3, #0
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	e006      	b.n	80037ea <HAL_I2C_Init+0x92>
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	4a77      	ldr	r2, [pc, #476]	; (80039bc <HAL_I2C_Init+0x264>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	bf94      	ite	ls
 80037e4:	2301      	movls	r3, #1
 80037e6:	2300      	movhi	r3, #0
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d001      	beq.n	80037f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e0db      	b.n	80039aa <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	4a72      	ldr	r2, [pc, #456]	; (80039c0 <HAL_I2C_Init+0x268>)
 80037f6:	fba2 2303 	umull	r2, r3, r2, r3
 80037fa:	0c9b      	lsrs	r3, r3, #18
 80037fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68ba      	ldr	r2, [r7, #8]
 800380e:	430a      	orrs	r2, r1
 8003810:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	6a1b      	ldr	r3, [r3, #32]
 8003818:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	4a64      	ldr	r2, [pc, #400]	; (80039b4 <HAL_I2C_Init+0x25c>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d802      	bhi.n	800382c <HAL_I2C_Init+0xd4>
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	3301      	adds	r3, #1
 800382a:	e009      	b.n	8003840 <HAL_I2C_Init+0xe8>
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003832:	fb02 f303 	mul.w	r3, r2, r3
 8003836:	4a63      	ldr	r2, [pc, #396]	; (80039c4 <HAL_I2C_Init+0x26c>)
 8003838:	fba2 2303 	umull	r2, r3, r2, r3
 800383c:	099b      	lsrs	r3, r3, #6
 800383e:	3301      	adds	r3, #1
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	6812      	ldr	r2, [r2, #0]
 8003844:	430b      	orrs	r3, r1
 8003846:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	69db      	ldr	r3, [r3, #28]
 800384e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003852:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	4956      	ldr	r1, [pc, #344]	; (80039b4 <HAL_I2C_Init+0x25c>)
 800385c:	428b      	cmp	r3, r1
 800385e:	d80d      	bhi.n	800387c <HAL_I2C_Init+0x124>
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	1e59      	subs	r1, r3, #1
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	005b      	lsls	r3, r3, #1
 800386a:	fbb1 f3f3 	udiv	r3, r1, r3
 800386e:	3301      	adds	r3, #1
 8003870:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003874:	2b04      	cmp	r3, #4
 8003876:	bf38      	it	cc
 8003878:	2304      	movcc	r3, #4
 800387a:	e04f      	b.n	800391c <HAL_I2C_Init+0x1c4>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d111      	bne.n	80038a8 <HAL_I2C_Init+0x150>
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	1e58      	subs	r0, r3, #1
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6859      	ldr	r1, [r3, #4]
 800388c:	460b      	mov	r3, r1
 800388e:	005b      	lsls	r3, r3, #1
 8003890:	440b      	add	r3, r1
 8003892:	fbb0 f3f3 	udiv	r3, r0, r3
 8003896:	3301      	adds	r3, #1
 8003898:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800389c:	2b00      	cmp	r3, #0
 800389e:	bf0c      	ite	eq
 80038a0:	2301      	moveq	r3, #1
 80038a2:	2300      	movne	r3, #0
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	e012      	b.n	80038ce <HAL_I2C_Init+0x176>
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	1e58      	subs	r0, r3, #1
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6859      	ldr	r1, [r3, #4]
 80038b0:	460b      	mov	r3, r1
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	440b      	add	r3, r1
 80038b6:	0099      	lsls	r1, r3, #2
 80038b8:	440b      	add	r3, r1
 80038ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80038be:	3301      	adds	r3, #1
 80038c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	bf0c      	ite	eq
 80038c8:	2301      	moveq	r3, #1
 80038ca:	2300      	movne	r3, #0
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d001      	beq.n	80038d6 <HAL_I2C_Init+0x17e>
 80038d2:	2301      	movs	r3, #1
 80038d4:	e022      	b.n	800391c <HAL_I2C_Init+0x1c4>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d10e      	bne.n	80038fc <HAL_I2C_Init+0x1a4>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	1e58      	subs	r0, r3, #1
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6859      	ldr	r1, [r3, #4]
 80038e6:	460b      	mov	r3, r1
 80038e8:	005b      	lsls	r3, r3, #1
 80038ea:	440b      	add	r3, r1
 80038ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80038f0:	3301      	adds	r3, #1
 80038f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038fa:	e00f      	b.n	800391c <HAL_I2C_Init+0x1c4>
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	1e58      	subs	r0, r3, #1
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6859      	ldr	r1, [r3, #4]
 8003904:	460b      	mov	r3, r1
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	440b      	add	r3, r1
 800390a:	0099      	lsls	r1, r3, #2
 800390c:	440b      	add	r3, r1
 800390e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003912:	3301      	adds	r3, #1
 8003914:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003918:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800391c:	6879      	ldr	r1, [r7, #4]
 800391e:	6809      	ldr	r1, [r1, #0]
 8003920:	4313      	orrs	r3, r2
 8003922:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	69da      	ldr	r2, [r3, #28]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a1b      	ldr	r3, [r3, #32]
 8003936:	431a      	orrs	r2, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	430a      	orrs	r2, r1
 800393e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800394a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	6911      	ldr	r1, [r2, #16]
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	68d2      	ldr	r2, [r2, #12]
 8003956:	4311      	orrs	r1, r2
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	6812      	ldr	r2, [r2, #0]
 800395c:	430b      	orrs	r3, r1
 800395e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	695a      	ldr	r2, [r3, #20]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	431a      	orrs	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	430a      	orrs	r2, r1
 800397a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f042 0201 	orr.w	r2, r2, #1
 800398a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2220      	movs	r2, #32
 8003996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3710      	adds	r7, #16
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	000186a0 	.word	0x000186a0
 80039b8:	001e847f 	.word	0x001e847f
 80039bc:	003d08ff 	.word	0x003d08ff
 80039c0:	431bde83 	.word	0x431bde83
 80039c4:	10624dd3 	.word	0x10624dd3

080039c8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b088      	sub	sp, #32
 80039cc:	af02      	add	r7, sp, #8
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	607a      	str	r2, [r7, #4]
 80039d2:	461a      	mov	r2, r3
 80039d4:	460b      	mov	r3, r1
 80039d6:	817b      	strh	r3, [r7, #10]
 80039d8:	4613      	mov	r3, r2
 80039da:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80039dc:	f7ff f95a 	bl	8002c94 <HAL_GetTick>
 80039e0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	2b20      	cmp	r3, #32
 80039ec:	f040 80e0 	bne.w	8003bb0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	9300      	str	r3, [sp, #0]
 80039f4:	2319      	movs	r3, #25
 80039f6:	2201      	movs	r2, #1
 80039f8:	4970      	ldr	r1, [pc, #448]	; (8003bbc <HAL_I2C_Master_Transmit+0x1f4>)
 80039fa:	68f8      	ldr	r0, [r7, #12]
 80039fc:	f000 fc58 	bl	80042b0 <I2C_WaitOnFlagUntilTimeout>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d001      	beq.n	8003a0a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003a06:	2302      	movs	r3, #2
 8003a08:	e0d3      	b.n	8003bb2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d101      	bne.n	8003a18 <HAL_I2C_Master_Transmit+0x50>
 8003a14:	2302      	movs	r3, #2
 8003a16:	e0cc      	b.n	8003bb2 <HAL_I2C_Master_Transmit+0x1ea>
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d007      	beq.n	8003a3e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f042 0201 	orr.w	r2, r2, #1
 8003a3c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a4c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2221      	movs	r2, #33	; 0x21
 8003a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2210      	movs	r2, #16
 8003a5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2200      	movs	r2, #0
 8003a62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	893a      	ldrh	r2, [r7, #8]
 8003a6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a74:	b29a      	uxth	r2, r3
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	4a50      	ldr	r2, [pc, #320]	; (8003bc0 <HAL_I2C_Master_Transmit+0x1f8>)
 8003a7e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003a80:	8979      	ldrh	r1, [r7, #10]
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	6a3a      	ldr	r2, [r7, #32]
 8003a86:	68f8      	ldr	r0, [r7, #12]
 8003a88:	f000 fac2 	bl	8004010 <I2C_MasterRequestWrite>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d001      	beq.n	8003a96 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e08d      	b.n	8003bb2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a96:	2300      	movs	r3, #0
 8003a98:	613b      	str	r3, [r7, #16]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	695b      	ldr	r3, [r3, #20]
 8003aa0:	613b      	str	r3, [r7, #16]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	699b      	ldr	r3, [r3, #24]
 8003aa8:	613b      	str	r3, [r7, #16]
 8003aaa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003aac:	e066      	b.n	8003b7c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003aae:	697a      	ldr	r2, [r7, #20]
 8003ab0:	6a39      	ldr	r1, [r7, #32]
 8003ab2:	68f8      	ldr	r0, [r7, #12]
 8003ab4:	f000 fcd2 	bl	800445c <I2C_WaitOnTXEFlagUntilTimeout>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d00d      	beq.n	8003ada <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac2:	2b04      	cmp	r3, #4
 8003ac4:	d107      	bne.n	8003ad6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ad4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e06b      	b.n	8003bb2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ade:	781a      	ldrb	r2, [r3, #0]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aea:	1c5a      	adds	r2, r3, #1
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	3b01      	subs	r3, #1
 8003af8:	b29a      	uxth	r2, r3
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b02:	3b01      	subs	r3, #1
 8003b04:	b29a      	uxth	r2, r3
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	695b      	ldr	r3, [r3, #20]
 8003b10:	f003 0304 	and.w	r3, r3, #4
 8003b14:	2b04      	cmp	r3, #4
 8003b16:	d11b      	bne.n	8003b50 <HAL_I2C_Master_Transmit+0x188>
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d017      	beq.n	8003b50 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b24:	781a      	ldrb	r2, [r3, #0]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b30:	1c5a      	adds	r2, r3, #1
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	3b01      	subs	r3, #1
 8003b3e:	b29a      	uxth	r2, r3
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b48:	3b01      	subs	r3, #1
 8003b4a:	b29a      	uxth	r2, r3
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b50:	697a      	ldr	r2, [r7, #20]
 8003b52:	6a39      	ldr	r1, [r7, #32]
 8003b54:	68f8      	ldr	r0, [r7, #12]
 8003b56:	f000 fcc2 	bl	80044de <I2C_WaitOnBTFFlagUntilTimeout>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d00d      	beq.n	8003b7c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b64:	2b04      	cmp	r3, #4
 8003b66:	d107      	bne.n	8003b78 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b76:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e01a      	b.n	8003bb2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d194      	bne.n	8003aae <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2220      	movs	r2, #32
 8003b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003bac:	2300      	movs	r3, #0
 8003bae:	e000      	b.n	8003bb2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003bb0:	2302      	movs	r3, #2
  }
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3718      	adds	r7, #24
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	00100002 	.word	0x00100002
 8003bc0:	ffff0000 	.word	0xffff0000

08003bc4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b08c      	sub	sp, #48	; 0x30
 8003bc8:	af02      	add	r7, sp, #8
 8003bca:	60f8      	str	r0, [r7, #12]
 8003bcc:	607a      	str	r2, [r7, #4]
 8003bce:	461a      	mov	r2, r3
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	817b      	strh	r3, [r7, #10]
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003bd8:	f7ff f85c 	bl	8002c94 <HAL_GetTick>
 8003bdc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	2b20      	cmp	r3, #32
 8003be8:	f040 820b 	bne.w	8004002 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bee:	9300      	str	r3, [sp, #0]
 8003bf0:	2319      	movs	r3, #25
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	497c      	ldr	r1, [pc, #496]	; (8003de8 <HAL_I2C_Master_Receive+0x224>)
 8003bf6:	68f8      	ldr	r0, [r7, #12]
 8003bf8:	f000 fb5a 	bl	80042b0 <I2C_WaitOnFlagUntilTimeout>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d001      	beq.n	8003c06 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003c02:	2302      	movs	r3, #2
 8003c04:	e1fe      	b.n	8004004 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d101      	bne.n	8003c14 <HAL_I2C_Master_Receive+0x50>
 8003c10:	2302      	movs	r3, #2
 8003c12:	e1f7      	b.n	8004004 <HAL_I2C_Master_Receive+0x440>
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0301 	and.w	r3, r3, #1
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d007      	beq.n	8003c3a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f042 0201 	orr.w	r2, r2, #1
 8003c38:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c48:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2222      	movs	r2, #34	; 0x22
 8003c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2210      	movs	r2, #16
 8003c56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	893a      	ldrh	r2, [r7, #8]
 8003c6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c70:	b29a      	uxth	r2, r3
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	4a5c      	ldr	r2, [pc, #368]	; (8003dec <HAL_I2C_Master_Receive+0x228>)
 8003c7a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003c7c:	8979      	ldrh	r1, [r7, #10]
 8003c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c82:	68f8      	ldr	r0, [r7, #12]
 8003c84:	f000 fa46 	bl	8004114 <I2C_MasterRequestRead>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d001      	beq.n	8003c92 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e1b8      	b.n	8004004 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d113      	bne.n	8003cc2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	623b      	str	r3, [r7, #32]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	695b      	ldr	r3, [r3, #20]
 8003ca4:	623b      	str	r3, [r7, #32]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	699b      	ldr	r3, [r3, #24]
 8003cac:	623b      	str	r3, [r7, #32]
 8003cae:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cbe:	601a      	str	r2, [r3, #0]
 8003cc0:	e18c      	b.n	8003fdc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d11b      	bne.n	8003d02 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cd8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cda:	2300      	movs	r3, #0
 8003cdc:	61fb      	str	r3, [r7, #28]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	695b      	ldr	r3, [r3, #20]
 8003ce4:	61fb      	str	r3, [r7, #28]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	699b      	ldr	r3, [r3, #24]
 8003cec:	61fb      	str	r3, [r7, #28]
 8003cee:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cfe:	601a      	str	r2, [r3, #0]
 8003d00:	e16c      	b.n	8003fdc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d11b      	bne.n	8003d42 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d18:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d28:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	61bb      	str	r3, [r7, #24]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	695b      	ldr	r3, [r3, #20]
 8003d34:	61bb      	str	r3, [r7, #24]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	699b      	ldr	r3, [r3, #24]
 8003d3c:	61bb      	str	r3, [r7, #24]
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	e14c      	b.n	8003fdc <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d50:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d52:	2300      	movs	r3, #0
 8003d54:	617b      	str	r3, [r7, #20]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	695b      	ldr	r3, [r3, #20]
 8003d5c:	617b      	str	r3, [r7, #20]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	699b      	ldr	r3, [r3, #24]
 8003d64:	617b      	str	r3, [r7, #20]
 8003d66:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003d68:	e138      	b.n	8003fdc <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d6e:	2b03      	cmp	r3, #3
 8003d70:	f200 80f1 	bhi.w	8003f56 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d123      	bne.n	8003dc4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d7e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d80:	68f8      	ldr	r0, [r7, #12]
 8003d82:	f000 fbed 	bl	8004560 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d001      	beq.n	8003d90 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e139      	b.n	8004004 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	691a      	ldr	r2, [r3, #16]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9a:	b2d2      	uxtb	r2, r2
 8003d9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da2:	1c5a      	adds	r2, r3, #1
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dac:	3b01      	subs	r3, #1
 8003dae:	b29a      	uxth	r2, r3
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	b29a      	uxth	r2, r3
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003dc2:	e10b      	b.n	8003fdc <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d14e      	bne.n	8003e6a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dce:	9300      	str	r3, [sp, #0]
 8003dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	4906      	ldr	r1, [pc, #24]	; (8003df0 <HAL_I2C_Master_Receive+0x22c>)
 8003dd6:	68f8      	ldr	r0, [r7, #12]
 8003dd8:	f000 fa6a 	bl	80042b0 <I2C_WaitOnFlagUntilTimeout>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d008      	beq.n	8003df4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e10e      	b.n	8004004 <HAL_I2C_Master_Receive+0x440>
 8003de6:	bf00      	nop
 8003de8:	00100002 	.word	0x00100002
 8003dec:	ffff0000 	.word	0xffff0000
 8003df0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e02:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	691a      	ldr	r2, [r3, #16]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0e:	b2d2      	uxtb	r2, r2
 8003e10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e16:	1c5a      	adds	r2, r3, #1
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e20:	3b01      	subs	r3, #1
 8003e22:	b29a      	uxth	r2, r3
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	b29a      	uxth	r2, r3
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	691a      	ldr	r2, [r3, #16]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e40:	b2d2      	uxtb	r2, r2
 8003e42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e48:	1c5a      	adds	r2, r3, #1
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e52:	3b01      	subs	r3, #1
 8003e54:	b29a      	uxth	r2, r3
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	3b01      	subs	r3, #1
 8003e62:	b29a      	uxth	r2, r3
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e68:	e0b8      	b.n	8003fdc <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6c:	9300      	str	r3, [sp, #0]
 8003e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e70:	2200      	movs	r2, #0
 8003e72:	4966      	ldr	r1, [pc, #408]	; (800400c <HAL_I2C_Master_Receive+0x448>)
 8003e74:	68f8      	ldr	r0, [r7, #12]
 8003e76:	f000 fa1b 	bl	80042b0 <I2C_WaitOnFlagUntilTimeout>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d001      	beq.n	8003e84 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e0bf      	b.n	8004004 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	691a      	ldr	r2, [r3, #16]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9e:	b2d2      	uxtb	r2, r2
 8003ea0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea6:	1c5a      	adds	r2, r3, #1
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eb0:	3b01      	subs	r3, #1
 8003eb2:	b29a      	uxth	r2, r3
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	b29a      	uxth	r2, r3
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec8:	9300      	str	r3, [sp, #0]
 8003eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ecc:	2200      	movs	r2, #0
 8003ece:	494f      	ldr	r1, [pc, #316]	; (800400c <HAL_I2C_Master_Receive+0x448>)
 8003ed0:	68f8      	ldr	r0, [r7, #12]
 8003ed2:	f000 f9ed 	bl	80042b0 <I2C_WaitOnFlagUntilTimeout>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d001      	beq.n	8003ee0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e091      	b.n	8004004 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	691a      	ldr	r2, [r3, #16]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efa:	b2d2      	uxtb	r2, r2
 8003efc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f02:	1c5a      	adds	r2, r3, #1
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f0c:	3b01      	subs	r3, #1
 8003f0e:	b29a      	uxth	r2, r3
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	3b01      	subs	r3, #1
 8003f1c:	b29a      	uxth	r2, r3
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	691a      	ldr	r2, [r3, #16]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2c:	b2d2      	uxtb	r2, r2
 8003f2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f34:	1c5a      	adds	r2, r3, #1
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	b29a      	uxth	r2, r3
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	3b01      	subs	r3, #1
 8003f4e:	b29a      	uxth	r2, r3
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f54:	e042      	b.n	8003fdc <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f58:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f5a:	68f8      	ldr	r0, [r7, #12]
 8003f5c:	f000 fb00 	bl	8004560 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d001      	beq.n	8003f6a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e04c      	b.n	8004004 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	691a      	ldr	r2, [r3, #16]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f74:	b2d2      	uxtb	r2, r2
 8003f76:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7c:	1c5a      	adds	r2, r3, #1
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f86:	3b01      	subs	r3, #1
 8003f88:	b29a      	uxth	r2, r3
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	3b01      	subs	r3, #1
 8003f96:	b29a      	uxth	r2, r3
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	695b      	ldr	r3, [r3, #20]
 8003fa2:	f003 0304 	and.w	r3, r3, #4
 8003fa6:	2b04      	cmp	r3, #4
 8003fa8:	d118      	bne.n	8003fdc <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	691a      	ldr	r2, [r3, #16]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb4:	b2d2      	uxtb	r2, r2
 8003fb6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fbc:	1c5a      	adds	r2, r3, #1
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fc6:	3b01      	subs	r3, #1
 8003fc8:	b29a      	uxth	r2, r3
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	3b01      	subs	r3, #1
 8003fd6:	b29a      	uxth	r2, r3
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	f47f aec2 	bne.w	8003d6a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2220      	movs	r2, #32
 8003fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003ffe:	2300      	movs	r3, #0
 8004000:	e000      	b.n	8004004 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004002:	2302      	movs	r3, #2
  }
}
 8004004:	4618      	mov	r0, r3
 8004006:	3728      	adds	r7, #40	; 0x28
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}
 800400c:	00010004 	.word	0x00010004

08004010 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b088      	sub	sp, #32
 8004014:	af02      	add	r7, sp, #8
 8004016:	60f8      	str	r0, [r7, #12]
 8004018:	607a      	str	r2, [r7, #4]
 800401a:	603b      	str	r3, [r7, #0]
 800401c:	460b      	mov	r3, r1
 800401e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004024:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	2b08      	cmp	r3, #8
 800402a:	d006      	beq.n	800403a <I2C_MasterRequestWrite+0x2a>
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	2b01      	cmp	r3, #1
 8004030:	d003      	beq.n	800403a <I2C_MasterRequestWrite+0x2a>
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004038:	d108      	bne.n	800404c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004048:	601a      	str	r2, [r3, #0]
 800404a:	e00b      	b.n	8004064 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004050:	2b12      	cmp	r3, #18
 8004052:	d107      	bne.n	8004064 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004062:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	9300      	str	r3, [sp, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004070:	68f8      	ldr	r0, [r7, #12]
 8004072:	f000 f91d 	bl	80042b0 <I2C_WaitOnFlagUntilTimeout>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d00d      	beq.n	8004098 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004086:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800408a:	d103      	bne.n	8004094 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004092:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004094:	2303      	movs	r3, #3
 8004096:	e035      	b.n	8004104 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	691b      	ldr	r3, [r3, #16]
 800409c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040a0:	d108      	bne.n	80040b4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80040a2:	897b      	ldrh	r3, [r7, #10]
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	461a      	mov	r2, r3
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80040b0:	611a      	str	r2, [r3, #16]
 80040b2:	e01b      	b.n	80040ec <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80040b4:	897b      	ldrh	r3, [r7, #10]
 80040b6:	11db      	asrs	r3, r3, #7
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	f003 0306 	and.w	r3, r3, #6
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	f063 030f 	orn	r3, r3, #15
 80040c4:	b2da      	uxtb	r2, r3
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	490e      	ldr	r1, [pc, #56]	; (800410c <I2C_MasterRequestWrite+0xfc>)
 80040d2:	68f8      	ldr	r0, [r7, #12]
 80040d4:	f000 f943 	bl	800435e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d001      	beq.n	80040e2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e010      	b.n	8004104 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80040e2:	897b      	ldrh	r3, [r7, #10]
 80040e4:	b2da      	uxtb	r2, r3
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	4907      	ldr	r1, [pc, #28]	; (8004110 <I2C_MasterRequestWrite+0x100>)
 80040f2:	68f8      	ldr	r0, [r7, #12]
 80040f4:	f000 f933 	bl	800435e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d001      	beq.n	8004102 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e000      	b.n	8004104 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004102:	2300      	movs	r3, #0
}
 8004104:	4618      	mov	r0, r3
 8004106:	3718      	adds	r7, #24
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}
 800410c:	00010008 	.word	0x00010008
 8004110:	00010002 	.word	0x00010002

08004114 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b088      	sub	sp, #32
 8004118:	af02      	add	r7, sp, #8
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	607a      	str	r2, [r7, #4]
 800411e:	603b      	str	r3, [r7, #0]
 8004120:	460b      	mov	r3, r1
 8004122:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004128:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004138:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	2b08      	cmp	r3, #8
 800413e:	d006      	beq.n	800414e <I2C_MasterRequestRead+0x3a>
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	2b01      	cmp	r3, #1
 8004144:	d003      	beq.n	800414e <I2C_MasterRequestRead+0x3a>
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800414c:	d108      	bne.n	8004160 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800415c:	601a      	str	r2, [r3, #0]
 800415e:	e00b      	b.n	8004178 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004164:	2b11      	cmp	r3, #17
 8004166:	d107      	bne.n	8004178 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004176:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	9300      	str	r3, [sp, #0]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004184:	68f8      	ldr	r0, [r7, #12]
 8004186:	f000 f893 	bl	80042b0 <I2C_WaitOnFlagUntilTimeout>
 800418a:	4603      	mov	r3, r0
 800418c:	2b00      	cmp	r3, #0
 800418e:	d00d      	beq.n	80041ac <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800419a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800419e:	d103      	bne.n	80041a8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80041a8:	2303      	movs	r3, #3
 80041aa:	e079      	b.n	80042a0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	691b      	ldr	r3, [r3, #16]
 80041b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041b4:	d108      	bne.n	80041c8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80041b6:	897b      	ldrh	r3, [r7, #10]
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	f043 0301 	orr.w	r3, r3, #1
 80041be:	b2da      	uxtb	r2, r3
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	611a      	str	r2, [r3, #16]
 80041c6:	e05f      	b.n	8004288 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80041c8:	897b      	ldrh	r3, [r7, #10]
 80041ca:	11db      	asrs	r3, r3, #7
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	f003 0306 	and.w	r3, r3, #6
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	f063 030f 	orn	r3, r3, #15
 80041d8:	b2da      	uxtb	r2, r3
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	4930      	ldr	r1, [pc, #192]	; (80042a8 <I2C_MasterRequestRead+0x194>)
 80041e6:	68f8      	ldr	r0, [r7, #12]
 80041e8:	f000 f8b9 	bl	800435e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d001      	beq.n	80041f6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e054      	b.n	80042a0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80041f6:	897b      	ldrh	r3, [r7, #10]
 80041f8:	b2da      	uxtb	r2, r3
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	4929      	ldr	r1, [pc, #164]	; (80042ac <I2C_MasterRequestRead+0x198>)
 8004206:	68f8      	ldr	r0, [r7, #12]
 8004208:	f000 f8a9 	bl	800435e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d001      	beq.n	8004216 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e044      	b.n	80042a0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004216:	2300      	movs	r3, #0
 8004218:	613b      	str	r3, [r7, #16]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	695b      	ldr	r3, [r3, #20]
 8004220:	613b      	str	r3, [r7, #16]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	699b      	ldr	r3, [r3, #24]
 8004228:	613b      	str	r3, [r7, #16]
 800422a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800423a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	9300      	str	r3, [sp, #0]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004248:	68f8      	ldr	r0, [r7, #12]
 800424a:	f000 f831 	bl	80042b0 <I2C_WaitOnFlagUntilTimeout>
 800424e:	4603      	mov	r3, r0
 8004250:	2b00      	cmp	r3, #0
 8004252:	d00d      	beq.n	8004270 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800425e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004262:	d103      	bne.n	800426c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f44f 7200 	mov.w	r2, #512	; 0x200
 800426a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800426c:	2303      	movs	r3, #3
 800426e:	e017      	b.n	80042a0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004270:	897b      	ldrh	r3, [r7, #10]
 8004272:	11db      	asrs	r3, r3, #7
 8004274:	b2db      	uxtb	r3, r3
 8004276:	f003 0306 	and.w	r3, r3, #6
 800427a:	b2db      	uxtb	r3, r3
 800427c:	f063 030e 	orn	r3, r3, #14
 8004280:	b2da      	uxtb	r2, r3
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	4907      	ldr	r1, [pc, #28]	; (80042ac <I2C_MasterRequestRead+0x198>)
 800428e:	68f8      	ldr	r0, [r7, #12]
 8004290:	f000 f865 	bl	800435e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004294:	4603      	mov	r3, r0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d001      	beq.n	800429e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e000      	b.n	80042a0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800429e:	2300      	movs	r3, #0
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3718      	adds	r7, #24
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	00010008 	.word	0x00010008
 80042ac:	00010002 	.word	0x00010002

080042b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	60b9      	str	r1, [r7, #8]
 80042ba:	603b      	str	r3, [r7, #0]
 80042bc:	4613      	mov	r3, r2
 80042be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042c0:	e025      	b.n	800430e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042c8:	d021      	beq.n	800430e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042ca:	f7fe fce3 	bl	8002c94 <HAL_GetTick>
 80042ce:	4602      	mov	r2, r0
 80042d0:	69bb      	ldr	r3, [r7, #24]
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	683a      	ldr	r2, [r7, #0]
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d302      	bcc.n	80042e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d116      	bne.n	800430e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2200      	movs	r2, #0
 80042e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2220      	movs	r2, #32
 80042ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fa:	f043 0220 	orr.w	r2, r3, #32
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e023      	b.n	8004356 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	0c1b      	lsrs	r3, r3, #16
 8004312:	b2db      	uxtb	r3, r3
 8004314:	2b01      	cmp	r3, #1
 8004316:	d10d      	bne.n	8004334 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	695b      	ldr	r3, [r3, #20]
 800431e:	43da      	mvns	r2, r3
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	4013      	ands	r3, r2
 8004324:	b29b      	uxth	r3, r3
 8004326:	2b00      	cmp	r3, #0
 8004328:	bf0c      	ite	eq
 800432a:	2301      	moveq	r3, #1
 800432c:	2300      	movne	r3, #0
 800432e:	b2db      	uxtb	r3, r3
 8004330:	461a      	mov	r2, r3
 8004332:	e00c      	b.n	800434e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	699b      	ldr	r3, [r3, #24]
 800433a:	43da      	mvns	r2, r3
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	4013      	ands	r3, r2
 8004340:	b29b      	uxth	r3, r3
 8004342:	2b00      	cmp	r3, #0
 8004344:	bf0c      	ite	eq
 8004346:	2301      	moveq	r3, #1
 8004348:	2300      	movne	r3, #0
 800434a:	b2db      	uxtb	r3, r3
 800434c:	461a      	mov	r2, r3
 800434e:	79fb      	ldrb	r3, [r7, #7]
 8004350:	429a      	cmp	r2, r3
 8004352:	d0b6      	beq.n	80042c2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3710      	adds	r7, #16
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}

0800435e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800435e:	b580      	push	{r7, lr}
 8004360:	b084      	sub	sp, #16
 8004362:	af00      	add	r7, sp, #0
 8004364:	60f8      	str	r0, [r7, #12]
 8004366:	60b9      	str	r1, [r7, #8]
 8004368:	607a      	str	r2, [r7, #4]
 800436a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800436c:	e051      	b.n	8004412 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	695b      	ldr	r3, [r3, #20]
 8004374:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004378:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800437c:	d123      	bne.n	80043c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800438c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004396:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2200      	movs	r2, #0
 800439c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2220      	movs	r2, #32
 80043a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b2:	f043 0204 	orr.w	r2, r3, #4
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2200      	movs	r2, #0
 80043be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e046      	b.n	8004454 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043cc:	d021      	beq.n	8004412 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043ce:	f7fe fc61 	bl	8002c94 <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	429a      	cmp	r2, r3
 80043dc:	d302      	bcc.n	80043e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d116      	bne.n	8004412 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2200      	movs	r2, #0
 80043e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2220      	movs	r2, #32
 80043ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fe:	f043 0220 	orr.w	r2, r3, #32
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2200      	movs	r2, #0
 800440a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e020      	b.n	8004454 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	0c1b      	lsrs	r3, r3, #16
 8004416:	b2db      	uxtb	r3, r3
 8004418:	2b01      	cmp	r3, #1
 800441a:	d10c      	bne.n	8004436 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	695b      	ldr	r3, [r3, #20]
 8004422:	43da      	mvns	r2, r3
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	4013      	ands	r3, r2
 8004428:	b29b      	uxth	r3, r3
 800442a:	2b00      	cmp	r3, #0
 800442c:	bf14      	ite	ne
 800442e:	2301      	movne	r3, #1
 8004430:	2300      	moveq	r3, #0
 8004432:	b2db      	uxtb	r3, r3
 8004434:	e00b      	b.n	800444e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	699b      	ldr	r3, [r3, #24]
 800443c:	43da      	mvns	r2, r3
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	4013      	ands	r3, r2
 8004442:	b29b      	uxth	r3, r3
 8004444:	2b00      	cmp	r3, #0
 8004446:	bf14      	ite	ne
 8004448:	2301      	movne	r3, #1
 800444a:	2300      	moveq	r3, #0
 800444c:	b2db      	uxtb	r3, r3
 800444e:	2b00      	cmp	r3, #0
 8004450:	d18d      	bne.n	800436e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004452:	2300      	movs	r3, #0
}
 8004454:	4618      	mov	r0, r3
 8004456:	3710      	adds	r7, #16
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	60f8      	str	r0, [r7, #12]
 8004464:	60b9      	str	r1, [r7, #8]
 8004466:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004468:	e02d      	b.n	80044c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800446a:	68f8      	ldr	r0, [r7, #12]
 800446c:	f000 f8ce 	bl	800460c <I2C_IsAcknowledgeFailed>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d001      	beq.n	800447a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e02d      	b.n	80044d6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004480:	d021      	beq.n	80044c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004482:	f7fe fc07 	bl	8002c94 <HAL_GetTick>
 8004486:	4602      	mov	r2, r0
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	68ba      	ldr	r2, [r7, #8]
 800448e:	429a      	cmp	r2, r3
 8004490:	d302      	bcc.n	8004498 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d116      	bne.n	80044c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2200      	movs	r2, #0
 800449c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2220      	movs	r2, #32
 80044a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b2:	f043 0220 	orr.w	r2, r3, #32
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2200      	movs	r2, #0
 80044be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e007      	b.n	80044d6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	695b      	ldr	r3, [r3, #20]
 80044cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044d0:	2b80      	cmp	r3, #128	; 0x80
 80044d2:	d1ca      	bne.n	800446a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3710      	adds	r7, #16
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}

080044de <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044de:	b580      	push	{r7, lr}
 80044e0:	b084      	sub	sp, #16
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	60f8      	str	r0, [r7, #12]
 80044e6:	60b9      	str	r1, [r7, #8]
 80044e8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80044ea:	e02d      	b.n	8004548 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80044ec:	68f8      	ldr	r0, [r7, #12]
 80044ee:	f000 f88d 	bl	800460c <I2C_IsAcknowledgeFailed>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d001      	beq.n	80044fc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e02d      	b.n	8004558 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004502:	d021      	beq.n	8004548 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004504:	f7fe fbc6 	bl	8002c94 <HAL_GetTick>
 8004508:	4602      	mov	r2, r0
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	68ba      	ldr	r2, [r7, #8]
 8004510:	429a      	cmp	r2, r3
 8004512:	d302      	bcc.n	800451a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d116      	bne.n	8004548 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2200      	movs	r2, #0
 800451e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2220      	movs	r2, #32
 8004524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2200      	movs	r2, #0
 800452c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004534:	f043 0220 	orr.w	r2, r3, #32
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2200      	movs	r2, #0
 8004540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	e007      	b.n	8004558 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	695b      	ldr	r3, [r3, #20]
 800454e:	f003 0304 	and.w	r3, r3, #4
 8004552:	2b04      	cmp	r3, #4
 8004554:	d1ca      	bne.n	80044ec <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004556:	2300      	movs	r3, #0
}
 8004558:	4618      	mov	r0, r3
 800455a:	3710      	adds	r7, #16
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800456c:	e042      	b.n	80045f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	695b      	ldr	r3, [r3, #20]
 8004574:	f003 0310 	and.w	r3, r3, #16
 8004578:	2b10      	cmp	r3, #16
 800457a:	d119      	bne.n	80045b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f06f 0210 	mvn.w	r2, #16
 8004584:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2200      	movs	r2, #0
 800458a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2220      	movs	r2, #32
 8004590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2200      	movs	r2, #0
 8004598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e029      	b.n	8004604 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045b0:	f7fe fb70 	bl	8002c94 <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	68ba      	ldr	r2, [r7, #8]
 80045bc:	429a      	cmp	r2, r3
 80045be:	d302      	bcc.n	80045c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d116      	bne.n	80045f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2200      	movs	r2, #0
 80045ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2220      	movs	r2, #32
 80045d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2200      	movs	r2, #0
 80045d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e0:	f043 0220 	orr.w	r2, r3, #32
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e007      	b.n	8004604 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	695b      	ldr	r3, [r3, #20]
 80045fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045fe:	2b40      	cmp	r3, #64	; 0x40
 8004600:	d1b5      	bne.n	800456e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004602:	2300      	movs	r3, #0
}
 8004604:	4618      	mov	r0, r3
 8004606:	3710      	adds	r7, #16
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}

0800460c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	695b      	ldr	r3, [r3, #20]
 800461a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800461e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004622:	d11b      	bne.n	800465c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800462c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2220      	movs	r2, #32
 8004638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004648:	f043 0204 	orr.w	r2, r3, #4
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	e000      	b.n	800465e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	370c      	adds	r7, #12
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr

0800466a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800466a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800466c:	b08f      	sub	sp, #60	; 0x3c
 800466e:	af0a      	add	r7, sp, #40	; 0x28
 8004670:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d101      	bne.n	800467c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	e10f      	b.n	800489c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004688:	b2db      	uxtb	r3, r3
 800468a:	2b00      	cmp	r3, #0
 800468c:	d106      	bne.n	800469c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f7fe f95e 	bl	8002958 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2203      	movs	r2, #3
 80046a0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d102      	bne.n	80046b6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2200      	movs	r2, #0
 80046b4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4618      	mov	r0, r3
 80046bc:	f003 fb98 	bl	8007df0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	603b      	str	r3, [r7, #0]
 80046c6:	687e      	ldr	r6, [r7, #4]
 80046c8:	466d      	mov	r5, sp
 80046ca:	f106 0410 	add.w	r4, r6, #16
 80046ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80046d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80046d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80046d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80046d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80046da:	e885 0003 	stmia.w	r5, {r0, r1}
 80046de:	1d33      	adds	r3, r6, #4
 80046e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80046e2:	6838      	ldr	r0, [r7, #0]
 80046e4:	f003 fa80 	bl	8007be8 <USB_CoreInit>
 80046e8:	4603      	mov	r3, r0
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d005      	beq.n	80046fa <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2202      	movs	r2, #2
 80046f2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e0d0      	b.n	800489c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	2100      	movs	r1, #0
 8004700:	4618      	mov	r0, r3
 8004702:	f003 fb86 	bl	8007e12 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004706:	2300      	movs	r3, #0
 8004708:	73fb      	strb	r3, [r7, #15]
 800470a:	e04a      	b.n	80047a2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800470c:	7bfa      	ldrb	r2, [r7, #15]
 800470e:	6879      	ldr	r1, [r7, #4]
 8004710:	4613      	mov	r3, r2
 8004712:	00db      	lsls	r3, r3, #3
 8004714:	1a9b      	subs	r3, r3, r2
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	440b      	add	r3, r1
 800471a:	333d      	adds	r3, #61	; 0x3d
 800471c:	2201      	movs	r2, #1
 800471e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004720:	7bfa      	ldrb	r2, [r7, #15]
 8004722:	6879      	ldr	r1, [r7, #4]
 8004724:	4613      	mov	r3, r2
 8004726:	00db      	lsls	r3, r3, #3
 8004728:	1a9b      	subs	r3, r3, r2
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	440b      	add	r3, r1
 800472e:	333c      	adds	r3, #60	; 0x3c
 8004730:	7bfa      	ldrb	r2, [r7, #15]
 8004732:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004734:	7bfa      	ldrb	r2, [r7, #15]
 8004736:	7bfb      	ldrb	r3, [r7, #15]
 8004738:	b298      	uxth	r0, r3
 800473a:	6879      	ldr	r1, [r7, #4]
 800473c:	4613      	mov	r3, r2
 800473e:	00db      	lsls	r3, r3, #3
 8004740:	1a9b      	subs	r3, r3, r2
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	440b      	add	r3, r1
 8004746:	3342      	adds	r3, #66	; 0x42
 8004748:	4602      	mov	r2, r0
 800474a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800474c:	7bfa      	ldrb	r2, [r7, #15]
 800474e:	6879      	ldr	r1, [r7, #4]
 8004750:	4613      	mov	r3, r2
 8004752:	00db      	lsls	r3, r3, #3
 8004754:	1a9b      	subs	r3, r3, r2
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	440b      	add	r3, r1
 800475a:	333f      	adds	r3, #63	; 0x3f
 800475c:	2200      	movs	r2, #0
 800475e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004760:	7bfa      	ldrb	r2, [r7, #15]
 8004762:	6879      	ldr	r1, [r7, #4]
 8004764:	4613      	mov	r3, r2
 8004766:	00db      	lsls	r3, r3, #3
 8004768:	1a9b      	subs	r3, r3, r2
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	440b      	add	r3, r1
 800476e:	3344      	adds	r3, #68	; 0x44
 8004770:	2200      	movs	r2, #0
 8004772:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004774:	7bfa      	ldrb	r2, [r7, #15]
 8004776:	6879      	ldr	r1, [r7, #4]
 8004778:	4613      	mov	r3, r2
 800477a:	00db      	lsls	r3, r3, #3
 800477c:	1a9b      	subs	r3, r3, r2
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	440b      	add	r3, r1
 8004782:	3348      	adds	r3, #72	; 0x48
 8004784:	2200      	movs	r2, #0
 8004786:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004788:	7bfa      	ldrb	r2, [r7, #15]
 800478a:	6879      	ldr	r1, [r7, #4]
 800478c:	4613      	mov	r3, r2
 800478e:	00db      	lsls	r3, r3, #3
 8004790:	1a9b      	subs	r3, r3, r2
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	440b      	add	r3, r1
 8004796:	3350      	adds	r3, #80	; 0x50
 8004798:	2200      	movs	r2, #0
 800479a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800479c:	7bfb      	ldrb	r3, [r7, #15]
 800479e:	3301      	adds	r3, #1
 80047a0:	73fb      	strb	r3, [r7, #15]
 80047a2:	7bfa      	ldrb	r2, [r7, #15]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d3af      	bcc.n	800470c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047ac:	2300      	movs	r3, #0
 80047ae:	73fb      	strb	r3, [r7, #15]
 80047b0:	e044      	b.n	800483c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80047b2:	7bfa      	ldrb	r2, [r7, #15]
 80047b4:	6879      	ldr	r1, [r7, #4]
 80047b6:	4613      	mov	r3, r2
 80047b8:	00db      	lsls	r3, r3, #3
 80047ba:	1a9b      	subs	r3, r3, r2
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	440b      	add	r3, r1
 80047c0:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80047c4:	2200      	movs	r2, #0
 80047c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80047c8:	7bfa      	ldrb	r2, [r7, #15]
 80047ca:	6879      	ldr	r1, [r7, #4]
 80047cc:	4613      	mov	r3, r2
 80047ce:	00db      	lsls	r3, r3, #3
 80047d0:	1a9b      	subs	r3, r3, r2
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	440b      	add	r3, r1
 80047d6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80047da:	7bfa      	ldrb	r2, [r7, #15]
 80047dc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80047de:	7bfa      	ldrb	r2, [r7, #15]
 80047e0:	6879      	ldr	r1, [r7, #4]
 80047e2:	4613      	mov	r3, r2
 80047e4:	00db      	lsls	r3, r3, #3
 80047e6:	1a9b      	subs	r3, r3, r2
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	440b      	add	r3, r1
 80047ec:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80047f0:	2200      	movs	r2, #0
 80047f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80047f4:	7bfa      	ldrb	r2, [r7, #15]
 80047f6:	6879      	ldr	r1, [r7, #4]
 80047f8:	4613      	mov	r3, r2
 80047fa:	00db      	lsls	r3, r3, #3
 80047fc:	1a9b      	subs	r3, r3, r2
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	440b      	add	r3, r1
 8004802:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004806:	2200      	movs	r2, #0
 8004808:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800480a:	7bfa      	ldrb	r2, [r7, #15]
 800480c:	6879      	ldr	r1, [r7, #4]
 800480e:	4613      	mov	r3, r2
 8004810:	00db      	lsls	r3, r3, #3
 8004812:	1a9b      	subs	r3, r3, r2
 8004814:	009b      	lsls	r3, r3, #2
 8004816:	440b      	add	r3, r1
 8004818:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800481c:	2200      	movs	r2, #0
 800481e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004820:	7bfa      	ldrb	r2, [r7, #15]
 8004822:	6879      	ldr	r1, [r7, #4]
 8004824:	4613      	mov	r3, r2
 8004826:	00db      	lsls	r3, r3, #3
 8004828:	1a9b      	subs	r3, r3, r2
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	440b      	add	r3, r1
 800482e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004832:	2200      	movs	r2, #0
 8004834:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004836:	7bfb      	ldrb	r3, [r7, #15]
 8004838:	3301      	adds	r3, #1
 800483a:	73fb      	strb	r3, [r7, #15]
 800483c:	7bfa      	ldrb	r2, [r7, #15]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	429a      	cmp	r2, r3
 8004844:	d3b5      	bcc.n	80047b2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	603b      	str	r3, [r7, #0]
 800484c:	687e      	ldr	r6, [r7, #4]
 800484e:	466d      	mov	r5, sp
 8004850:	f106 0410 	add.w	r4, r6, #16
 8004854:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004856:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004858:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800485a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800485c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004860:	e885 0003 	stmia.w	r5, {r0, r1}
 8004864:	1d33      	adds	r3, r6, #4
 8004866:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004868:	6838      	ldr	r0, [r7, #0]
 800486a:	f003 fafd 	bl	8007e68 <USB_DevInit>
 800486e:	4603      	mov	r3, r0
 8004870:	2b00      	cmp	r3, #0
 8004872:	d005      	beq.n	8004880 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2202      	movs	r2, #2
 8004878:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	e00d      	b.n	800489c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4618      	mov	r0, r3
 8004896:	f003 fd2f 	bl	80082f8 <USB_DevDisconnect>

  return HAL_OK;
 800489a:	2300      	movs	r3, #0
}
 800489c:	4618      	mov	r0, r3
 800489e:	3714      	adds	r7, #20
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080048a4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80048a4:	b590      	push	{r4, r7, lr}
 80048a6:	b08d      	sub	sp, #52	; 0x34
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048b2:	6a3b      	ldr	r3, [r7, #32]
 80048b4:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4618      	mov	r0, r3
 80048bc:	f003 fdd0 	bl	8008460 <USB_GetMode>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	f040 839d 	bne.w	8005002 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4618      	mov	r0, r3
 80048ce:	f003 fd34 	bl	800833a <USB_ReadInterrupts>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	f000 8393 	beq.w	8005000 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4618      	mov	r0, r3
 80048e0:	f003 fd2b 	bl	800833a <USB_ReadInterrupts>
 80048e4:	4603      	mov	r3, r0
 80048e6:	f003 0302 	and.w	r3, r3, #2
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	d107      	bne.n	80048fe <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	695a      	ldr	r2, [r3, #20]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f002 0202 	and.w	r2, r2, #2
 80048fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4618      	mov	r0, r3
 8004904:	f003 fd19 	bl	800833a <USB_ReadInterrupts>
 8004908:	4603      	mov	r3, r0
 800490a:	f003 0310 	and.w	r3, r3, #16
 800490e:	2b10      	cmp	r3, #16
 8004910:	d161      	bne.n	80049d6 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	699a      	ldr	r2, [r3, #24]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f022 0210 	bic.w	r2, r2, #16
 8004920:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8004922:	6a3b      	ldr	r3, [r7, #32]
 8004924:	6a1b      	ldr	r3, [r3, #32]
 8004926:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8004928:	69bb      	ldr	r3, [r7, #24]
 800492a:	f003 020f 	and.w	r2, r3, #15
 800492e:	4613      	mov	r3, r2
 8004930:	00db      	lsls	r3, r3, #3
 8004932:	1a9b      	subs	r3, r3, r2
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	4413      	add	r3, r2
 800493e:	3304      	adds	r3, #4
 8004940:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	0c5b      	lsrs	r3, r3, #17
 8004946:	f003 030f 	and.w	r3, r3, #15
 800494a:	2b02      	cmp	r3, #2
 800494c:	d124      	bne.n	8004998 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800494e:	69ba      	ldr	r2, [r7, #24]
 8004950:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004954:	4013      	ands	r3, r2
 8004956:	2b00      	cmp	r3, #0
 8004958:	d035      	beq.n	80049c6 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800495e:	69bb      	ldr	r3, [r7, #24]
 8004960:	091b      	lsrs	r3, r3, #4
 8004962:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004964:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004968:	b29b      	uxth	r3, r3
 800496a:	461a      	mov	r2, r3
 800496c:	6a38      	ldr	r0, [r7, #32]
 800496e:	f003 fc9a 	bl	80082a6 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	68da      	ldr	r2, [r3, #12]
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	091b      	lsrs	r3, r3, #4
 800497a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800497e:	441a      	add	r2, r3
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	699a      	ldr	r2, [r3, #24]
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	091b      	lsrs	r3, r3, #4
 800498c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004990:	441a      	add	r2, r3
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	619a      	str	r2, [r3, #24]
 8004996:	e016      	b.n	80049c6 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8004998:	69bb      	ldr	r3, [r7, #24]
 800499a:	0c5b      	lsrs	r3, r3, #17
 800499c:	f003 030f 	and.w	r3, r3, #15
 80049a0:	2b06      	cmp	r3, #6
 80049a2:	d110      	bne.n	80049c6 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80049aa:	2208      	movs	r2, #8
 80049ac:	4619      	mov	r1, r3
 80049ae:	6a38      	ldr	r0, [r7, #32]
 80049b0:	f003 fc79 	bl	80082a6 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	699a      	ldr	r2, [r3, #24]
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	091b      	lsrs	r3, r3, #4
 80049bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80049c0:	441a      	add	r2, r3
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	699a      	ldr	r2, [r3, #24]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f042 0210 	orr.w	r2, r2, #16
 80049d4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4618      	mov	r0, r3
 80049dc:	f003 fcad 	bl	800833a <USB_ReadInterrupts>
 80049e0:	4603      	mov	r3, r0
 80049e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049e6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80049ea:	d16e      	bne.n	8004aca <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80049ec:	2300      	movs	r3, #0
 80049ee:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4618      	mov	r0, r3
 80049f6:	f003 fcb3 	bl	8008360 <USB_ReadDevAllOutEpInterrupt>
 80049fa:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80049fc:	e062      	b.n	8004ac4 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80049fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a00:	f003 0301 	and.w	r3, r3, #1
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d057      	beq.n	8004ab8 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a0e:	b2d2      	uxtb	r2, r2
 8004a10:	4611      	mov	r1, r2
 8004a12:	4618      	mov	r0, r3
 8004a14:	f003 fcd8 	bl	80083c8 <USB_ReadDevOutEPInterrupt>
 8004a18:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	f003 0301 	and.w	r3, r3, #1
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d00c      	beq.n	8004a3e <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a26:	015a      	lsls	r2, r3, #5
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	4413      	add	r3, r2
 8004a2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a30:	461a      	mov	r2, r3
 8004a32:	2301      	movs	r3, #1
 8004a34:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004a36:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f000 fbe9 	bl	8005210 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	f003 0308 	and.w	r3, r3, #8
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d00c      	beq.n	8004a62 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4a:	015a      	lsls	r2, r3, #5
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	4413      	add	r3, r2
 8004a50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a54:	461a      	mov	r2, r3
 8004a56:	2308      	movs	r3, #8
 8004a58:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004a5a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f000 fce3 	bl	8005428 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	f003 0310 	and.w	r3, r3, #16
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d008      	beq.n	8004a7e <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6e:	015a      	lsls	r2, r3, #5
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	4413      	add	r3, r2
 8004a74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a78:	461a      	mov	r2, r3
 8004a7a:	2310      	movs	r3, #16
 8004a7c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	f003 0320 	and.w	r3, r3, #32
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d008      	beq.n	8004a9a <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8a:	015a      	lsls	r2, r3, #5
 8004a8c:	69fb      	ldr	r3, [r7, #28]
 8004a8e:	4413      	add	r3, r2
 8004a90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a94:	461a      	mov	r2, r3
 8004a96:	2320      	movs	r3, #32
 8004a98:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d009      	beq.n	8004ab8 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa6:	015a      	lsls	r2, r3, #5
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	4413      	add	r3, r2
 8004aac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004ab6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aba:	3301      	adds	r3, #1
 8004abc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac0:	085b      	lsrs	r3, r3, #1
 8004ac2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d199      	bne.n	80049fe <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f003 fc33 	bl	800833a <USB_ReadInterrupts>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ada:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004ade:	f040 80c0 	bne.w	8004c62 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f003 fc54 	bl	8008394 <USB_ReadDevAllInEpInterrupt>
 8004aec:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004aee:	2300      	movs	r3, #0
 8004af0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004af2:	e0b2      	b.n	8004c5a <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af6:	f003 0301 	and.w	r3, r3, #1
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	f000 80a7 	beq.w	8004c4e <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b06:	b2d2      	uxtb	r2, r2
 8004b08:	4611      	mov	r1, r2
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f003 fc7a 	bl	8008404 <USB_ReadDevInEPInterrupt>
 8004b10:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	f003 0301 	and.w	r3, r3, #1
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d057      	beq.n	8004bcc <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1e:	f003 030f 	and.w	r3, r3, #15
 8004b22:	2201      	movs	r2, #1
 8004b24:	fa02 f303 	lsl.w	r3, r2, r3
 8004b28:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	43db      	mvns	r3, r3
 8004b36:	69f9      	ldr	r1, [r7, #28]
 8004b38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b42:	015a      	lsls	r2, r3, #5
 8004b44:	69fb      	ldr	r3, [r7, #28]
 8004b46:	4413      	add	r3, r2
 8004b48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	2301      	movs	r3, #1
 8004b50:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d132      	bne.n	8004bc0 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004b5a:	6879      	ldr	r1, [r7, #4]
 8004b5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b5e:	4613      	mov	r3, r2
 8004b60:	00db      	lsls	r3, r3, #3
 8004b62:	1a9b      	subs	r3, r3, r2
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	440b      	add	r3, r1
 8004b68:	3348      	adds	r3, #72	; 0x48
 8004b6a:	6819      	ldr	r1, [r3, #0]
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b70:	4613      	mov	r3, r2
 8004b72:	00db      	lsls	r3, r3, #3
 8004b74:	1a9b      	subs	r3, r3, r2
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	4403      	add	r3, r0
 8004b7a:	3344      	adds	r3, #68	; 0x44
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4419      	add	r1, r3
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b84:	4613      	mov	r3, r2
 8004b86:	00db      	lsls	r3, r3, #3
 8004b88:	1a9b      	subs	r3, r3, r2
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	4403      	add	r3, r0
 8004b8e:	3348      	adds	r3, #72	; 0x48
 8004b90:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d113      	bne.n	8004bc0 <HAL_PCD_IRQHandler+0x31c>
 8004b98:	6879      	ldr	r1, [r7, #4]
 8004b9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	00db      	lsls	r3, r3, #3
 8004ba0:	1a9b      	subs	r3, r3, r2
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	440b      	add	r3, r1
 8004ba6:	3350      	adds	r3, #80	; 0x50
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d108      	bne.n	8004bc0 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6818      	ldr	r0, [r3, #0]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004bb8:	461a      	mov	r2, r3
 8004bba:	2101      	movs	r1, #1
 8004bbc:	f003 fc82 	bl	80084c4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	4619      	mov	r1, r3
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 fa2a 	bl	8005020 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	f003 0308 	and.w	r3, r3, #8
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d008      	beq.n	8004be8 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd8:	015a      	lsls	r2, r3, #5
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	4413      	add	r3, r2
 8004bde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004be2:	461a      	mov	r2, r3
 8004be4:	2308      	movs	r3, #8
 8004be6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	f003 0310 	and.w	r3, r3, #16
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d008      	beq.n	8004c04 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf4:	015a      	lsls	r2, r3, #5
 8004bf6:	69fb      	ldr	r3, [r7, #28]
 8004bf8:	4413      	add	r3, r2
 8004bfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bfe:	461a      	mov	r2, r3
 8004c00:	2310      	movs	r3, #16
 8004c02:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d008      	beq.n	8004c20 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c10:	015a      	lsls	r2, r3, #5
 8004c12:	69fb      	ldr	r3, [r7, #28]
 8004c14:	4413      	add	r3, r2
 8004c16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	2340      	movs	r3, #64	; 0x40
 8004c1e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	f003 0302 	and.w	r3, r3, #2
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d008      	beq.n	8004c3c <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2c:	015a      	lsls	r2, r3, #5
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	4413      	add	r3, r2
 8004c32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c36:	461a      	mov	r2, r3
 8004c38:	2302      	movs	r3, #2
 8004c3a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d003      	beq.n	8004c4e <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004c46:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f000 fa53 	bl	80050f4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c50:	3301      	adds	r3, #1
 8004c52:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c56:	085b      	lsrs	r3, r3, #1
 8004c58:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	f47f af49 	bne.w	8004af4 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4618      	mov	r0, r3
 8004c68:	f003 fb67 	bl	800833a <USB_ReadInterrupts>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c76:	d122      	bne.n	8004cbe <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004c78:	69fb      	ldr	r3, [r7, #28]
 8004c7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	69fa      	ldr	r2, [r7, #28]
 8004c82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c86:	f023 0301 	bic.w	r3, r3, #1
 8004c8a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d108      	bne.n	8004ca8 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004c9e:	2100      	movs	r1, #0
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f000 fc07 	bl	80054b4 <HAL_PCDEx_LPM_Callback>
 8004ca6:	e002      	b.n	8004cae <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f000 f9ed 	bl	8005088 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	695a      	ldr	r2, [r3, #20]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004cbc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f003 fb39 	bl	800833a <USB_ReadInterrupts>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cd2:	d112      	bne.n	8004cfa <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004cd4:	69fb      	ldr	r3, [r7, #28]
 8004cd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	f003 0301 	and.w	r3, r3, #1
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d102      	bne.n	8004cea <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f000 f9c5 	bl	8005074 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	695a      	ldr	r2, [r3, #20]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004cf8:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f003 fb1b 	bl	800833a <USB_ReadInterrupts>
 8004d04:	4603      	mov	r3, r0
 8004d06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d0e:	f040 80c7 	bne.w	8004ea0 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	69fa      	ldr	r2, [r7, #28]
 8004d1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d20:	f023 0301 	bic.w	r3, r3, #1
 8004d24:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	2110      	movs	r1, #16
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f003 f9ff 	bl	8008130 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d32:	2300      	movs	r3, #0
 8004d34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d36:	e056      	b.n	8004de6 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d3a:	015a      	lsls	r2, r3, #5
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	4413      	add	r3, r2
 8004d40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d44:	461a      	mov	r2, r3
 8004d46:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004d4a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d4e:	015a      	lsls	r2, r3, #5
 8004d50:	69fb      	ldr	r3, [r7, #28]
 8004d52:	4413      	add	r3, r2
 8004d54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d5c:	0151      	lsls	r1, r2, #5
 8004d5e:	69fa      	ldr	r2, [r7, #28]
 8004d60:	440a      	add	r2, r1
 8004d62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d66:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004d6a:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d6e:	015a      	lsls	r2, r3, #5
 8004d70:	69fb      	ldr	r3, [r7, #28]
 8004d72:	4413      	add	r3, r2
 8004d74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d7c:	0151      	lsls	r1, r2, #5
 8004d7e:	69fa      	ldr	r2, [r7, #28]
 8004d80:	440a      	add	r2, r1
 8004d82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d86:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004d8a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d8e:	015a      	lsls	r2, r3, #5
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	4413      	add	r3, r2
 8004d94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d98:	461a      	mov	r2, r3
 8004d9a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004d9e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004da2:	015a      	lsls	r2, r3, #5
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	4413      	add	r3, r2
 8004da8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004db0:	0151      	lsls	r1, r2, #5
 8004db2:	69fa      	ldr	r2, [r7, #28]
 8004db4:	440a      	add	r2, r1
 8004db6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004dbe:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dc2:	015a      	lsls	r2, r3, #5
 8004dc4:	69fb      	ldr	r3, [r7, #28]
 8004dc6:	4413      	add	r3, r2
 8004dc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004dd0:	0151      	lsls	r1, r2, #5
 8004dd2:	69fa      	ldr	r2, [r7, #28]
 8004dd4:	440a      	add	r2, r1
 8004dd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dda:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004dde:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004de2:	3301      	adds	r3, #1
 8004de4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d3a3      	bcc.n	8004d38 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004df0:	69fb      	ldr	r3, [r7, #28]
 8004df2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004df6:	69db      	ldr	r3, [r3, #28]
 8004df8:	69fa      	ldr	r2, [r7, #28]
 8004dfa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004dfe:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004e02:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d016      	beq.n	8004e3a <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e16:	69fa      	ldr	r2, [r7, #28]
 8004e18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e1c:	f043 030b 	orr.w	r3, r3, #11
 8004e20:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e2c:	69fa      	ldr	r2, [r7, #28]
 8004e2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e32:	f043 030b 	orr.w	r3, r3, #11
 8004e36:	6453      	str	r3, [r2, #68]	; 0x44
 8004e38:	e015      	b.n	8004e66 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004e3a:	69fb      	ldr	r3, [r7, #28]
 8004e3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e40:	695b      	ldr	r3, [r3, #20]
 8004e42:	69fa      	ldr	r2, [r7, #28]
 8004e44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e48:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004e4c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004e50:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e58:	691b      	ldr	r3, [r3, #16]
 8004e5a:	69fa      	ldr	r2, [r7, #28]
 8004e5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e60:	f043 030b 	orr.w	r3, r3, #11
 8004e64:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004e66:	69fb      	ldr	r3, [r7, #28]
 8004e68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	69fa      	ldr	r2, [r7, #28]
 8004e70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e74:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004e78:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6818      	ldr	r0, [r3, #0]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	691b      	ldr	r3, [r3, #16]
 8004e82:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	f003 fb1a 	bl	80084c4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	695a      	ldr	r2, [r3, #20]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004e9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f003 fa48 	bl	800833a <USB_ReadInterrupts>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004eb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004eb4:	d124      	bne.n	8004f00 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f003 fade 	bl	800847c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f003 f994 	bl	80081f2 <USB_GetDevSpeed>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	461a      	mov	r2, r3
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681c      	ldr	r4, [r3, #0]
 8004ed6:	f000 ff27 	bl	8005d28 <HAL_RCC_GetHCLKFreq>
 8004eda:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	4620      	mov	r0, r4
 8004ee6:	f002 fee1 	bl	8007cac <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f000 f8b8 	bl	8005060 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	695a      	ldr	r2, [r3, #20]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004efe:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4618      	mov	r0, r3
 8004f06:	f003 fa18 	bl	800833a <USB_ReadInterrupts>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	f003 0308 	and.w	r3, r3, #8
 8004f10:	2b08      	cmp	r3, #8
 8004f12:	d10a      	bne.n	8004f2a <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f000 f899 	bl	800504c <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	695a      	ldr	r2, [r3, #20]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f002 0208 	and.w	r2, r2, #8
 8004f28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f003 fa03 	bl	800833a <USB_ReadInterrupts>
 8004f34:	4603      	mov	r3, r0
 8004f36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f3e:	d10f      	bne.n	8004f60 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004f40:	2300      	movs	r3, #0
 8004f42:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f46:	b2db      	uxtb	r3, r3
 8004f48:	4619      	mov	r1, r3
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f000 f8b2 	bl	80050b4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	695a      	ldr	r2, [r3, #20]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004f5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4618      	mov	r0, r3
 8004f66:	f003 f9e8 	bl	800833a <USB_ReadInterrupts>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f70:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f74:	d10f      	bne.n	8004f96 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004f76:	2300      	movs	r3, #0
 8004f78:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	4619      	mov	r1, r3
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f000 f88b 	bl	800509c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	695a      	ldr	r2, [r3, #20]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004f94:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f003 f9cd 	bl	800833a <USB_ReadInterrupts>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004fa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004faa:	d10a      	bne.n	8004fc2 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f000 f88d 	bl	80050cc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	695a      	ldr	r2, [r3, #20]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004fc0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f003 f9b7 	bl	800833a <USB_ReadInterrupts>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	f003 0304 	and.w	r3, r3, #4
 8004fd2:	2b04      	cmp	r3, #4
 8004fd4:	d115      	bne.n	8005002 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	f003 0304 	and.w	r3, r3, #4
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d002      	beq.n	8004fee <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f000 f879 	bl	80050e0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	6859      	ldr	r1, [r3, #4]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	69ba      	ldr	r2, [r7, #24]
 8004ffa:	430a      	orrs	r2, r1
 8004ffc:	605a      	str	r2, [r3, #4]
 8004ffe:	e000      	b.n	8005002 <HAL_PCD_IRQHandler+0x75e>
      return;
 8005000:	bf00      	nop
    }
  }
}
 8005002:	3734      	adds	r7, #52	; 0x34
 8005004:	46bd      	mov	sp, r7
 8005006:	bd90      	pop	{r4, r7, pc}

08005008 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8005008:	b480      	push	{r7}
 800500a:	b083      	sub	sp, #12
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	460b      	mov	r3, r1
 8005012:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 8005014:	bf00      	nop
 8005016:	370c      	adds	r7, #12
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr

08005020 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8005020:	b480      	push	{r7}
 8005022:	b083      	sub	sp, #12
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	460b      	mov	r3, r1
 800502a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 800502c:	bf00      	nop
 800502e:	370c      	adds	r7, #12
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr

08005038 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8005038:	b480      	push	{r7}
 800503a:	b083      	sub	sp, #12
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 8005040:	bf00      	nop
 8005042:	370c      	adds	r7, #12
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr

0800504c <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 8005054:	bf00      	nop
 8005056:	370c      	adds	r7, #12
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr

08005060 <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8005060:	b480      	push	{r7}
 8005062:	b083      	sub	sp, #12
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 8005068:	bf00      	nop
 800506a:	370c      	adds	r7, #12
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr

08005074 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 800507c:	bf00      	nop
 800507e:	370c      	adds	r7, #12
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr

08005088 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8005090:	bf00      	nop
 8005092:	370c      	adds	r7, #12
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr

0800509c <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800509c:	b480      	push	{r7}
 800509e:	b083      	sub	sp, #12
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	460b      	mov	r3, r1
 80050a6:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOOUTIncompleteCallback could be implemented in the user file
   */
}
 80050a8:	bf00      	nop
 80050aa:	370c      	adds	r7, #12
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr

080050b4 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b083      	sub	sp, #12
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	460b      	mov	r3, r1
 80050be:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOINIncompleteCallback could be implemented in the user file
   */
}
 80050c0:	bf00      	nop
 80050c2:	370c      	adds	r7, #12
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr

080050cc <HAL_PCD_ConnectCallback>:
  * @brief  Connection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b083      	sub	sp, #12
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ConnectCallback could be implemented in the user file
   */
}
 80050d4:	bf00      	nop
 80050d6:	370c      	adds	r7, #12
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr

080050e0 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DisconnectCallback could be implemented in the user file
   */
}
 80050e8:	bf00      	nop
 80050ea:	370c      	adds	r7, #12
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr

080050f4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b08a      	sub	sp, #40	; 0x28
 80050f8:	af02      	add	r7, sp, #8
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005108:	683a      	ldr	r2, [r7, #0]
 800510a:	4613      	mov	r3, r2
 800510c:	00db      	lsls	r3, r3, #3
 800510e:	1a9b      	subs	r3, r3, r2
 8005110:	009b      	lsls	r3, r3, #2
 8005112:	3338      	adds	r3, #56	; 0x38
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	4413      	add	r3, r2
 8005118:	3304      	adds	r3, #4
 800511a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	699a      	ldr	r2, [r3, #24]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	695b      	ldr	r3, [r3, #20]
 8005124:	429a      	cmp	r2, r3
 8005126:	d901      	bls.n	800512c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	e06c      	b.n	8005206 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	695a      	ldr	r2, [r3, #20]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	699b      	ldr	r3, [r3, #24]
 8005134:	1ad3      	subs	r3, r2, r3
 8005136:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	69fa      	ldr	r2, [r7, #28]
 800513e:	429a      	cmp	r2, r3
 8005140:	d902      	bls.n	8005148 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005148:	69fb      	ldr	r3, [r7, #28]
 800514a:	3303      	adds	r3, #3
 800514c:	089b      	lsrs	r3, r3, #2
 800514e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005150:	e02b      	b.n	80051aa <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	695a      	ldr	r2, [r3, #20]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	699b      	ldr	r3, [r3, #24]
 800515a:	1ad3      	subs	r3, r2, r3
 800515c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	69fa      	ldr	r2, [r7, #28]
 8005164:	429a      	cmp	r2, r3
 8005166:	d902      	bls.n	800516e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800516e:	69fb      	ldr	r3, [r7, #28]
 8005170:	3303      	adds	r3, #3
 8005172:	089b      	lsrs	r3, r3, #2
 8005174:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	68d9      	ldr	r1, [r3, #12]
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	b2da      	uxtb	r2, r3
 800517e:	69fb      	ldr	r3, [r7, #28]
 8005180:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005186:	b2db      	uxtb	r3, r3
 8005188:	9300      	str	r3, [sp, #0]
 800518a:	4603      	mov	r3, r0
 800518c:	6978      	ldr	r0, [r7, #20]
 800518e:	f003 f855 	bl	800823c <USB_WritePacket>

    ep->xfer_buff  += len;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	68da      	ldr	r2, [r3, #12]
 8005196:	69fb      	ldr	r3, [r7, #28]
 8005198:	441a      	add	r2, r3
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	699a      	ldr	r2, [r3, #24]
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	441a      	add	r2, r3
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	015a      	lsls	r2, r3, #5
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	4413      	add	r3, r2
 80051b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051b6:	699b      	ldr	r3, [r3, #24]
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	69ba      	ldr	r2, [r7, #24]
 80051bc:	429a      	cmp	r2, r3
 80051be:	d809      	bhi.n	80051d4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	699a      	ldr	r2, [r3, #24]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d203      	bcs.n	80051d4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	695b      	ldr	r3, [r3, #20]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d1be      	bne.n	8005152 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	695a      	ldr	r2, [r3, #20]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	699b      	ldr	r3, [r3, #24]
 80051dc:	429a      	cmp	r2, r3
 80051de:	d811      	bhi.n	8005204 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	f003 030f 	and.w	r3, r3, #15
 80051e6:	2201      	movs	r2, #1
 80051e8:	fa02 f303 	lsl.w	r3, r2, r3
 80051ec:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	43db      	mvns	r3, r3
 80051fa:	6939      	ldr	r1, [r7, #16]
 80051fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005200:	4013      	ands	r3, r2
 8005202:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005204:	2300      	movs	r3, #0
}
 8005206:	4618      	mov	r0, r3
 8005208:	3720      	adds	r7, #32
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
	...

08005210 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b086      	sub	sp, #24
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	333c      	adds	r3, #60	; 0x3c
 8005228:	3304      	adds	r3, #4
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	015a      	lsls	r2, r3, #5
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	4413      	add	r3, r2
 8005236:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	691b      	ldr	r3, [r3, #16]
 8005242:	2b01      	cmp	r3, #1
 8005244:	f040 80a0 	bne.w	8005388 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	f003 0308 	and.w	r3, r3, #8
 800524e:	2b00      	cmp	r3, #0
 8005250:	d015      	beq.n	800527e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	4a72      	ldr	r2, [pc, #456]	; (8005420 <PCD_EP_OutXfrComplete_int+0x210>)
 8005256:	4293      	cmp	r3, r2
 8005258:	f240 80dd 	bls.w	8005416 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005262:	2b00      	cmp	r3, #0
 8005264:	f000 80d7 	beq.w	8005416 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	015a      	lsls	r2, r3, #5
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	4413      	add	r3, r2
 8005270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005274:	461a      	mov	r2, r3
 8005276:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800527a:	6093      	str	r3, [r2, #8]
 800527c:	e0cb      	b.n	8005416 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	f003 0320 	and.w	r3, r3, #32
 8005284:	2b00      	cmp	r3, #0
 8005286:	d009      	beq.n	800529c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	015a      	lsls	r2, r3, #5
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	4413      	add	r3, r2
 8005290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005294:	461a      	mov	r2, r3
 8005296:	2320      	movs	r3, #32
 8005298:	6093      	str	r3, [r2, #8]
 800529a:	e0bc      	b.n	8005416 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	f040 80b7 	bne.w	8005416 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	4a5d      	ldr	r2, [pc, #372]	; (8005420 <PCD_EP_OutXfrComplete_int+0x210>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d90f      	bls.n	80052d0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d00a      	beq.n	80052d0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	015a      	lsls	r2, r3, #5
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	4413      	add	r3, r2
 80052c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052c6:	461a      	mov	r2, r3
 80052c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052cc:	6093      	str	r3, [r2, #8]
 80052ce:	e0a2      	b.n	8005416 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80052d0:	6879      	ldr	r1, [r7, #4]
 80052d2:	683a      	ldr	r2, [r7, #0]
 80052d4:	4613      	mov	r3, r2
 80052d6:	00db      	lsls	r3, r3, #3
 80052d8:	1a9b      	subs	r3, r3, r2
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	440b      	add	r3, r1
 80052de:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80052e2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	0159      	lsls	r1, r3, #5
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	440b      	add	r3, r1
 80052ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052f0:	691b      	ldr	r3, [r3, #16]
 80052f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80052f6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	683a      	ldr	r2, [r7, #0]
 80052fc:	4613      	mov	r3, r2
 80052fe:	00db      	lsls	r3, r3, #3
 8005300:	1a9b      	subs	r3, r3, r2
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	4403      	add	r3, r0
 8005306:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800530a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800530c:	6879      	ldr	r1, [r7, #4]
 800530e:	683a      	ldr	r2, [r7, #0]
 8005310:	4613      	mov	r3, r2
 8005312:	00db      	lsls	r3, r3, #3
 8005314:	1a9b      	subs	r3, r3, r2
 8005316:	009b      	lsls	r3, r3, #2
 8005318:	440b      	add	r3, r1
 800531a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800531e:	6819      	ldr	r1, [r3, #0]
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	683a      	ldr	r2, [r7, #0]
 8005324:	4613      	mov	r3, r2
 8005326:	00db      	lsls	r3, r3, #3
 8005328:	1a9b      	subs	r3, r3, r2
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	4403      	add	r3, r0
 800532e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4419      	add	r1, r3
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	683a      	ldr	r2, [r7, #0]
 800533a:	4613      	mov	r3, r2
 800533c:	00db      	lsls	r3, r3, #3
 800533e:	1a9b      	subs	r3, r3, r2
 8005340:	009b      	lsls	r3, r3, #2
 8005342:	4403      	add	r3, r0
 8005344:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005348:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d114      	bne.n	800537a <PCD_EP_OutXfrComplete_int+0x16a>
 8005350:	6879      	ldr	r1, [r7, #4]
 8005352:	683a      	ldr	r2, [r7, #0]
 8005354:	4613      	mov	r3, r2
 8005356:	00db      	lsls	r3, r3, #3
 8005358:	1a9b      	subs	r3, r3, r2
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	440b      	add	r3, r1
 800535e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d108      	bne.n	800537a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6818      	ldr	r0, [r3, #0]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005372:	461a      	mov	r2, r3
 8005374:	2101      	movs	r1, #1
 8005376:	f003 f8a5 	bl	80084c4 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	b2db      	uxtb	r3, r3
 800537e:	4619      	mov	r1, r3
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f7ff fe41 	bl	8005008 <HAL_PCD_DataOutStageCallback>
 8005386:	e046      	b.n	8005416 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	4a26      	ldr	r2, [pc, #152]	; (8005424 <PCD_EP_OutXfrComplete_int+0x214>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d124      	bne.n	80053da <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005396:	2b00      	cmp	r3, #0
 8005398:	d00a      	beq.n	80053b0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	015a      	lsls	r2, r3, #5
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	4413      	add	r3, r2
 80053a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053a6:	461a      	mov	r2, r3
 80053a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053ac:	6093      	str	r3, [r2, #8]
 80053ae:	e032      	b.n	8005416 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	f003 0320 	and.w	r3, r3, #32
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d008      	beq.n	80053cc <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	015a      	lsls	r2, r3, #5
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	4413      	add	r3, r2
 80053c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053c6:	461a      	mov	r2, r3
 80053c8:	2320      	movs	r3, #32
 80053ca:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	4619      	mov	r1, r3
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f7ff fe18 	bl	8005008 <HAL_PCD_DataOutStageCallback>
 80053d8:	e01d      	b.n	8005416 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d114      	bne.n	800540a <PCD_EP_OutXfrComplete_int+0x1fa>
 80053e0:	6879      	ldr	r1, [r7, #4]
 80053e2:	683a      	ldr	r2, [r7, #0]
 80053e4:	4613      	mov	r3, r2
 80053e6:	00db      	lsls	r3, r3, #3
 80053e8:	1a9b      	subs	r3, r3, r2
 80053ea:	009b      	lsls	r3, r3, #2
 80053ec:	440b      	add	r3, r1
 80053ee:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d108      	bne.n	800540a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6818      	ldr	r0, [r3, #0]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005402:	461a      	mov	r2, r3
 8005404:	2100      	movs	r1, #0
 8005406:	f003 f85d 	bl	80084c4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	b2db      	uxtb	r3, r3
 800540e:	4619      	mov	r1, r3
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f7ff fdf9 	bl	8005008 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005416:	2300      	movs	r3, #0
}
 8005418:	4618      	mov	r0, r3
 800541a:	3718      	adds	r7, #24
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}
 8005420:	4f54300a 	.word	0x4f54300a
 8005424:	4f54310a 	.word	0x4f54310a

08005428 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b086      	sub	sp, #24
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	333c      	adds	r3, #60	; 0x3c
 8005440:	3304      	adds	r3, #4
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	015a      	lsls	r2, r3, #5
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	4413      	add	r3, r2
 800544e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	4a15      	ldr	r2, [pc, #84]	; (80054b0 <PCD_EP_OutSetupPacket_int+0x88>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d90e      	bls.n	800547c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005464:	2b00      	cmp	r3, #0
 8005466:	d009      	beq.n	800547c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	015a      	lsls	r2, r3, #5
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	4413      	add	r3, r2
 8005470:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005474:	461a      	mov	r2, r3
 8005476:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800547a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f7ff fddb 	bl	8005038 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	4a0a      	ldr	r2, [pc, #40]	; (80054b0 <PCD_EP_OutSetupPacket_int+0x88>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d90c      	bls.n	80054a4 <PCD_EP_OutSetupPacket_int+0x7c>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	691b      	ldr	r3, [r3, #16]
 800548e:	2b01      	cmp	r3, #1
 8005490:	d108      	bne.n	80054a4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6818      	ldr	r0, [r3, #0]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800549c:	461a      	mov	r2, r3
 800549e:	2101      	movs	r1, #1
 80054a0:	f003 f810 	bl	80084c4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80054a4:	2300      	movs	r3, #0
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3718      	adds	r7, #24
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
 80054ae:	bf00      	nop
 80054b0:	4f54300a 	.word	0x4f54300a

080054b4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b083      	sub	sp, #12
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	460b      	mov	r3, r1
 80054be:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80054c0:	bf00      	nop
 80054c2:	370c      	adds	r7, #12
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr

080054cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b086      	sub	sp, #24
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d101      	bne.n	80054de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e25b      	b.n	8005996 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f003 0301 	and.w	r3, r3, #1
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d075      	beq.n	80055d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80054ea:	4ba3      	ldr	r3, [pc, #652]	; (8005778 <HAL_RCC_OscConfig+0x2ac>)
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	f003 030c 	and.w	r3, r3, #12
 80054f2:	2b04      	cmp	r3, #4
 80054f4:	d00c      	beq.n	8005510 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054f6:	4ba0      	ldr	r3, [pc, #640]	; (8005778 <HAL_RCC_OscConfig+0x2ac>)
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80054fe:	2b08      	cmp	r3, #8
 8005500:	d112      	bne.n	8005528 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005502:	4b9d      	ldr	r3, [pc, #628]	; (8005778 <HAL_RCC_OscConfig+0x2ac>)
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800550a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800550e:	d10b      	bne.n	8005528 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005510:	4b99      	ldr	r3, [pc, #612]	; (8005778 <HAL_RCC_OscConfig+0x2ac>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005518:	2b00      	cmp	r3, #0
 800551a:	d05b      	beq.n	80055d4 <HAL_RCC_OscConfig+0x108>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d157      	bne.n	80055d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	e236      	b.n	8005996 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005530:	d106      	bne.n	8005540 <HAL_RCC_OscConfig+0x74>
 8005532:	4b91      	ldr	r3, [pc, #580]	; (8005778 <HAL_RCC_OscConfig+0x2ac>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a90      	ldr	r2, [pc, #576]	; (8005778 <HAL_RCC_OscConfig+0x2ac>)
 8005538:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800553c:	6013      	str	r3, [r2, #0]
 800553e:	e01d      	b.n	800557c <HAL_RCC_OscConfig+0xb0>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005548:	d10c      	bne.n	8005564 <HAL_RCC_OscConfig+0x98>
 800554a:	4b8b      	ldr	r3, [pc, #556]	; (8005778 <HAL_RCC_OscConfig+0x2ac>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a8a      	ldr	r2, [pc, #552]	; (8005778 <HAL_RCC_OscConfig+0x2ac>)
 8005550:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005554:	6013      	str	r3, [r2, #0]
 8005556:	4b88      	ldr	r3, [pc, #544]	; (8005778 <HAL_RCC_OscConfig+0x2ac>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a87      	ldr	r2, [pc, #540]	; (8005778 <HAL_RCC_OscConfig+0x2ac>)
 800555c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005560:	6013      	str	r3, [r2, #0]
 8005562:	e00b      	b.n	800557c <HAL_RCC_OscConfig+0xb0>
 8005564:	4b84      	ldr	r3, [pc, #528]	; (8005778 <HAL_RCC_OscConfig+0x2ac>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a83      	ldr	r2, [pc, #524]	; (8005778 <HAL_RCC_OscConfig+0x2ac>)
 800556a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800556e:	6013      	str	r3, [r2, #0]
 8005570:	4b81      	ldr	r3, [pc, #516]	; (8005778 <HAL_RCC_OscConfig+0x2ac>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a80      	ldr	r2, [pc, #512]	; (8005778 <HAL_RCC_OscConfig+0x2ac>)
 8005576:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800557a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d013      	beq.n	80055ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005584:	f7fd fb86 	bl	8002c94 <HAL_GetTick>
 8005588:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800558a:	e008      	b.n	800559e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800558c:	f7fd fb82 	bl	8002c94 <HAL_GetTick>
 8005590:	4602      	mov	r2, r0
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	2b64      	cmp	r3, #100	; 0x64
 8005598:	d901      	bls.n	800559e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800559a:	2303      	movs	r3, #3
 800559c:	e1fb      	b.n	8005996 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800559e:	4b76      	ldr	r3, [pc, #472]	; (8005778 <HAL_RCC_OscConfig+0x2ac>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d0f0      	beq.n	800558c <HAL_RCC_OscConfig+0xc0>
 80055aa:	e014      	b.n	80055d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055ac:	f7fd fb72 	bl	8002c94 <HAL_GetTick>
 80055b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055b2:	e008      	b.n	80055c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055b4:	f7fd fb6e 	bl	8002c94 <HAL_GetTick>
 80055b8:	4602      	mov	r2, r0
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	1ad3      	subs	r3, r2, r3
 80055be:	2b64      	cmp	r3, #100	; 0x64
 80055c0:	d901      	bls.n	80055c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80055c2:	2303      	movs	r3, #3
 80055c4:	e1e7      	b.n	8005996 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055c6:	4b6c      	ldr	r3, [pc, #432]	; (8005778 <HAL_RCC_OscConfig+0x2ac>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d1f0      	bne.n	80055b4 <HAL_RCC_OscConfig+0xe8>
 80055d2:	e000      	b.n	80055d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f003 0302 	and.w	r3, r3, #2
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d063      	beq.n	80056aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80055e2:	4b65      	ldr	r3, [pc, #404]	; (8005778 <HAL_RCC_OscConfig+0x2ac>)
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	f003 030c 	and.w	r3, r3, #12
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d00b      	beq.n	8005606 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055ee:	4b62      	ldr	r3, [pc, #392]	; (8005778 <HAL_RCC_OscConfig+0x2ac>)
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80055f6:	2b08      	cmp	r3, #8
 80055f8:	d11c      	bne.n	8005634 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055fa:	4b5f      	ldr	r3, [pc, #380]	; (8005778 <HAL_RCC_OscConfig+0x2ac>)
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005602:	2b00      	cmp	r3, #0
 8005604:	d116      	bne.n	8005634 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005606:	4b5c      	ldr	r3, [pc, #368]	; (8005778 <HAL_RCC_OscConfig+0x2ac>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f003 0302 	and.w	r3, r3, #2
 800560e:	2b00      	cmp	r3, #0
 8005610:	d005      	beq.n	800561e <HAL_RCC_OscConfig+0x152>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	68db      	ldr	r3, [r3, #12]
 8005616:	2b01      	cmp	r3, #1
 8005618:	d001      	beq.n	800561e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	e1bb      	b.n	8005996 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800561e:	4b56      	ldr	r3, [pc, #344]	; (8005778 <HAL_RCC_OscConfig+0x2ac>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	691b      	ldr	r3, [r3, #16]
 800562a:	00db      	lsls	r3, r3, #3
 800562c:	4952      	ldr	r1, [pc, #328]	; (8005778 <HAL_RCC_OscConfig+0x2ac>)
 800562e:	4313      	orrs	r3, r2
 8005630:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005632:	e03a      	b.n	80056aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d020      	beq.n	800567e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800563c:	4b4f      	ldr	r3, [pc, #316]	; (800577c <HAL_RCC_OscConfig+0x2b0>)
 800563e:	2201      	movs	r2, #1
 8005640:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005642:	f7fd fb27 	bl	8002c94 <HAL_GetTick>
 8005646:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005648:	e008      	b.n	800565c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800564a:	f7fd fb23 	bl	8002c94 <HAL_GetTick>
 800564e:	4602      	mov	r2, r0
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	1ad3      	subs	r3, r2, r3
 8005654:	2b02      	cmp	r3, #2
 8005656:	d901      	bls.n	800565c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005658:	2303      	movs	r3, #3
 800565a:	e19c      	b.n	8005996 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800565c:	4b46      	ldr	r3, [pc, #280]	; (8005778 <HAL_RCC_OscConfig+0x2ac>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 0302 	and.w	r3, r3, #2
 8005664:	2b00      	cmp	r3, #0
 8005666:	d0f0      	beq.n	800564a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005668:	4b43      	ldr	r3, [pc, #268]	; (8005778 <HAL_RCC_OscConfig+0x2ac>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	691b      	ldr	r3, [r3, #16]
 8005674:	00db      	lsls	r3, r3, #3
 8005676:	4940      	ldr	r1, [pc, #256]	; (8005778 <HAL_RCC_OscConfig+0x2ac>)
 8005678:	4313      	orrs	r3, r2
 800567a:	600b      	str	r3, [r1, #0]
 800567c:	e015      	b.n	80056aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800567e:	4b3f      	ldr	r3, [pc, #252]	; (800577c <HAL_RCC_OscConfig+0x2b0>)
 8005680:	2200      	movs	r2, #0
 8005682:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005684:	f7fd fb06 	bl	8002c94 <HAL_GetTick>
 8005688:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800568a:	e008      	b.n	800569e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800568c:	f7fd fb02 	bl	8002c94 <HAL_GetTick>
 8005690:	4602      	mov	r2, r0
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	1ad3      	subs	r3, r2, r3
 8005696:	2b02      	cmp	r3, #2
 8005698:	d901      	bls.n	800569e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800569a:	2303      	movs	r3, #3
 800569c:	e17b      	b.n	8005996 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800569e:	4b36      	ldr	r3, [pc, #216]	; (8005778 <HAL_RCC_OscConfig+0x2ac>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f003 0302 	and.w	r3, r3, #2
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d1f0      	bne.n	800568c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f003 0308 	and.w	r3, r3, #8
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d030      	beq.n	8005718 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	695b      	ldr	r3, [r3, #20]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d016      	beq.n	80056ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056be:	4b30      	ldr	r3, [pc, #192]	; (8005780 <HAL_RCC_OscConfig+0x2b4>)
 80056c0:	2201      	movs	r2, #1
 80056c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056c4:	f7fd fae6 	bl	8002c94 <HAL_GetTick>
 80056c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056ca:	e008      	b.n	80056de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056cc:	f7fd fae2 	bl	8002c94 <HAL_GetTick>
 80056d0:	4602      	mov	r2, r0
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	1ad3      	subs	r3, r2, r3
 80056d6:	2b02      	cmp	r3, #2
 80056d8:	d901      	bls.n	80056de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80056da:	2303      	movs	r3, #3
 80056dc:	e15b      	b.n	8005996 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056de:	4b26      	ldr	r3, [pc, #152]	; (8005778 <HAL_RCC_OscConfig+0x2ac>)
 80056e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056e2:	f003 0302 	and.w	r3, r3, #2
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d0f0      	beq.n	80056cc <HAL_RCC_OscConfig+0x200>
 80056ea:	e015      	b.n	8005718 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056ec:	4b24      	ldr	r3, [pc, #144]	; (8005780 <HAL_RCC_OscConfig+0x2b4>)
 80056ee:	2200      	movs	r2, #0
 80056f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056f2:	f7fd facf 	bl	8002c94 <HAL_GetTick>
 80056f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056f8:	e008      	b.n	800570c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056fa:	f7fd facb 	bl	8002c94 <HAL_GetTick>
 80056fe:	4602      	mov	r2, r0
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	1ad3      	subs	r3, r2, r3
 8005704:	2b02      	cmp	r3, #2
 8005706:	d901      	bls.n	800570c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005708:	2303      	movs	r3, #3
 800570a:	e144      	b.n	8005996 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800570c:	4b1a      	ldr	r3, [pc, #104]	; (8005778 <HAL_RCC_OscConfig+0x2ac>)
 800570e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005710:	f003 0302 	and.w	r3, r3, #2
 8005714:	2b00      	cmp	r3, #0
 8005716:	d1f0      	bne.n	80056fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 0304 	and.w	r3, r3, #4
 8005720:	2b00      	cmp	r3, #0
 8005722:	f000 80a0 	beq.w	8005866 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005726:	2300      	movs	r3, #0
 8005728:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800572a:	4b13      	ldr	r3, [pc, #76]	; (8005778 <HAL_RCC_OscConfig+0x2ac>)
 800572c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005732:	2b00      	cmp	r3, #0
 8005734:	d10f      	bne.n	8005756 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005736:	2300      	movs	r3, #0
 8005738:	60bb      	str	r3, [r7, #8]
 800573a:	4b0f      	ldr	r3, [pc, #60]	; (8005778 <HAL_RCC_OscConfig+0x2ac>)
 800573c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800573e:	4a0e      	ldr	r2, [pc, #56]	; (8005778 <HAL_RCC_OscConfig+0x2ac>)
 8005740:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005744:	6413      	str	r3, [r2, #64]	; 0x40
 8005746:	4b0c      	ldr	r3, [pc, #48]	; (8005778 <HAL_RCC_OscConfig+0x2ac>)
 8005748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800574a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800574e:	60bb      	str	r3, [r7, #8]
 8005750:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005752:	2301      	movs	r3, #1
 8005754:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005756:	4b0b      	ldr	r3, [pc, #44]	; (8005784 <HAL_RCC_OscConfig+0x2b8>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800575e:	2b00      	cmp	r3, #0
 8005760:	d121      	bne.n	80057a6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005762:	4b08      	ldr	r3, [pc, #32]	; (8005784 <HAL_RCC_OscConfig+0x2b8>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a07      	ldr	r2, [pc, #28]	; (8005784 <HAL_RCC_OscConfig+0x2b8>)
 8005768:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800576c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800576e:	f7fd fa91 	bl	8002c94 <HAL_GetTick>
 8005772:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005774:	e011      	b.n	800579a <HAL_RCC_OscConfig+0x2ce>
 8005776:	bf00      	nop
 8005778:	40023800 	.word	0x40023800
 800577c:	42470000 	.word	0x42470000
 8005780:	42470e80 	.word	0x42470e80
 8005784:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005788:	f7fd fa84 	bl	8002c94 <HAL_GetTick>
 800578c:	4602      	mov	r2, r0
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	1ad3      	subs	r3, r2, r3
 8005792:	2b02      	cmp	r3, #2
 8005794:	d901      	bls.n	800579a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005796:	2303      	movs	r3, #3
 8005798:	e0fd      	b.n	8005996 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800579a:	4b81      	ldr	r3, [pc, #516]	; (80059a0 <HAL_RCC_OscConfig+0x4d4>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d0f0      	beq.n	8005788 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d106      	bne.n	80057bc <HAL_RCC_OscConfig+0x2f0>
 80057ae:	4b7d      	ldr	r3, [pc, #500]	; (80059a4 <HAL_RCC_OscConfig+0x4d8>)
 80057b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057b2:	4a7c      	ldr	r2, [pc, #496]	; (80059a4 <HAL_RCC_OscConfig+0x4d8>)
 80057b4:	f043 0301 	orr.w	r3, r3, #1
 80057b8:	6713      	str	r3, [r2, #112]	; 0x70
 80057ba:	e01c      	b.n	80057f6 <HAL_RCC_OscConfig+0x32a>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	2b05      	cmp	r3, #5
 80057c2:	d10c      	bne.n	80057de <HAL_RCC_OscConfig+0x312>
 80057c4:	4b77      	ldr	r3, [pc, #476]	; (80059a4 <HAL_RCC_OscConfig+0x4d8>)
 80057c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057c8:	4a76      	ldr	r2, [pc, #472]	; (80059a4 <HAL_RCC_OscConfig+0x4d8>)
 80057ca:	f043 0304 	orr.w	r3, r3, #4
 80057ce:	6713      	str	r3, [r2, #112]	; 0x70
 80057d0:	4b74      	ldr	r3, [pc, #464]	; (80059a4 <HAL_RCC_OscConfig+0x4d8>)
 80057d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057d4:	4a73      	ldr	r2, [pc, #460]	; (80059a4 <HAL_RCC_OscConfig+0x4d8>)
 80057d6:	f043 0301 	orr.w	r3, r3, #1
 80057da:	6713      	str	r3, [r2, #112]	; 0x70
 80057dc:	e00b      	b.n	80057f6 <HAL_RCC_OscConfig+0x32a>
 80057de:	4b71      	ldr	r3, [pc, #452]	; (80059a4 <HAL_RCC_OscConfig+0x4d8>)
 80057e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057e2:	4a70      	ldr	r2, [pc, #448]	; (80059a4 <HAL_RCC_OscConfig+0x4d8>)
 80057e4:	f023 0301 	bic.w	r3, r3, #1
 80057e8:	6713      	str	r3, [r2, #112]	; 0x70
 80057ea:	4b6e      	ldr	r3, [pc, #440]	; (80059a4 <HAL_RCC_OscConfig+0x4d8>)
 80057ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ee:	4a6d      	ldr	r2, [pc, #436]	; (80059a4 <HAL_RCC_OscConfig+0x4d8>)
 80057f0:	f023 0304 	bic.w	r3, r3, #4
 80057f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d015      	beq.n	800582a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057fe:	f7fd fa49 	bl	8002c94 <HAL_GetTick>
 8005802:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005804:	e00a      	b.n	800581c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005806:	f7fd fa45 	bl	8002c94 <HAL_GetTick>
 800580a:	4602      	mov	r2, r0
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	1ad3      	subs	r3, r2, r3
 8005810:	f241 3288 	movw	r2, #5000	; 0x1388
 8005814:	4293      	cmp	r3, r2
 8005816:	d901      	bls.n	800581c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005818:	2303      	movs	r3, #3
 800581a:	e0bc      	b.n	8005996 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800581c:	4b61      	ldr	r3, [pc, #388]	; (80059a4 <HAL_RCC_OscConfig+0x4d8>)
 800581e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005820:	f003 0302 	and.w	r3, r3, #2
 8005824:	2b00      	cmp	r3, #0
 8005826:	d0ee      	beq.n	8005806 <HAL_RCC_OscConfig+0x33a>
 8005828:	e014      	b.n	8005854 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800582a:	f7fd fa33 	bl	8002c94 <HAL_GetTick>
 800582e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005830:	e00a      	b.n	8005848 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005832:	f7fd fa2f 	bl	8002c94 <HAL_GetTick>
 8005836:	4602      	mov	r2, r0
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	1ad3      	subs	r3, r2, r3
 800583c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005840:	4293      	cmp	r3, r2
 8005842:	d901      	bls.n	8005848 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005844:	2303      	movs	r3, #3
 8005846:	e0a6      	b.n	8005996 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005848:	4b56      	ldr	r3, [pc, #344]	; (80059a4 <HAL_RCC_OscConfig+0x4d8>)
 800584a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800584c:	f003 0302 	and.w	r3, r3, #2
 8005850:	2b00      	cmp	r3, #0
 8005852:	d1ee      	bne.n	8005832 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005854:	7dfb      	ldrb	r3, [r7, #23]
 8005856:	2b01      	cmp	r3, #1
 8005858:	d105      	bne.n	8005866 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800585a:	4b52      	ldr	r3, [pc, #328]	; (80059a4 <HAL_RCC_OscConfig+0x4d8>)
 800585c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800585e:	4a51      	ldr	r2, [pc, #324]	; (80059a4 <HAL_RCC_OscConfig+0x4d8>)
 8005860:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005864:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	699b      	ldr	r3, [r3, #24]
 800586a:	2b00      	cmp	r3, #0
 800586c:	f000 8092 	beq.w	8005994 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005870:	4b4c      	ldr	r3, [pc, #304]	; (80059a4 <HAL_RCC_OscConfig+0x4d8>)
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	f003 030c 	and.w	r3, r3, #12
 8005878:	2b08      	cmp	r3, #8
 800587a:	d05c      	beq.n	8005936 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	699b      	ldr	r3, [r3, #24]
 8005880:	2b02      	cmp	r3, #2
 8005882:	d141      	bne.n	8005908 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005884:	4b48      	ldr	r3, [pc, #288]	; (80059a8 <HAL_RCC_OscConfig+0x4dc>)
 8005886:	2200      	movs	r2, #0
 8005888:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800588a:	f7fd fa03 	bl	8002c94 <HAL_GetTick>
 800588e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005890:	e008      	b.n	80058a4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005892:	f7fd f9ff 	bl	8002c94 <HAL_GetTick>
 8005896:	4602      	mov	r2, r0
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	1ad3      	subs	r3, r2, r3
 800589c:	2b02      	cmp	r3, #2
 800589e:	d901      	bls.n	80058a4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80058a0:	2303      	movs	r3, #3
 80058a2:	e078      	b.n	8005996 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058a4:	4b3f      	ldr	r3, [pc, #252]	; (80059a4 <HAL_RCC_OscConfig+0x4d8>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d1f0      	bne.n	8005892 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	69da      	ldr	r2, [r3, #28]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6a1b      	ldr	r3, [r3, #32]
 80058b8:	431a      	orrs	r2, r3
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058be:	019b      	lsls	r3, r3, #6
 80058c0:	431a      	orrs	r2, r3
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c6:	085b      	lsrs	r3, r3, #1
 80058c8:	3b01      	subs	r3, #1
 80058ca:	041b      	lsls	r3, r3, #16
 80058cc:	431a      	orrs	r2, r3
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d2:	061b      	lsls	r3, r3, #24
 80058d4:	4933      	ldr	r1, [pc, #204]	; (80059a4 <HAL_RCC_OscConfig+0x4d8>)
 80058d6:	4313      	orrs	r3, r2
 80058d8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80058da:	4b33      	ldr	r3, [pc, #204]	; (80059a8 <HAL_RCC_OscConfig+0x4dc>)
 80058dc:	2201      	movs	r2, #1
 80058de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058e0:	f7fd f9d8 	bl	8002c94 <HAL_GetTick>
 80058e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058e6:	e008      	b.n	80058fa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058e8:	f7fd f9d4 	bl	8002c94 <HAL_GetTick>
 80058ec:	4602      	mov	r2, r0
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	1ad3      	subs	r3, r2, r3
 80058f2:	2b02      	cmp	r3, #2
 80058f4:	d901      	bls.n	80058fa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80058f6:	2303      	movs	r3, #3
 80058f8:	e04d      	b.n	8005996 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058fa:	4b2a      	ldr	r3, [pc, #168]	; (80059a4 <HAL_RCC_OscConfig+0x4d8>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005902:	2b00      	cmp	r3, #0
 8005904:	d0f0      	beq.n	80058e8 <HAL_RCC_OscConfig+0x41c>
 8005906:	e045      	b.n	8005994 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005908:	4b27      	ldr	r3, [pc, #156]	; (80059a8 <HAL_RCC_OscConfig+0x4dc>)
 800590a:	2200      	movs	r2, #0
 800590c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800590e:	f7fd f9c1 	bl	8002c94 <HAL_GetTick>
 8005912:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005914:	e008      	b.n	8005928 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005916:	f7fd f9bd 	bl	8002c94 <HAL_GetTick>
 800591a:	4602      	mov	r2, r0
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	1ad3      	subs	r3, r2, r3
 8005920:	2b02      	cmp	r3, #2
 8005922:	d901      	bls.n	8005928 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005924:	2303      	movs	r3, #3
 8005926:	e036      	b.n	8005996 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005928:	4b1e      	ldr	r3, [pc, #120]	; (80059a4 <HAL_RCC_OscConfig+0x4d8>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005930:	2b00      	cmp	r3, #0
 8005932:	d1f0      	bne.n	8005916 <HAL_RCC_OscConfig+0x44a>
 8005934:	e02e      	b.n	8005994 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	699b      	ldr	r3, [r3, #24]
 800593a:	2b01      	cmp	r3, #1
 800593c:	d101      	bne.n	8005942 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e029      	b.n	8005996 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005942:	4b18      	ldr	r3, [pc, #96]	; (80059a4 <HAL_RCC_OscConfig+0x4d8>)
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	69db      	ldr	r3, [r3, #28]
 8005952:	429a      	cmp	r2, r3
 8005954:	d11c      	bne.n	8005990 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005960:	429a      	cmp	r2, r3
 8005962:	d115      	bne.n	8005990 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005964:	68fa      	ldr	r2, [r7, #12]
 8005966:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800596a:	4013      	ands	r3, r2
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005970:	4293      	cmp	r3, r2
 8005972:	d10d      	bne.n	8005990 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800597e:	429a      	cmp	r2, r3
 8005980:	d106      	bne.n	8005990 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800598c:	429a      	cmp	r2, r3
 800598e:	d001      	beq.n	8005994 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8005990:	2301      	movs	r3, #1
 8005992:	e000      	b.n	8005996 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8005994:	2300      	movs	r3, #0
}
 8005996:	4618      	mov	r0, r3
 8005998:	3718      	adds	r7, #24
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
 800599e:	bf00      	nop
 80059a0:	40007000 	.word	0x40007000
 80059a4:	40023800 	.word	0x40023800
 80059a8:	42470060 	.word	0x42470060

080059ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b084      	sub	sp, #16
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d101      	bne.n	80059c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	e0cc      	b.n	8005b5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80059c0:	4b68      	ldr	r3, [pc, #416]	; (8005b64 <HAL_RCC_ClockConfig+0x1b8>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f003 030f 	and.w	r3, r3, #15
 80059c8:	683a      	ldr	r2, [r7, #0]
 80059ca:	429a      	cmp	r2, r3
 80059cc:	d90c      	bls.n	80059e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059ce:	4b65      	ldr	r3, [pc, #404]	; (8005b64 <HAL_RCC_ClockConfig+0x1b8>)
 80059d0:	683a      	ldr	r2, [r7, #0]
 80059d2:	b2d2      	uxtb	r2, r2
 80059d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059d6:	4b63      	ldr	r3, [pc, #396]	; (8005b64 <HAL_RCC_ClockConfig+0x1b8>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f003 030f 	and.w	r3, r3, #15
 80059de:	683a      	ldr	r2, [r7, #0]
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d001      	beq.n	80059e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	e0b8      	b.n	8005b5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 0302 	and.w	r3, r3, #2
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d020      	beq.n	8005a36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f003 0304 	and.w	r3, r3, #4
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d005      	beq.n	8005a0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a00:	4b59      	ldr	r3, [pc, #356]	; (8005b68 <HAL_RCC_ClockConfig+0x1bc>)
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	4a58      	ldr	r2, [pc, #352]	; (8005b68 <HAL_RCC_ClockConfig+0x1bc>)
 8005a06:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005a0a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f003 0308 	and.w	r3, r3, #8
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d005      	beq.n	8005a24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005a18:	4b53      	ldr	r3, [pc, #332]	; (8005b68 <HAL_RCC_ClockConfig+0x1bc>)
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	4a52      	ldr	r2, [pc, #328]	; (8005b68 <HAL_RCC_ClockConfig+0x1bc>)
 8005a1e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005a22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a24:	4b50      	ldr	r3, [pc, #320]	; (8005b68 <HAL_RCC_ClockConfig+0x1bc>)
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	494d      	ldr	r1, [pc, #308]	; (8005b68 <HAL_RCC_ClockConfig+0x1bc>)
 8005a32:	4313      	orrs	r3, r2
 8005a34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f003 0301 	and.w	r3, r3, #1
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d044      	beq.n	8005acc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	d107      	bne.n	8005a5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a4a:	4b47      	ldr	r3, [pc, #284]	; (8005b68 <HAL_RCC_ClockConfig+0x1bc>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d119      	bne.n	8005a8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	e07f      	b.n	8005b5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	2b02      	cmp	r3, #2
 8005a60:	d003      	beq.n	8005a6a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a66:	2b03      	cmp	r3, #3
 8005a68:	d107      	bne.n	8005a7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a6a:	4b3f      	ldr	r3, [pc, #252]	; (8005b68 <HAL_RCC_ClockConfig+0x1bc>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d109      	bne.n	8005a8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	e06f      	b.n	8005b5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a7a:	4b3b      	ldr	r3, [pc, #236]	; (8005b68 <HAL_RCC_ClockConfig+0x1bc>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f003 0302 	and.w	r3, r3, #2
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d101      	bne.n	8005a8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	e067      	b.n	8005b5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a8a:	4b37      	ldr	r3, [pc, #220]	; (8005b68 <HAL_RCC_ClockConfig+0x1bc>)
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	f023 0203 	bic.w	r2, r3, #3
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	4934      	ldr	r1, [pc, #208]	; (8005b68 <HAL_RCC_ClockConfig+0x1bc>)
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a9c:	f7fd f8fa 	bl	8002c94 <HAL_GetTick>
 8005aa0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005aa2:	e00a      	b.n	8005aba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005aa4:	f7fd f8f6 	bl	8002c94 <HAL_GetTick>
 8005aa8:	4602      	mov	r2, r0
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	1ad3      	subs	r3, r2, r3
 8005aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d901      	bls.n	8005aba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005ab6:	2303      	movs	r3, #3
 8005ab8:	e04f      	b.n	8005b5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005aba:	4b2b      	ldr	r3, [pc, #172]	; (8005b68 <HAL_RCC_ClockConfig+0x1bc>)
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	f003 020c 	and.w	r2, r3, #12
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	009b      	lsls	r3, r3, #2
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d1eb      	bne.n	8005aa4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005acc:	4b25      	ldr	r3, [pc, #148]	; (8005b64 <HAL_RCC_ClockConfig+0x1b8>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f003 030f 	and.w	r3, r3, #15
 8005ad4:	683a      	ldr	r2, [r7, #0]
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d20c      	bcs.n	8005af4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ada:	4b22      	ldr	r3, [pc, #136]	; (8005b64 <HAL_RCC_ClockConfig+0x1b8>)
 8005adc:	683a      	ldr	r2, [r7, #0]
 8005ade:	b2d2      	uxtb	r2, r2
 8005ae0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ae2:	4b20      	ldr	r3, [pc, #128]	; (8005b64 <HAL_RCC_ClockConfig+0x1b8>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f003 030f 	and.w	r3, r3, #15
 8005aea:	683a      	ldr	r2, [r7, #0]
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d001      	beq.n	8005af4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	e032      	b.n	8005b5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f003 0304 	and.w	r3, r3, #4
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d008      	beq.n	8005b12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b00:	4b19      	ldr	r3, [pc, #100]	; (8005b68 <HAL_RCC_ClockConfig+0x1bc>)
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	4916      	ldr	r1, [pc, #88]	; (8005b68 <HAL_RCC_ClockConfig+0x1bc>)
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f003 0308 	and.w	r3, r3, #8
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d009      	beq.n	8005b32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b1e:	4b12      	ldr	r3, [pc, #72]	; (8005b68 <HAL_RCC_ClockConfig+0x1bc>)
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	691b      	ldr	r3, [r3, #16]
 8005b2a:	00db      	lsls	r3, r3, #3
 8005b2c:	490e      	ldr	r1, [pc, #56]	; (8005b68 <HAL_RCC_ClockConfig+0x1bc>)
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005b32:	f000 f821 	bl	8005b78 <HAL_RCC_GetSysClockFreq>
 8005b36:	4601      	mov	r1, r0
 8005b38:	4b0b      	ldr	r3, [pc, #44]	; (8005b68 <HAL_RCC_ClockConfig+0x1bc>)
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	091b      	lsrs	r3, r3, #4
 8005b3e:	f003 030f 	and.w	r3, r3, #15
 8005b42:	4a0a      	ldr	r2, [pc, #40]	; (8005b6c <HAL_RCC_ClockConfig+0x1c0>)
 8005b44:	5cd3      	ldrb	r3, [r2, r3]
 8005b46:	fa21 f303 	lsr.w	r3, r1, r3
 8005b4a:	4a09      	ldr	r2, [pc, #36]	; (8005b70 <HAL_RCC_ClockConfig+0x1c4>)
 8005b4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005b4e:	4b09      	ldr	r3, [pc, #36]	; (8005b74 <HAL_RCC_ClockConfig+0x1c8>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4618      	mov	r0, r3
 8005b54:	f7fc ff62 	bl	8002a1c <HAL_InitTick>

  return HAL_OK;
 8005b58:	2300      	movs	r3, #0
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3710      	adds	r7, #16
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}
 8005b62:	bf00      	nop
 8005b64:	40023c00 	.word	0x40023c00
 8005b68:	40023800 	.word	0x40023800
 8005b6c:	0800edc4 	.word	0x0800edc4
 8005b70:	20000000 	.word	0x20000000
 8005b74:	20000004 	.word	0x20000004

08005b78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b7a:	b085      	sub	sp, #20
 8005b7c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	607b      	str	r3, [r7, #4]
 8005b82:	2300      	movs	r3, #0
 8005b84:	60fb      	str	r3, [r7, #12]
 8005b86:	2300      	movs	r3, #0
 8005b88:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005b8e:	4b63      	ldr	r3, [pc, #396]	; (8005d1c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005b90:	689b      	ldr	r3, [r3, #8]
 8005b92:	f003 030c 	and.w	r3, r3, #12
 8005b96:	2b04      	cmp	r3, #4
 8005b98:	d007      	beq.n	8005baa <HAL_RCC_GetSysClockFreq+0x32>
 8005b9a:	2b08      	cmp	r3, #8
 8005b9c:	d008      	beq.n	8005bb0 <HAL_RCC_GetSysClockFreq+0x38>
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	f040 80b4 	bne.w	8005d0c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005ba4:	4b5e      	ldr	r3, [pc, #376]	; (8005d20 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005ba6:	60bb      	str	r3, [r7, #8]
       break;
 8005ba8:	e0b3      	b.n	8005d12 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005baa:	4b5e      	ldr	r3, [pc, #376]	; (8005d24 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005bac:	60bb      	str	r3, [r7, #8]
      break;
 8005bae:	e0b0      	b.n	8005d12 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005bb0:	4b5a      	ldr	r3, [pc, #360]	; (8005d1c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005bb8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005bba:	4b58      	ldr	r3, [pc, #352]	; (8005d1c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d04a      	beq.n	8005c5c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005bc6:	4b55      	ldr	r3, [pc, #340]	; (8005d1c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	099b      	lsrs	r3, r3, #6
 8005bcc:	f04f 0400 	mov.w	r4, #0
 8005bd0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005bd4:	f04f 0200 	mov.w	r2, #0
 8005bd8:	ea03 0501 	and.w	r5, r3, r1
 8005bdc:	ea04 0602 	and.w	r6, r4, r2
 8005be0:	4629      	mov	r1, r5
 8005be2:	4632      	mov	r2, r6
 8005be4:	f04f 0300 	mov.w	r3, #0
 8005be8:	f04f 0400 	mov.w	r4, #0
 8005bec:	0154      	lsls	r4, r2, #5
 8005bee:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005bf2:	014b      	lsls	r3, r1, #5
 8005bf4:	4619      	mov	r1, r3
 8005bf6:	4622      	mov	r2, r4
 8005bf8:	1b49      	subs	r1, r1, r5
 8005bfa:	eb62 0206 	sbc.w	r2, r2, r6
 8005bfe:	f04f 0300 	mov.w	r3, #0
 8005c02:	f04f 0400 	mov.w	r4, #0
 8005c06:	0194      	lsls	r4, r2, #6
 8005c08:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005c0c:	018b      	lsls	r3, r1, #6
 8005c0e:	1a5b      	subs	r3, r3, r1
 8005c10:	eb64 0402 	sbc.w	r4, r4, r2
 8005c14:	f04f 0100 	mov.w	r1, #0
 8005c18:	f04f 0200 	mov.w	r2, #0
 8005c1c:	00e2      	lsls	r2, r4, #3
 8005c1e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005c22:	00d9      	lsls	r1, r3, #3
 8005c24:	460b      	mov	r3, r1
 8005c26:	4614      	mov	r4, r2
 8005c28:	195b      	adds	r3, r3, r5
 8005c2a:	eb44 0406 	adc.w	r4, r4, r6
 8005c2e:	f04f 0100 	mov.w	r1, #0
 8005c32:	f04f 0200 	mov.w	r2, #0
 8005c36:	0262      	lsls	r2, r4, #9
 8005c38:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005c3c:	0259      	lsls	r1, r3, #9
 8005c3e:	460b      	mov	r3, r1
 8005c40:	4614      	mov	r4, r2
 8005c42:	4618      	mov	r0, r3
 8005c44:	4621      	mov	r1, r4
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f04f 0400 	mov.w	r4, #0
 8005c4c:	461a      	mov	r2, r3
 8005c4e:	4623      	mov	r3, r4
 8005c50:	f7fb f81a 	bl	8000c88 <__aeabi_uldivmod>
 8005c54:	4603      	mov	r3, r0
 8005c56:	460c      	mov	r4, r1
 8005c58:	60fb      	str	r3, [r7, #12]
 8005c5a:	e049      	b.n	8005cf0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c5c:	4b2f      	ldr	r3, [pc, #188]	; (8005d1c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	099b      	lsrs	r3, r3, #6
 8005c62:	f04f 0400 	mov.w	r4, #0
 8005c66:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005c6a:	f04f 0200 	mov.w	r2, #0
 8005c6e:	ea03 0501 	and.w	r5, r3, r1
 8005c72:	ea04 0602 	and.w	r6, r4, r2
 8005c76:	4629      	mov	r1, r5
 8005c78:	4632      	mov	r2, r6
 8005c7a:	f04f 0300 	mov.w	r3, #0
 8005c7e:	f04f 0400 	mov.w	r4, #0
 8005c82:	0154      	lsls	r4, r2, #5
 8005c84:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005c88:	014b      	lsls	r3, r1, #5
 8005c8a:	4619      	mov	r1, r3
 8005c8c:	4622      	mov	r2, r4
 8005c8e:	1b49      	subs	r1, r1, r5
 8005c90:	eb62 0206 	sbc.w	r2, r2, r6
 8005c94:	f04f 0300 	mov.w	r3, #0
 8005c98:	f04f 0400 	mov.w	r4, #0
 8005c9c:	0194      	lsls	r4, r2, #6
 8005c9e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005ca2:	018b      	lsls	r3, r1, #6
 8005ca4:	1a5b      	subs	r3, r3, r1
 8005ca6:	eb64 0402 	sbc.w	r4, r4, r2
 8005caa:	f04f 0100 	mov.w	r1, #0
 8005cae:	f04f 0200 	mov.w	r2, #0
 8005cb2:	00e2      	lsls	r2, r4, #3
 8005cb4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005cb8:	00d9      	lsls	r1, r3, #3
 8005cba:	460b      	mov	r3, r1
 8005cbc:	4614      	mov	r4, r2
 8005cbe:	195b      	adds	r3, r3, r5
 8005cc0:	eb44 0406 	adc.w	r4, r4, r6
 8005cc4:	f04f 0100 	mov.w	r1, #0
 8005cc8:	f04f 0200 	mov.w	r2, #0
 8005ccc:	02a2      	lsls	r2, r4, #10
 8005cce:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005cd2:	0299      	lsls	r1, r3, #10
 8005cd4:	460b      	mov	r3, r1
 8005cd6:	4614      	mov	r4, r2
 8005cd8:	4618      	mov	r0, r3
 8005cda:	4621      	mov	r1, r4
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f04f 0400 	mov.w	r4, #0
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	4623      	mov	r3, r4
 8005ce6:	f7fa ffcf 	bl	8000c88 <__aeabi_uldivmod>
 8005cea:	4603      	mov	r3, r0
 8005cec:	460c      	mov	r4, r1
 8005cee:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005cf0:	4b0a      	ldr	r3, [pc, #40]	; (8005d1c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	0c1b      	lsrs	r3, r3, #16
 8005cf6:	f003 0303 	and.w	r3, r3, #3
 8005cfa:	3301      	adds	r3, #1
 8005cfc:	005b      	lsls	r3, r3, #1
 8005cfe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005d00:	68fa      	ldr	r2, [r7, #12]
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d08:	60bb      	str	r3, [r7, #8]
      break;
 8005d0a:	e002      	b.n	8005d12 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005d0c:	4b04      	ldr	r3, [pc, #16]	; (8005d20 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005d0e:	60bb      	str	r3, [r7, #8]
      break;
 8005d10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d12:	68bb      	ldr	r3, [r7, #8]
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3714      	adds	r7, #20
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d1c:	40023800 	.word	0x40023800
 8005d20:	00f42400 	.word	0x00f42400
 8005d24:	007a1200 	.word	0x007a1200

08005d28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d2c:	4b03      	ldr	r3, [pc, #12]	; (8005d3c <HAL_RCC_GetHCLKFreq+0x14>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr
 8005d3a:	bf00      	nop
 8005d3c:	20000000 	.word	0x20000000

08005d40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005d44:	f7ff fff0 	bl	8005d28 <HAL_RCC_GetHCLKFreq>
 8005d48:	4601      	mov	r1, r0
 8005d4a:	4b05      	ldr	r3, [pc, #20]	; (8005d60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	0a9b      	lsrs	r3, r3, #10
 8005d50:	f003 0307 	and.w	r3, r3, #7
 8005d54:	4a03      	ldr	r2, [pc, #12]	; (8005d64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d56:	5cd3      	ldrb	r3, [r2, r3]
 8005d58:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	bd80      	pop	{r7, pc}
 8005d60:	40023800 	.word	0x40023800
 8005d64:	0800edd4 	.word	0x0800edd4

08005d68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005d6c:	f7ff ffdc 	bl	8005d28 <HAL_RCC_GetHCLKFreq>
 8005d70:	4601      	mov	r1, r0
 8005d72:	4b05      	ldr	r3, [pc, #20]	; (8005d88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	0b5b      	lsrs	r3, r3, #13
 8005d78:	f003 0307 	and.w	r3, r3, #7
 8005d7c:	4a03      	ldr	r2, [pc, #12]	; (8005d8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d7e:	5cd3      	ldrb	r3, [r2, r3]
 8005d80:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	bd80      	pop	{r7, pc}
 8005d88:	40023800 	.word	0x40023800
 8005d8c:	0800edd4 	.word	0x0800edd4

08005d90 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b083      	sub	sp, #12
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
 8005d98:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	220f      	movs	r2, #15
 8005d9e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005da0:	4b12      	ldr	r3, [pc, #72]	; (8005dec <HAL_RCC_GetClockConfig+0x5c>)
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	f003 0203 	and.w	r2, r3, #3
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005dac:	4b0f      	ldr	r3, [pc, #60]	; (8005dec <HAL_RCC_GetClockConfig+0x5c>)
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005db8:	4b0c      	ldr	r3, [pc, #48]	; (8005dec <HAL_RCC_GetClockConfig+0x5c>)
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005dc4:	4b09      	ldr	r3, [pc, #36]	; (8005dec <HAL_RCC_GetClockConfig+0x5c>)
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	08db      	lsrs	r3, r3, #3
 8005dca:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005dd2:	4b07      	ldr	r3, [pc, #28]	; (8005df0 <HAL_RCC_GetClockConfig+0x60>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f003 020f 	and.w	r2, r3, #15
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	601a      	str	r2, [r3, #0]
}
 8005dde:	bf00      	nop
 8005de0:	370c      	adds	r7, #12
 8005de2:	46bd      	mov	sp, r7
 8005de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de8:	4770      	bx	lr
 8005dea:	bf00      	nop
 8005dec:	40023800 	.word	0x40023800
 8005df0:	40023c00 	.word	0x40023c00

08005df4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b082      	sub	sp, #8
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d101      	bne.n	8005e06 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	e056      	b.n	8005eb4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e12:	b2db      	uxtb	r3, r3
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d106      	bne.n	8005e26 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f7fc fb51 	bl	80024c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2202      	movs	r2, #2
 8005e2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e3c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	685a      	ldr	r2, [r3, #4]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	431a      	orrs	r2, r3
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	68db      	ldr	r3, [r3, #12]
 8005e4c:	431a      	orrs	r2, r3
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	691b      	ldr	r3, [r3, #16]
 8005e52:	431a      	orrs	r2, r3
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	695b      	ldr	r3, [r3, #20]
 8005e58:	431a      	orrs	r2, r3
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	699b      	ldr	r3, [r3, #24]
 8005e5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e62:	431a      	orrs	r2, r3
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	69db      	ldr	r3, [r3, #28]
 8005e68:	431a      	orrs	r2, r3
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6a1b      	ldr	r3, [r3, #32]
 8005e6e:	ea42 0103 	orr.w	r1, r2, r3
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	430a      	orrs	r2, r1
 8005e7c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	699b      	ldr	r3, [r3, #24]
 8005e82:	0c1b      	lsrs	r3, r3, #16
 8005e84:	f003 0104 	and.w	r1, r3, #4
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	430a      	orrs	r2, r1
 8005e92:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	69da      	ldr	r2, [r3, #28]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ea2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2201      	movs	r2, #1
 8005eae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005eb2:	2300      	movs	r3, #0
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3708      	adds	r7, #8
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}

08005ebc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b082      	sub	sp, #8
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d101      	bne.n	8005ece <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	e01d      	b.n	8005f0a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ed4:	b2db      	uxtb	r3, r3
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d106      	bne.n	8005ee8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2200      	movs	r2, #0
 8005ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f7fc fba6 	bl	8002634 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2202      	movs	r2, #2
 8005eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	3304      	adds	r3, #4
 8005ef8:	4619      	mov	r1, r3
 8005efa:	4610      	mov	r0, r2
 8005efc:	f000 fb9c 	bl	8006638 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f08:	2300      	movs	r3, #0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3708      	adds	r7, #8
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}

08005f12 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f12:	b480      	push	{r7}
 8005f14:	b085      	sub	sp, #20
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	68da      	ldr	r2, [r3, #12]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f042 0201 	orr.w	r2, r2, #1
 8005f28:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	f003 0307 	and.w	r3, r3, #7
 8005f34:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2b06      	cmp	r3, #6
 8005f3a:	d007      	beq.n	8005f4c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f042 0201 	orr.w	r2, r2, #1
 8005f4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f4c:	2300      	movs	r3, #0
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3714      	adds	r7, #20
 8005f52:	46bd      	mov	sp, r7
 8005f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f58:	4770      	bx	lr

08005f5a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005f5a:	b580      	push	{r7, lr}
 8005f5c:	b082      	sub	sp, #8
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d101      	bne.n	8005f6c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	e01d      	b.n	8005fa8 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f72:	b2db      	uxtb	r3, r3
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d106      	bne.n	8005f86 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f7fc fb77 	bl	8002674 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2202      	movs	r2, #2
 8005f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	3304      	adds	r3, #4
 8005f96:	4619      	mov	r1, r3
 8005f98:	4610      	mov	r0, r2
 8005f9a:	f000 fb4d 	bl	8006638 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2201      	movs	r2, #1
 8005fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005fa6:	2300      	movs	r3, #0
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	3708      	adds	r7, #8
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}

08005fb0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b084      	sub	sp, #16
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	6839      	ldr	r1, [r7, #0]
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f000 fe22 	bl	8006c0c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a15      	ldr	r2, [pc, #84]	; (8006024 <HAL_TIM_PWM_Start+0x74>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d004      	beq.n	8005fdc <HAL_TIM_PWM_Start+0x2c>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a14      	ldr	r2, [pc, #80]	; (8006028 <HAL_TIM_PWM_Start+0x78>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d101      	bne.n	8005fe0 <HAL_TIM_PWM_Start+0x30>
 8005fdc:	2301      	movs	r3, #1
 8005fde:	e000      	b.n	8005fe2 <HAL_TIM_PWM_Start+0x32>
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d007      	beq.n	8005ff6 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ff4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	f003 0307 	and.w	r3, r3, #7
 8006000:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2b06      	cmp	r3, #6
 8006006:	d007      	beq.n	8006018 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f042 0201 	orr.w	r2, r2, #1
 8006016:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006018:	2300      	movs	r3, #0
}
 800601a:	4618      	mov	r0, r3
 800601c:	3710      	adds	r7, #16
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}
 8006022:	bf00      	nop
 8006024:	40010000 	.word	0x40010000
 8006028:	40010400 	.word	0x40010400

0800602c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b082      	sub	sp, #8
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	2200      	movs	r2, #0
 800603c:	6839      	ldr	r1, [r7, #0]
 800603e:	4618      	mov	r0, r3
 8006040:	f000 fde4 	bl	8006c0c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a22      	ldr	r2, [pc, #136]	; (80060d4 <HAL_TIM_PWM_Stop+0xa8>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d004      	beq.n	8006058 <HAL_TIM_PWM_Stop+0x2c>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a21      	ldr	r2, [pc, #132]	; (80060d8 <HAL_TIM_PWM_Stop+0xac>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d101      	bne.n	800605c <HAL_TIM_PWM_Stop+0x30>
 8006058:	2301      	movs	r3, #1
 800605a:	e000      	b.n	800605e <HAL_TIM_PWM_Stop+0x32>
 800605c:	2300      	movs	r3, #0
 800605e:	2b00      	cmp	r3, #0
 8006060:	d017      	beq.n	8006092 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	6a1a      	ldr	r2, [r3, #32]
 8006068:	f241 1311 	movw	r3, #4369	; 0x1111
 800606c:	4013      	ands	r3, r2
 800606e:	2b00      	cmp	r3, #0
 8006070:	d10f      	bne.n	8006092 <HAL_TIM_PWM_Stop+0x66>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	6a1a      	ldr	r2, [r3, #32]
 8006078:	f240 4344 	movw	r3, #1092	; 0x444
 800607c:	4013      	ands	r3, r2
 800607e:	2b00      	cmp	r3, #0
 8006080:	d107      	bne.n	8006092 <HAL_TIM_PWM_Stop+0x66>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006090:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	6a1a      	ldr	r2, [r3, #32]
 8006098:	f241 1311 	movw	r3, #4369	; 0x1111
 800609c:	4013      	ands	r3, r2
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d10f      	bne.n	80060c2 <HAL_TIM_PWM_Stop+0x96>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	6a1a      	ldr	r2, [r3, #32]
 80060a8:	f240 4344 	movw	r3, #1092	; 0x444
 80060ac:	4013      	ands	r3, r2
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d107      	bne.n	80060c2 <HAL_TIM_PWM_Stop+0x96>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f022 0201 	bic.w	r2, r2, #1
 80060c0:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2201      	movs	r2, #1
 80060c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80060ca:	2300      	movs	r3, #0
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	3708      	adds	r7, #8
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}
 80060d4:	40010000 	.word	0x40010000
 80060d8:	40010400 	.word	0x40010400

080060dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b082      	sub	sp, #8
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	691b      	ldr	r3, [r3, #16]
 80060ea:	f003 0302 	and.w	r3, r3, #2
 80060ee:	2b02      	cmp	r3, #2
 80060f0:	d122      	bne.n	8006138 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	68db      	ldr	r3, [r3, #12]
 80060f8:	f003 0302 	and.w	r3, r3, #2
 80060fc:	2b02      	cmp	r3, #2
 80060fe:	d11b      	bne.n	8006138 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f06f 0202 	mvn.w	r2, #2
 8006108:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2201      	movs	r2, #1
 800610e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	699b      	ldr	r3, [r3, #24]
 8006116:	f003 0303 	and.w	r3, r3, #3
 800611a:	2b00      	cmp	r3, #0
 800611c:	d003      	beq.n	8006126 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f000 fa6b 	bl	80065fa <HAL_TIM_IC_CaptureCallback>
 8006124:	e005      	b.n	8006132 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f000 fa5d 	bl	80065e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f000 fa6e 	bl	800660e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2200      	movs	r2, #0
 8006136:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	691b      	ldr	r3, [r3, #16]
 800613e:	f003 0304 	and.w	r3, r3, #4
 8006142:	2b04      	cmp	r3, #4
 8006144:	d122      	bne.n	800618c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	68db      	ldr	r3, [r3, #12]
 800614c:	f003 0304 	and.w	r3, r3, #4
 8006150:	2b04      	cmp	r3, #4
 8006152:	d11b      	bne.n	800618c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f06f 0204 	mvn.w	r2, #4
 800615c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2202      	movs	r2, #2
 8006162:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	699b      	ldr	r3, [r3, #24]
 800616a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800616e:	2b00      	cmp	r3, #0
 8006170:	d003      	beq.n	800617a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f000 fa41 	bl	80065fa <HAL_TIM_IC_CaptureCallback>
 8006178:	e005      	b.n	8006186 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f000 fa33 	bl	80065e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f000 fa44 	bl	800660e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2200      	movs	r2, #0
 800618a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	691b      	ldr	r3, [r3, #16]
 8006192:	f003 0308 	and.w	r3, r3, #8
 8006196:	2b08      	cmp	r3, #8
 8006198:	d122      	bne.n	80061e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	f003 0308 	and.w	r3, r3, #8
 80061a4:	2b08      	cmp	r3, #8
 80061a6:	d11b      	bne.n	80061e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f06f 0208 	mvn.w	r2, #8
 80061b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2204      	movs	r2, #4
 80061b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	69db      	ldr	r3, [r3, #28]
 80061be:	f003 0303 	and.w	r3, r3, #3
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d003      	beq.n	80061ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 fa17 	bl	80065fa <HAL_TIM_IC_CaptureCallback>
 80061cc:	e005      	b.n	80061da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f000 fa09 	bl	80065e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f000 fa1a 	bl	800660e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2200      	movs	r2, #0
 80061de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	691b      	ldr	r3, [r3, #16]
 80061e6:	f003 0310 	and.w	r3, r3, #16
 80061ea:	2b10      	cmp	r3, #16
 80061ec:	d122      	bne.n	8006234 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	68db      	ldr	r3, [r3, #12]
 80061f4:	f003 0310 	and.w	r3, r3, #16
 80061f8:	2b10      	cmp	r3, #16
 80061fa:	d11b      	bne.n	8006234 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f06f 0210 	mvn.w	r2, #16
 8006204:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2208      	movs	r2, #8
 800620a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	69db      	ldr	r3, [r3, #28]
 8006212:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006216:	2b00      	cmp	r3, #0
 8006218:	d003      	beq.n	8006222 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f000 f9ed 	bl	80065fa <HAL_TIM_IC_CaptureCallback>
 8006220:	e005      	b.n	800622e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f000 f9df 	bl	80065e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f000 f9f0 	bl	800660e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2200      	movs	r2, #0
 8006232:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	691b      	ldr	r3, [r3, #16]
 800623a:	f003 0301 	and.w	r3, r3, #1
 800623e:	2b01      	cmp	r3, #1
 8006240:	d10e      	bne.n	8006260 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	68db      	ldr	r3, [r3, #12]
 8006248:	f003 0301 	and.w	r3, r3, #1
 800624c:	2b01      	cmp	r3, #1
 800624e:	d107      	bne.n	8006260 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f06f 0201 	mvn.w	r2, #1
 8006258:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f7fc f852 	bl	8002304 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	691b      	ldr	r3, [r3, #16]
 8006266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800626a:	2b80      	cmp	r3, #128	; 0x80
 800626c:	d10e      	bne.n	800628c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	68db      	ldr	r3, [r3, #12]
 8006274:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006278:	2b80      	cmp	r3, #128	; 0x80
 800627a:	d107      	bne.n	800628c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006284:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f000 fd6c 	bl	8006d64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	691b      	ldr	r3, [r3, #16]
 8006292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006296:	2b40      	cmp	r3, #64	; 0x40
 8006298:	d10e      	bne.n	80062b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	68db      	ldr	r3, [r3, #12]
 80062a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062a4:	2b40      	cmp	r3, #64	; 0x40
 80062a6:	d107      	bne.n	80062b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80062b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f000 f9b5 	bl	8006622 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	691b      	ldr	r3, [r3, #16]
 80062be:	f003 0320 	and.w	r3, r3, #32
 80062c2:	2b20      	cmp	r3, #32
 80062c4:	d10e      	bne.n	80062e4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	68db      	ldr	r3, [r3, #12]
 80062cc:	f003 0320 	and.w	r3, r3, #32
 80062d0:	2b20      	cmp	r3, #32
 80062d2:	d107      	bne.n	80062e4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f06f 0220 	mvn.w	r2, #32
 80062dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f000 fd36 	bl	8006d50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80062e4:	bf00      	nop
 80062e6:	3708      	adds	r7, #8
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}

080062ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b084      	sub	sp, #16
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	60f8      	str	r0, [r7, #12]
 80062f4:	60b9      	str	r1, [r7, #8]
 80062f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062fe:	2b01      	cmp	r3, #1
 8006300:	d101      	bne.n	8006306 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006302:	2302      	movs	r3, #2
 8006304:	e0b4      	b.n	8006470 <HAL_TIM_PWM_ConfigChannel+0x184>
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2201      	movs	r2, #1
 800630a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2202      	movs	r2, #2
 8006312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2b0c      	cmp	r3, #12
 800631a:	f200 809f 	bhi.w	800645c <HAL_TIM_PWM_ConfigChannel+0x170>
 800631e:	a201      	add	r2, pc, #4	; (adr r2, 8006324 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006324:	08006359 	.word	0x08006359
 8006328:	0800645d 	.word	0x0800645d
 800632c:	0800645d 	.word	0x0800645d
 8006330:	0800645d 	.word	0x0800645d
 8006334:	08006399 	.word	0x08006399
 8006338:	0800645d 	.word	0x0800645d
 800633c:	0800645d 	.word	0x0800645d
 8006340:	0800645d 	.word	0x0800645d
 8006344:	080063db 	.word	0x080063db
 8006348:	0800645d 	.word	0x0800645d
 800634c:	0800645d 	.word	0x0800645d
 8006350:	0800645d 	.word	0x0800645d
 8006354:	0800641b 	.word	0x0800641b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	68b9      	ldr	r1, [r7, #8]
 800635e:	4618      	mov	r0, r3
 8006360:	f000 fa0a 	bl	8006778 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	699a      	ldr	r2, [r3, #24]
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f042 0208 	orr.w	r2, r2, #8
 8006372:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	699a      	ldr	r2, [r3, #24]
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f022 0204 	bic.w	r2, r2, #4
 8006382:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	6999      	ldr	r1, [r3, #24]
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	691a      	ldr	r2, [r3, #16]
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	430a      	orrs	r2, r1
 8006394:	619a      	str	r2, [r3, #24]
      break;
 8006396:	e062      	b.n	800645e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	68b9      	ldr	r1, [r7, #8]
 800639e:	4618      	mov	r0, r3
 80063a0:	f000 fa5a 	bl	8006858 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	699a      	ldr	r2, [r3, #24]
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	699a      	ldr	r2, [r3, #24]
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	6999      	ldr	r1, [r3, #24]
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	691b      	ldr	r3, [r3, #16]
 80063ce:	021a      	lsls	r2, r3, #8
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	430a      	orrs	r2, r1
 80063d6:	619a      	str	r2, [r3, #24]
      break;
 80063d8:	e041      	b.n	800645e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	68b9      	ldr	r1, [r7, #8]
 80063e0:	4618      	mov	r0, r3
 80063e2:	f000 faaf 	bl	8006944 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	69da      	ldr	r2, [r3, #28]
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f042 0208 	orr.w	r2, r2, #8
 80063f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	69da      	ldr	r2, [r3, #28]
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f022 0204 	bic.w	r2, r2, #4
 8006404:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	69d9      	ldr	r1, [r3, #28]
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	691a      	ldr	r2, [r3, #16]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	430a      	orrs	r2, r1
 8006416:	61da      	str	r2, [r3, #28]
      break;
 8006418:	e021      	b.n	800645e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	68b9      	ldr	r1, [r7, #8]
 8006420:	4618      	mov	r0, r3
 8006422:	f000 fb03 	bl	8006a2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	69da      	ldr	r2, [r3, #28]
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006434:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	69da      	ldr	r2, [r3, #28]
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006444:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	69d9      	ldr	r1, [r3, #28]
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	691b      	ldr	r3, [r3, #16]
 8006450:	021a      	lsls	r2, r3, #8
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	430a      	orrs	r2, r1
 8006458:	61da      	str	r2, [r3, #28]
      break;
 800645a:	e000      	b.n	800645e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800645c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2201      	movs	r2, #1
 8006462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2200      	movs	r2, #0
 800646a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800646e:	2300      	movs	r3, #0
}
 8006470:	4618      	mov	r0, r3
 8006472:	3710      	adds	r7, #16
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}

08006478 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b084      	sub	sp, #16
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006488:	2b01      	cmp	r3, #1
 800648a:	d101      	bne.n	8006490 <HAL_TIM_ConfigClockSource+0x18>
 800648c:	2302      	movs	r3, #2
 800648e:	e0a6      	b.n	80065de <HAL_TIM_ConfigClockSource+0x166>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2201      	movs	r2, #1
 8006494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2202      	movs	r2, #2
 800649c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80064ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80064b6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	68fa      	ldr	r2, [r7, #12]
 80064be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	2b40      	cmp	r3, #64	; 0x40
 80064c6:	d067      	beq.n	8006598 <HAL_TIM_ConfigClockSource+0x120>
 80064c8:	2b40      	cmp	r3, #64	; 0x40
 80064ca:	d80b      	bhi.n	80064e4 <HAL_TIM_ConfigClockSource+0x6c>
 80064cc:	2b10      	cmp	r3, #16
 80064ce:	d073      	beq.n	80065b8 <HAL_TIM_ConfigClockSource+0x140>
 80064d0:	2b10      	cmp	r3, #16
 80064d2:	d802      	bhi.n	80064da <HAL_TIM_ConfigClockSource+0x62>
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d06f      	beq.n	80065b8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80064d8:	e078      	b.n	80065cc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80064da:	2b20      	cmp	r3, #32
 80064dc:	d06c      	beq.n	80065b8 <HAL_TIM_ConfigClockSource+0x140>
 80064de:	2b30      	cmp	r3, #48	; 0x30
 80064e0:	d06a      	beq.n	80065b8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80064e2:	e073      	b.n	80065cc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80064e4:	2b70      	cmp	r3, #112	; 0x70
 80064e6:	d00d      	beq.n	8006504 <HAL_TIM_ConfigClockSource+0x8c>
 80064e8:	2b70      	cmp	r3, #112	; 0x70
 80064ea:	d804      	bhi.n	80064f6 <HAL_TIM_ConfigClockSource+0x7e>
 80064ec:	2b50      	cmp	r3, #80	; 0x50
 80064ee:	d033      	beq.n	8006558 <HAL_TIM_ConfigClockSource+0xe0>
 80064f0:	2b60      	cmp	r3, #96	; 0x60
 80064f2:	d041      	beq.n	8006578 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80064f4:	e06a      	b.n	80065cc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80064f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064fa:	d066      	beq.n	80065ca <HAL_TIM_ConfigClockSource+0x152>
 80064fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006500:	d017      	beq.n	8006532 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8006502:	e063      	b.n	80065cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6818      	ldr	r0, [r3, #0]
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	6899      	ldr	r1, [r3, #8]
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	685a      	ldr	r2, [r3, #4]
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	68db      	ldr	r3, [r3, #12]
 8006514:	f000 fb5a 	bl	8006bcc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006526:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	68fa      	ldr	r2, [r7, #12]
 800652e:	609a      	str	r2, [r3, #8]
      break;
 8006530:	e04c      	b.n	80065cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6818      	ldr	r0, [r3, #0]
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	6899      	ldr	r1, [r3, #8]
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	685a      	ldr	r2, [r3, #4]
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	68db      	ldr	r3, [r3, #12]
 8006542:	f000 fb43 	bl	8006bcc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	689a      	ldr	r2, [r3, #8]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006554:	609a      	str	r2, [r3, #8]
      break;
 8006556:	e039      	b.n	80065cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6818      	ldr	r0, [r3, #0]
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	6859      	ldr	r1, [r3, #4]
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	68db      	ldr	r3, [r3, #12]
 8006564:	461a      	mov	r2, r3
 8006566:	f000 fab7 	bl	8006ad8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	2150      	movs	r1, #80	; 0x50
 8006570:	4618      	mov	r0, r3
 8006572:	f000 fb10 	bl	8006b96 <TIM_ITRx_SetConfig>
      break;
 8006576:	e029      	b.n	80065cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6818      	ldr	r0, [r3, #0]
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	6859      	ldr	r1, [r3, #4]
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	68db      	ldr	r3, [r3, #12]
 8006584:	461a      	mov	r2, r3
 8006586:	f000 fad6 	bl	8006b36 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	2160      	movs	r1, #96	; 0x60
 8006590:	4618      	mov	r0, r3
 8006592:	f000 fb00 	bl	8006b96 <TIM_ITRx_SetConfig>
      break;
 8006596:	e019      	b.n	80065cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6818      	ldr	r0, [r3, #0]
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	6859      	ldr	r1, [r3, #4]
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	68db      	ldr	r3, [r3, #12]
 80065a4:	461a      	mov	r2, r3
 80065a6:	f000 fa97 	bl	8006ad8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	2140      	movs	r1, #64	; 0x40
 80065b0:	4618      	mov	r0, r3
 80065b2:	f000 faf0 	bl	8006b96 <TIM_ITRx_SetConfig>
      break;
 80065b6:	e009      	b.n	80065cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4619      	mov	r1, r3
 80065c2:	4610      	mov	r0, r2
 80065c4:	f000 fae7 	bl	8006b96 <TIM_ITRx_SetConfig>
      break;
 80065c8:	e000      	b.n	80065cc <HAL_TIM_ConfigClockSource+0x154>
      break;
 80065ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2201      	movs	r2, #1
 80065d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2200      	movs	r2, #0
 80065d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80065dc:	2300      	movs	r3, #0
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3710      	adds	r7, #16
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}

080065e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80065e6:	b480      	push	{r7}
 80065e8:	b083      	sub	sp, #12
 80065ea:	af00      	add	r7, sp, #0
 80065ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80065ee:	bf00      	nop
 80065f0:	370c      	adds	r7, #12
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr

080065fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80065fa:	b480      	push	{r7}
 80065fc:	b083      	sub	sp, #12
 80065fe:	af00      	add	r7, sp, #0
 8006600:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006602:	bf00      	nop
 8006604:	370c      	adds	r7, #12
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr

0800660e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800660e:	b480      	push	{r7}
 8006610:	b083      	sub	sp, #12
 8006612:	af00      	add	r7, sp, #0
 8006614:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006616:	bf00      	nop
 8006618:	370c      	adds	r7, #12
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr

08006622 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006622:	b480      	push	{r7}
 8006624:	b083      	sub	sp, #12
 8006626:	af00      	add	r7, sp, #0
 8006628:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800662a:	bf00      	nop
 800662c:	370c      	adds	r7, #12
 800662e:	46bd      	mov	sp, r7
 8006630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006634:	4770      	bx	lr
	...

08006638 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006638:	b480      	push	{r7}
 800663a:	b085      	sub	sp, #20
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	4a40      	ldr	r2, [pc, #256]	; (800674c <TIM_Base_SetConfig+0x114>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d013      	beq.n	8006678 <TIM_Base_SetConfig+0x40>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006656:	d00f      	beq.n	8006678 <TIM_Base_SetConfig+0x40>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	4a3d      	ldr	r2, [pc, #244]	; (8006750 <TIM_Base_SetConfig+0x118>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d00b      	beq.n	8006678 <TIM_Base_SetConfig+0x40>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	4a3c      	ldr	r2, [pc, #240]	; (8006754 <TIM_Base_SetConfig+0x11c>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d007      	beq.n	8006678 <TIM_Base_SetConfig+0x40>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	4a3b      	ldr	r2, [pc, #236]	; (8006758 <TIM_Base_SetConfig+0x120>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d003      	beq.n	8006678 <TIM_Base_SetConfig+0x40>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	4a3a      	ldr	r2, [pc, #232]	; (800675c <TIM_Base_SetConfig+0x124>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d108      	bne.n	800668a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800667e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	68fa      	ldr	r2, [r7, #12]
 8006686:	4313      	orrs	r3, r2
 8006688:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	4a2f      	ldr	r2, [pc, #188]	; (800674c <TIM_Base_SetConfig+0x114>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d02b      	beq.n	80066ea <TIM_Base_SetConfig+0xb2>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006698:	d027      	beq.n	80066ea <TIM_Base_SetConfig+0xb2>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	4a2c      	ldr	r2, [pc, #176]	; (8006750 <TIM_Base_SetConfig+0x118>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d023      	beq.n	80066ea <TIM_Base_SetConfig+0xb2>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	4a2b      	ldr	r2, [pc, #172]	; (8006754 <TIM_Base_SetConfig+0x11c>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d01f      	beq.n	80066ea <TIM_Base_SetConfig+0xb2>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	4a2a      	ldr	r2, [pc, #168]	; (8006758 <TIM_Base_SetConfig+0x120>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d01b      	beq.n	80066ea <TIM_Base_SetConfig+0xb2>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	4a29      	ldr	r2, [pc, #164]	; (800675c <TIM_Base_SetConfig+0x124>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d017      	beq.n	80066ea <TIM_Base_SetConfig+0xb2>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	4a28      	ldr	r2, [pc, #160]	; (8006760 <TIM_Base_SetConfig+0x128>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d013      	beq.n	80066ea <TIM_Base_SetConfig+0xb2>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	4a27      	ldr	r2, [pc, #156]	; (8006764 <TIM_Base_SetConfig+0x12c>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d00f      	beq.n	80066ea <TIM_Base_SetConfig+0xb2>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	4a26      	ldr	r2, [pc, #152]	; (8006768 <TIM_Base_SetConfig+0x130>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d00b      	beq.n	80066ea <TIM_Base_SetConfig+0xb2>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	4a25      	ldr	r2, [pc, #148]	; (800676c <TIM_Base_SetConfig+0x134>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d007      	beq.n	80066ea <TIM_Base_SetConfig+0xb2>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	4a24      	ldr	r2, [pc, #144]	; (8006770 <TIM_Base_SetConfig+0x138>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d003      	beq.n	80066ea <TIM_Base_SetConfig+0xb2>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	4a23      	ldr	r2, [pc, #140]	; (8006774 <TIM_Base_SetConfig+0x13c>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d108      	bne.n	80066fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	68db      	ldr	r3, [r3, #12]
 80066f6:	68fa      	ldr	r2, [r7, #12]
 80066f8:	4313      	orrs	r3, r2
 80066fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	695b      	ldr	r3, [r3, #20]
 8006706:	4313      	orrs	r3, r2
 8006708:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	68fa      	ldr	r2, [r7, #12]
 800670e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	689a      	ldr	r2, [r3, #8]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	4a0a      	ldr	r2, [pc, #40]	; (800674c <TIM_Base_SetConfig+0x114>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d003      	beq.n	8006730 <TIM_Base_SetConfig+0xf8>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	4a0c      	ldr	r2, [pc, #48]	; (800675c <TIM_Base_SetConfig+0x124>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d103      	bne.n	8006738 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	691a      	ldr	r2, [r3, #16]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2201      	movs	r2, #1
 800673c:	615a      	str	r2, [r3, #20]
}
 800673e:	bf00      	nop
 8006740:	3714      	adds	r7, #20
 8006742:	46bd      	mov	sp, r7
 8006744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006748:	4770      	bx	lr
 800674a:	bf00      	nop
 800674c:	40010000 	.word	0x40010000
 8006750:	40000400 	.word	0x40000400
 8006754:	40000800 	.word	0x40000800
 8006758:	40000c00 	.word	0x40000c00
 800675c:	40010400 	.word	0x40010400
 8006760:	40014000 	.word	0x40014000
 8006764:	40014400 	.word	0x40014400
 8006768:	40014800 	.word	0x40014800
 800676c:	40001800 	.word	0x40001800
 8006770:	40001c00 	.word	0x40001c00
 8006774:	40002000 	.word	0x40002000

08006778 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006778:	b480      	push	{r7}
 800677a:	b087      	sub	sp, #28
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6a1b      	ldr	r3, [r3, #32]
 8006786:	f023 0201 	bic.w	r2, r3, #1
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6a1b      	ldr	r3, [r3, #32]
 8006792:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	699b      	ldr	r3, [r3, #24]
 800679e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f023 0303 	bic.w	r3, r3, #3
 80067ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	68fa      	ldr	r2, [r7, #12]
 80067b6:	4313      	orrs	r3, r2
 80067b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	f023 0302 	bic.w	r3, r3, #2
 80067c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	689b      	ldr	r3, [r3, #8]
 80067c6:	697a      	ldr	r2, [r7, #20]
 80067c8:	4313      	orrs	r3, r2
 80067ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	4a20      	ldr	r2, [pc, #128]	; (8006850 <TIM_OC1_SetConfig+0xd8>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d003      	beq.n	80067dc <TIM_OC1_SetConfig+0x64>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	4a1f      	ldr	r2, [pc, #124]	; (8006854 <TIM_OC1_SetConfig+0xdc>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d10c      	bne.n	80067f6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	f023 0308 	bic.w	r3, r3, #8
 80067e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	68db      	ldr	r3, [r3, #12]
 80067e8:	697a      	ldr	r2, [r7, #20]
 80067ea:	4313      	orrs	r3, r2
 80067ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	f023 0304 	bic.w	r3, r3, #4
 80067f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	4a15      	ldr	r2, [pc, #84]	; (8006850 <TIM_OC1_SetConfig+0xd8>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d003      	beq.n	8006806 <TIM_OC1_SetConfig+0x8e>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	4a14      	ldr	r2, [pc, #80]	; (8006854 <TIM_OC1_SetConfig+0xdc>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d111      	bne.n	800682a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800680c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006814:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	695b      	ldr	r3, [r3, #20]
 800681a:	693a      	ldr	r2, [r7, #16]
 800681c:	4313      	orrs	r3, r2
 800681e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	699b      	ldr	r3, [r3, #24]
 8006824:	693a      	ldr	r2, [r7, #16]
 8006826:	4313      	orrs	r3, r2
 8006828:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	693a      	ldr	r2, [r7, #16]
 800682e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	68fa      	ldr	r2, [r7, #12]
 8006834:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	685a      	ldr	r2, [r3, #4]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	697a      	ldr	r2, [r7, #20]
 8006842:	621a      	str	r2, [r3, #32]
}
 8006844:	bf00      	nop
 8006846:	371c      	adds	r7, #28
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr
 8006850:	40010000 	.word	0x40010000
 8006854:	40010400 	.word	0x40010400

08006858 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006858:	b480      	push	{r7}
 800685a:	b087      	sub	sp, #28
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6a1b      	ldr	r3, [r3, #32]
 8006866:	f023 0210 	bic.w	r2, r3, #16
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6a1b      	ldr	r3, [r3, #32]
 8006872:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	699b      	ldr	r3, [r3, #24]
 800687e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006886:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800688e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	021b      	lsls	r3, r3, #8
 8006896:	68fa      	ldr	r2, [r7, #12]
 8006898:	4313      	orrs	r3, r2
 800689a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	f023 0320 	bic.w	r3, r3, #32
 80068a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	689b      	ldr	r3, [r3, #8]
 80068a8:	011b      	lsls	r3, r3, #4
 80068aa:	697a      	ldr	r2, [r7, #20]
 80068ac:	4313      	orrs	r3, r2
 80068ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	4a22      	ldr	r2, [pc, #136]	; (800693c <TIM_OC2_SetConfig+0xe4>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d003      	beq.n	80068c0 <TIM_OC2_SetConfig+0x68>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	4a21      	ldr	r2, [pc, #132]	; (8006940 <TIM_OC2_SetConfig+0xe8>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d10d      	bne.n	80068dc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	68db      	ldr	r3, [r3, #12]
 80068cc:	011b      	lsls	r3, r3, #4
 80068ce:	697a      	ldr	r2, [r7, #20]
 80068d0:	4313      	orrs	r3, r2
 80068d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	4a17      	ldr	r2, [pc, #92]	; (800693c <TIM_OC2_SetConfig+0xe4>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d003      	beq.n	80068ec <TIM_OC2_SetConfig+0x94>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	4a16      	ldr	r2, [pc, #88]	; (8006940 <TIM_OC2_SetConfig+0xe8>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d113      	bne.n	8006914 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80068f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80068fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	695b      	ldr	r3, [r3, #20]
 8006900:	009b      	lsls	r3, r3, #2
 8006902:	693a      	ldr	r2, [r7, #16]
 8006904:	4313      	orrs	r3, r2
 8006906:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	699b      	ldr	r3, [r3, #24]
 800690c:	009b      	lsls	r3, r3, #2
 800690e:	693a      	ldr	r2, [r7, #16]
 8006910:	4313      	orrs	r3, r2
 8006912:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	693a      	ldr	r2, [r7, #16]
 8006918:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	68fa      	ldr	r2, [r7, #12]
 800691e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	685a      	ldr	r2, [r3, #4]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	697a      	ldr	r2, [r7, #20]
 800692c:	621a      	str	r2, [r3, #32]
}
 800692e:	bf00      	nop
 8006930:	371c      	adds	r7, #28
 8006932:	46bd      	mov	sp, r7
 8006934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006938:	4770      	bx	lr
 800693a:	bf00      	nop
 800693c:	40010000 	.word	0x40010000
 8006940:	40010400 	.word	0x40010400

08006944 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006944:	b480      	push	{r7}
 8006946:	b087      	sub	sp, #28
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6a1b      	ldr	r3, [r3, #32]
 8006952:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6a1b      	ldr	r3, [r3, #32]
 800695e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	69db      	ldr	r3, [r3, #28]
 800696a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006972:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f023 0303 	bic.w	r3, r3, #3
 800697a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	68fa      	ldr	r2, [r7, #12]
 8006982:	4313      	orrs	r3, r2
 8006984:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800698c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	021b      	lsls	r3, r3, #8
 8006994:	697a      	ldr	r2, [r7, #20]
 8006996:	4313      	orrs	r3, r2
 8006998:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	4a21      	ldr	r2, [pc, #132]	; (8006a24 <TIM_OC3_SetConfig+0xe0>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d003      	beq.n	80069aa <TIM_OC3_SetConfig+0x66>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	4a20      	ldr	r2, [pc, #128]	; (8006a28 <TIM_OC3_SetConfig+0xe4>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d10d      	bne.n	80069c6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80069b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	68db      	ldr	r3, [r3, #12]
 80069b6:	021b      	lsls	r3, r3, #8
 80069b8:	697a      	ldr	r2, [r7, #20]
 80069ba:	4313      	orrs	r3, r2
 80069bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80069c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	4a16      	ldr	r2, [pc, #88]	; (8006a24 <TIM_OC3_SetConfig+0xe0>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d003      	beq.n	80069d6 <TIM_OC3_SetConfig+0x92>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	4a15      	ldr	r2, [pc, #84]	; (8006a28 <TIM_OC3_SetConfig+0xe4>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d113      	bne.n	80069fe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80069dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80069e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	695b      	ldr	r3, [r3, #20]
 80069ea:	011b      	lsls	r3, r3, #4
 80069ec:	693a      	ldr	r2, [r7, #16]
 80069ee:	4313      	orrs	r3, r2
 80069f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	699b      	ldr	r3, [r3, #24]
 80069f6:	011b      	lsls	r3, r3, #4
 80069f8:	693a      	ldr	r2, [r7, #16]
 80069fa:	4313      	orrs	r3, r2
 80069fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	693a      	ldr	r2, [r7, #16]
 8006a02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	68fa      	ldr	r2, [r7, #12]
 8006a08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	685a      	ldr	r2, [r3, #4]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	697a      	ldr	r2, [r7, #20]
 8006a16:	621a      	str	r2, [r3, #32]
}
 8006a18:	bf00      	nop
 8006a1a:	371c      	adds	r7, #28
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr
 8006a24:	40010000 	.word	0x40010000
 8006a28:	40010400 	.word	0x40010400

08006a2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b087      	sub	sp, #28
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6a1b      	ldr	r3, [r3, #32]
 8006a3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6a1b      	ldr	r3, [r3, #32]
 8006a46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	69db      	ldr	r3, [r3, #28]
 8006a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	021b      	lsls	r3, r3, #8
 8006a6a:	68fa      	ldr	r2, [r7, #12]
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	689b      	ldr	r3, [r3, #8]
 8006a7c:	031b      	lsls	r3, r3, #12
 8006a7e:	693a      	ldr	r2, [r7, #16]
 8006a80:	4313      	orrs	r3, r2
 8006a82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	4a12      	ldr	r2, [pc, #72]	; (8006ad0 <TIM_OC4_SetConfig+0xa4>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d003      	beq.n	8006a94 <TIM_OC4_SetConfig+0x68>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	4a11      	ldr	r2, [pc, #68]	; (8006ad4 <TIM_OC4_SetConfig+0xa8>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d109      	bne.n	8006aa8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a9a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	695b      	ldr	r3, [r3, #20]
 8006aa0:	019b      	lsls	r3, r3, #6
 8006aa2:	697a      	ldr	r2, [r7, #20]
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	697a      	ldr	r2, [r7, #20]
 8006aac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	68fa      	ldr	r2, [r7, #12]
 8006ab2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	685a      	ldr	r2, [r3, #4]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	693a      	ldr	r2, [r7, #16]
 8006ac0:	621a      	str	r2, [r3, #32]
}
 8006ac2:	bf00      	nop
 8006ac4:	371c      	adds	r7, #28
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006acc:	4770      	bx	lr
 8006ace:	bf00      	nop
 8006ad0:	40010000 	.word	0x40010000
 8006ad4:	40010400 	.word	0x40010400

08006ad8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b087      	sub	sp, #28
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	60f8      	str	r0, [r7, #12]
 8006ae0:	60b9      	str	r1, [r7, #8]
 8006ae2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	6a1b      	ldr	r3, [r3, #32]
 8006ae8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	6a1b      	ldr	r3, [r3, #32]
 8006aee:	f023 0201 	bic.w	r2, r3, #1
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	699b      	ldr	r3, [r3, #24]
 8006afa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	011b      	lsls	r3, r3, #4
 8006b08:	693a      	ldr	r2, [r7, #16]
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	f023 030a 	bic.w	r3, r3, #10
 8006b14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b16:	697a      	ldr	r2, [r7, #20]
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	693a      	ldr	r2, [r7, #16]
 8006b22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	697a      	ldr	r2, [r7, #20]
 8006b28:	621a      	str	r2, [r3, #32]
}
 8006b2a:	bf00      	nop
 8006b2c:	371c      	adds	r7, #28
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b34:	4770      	bx	lr

08006b36 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b36:	b480      	push	{r7}
 8006b38:	b087      	sub	sp, #28
 8006b3a:	af00      	add	r7, sp, #0
 8006b3c:	60f8      	str	r0, [r7, #12]
 8006b3e:	60b9      	str	r1, [r7, #8]
 8006b40:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	6a1b      	ldr	r3, [r3, #32]
 8006b46:	f023 0210 	bic.w	r2, r3, #16
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	699b      	ldr	r3, [r3, #24]
 8006b52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	6a1b      	ldr	r3, [r3, #32]
 8006b58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006b60:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	031b      	lsls	r3, r3, #12
 8006b66:	697a      	ldr	r2, [r7, #20]
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006b72:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	011b      	lsls	r3, r3, #4
 8006b78:	693a      	ldr	r2, [r7, #16]
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	697a      	ldr	r2, [r7, #20]
 8006b82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	693a      	ldr	r2, [r7, #16]
 8006b88:	621a      	str	r2, [r3, #32]
}
 8006b8a:	bf00      	nop
 8006b8c:	371c      	adds	r7, #28
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b94:	4770      	bx	lr

08006b96 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006b96:	b480      	push	{r7}
 8006b98:	b085      	sub	sp, #20
 8006b9a:	af00      	add	r7, sp, #0
 8006b9c:	6078      	str	r0, [r7, #4]
 8006b9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	689b      	ldr	r3, [r3, #8]
 8006ba4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006bae:	683a      	ldr	r2, [r7, #0]
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	f043 0307 	orr.w	r3, r3, #7
 8006bb8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	68fa      	ldr	r2, [r7, #12]
 8006bbe:	609a      	str	r2, [r3, #8]
}
 8006bc0:	bf00      	nop
 8006bc2:	3714      	adds	r7, #20
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr

08006bcc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b087      	sub	sp, #28
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	60f8      	str	r0, [r7, #12]
 8006bd4:	60b9      	str	r1, [r7, #8]
 8006bd6:	607a      	str	r2, [r7, #4]
 8006bd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006be6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	021a      	lsls	r2, r3, #8
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	431a      	orrs	r2, r3
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	697a      	ldr	r2, [r7, #20]
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	697a      	ldr	r2, [r7, #20]
 8006bfe:	609a      	str	r2, [r3, #8]
}
 8006c00:	bf00      	nop
 8006c02:	371c      	adds	r7, #28
 8006c04:	46bd      	mov	sp, r7
 8006c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0a:	4770      	bx	lr

08006c0c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b087      	sub	sp, #28
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	60f8      	str	r0, [r7, #12]
 8006c14:	60b9      	str	r1, [r7, #8]
 8006c16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	f003 031f 	and.w	r3, r3, #31
 8006c1e:	2201      	movs	r2, #1
 8006c20:	fa02 f303 	lsl.w	r3, r2, r3
 8006c24:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	6a1a      	ldr	r2, [r3, #32]
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	43db      	mvns	r3, r3
 8006c2e:	401a      	ands	r2, r3
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	6a1a      	ldr	r2, [r3, #32]
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	f003 031f 	and.w	r3, r3, #31
 8006c3e:	6879      	ldr	r1, [r7, #4]
 8006c40:	fa01 f303 	lsl.w	r3, r1, r3
 8006c44:	431a      	orrs	r2, r3
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	621a      	str	r2, [r3, #32]
}
 8006c4a:	bf00      	nop
 8006c4c:	371c      	adds	r7, #28
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c54:	4770      	bx	lr
	...

08006c58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b085      	sub	sp, #20
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	d101      	bne.n	8006c70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c6c:	2302      	movs	r3, #2
 8006c6e:	e05a      	b.n	8006d26 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2201      	movs	r2, #1
 8006c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2202      	movs	r2, #2
 8006c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	689b      	ldr	r3, [r3, #8]
 8006c8e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	68fa      	ldr	r2, [r7, #12]
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	68fa      	ldr	r2, [r7, #12]
 8006ca8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a21      	ldr	r2, [pc, #132]	; (8006d34 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d022      	beq.n	8006cfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cbc:	d01d      	beq.n	8006cfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a1d      	ldr	r2, [pc, #116]	; (8006d38 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d018      	beq.n	8006cfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a1b      	ldr	r2, [pc, #108]	; (8006d3c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d013      	beq.n	8006cfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a1a      	ldr	r2, [pc, #104]	; (8006d40 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d00e      	beq.n	8006cfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a18      	ldr	r2, [pc, #96]	; (8006d44 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d009      	beq.n	8006cfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a17      	ldr	r2, [pc, #92]	; (8006d48 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d004      	beq.n	8006cfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a15      	ldr	r2, [pc, #84]	; (8006d4c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d10c      	bne.n	8006d14 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	68ba      	ldr	r2, [r7, #8]
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	68ba      	ldr	r2, [r7, #8]
 8006d12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2201      	movs	r2, #1
 8006d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d24:	2300      	movs	r3, #0
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3714      	adds	r7, #20
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d30:	4770      	bx	lr
 8006d32:	bf00      	nop
 8006d34:	40010000 	.word	0x40010000
 8006d38:	40000400 	.word	0x40000400
 8006d3c:	40000800 	.word	0x40000800
 8006d40:	40000c00 	.word	0x40000c00
 8006d44:	40010400 	.word	0x40010400
 8006d48:	40014000 	.word	0x40014000
 8006d4c:	40001800 	.word	0x40001800

08006d50 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b083      	sub	sp, #12
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006d58:	bf00      	nop
 8006d5a:	370c      	adds	r7, #12
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d62:	4770      	bx	lr

08006d64 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b083      	sub	sp, #12
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006d6c:	bf00      	nop
 8006d6e:	370c      	adds	r7, #12
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr

08006d78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b082      	sub	sp, #8
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d101      	bne.n	8006d8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d86:	2301      	movs	r3, #1
 8006d88:	e03f      	b.n	8006e0a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006d90:	b2db      	uxtb	r3, r3
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d106      	bne.n	8006da4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f7fb fcea 	bl	8002778 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2224      	movs	r2, #36	; 0x24
 8006da8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	68da      	ldr	r2, [r3, #12]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006dba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f000 fb97 	bl	80074f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	691a      	ldr	r2, [r3, #16]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006dd0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	695a      	ldr	r2, [r3, #20]
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006de0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	68da      	ldr	r2, [r3, #12]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006df0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2200      	movs	r2, #0
 8006df6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2220      	movs	r2, #32
 8006dfc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2220      	movs	r2, #32
 8006e04:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006e08:	2300      	movs	r3, #0
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3708      	adds	r7, #8
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}

08006e12 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e12:	b580      	push	{r7, lr}
 8006e14:	b088      	sub	sp, #32
 8006e16:	af02      	add	r7, sp, #8
 8006e18:	60f8      	str	r0, [r7, #12]
 8006e1a:	60b9      	str	r1, [r7, #8]
 8006e1c:	603b      	str	r3, [r7, #0]
 8006e1e:	4613      	mov	r3, r2
 8006e20:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8006e22:	2300      	movs	r3, #0
 8006e24:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006e2c:	b2db      	uxtb	r3, r3
 8006e2e:	2b20      	cmp	r3, #32
 8006e30:	f040 8083 	bne.w	8006f3a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d002      	beq.n	8006e40 <HAL_UART_Transmit+0x2e>
 8006e3a:	88fb      	ldrh	r3, [r7, #6]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d101      	bne.n	8006e44 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8006e40:	2301      	movs	r3, #1
 8006e42:	e07b      	b.n	8006f3c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	d101      	bne.n	8006e52 <HAL_UART_Transmit+0x40>
 8006e4e:	2302      	movs	r3, #2
 8006e50:	e074      	b.n	8006f3c <HAL_UART_Transmit+0x12a>
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2201      	movs	r2, #1
 8006e56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	2221      	movs	r2, #33	; 0x21
 8006e64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006e68:	f7fb ff14 	bl	8002c94 <HAL_GetTick>
 8006e6c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	88fa      	ldrh	r2, [r7, #6]
 8006e72:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	88fa      	ldrh	r2, [r7, #6]
 8006e78:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8006e82:	e042      	b.n	8006f0a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	3b01      	subs	r3, #1
 8006e8c:	b29a      	uxth	r2, r3
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e9a:	d122      	bne.n	8006ee2 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	9300      	str	r3, [sp, #0]
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	2180      	movs	r1, #128	; 0x80
 8006ea6:	68f8      	ldr	r0, [r7, #12]
 8006ea8:	f000 f9b6 	bl	8007218 <UART_WaitOnFlagUntilTimeout>
 8006eac:	4603      	mov	r3, r0
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d001      	beq.n	8006eb6 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8006eb2:	2303      	movs	r3, #3
 8006eb4:	e042      	b.n	8006f3c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	881b      	ldrh	r3, [r3, #0]
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ec8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	691b      	ldr	r3, [r3, #16]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d103      	bne.n	8006eda <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	3302      	adds	r3, #2
 8006ed6:	60bb      	str	r3, [r7, #8]
 8006ed8:	e017      	b.n	8006f0a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	3301      	adds	r3, #1
 8006ede:	60bb      	str	r3, [r7, #8]
 8006ee0:	e013      	b.n	8006f0a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	9300      	str	r3, [sp, #0]
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	2180      	movs	r1, #128	; 0x80
 8006eec:	68f8      	ldr	r0, [r7, #12]
 8006eee:	f000 f993 	bl	8007218 <UART_WaitOnFlagUntilTimeout>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d001      	beq.n	8006efc <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8006ef8:	2303      	movs	r3, #3
 8006efa:	e01f      	b.n	8006f3c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	1c5a      	adds	r2, r3, #1
 8006f00:	60ba      	str	r2, [r7, #8]
 8006f02:	781a      	ldrb	r2, [r3, #0]
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d1b7      	bne.n	8006e84 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	9300      	str	r3, [sp, #0]
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	2140      	movs	r1, #64	; 0x40
 8006f1e:	68f8      	ldr	r0, [r7, #12]
 8006f20:	f000 f97a 	bl	8007218 <UART_WaitOnFlagUntilTimeout>
 8006f24:	4603      	mov	r3, r0
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d001      	beq.n	8006f2e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8006f2a:	2303      	movs	r3, #3
 8006f2c:	e006      	b.n	8006f3c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	2220      	movs	r2, #32
 8006f32:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8006f36:	2300      	movs	r3, #0
 8006f38:	e000      	b.n	8006f3c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8006f3a:	2302      	movs	r3, #2
  }
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	3718      	adds	r7, #24
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}

08006f44 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b085      	sub	sp, #20
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	60f8      	str	r0, [r7, #12]
 8006f4c:	60b9      	str	r1, [r7, #8]
 8006f4e:	4613      	mov	r3, r2
 8006f50:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006f58:	b2db      	uxtb	r3, r3
 8006f5a:	2b20      	cmp	r3, #32
 8006f5c:	d140      	bne.n	8006fe0 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d002      	beq.n	8006f6a <HAL_UART_Receive_IT+0x26>
 8006f64:	88fb      	ldrh	r3, [r7, #6]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d101      	bne.n	8006f6e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	e039      	b.n	8006fe2 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	d101      	bne.n	8006f7c <HAL_UART_Receive_IT+0x38>
 8006f78:	2302      	movs	r3, #2
 8006f7a:	e032      	b.n	8006fe2 <HAL_UART_Receive_IT+0x9e>
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2201      	movs	r2, #1
 8006f80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	68ba      	ldr	r2, [r7, #8]
 8006f88:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	88fa      	ldrh	r2, [r7, #6]
 8006f8e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	88fa      	ldrh	r2, [r7, #6]
 8006f94:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	2222      	movs	r2, #34	; 0x22
 8006fa0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	68da      	ldr	r2, [r3, #12]
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006fba:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	695a      	ldr	r2, [r3, #20]
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f042 0201 	orr.w	r2, r2, #1
 8006fca:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	68da      	ldr	r2, [r3, #12]
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f042 0220 	orr.w	r2, r2, #32
 8006fda:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	e000      	b.n	8006fe2 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8006fe0:	2302      	movs	r3, #2
  }
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3714      	adds	r7, #20
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fec:	4770      	bx	lr
	...

08006ff0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b088      	sub	sp, #32
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	68db      	ldr	r3, [r3, #12]
 8007006:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	695b      	ldr	r3, [r3, #20]
 800700e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8007010:	2300      	movs	r3, #0
 8007012:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8007014:	2300      	movs	r3, #0
 8007016:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007018:	69fb      	ldr	r3, [r7, #28]
 800701a:	f003 030f 	and.w	r3, r3, #15
 800701e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d10d      	bne.n	8007042 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007026:	69fb      	ldr	r3, [r7, #28]
 8007028:	f003 0320 	and.w	r3, r3, #32
 800702c:	2b00      	cmp	r3, #0
 800702e:	d008      	beq.n	8007042 <HAL_UART_IRQHandler+0x52>
 8007030:	69bb      	ldr	r3, [r7, #24]
 8007032:	f003 0320 	and.w	r3, r3, #32
 8007036:	2b00      	cmp	r3, #0
 8007038:	d003      	beq.n	8007042 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f000 f9d6 	bl	80073ec <UART_Receive_IT>
      return;
 8007040:	e0d1      	b.n	80071e6 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	2b00      	cmp	r3, #0
 8007046:	f000 80b0 	beq.w	80071aa <HAL_UART_IRQHandler+0x1ba>
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	f003 0301 	and.w	r3, r3, #1
 8007050:	2b00      	cmp	r3, #0
 8007052:	d105      	bne.n	8007060 <HAL_UART_IRQHandler+0x70>
 8007054:	69bb      	ldr	r3, [r7, #24]
 8007056:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800705a:	2b00      	cmp	r3, #0
 800705c:	f000 80a5 	beq.w	80071aa <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007060:	69fb      	ldr	r3, [r7, #28]
 8007062:	f003 0301 	and.w	r3, r3, #1
 8007066:	2b00      	cmp	r3, #0
 8007068:	d00a      	beq.n	8007080 <HAL_UART_IRQHandler+0x90>
 800706a:	69bb      	ldr	r3, [r7, #24]
 800706c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007070:	2b00      	cmp	r3, #0
 8007072:	d005      	beq.n	8007080 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007078:	f043 0201 	orr.w	r2, r3, #1
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007080:	69fb      	ldr	r3, [r7, #28]
 8007082:	f003 0304 	and.w	r3, r3, #4
 8007086:	2b00      	cmp	r3, #0
 8007088:	d00a      	beq.n	80070a0 <HAL_UART_IRQHandler+0xb0>
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	f003 0301 	and.w	r3, r3, #1
 8007090:	2b00      	cmp	r3, #0
 8007092:	d005      	beq.n	80070a0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007098:	f043 0202 	orr.w	r2, r3, #2
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80070a0:	69fb      	ldr	r3, [r7, #28]
 80070a2:	f003 0302 	and.w	r3, r3, #2
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d00a      	beq.n	80070c0 <HAL_UART_IRQHandler+0xd0>
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	f003 0301 	and.w	r3, r3, #1
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d005      	beq.n	80070c0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070b8:	f043 0204 	orr.w	r2, r3, #4
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80070c0:	69fb      	ldr	r3, [r7, #28]
 80070c2:	f003 0308 	and.w	r3, r3, #8
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d00f      	beq.n	80070ea <HAL_UART_IRQHandler+0xfa>
 80070ca:	69bb      	ldr	r3, [r7, #24]
 80070cc:	f003 0320 	and.w	r3, r3, #32
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d104      	bne.n	80070de <HAL_UART_IRQHandler+0xee>
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	f003 0301 	and.w	r3, r3, #1
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d005      	beq.n	80070ea <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070e2:	f043 0208 	orr.w	r2, r3, #8
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d078      	beq.n	80071e4 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80070f2:	69fb      	ldr	r3, [r7, #28]
 80070f4:	f003 0320 	and.w	r3, r3, #32
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d007      	beq.n	800710c <HAL_UART_IRQHandler+0x11c>
 80070fc:	69bb      	ldr	r3, [r7, #24]
 80070fe:	f003 0320 	and.w	r3, r3, #32
 8007102:	2b00      	cmp	r3, #0
 8007104:	d002      	beq.n	800710c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f000 f970 	bl	80073ec <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	695b      	ldr	r3, [r3, #20]
 8007112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007116:	2b40      	cmp	r3, #64	; 0x40
 8007118:	bf0c      	ite	eq
 800711a:	2301      	moveq	r3, #1
 800711c:	2300      	movne	r3, #0
 800711e:	b2db      	uxtb	r3, r3
 8007120:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007126:	f003 0308 	and.w	r3, r3, #8
 800712a:	2b00      	cmp	r3, #0
 800712c:	d102      	bne.n	8007134 <HAL_UART_IRQHandler+0x144>
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d031      	beq.n	8007198 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f000 f8b9 	bl	80072ac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	695b      	ldr	r3, [r3, #20]
 8007140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007144:	2b40      	cmp	r3, #64	; 0x40
 8007146:	d123      	bne.n	8007190 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	695a      	ldr	r2, [r3, #20]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007156:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800715c:	2b00      	cmp	r3, #0
 800715e:	d013      	beq.n	8007188 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007164:	4a21      	ldr	r2, [pc, #132]	; (80071ec <HAL_UART_IRQHandler+0x1fc>)
 8007166:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800716c:	4618      	mov	r0, r3
 800716e:	f7fc f903 	bl	8003378 <HAL_DMA_Abort_IT>
 8007172:	4603      	mov	r3, r0
 8007174:	2b00      	cmp	r3, #0
 8007176:	d016      	beq.n	80071a6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800717c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800717e:	687a      	ldr	r2, [r7, #4]
 8007180:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007182:	4610      	mov	r0, r2
 8007184:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007186:	e00e      	b.n	80071a6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f000 f83b 	bl	8007204 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800718e:	e00a      	b.n	80071a6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f000 f837 	bl	8007204 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007196:	e006      	b.n	80071a6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f000 f833 	bl	8007204 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2200      	movs	r2, #0
 80071a2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80071a4:	e01e      	b.n	80071e4 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071a6:	bf00      	nop
    return;
 80071a8:	e01c      	b.n	80071e4 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80071aa:	69fb      	ldr	r3, [r7, #28]
 80071ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d008      	beq.n	80071c6 <HAL_UART_IRQHandler+0x1d6>
 80071b4:	69bb      	ldr	r3, [r7, #24]
 80071b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d003      	beq.n	80071c6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 f8a6 	bl	8007310 <UART_Transmit_IT>
    return;
 80071c4:	e00f      	b.n	80071e6 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80071c6:	69fb      	ldr	r3, [r7, #28]
 80071c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d00a      	beq.n	80071e6 <HAL_UART_IRQHandler+0x1f6>
 80071d0:	69bb      	ldr	r3, [r7, #24]
 80071d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d005      	beq.n	80071e6 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f000 f8ee 	bl	80073bc <UART_EndTransmit_IT>
    return;
 80071e0:	bf00      	nop
 80071e2:	e000      	b.n	80071e6 <HAL_UART_IRQHandler+0x1f6>
    return;
 80071e4:	bf00      	nop
  }
}
 80071e6:	3720      	adds	r7, #32
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}
 80071ec:	080072e9 	.word	0x080072e9

080071f0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b083      	sub	sp, #12
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80071f8:	bf00      	nop
 80071fa:	370c      	adds	r7, #12
 80071fc:	46bd      	mov	sp, r7
 80071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007202:	4770      	bx	lr

08007204 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007204:	b480      	push	{r7}
 8007206:	b083      	sub	sp, #12
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800720c:	bf00      	nop
 800720e:	370c      	adds	r7, #12
 8007210:	46bd      	mov	sp, r7
 8007212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007216:	4770      	bx	lr

08007218 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b084      	sub	sp, #16
 800721c:	af00      	add	r7, sp, #0
 800721e:	60f8      	str	r0, [r7, #12]
 8007220:	60b9      	str	r1, [r7, #8]
 8007222:	603b      	str	r3, [r7, #0]
 8007224:	4613      	mov	r3, r2
 8007226:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007228:	e02c      	b.n	8007284 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800722a:	69bb      	ldr	r3, [r7, #24]
 800722c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007230:	d028      	beq.n	8007284 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007232:	69bb      	ldr	r3, [r7, #24]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d007      	beq.n	8007248 <UART_WaitOnFlagUntilTimeout+0x30>
 8007238:	f7fb fd2c 	bl	8002c94 <HAL_GetTick>
 800723c:	4602      	mov	r2, r0
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	1ad3      	subs	r3, r2, r3
 8007242:	69ba      	ldr	r2, [r7, #24]
 8007244:	429a      	cmp	r2, r3
 8007246:	d21d      	bcs.n	8007284 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	68da      	ldr	r2, [r3, #12]
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007256:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	695a      	ldr	r2, [r3, #20]
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f022 0201 	bic.w	r2, r2, #1
 8007266:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	2220      	movs	r2, #32
 800726c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	2220      	movs	r2, #32
 8007274:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	2200      	movs	r2, #0
 800727c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8007280:	2303      	movs	r3, #3
 8007282:	e00f      	b.n	80072a4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	681a      	ldr	r2, [r3, #0]
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	4013      	ands	r3, r2
 800728e:	68ba      	ldr	r2, [r7, #8]
 8007290:	429a      	cmp	r2, r3
 8007292:	bf0c      	ite	eq
 8007294:	2301      	moveq	r3, #1
 8007296:	2300      	movne	r3, #0
 8007298:	b2db      	uxtb	r3, r3
 800729a:	461a      	mov	r2, r3
 800729c:	79fb      	ldrb	r3, [r7, #7]
 800729e:	429a      	cmp	r2, r3
 80072a0:	d0c3      	beq.n	800722a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80072a2:	2300      	movs	r3, #0
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3710      	adds	r7, #16
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}

080072ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b083      	sub	sp, #12
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	68da      	ldr	r2, [r3, #12]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80072c2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	695a      	ldr	r2, [r3, #20]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f022 0201 	bic.w	r2, r2, #1
 80072d2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2220      	movs	r2, #32
 80072d8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80072dc:	bf00      	nop
 80072de:	370c      	adds	r7, #12
 80072e0:	46bd      	mov	sp, r7
 80072e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e6:	4770      	bx	lr

080072e8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b084      	sub	sp, #16
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072f4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2200      	movs	r2, #0
 80072fa:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	2200      	movs	r2, #0
 8007300:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007302:	68f8      	ldr	r0, [r7, #12]
 8007304:	f7ff ff7e 	bl	8007204 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007308:	bf00      	nop
 800730a:	3710      	adds	r7, #16
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007310:	b480      	push	{r7}
 8007312:	b085      	sub	sp, #20
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800731e:	b2db      	uxtb	r3, r3
 8007320:	2b21      	cmp	r3, #33	; 0x21
 8007322:	d144      	bne.n	80073ae <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	689b      	ldr	r3, [r3, #8]
 8007328:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800732c:	d11a      	bne.n	8007364 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6a1b      	ldr	r3, [r3, #32]
 8007332:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	881b      	ldrh	r3, [r3, #0]
 8007338:	461a      	mov	r2, r3
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007342:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	691b      	ldr	r3, [r3, #16]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d105      	bne.n	8007358 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6a1b      	ldr	r3, [r3, #32]
 8007350:	1c9a      	adds	r2, r3, #2
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	621a      	str	r2, [r3, #32]
 8007356:	e00e      	b.n	8007376 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6a1b      	ldr	r3, [r3, #32]
 800735c:	1c5a      	adds	r2, r3, #1
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	621a      	str	r2, [r3, #32]
 8007362:	e008      	b.n	8007376 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6a1b      	ldr	r3, [r3, #32]
 8007368:	1c59      	adds	r1, r3, #1
 800736a:	687a      	ldr	r2, [r7, #4]
 800736c:	6211      	str	r1, [r2, #32]
 800736e:	781a      	ldrb	r2, [r3, #0]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800737a:	b29b      	uxth	r3, r3
 800737c:	3b01      	subs	r3, #1
 800737e:	b29b      	uxth	r3, r3
 8007380:	687a      	ldr	r2, [r7, #4]
 8007382:	4619      	mov	r1, r3
 8007384:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007386:	2b00      	cmp	r3, #0
 8007388:	d10f      	bne.n	80073aa <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	68da      	ldr	r2, [r3, #12]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007398:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	68da      	ldr	r2, [r3, #12]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80073a8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80073aa:	2300      	movs	r3, #0
 80073ac:	e000      	b.n	80073b0 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80073ae:	2302      	movs	r3, #2
  }
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3714      	adds	r7, #20
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr

080073bc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b082      	sub	sp, #8
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	68da      	ldr	r2, [r3, #12]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073d2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2220      	movs	r2, #32
 80073d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f7ff ff07 	bl	80071f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80073e2:	2300      	movs	r3, #0
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3708      	adds	r7, #8
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}

080073ec <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b084      	sub	sp, #16
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80073fa:	b2db      	uxtb	r3, r3
 80073fc:	2b22      	cmp	r3, #34	; 0x22
 80073fe:	d171      	bne.n	80074e4 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	689b      	ldr	r3, [r3, #8]
 8007404:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007408:	d123      	bne.n	8007452 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800740e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	691b      	ldr	r3, [r3, #16]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d10e      	bne.n	8007436 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	b29b      	uxth	r3, r3
 8007420:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007424:	b29a      	uxth	r2, r3
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800742e:	1c9a      	adds	r2, r3, #2
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	629a      	str	r2, [r3, #40]	; 0x28
 8007434:	e029      	b.n	800748a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	b29b      	uxth	r3, r3
 800743e:	b2db      	uxtb	r3, r3
 8007440:	b29a      	uxth	r2, r3
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800744a:	1c5a      	adds	r2, r3, #1
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	629a      	str	r2, [r3, #40]	; 0x28
 8007450:	e01b      	b.n	800748a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	691b      	ldr	r3, [r3, #16]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d10a      	bne.n	8007470 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	6858      	ldr	r0, [r3, #4]
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007464:	1c59      	adds	r1, r3, #1
 8007466:	687a      	ldr	r2, [r7, #4]
 8007468:	6291      	str	r1, [r2, #40]	; 0x28
 800746a:	b2c2      	uxtb	r2, r0
 800746c:	701a      	strb	r2, [r3, #0]
 800746e:	e00c      	b.n	800748a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	b2da      	uxtb	r2, r3
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800747c:	1c58      	adds	r0, r3, #1
 800747e:	6879      	ldr	r1, [r7, #4]
 8007480:	6288      	str	r0, [r1, #40]	; 0x28
 8007482:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007486:	b2d2      	uxtb	r2, r2
 8007488:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800748e:	b29b      	uxth	r3, r3
 8007490:	3b01      	subs	r3, #1
 8007492:	b29b      	uxth	r3, r3
 8007494:	687a      	ldr	r2, [r7, #4]
 8007496:	4619      	mov	r1, r3
 8007498:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800749a:	2b00      	cmp	r3, #0
 800749c:	d120      	bne.n	80074e0 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	68da      	ldr	r2, [r3, #12]
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f022 0220 	bic.w	r2, r2, #32
 80074ac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	68da      	ldr	r2, [r3, #12]
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80074bc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	695a      	ldr	r2, [r3, #20]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f022 0201 	bic.w	r2, r2, #1
 80074cc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2220      	movs	r2, #32
 80074d2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f7fa fe18 	bl	800210c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80074dc:	2300      	movs	r3, #0
 80074de:	e002      	b.n	80074e6 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80074e0:	2300      	movs	r3, #0
 80074e2:	e000      	b.n	80074e6 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80074e4:	2302      	movs	r3, #2
  }
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3710      	adds	r7, #16
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}
	...

080074f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80074f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074f4:	b085      	sub	sp, #20
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	691b      	ldr	r3, [r3, #16]
 8007500:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	68da      	ldr	r2, [r3, #12]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	430a      	orrs	r2, r1
 800750e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	689a      	ldr	r2, [r3, #8]
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	691b      	ldr	r3, [r3, #16]
 8007518:	431a      	orrs	r2, r3
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	695b      	ldr	r3, [r3, #20]
 800751e:	431a      	orrs	r2, r3
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	69db      	ldr	r3, [r3, #28]
 8007524:	4313      	orrs	r3, r2
 8007526:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	68db      	ldr	r3, [r3, #12]
 800752e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007532:	f023 030c 	bic.w	r3, r3, #12
 8007536:	687a      	ldr	r2, [r7, #4]
 8007538:	6812      	ldr	r2, [r2, #0]
 800753a:	68f9      	ldr	r1, [r7, #12]
 800753c:	430b      	orrs	r3, r1
 800753e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	695b      	ldr	r3, [r3, #20]
 8007546:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	699a      	ldr	r2, [r3, #24]
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	430a      	orrs	r2, r1
 8007554:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	69db      	ldr	r3, [r3, #28]
 800755a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800755e:	f040 818b 	bne.w	8007878 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4ac1      	ldr	r2, [pc, #772]	; (800786c <UART_SetConfig+0x37c>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d005      	beq.n	8007578 <UART_SetConfig+0x88>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4abf      	ldr	r2, [pc, #764]	; (8007870 <UART_SetConfig+0x380>)
 8007572:	4293      	cmp	r3, r2
 8007574:	f040 80bd 	bne.w	80076f2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007578:	f7fe fbf6 	bl	8005d68 <HAL_RCC_GetPCLK2Freq>
 800757c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	461d      	mov	r5, r3
 8007582:	f04f 0600 	mov.w	r6, #0
 8007586:	46a8      	mov	r8, r5
 8007588:	46b1      	mov	r9, r6
 800758a:	eb18 0308 	adds.w	r3, r8, r8
 800758e:	eb49 0409 	adc.w	r4, r9, r9
 8007592:	4698      	mov	r8, r3
 8007594:	46a1      	mov	r9, r4
 8007596:	eb18 0805 	adds.w	r8, r8, r5
 800759a:	eb49 0906 	adc.w	r9, r9, r6
 800759e:	f04f 0100 	mov.w	r1, #0
 80075a2:	f04f 0200 	mov.w	r2, #0
 80075a6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80075aa:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80075ae:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80075b2:	4688      	mov	r8, r1
 80075b4:	4691      	mov	r9, r2
 80075b6:	eb18 0005 	adds.w	r0, r8, r5
 80075ba:	eb49 0106 	adc.w	r1, r9, r6
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	461d      	mov	r5, r3
 80075c4:	f04f 0600 	mov.w	r6, #0
 80075c8:	196b      	adds	r3, r5, r5
 80075ca:	eb46 0406 	adc.w	r4, r6, r6
 80075ce:	461a      	mov	r2, r3
 80075d0:	4623      	mov	r3, r4
 80075d2:	f7f9 fb59 	bl	8000c88 <__aeabi_uldivmod>
 80075d6:	4603      	mov	r3, r0
 80075d8:	460c      	mov	r4, r1
 80075da:	461a      	mov	r2, r3
 80075dc:	4ba5      	ldr	r3, [pc, #660]	; (8007874 <UART_SetConfig+0x384>)
 80075de:	fba3 2302 	umull	r2, r3, r3, r2
 80075e2:	095b      	lsrs	r3, r3, #5
 80075e4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	461d      	mov	r5, r3
 80075ec:	f04f 0600 	mov.w	r6, #0
 80075f0:	46a9      	mov	r9, r5
 80075f2:	46b2      	mov	sl, r6
 80075f4:	eb19 0309 	adds.w	r3, r9, r9
 80075f8:	eb4a 040a 	adc.w	r4, sl, sl
 80075fc:	4699      	mov	r9, r3
 80075fe:	46a2      	mov	sl, r4
 8007600:	eb19 0905 	adds.w	r9, r9, r5
 8007604:	eb4a 0a06 	adc.w	sl, sl, r6
 8007608:	f04f 0100 	mov.w	r1, #0
 800760c:	f04f 0200 	mov.w	r2, #0
 8007610:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007614:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007618:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800761c:	4689      	mov	r9, r1
 800761e:	4692      	mov	sl, r2
 8007620:	eb19 0005 	adds.w	r0, r9, r5
 8007624:	eb4a 0106 	adc.w	r1, sl, r6
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	685b      	ldr	r3, [r3, #4]
 800762c:	461d      	mov	r5, r3
 800762e:	f04f 0600 	mov.w	r6, #0
 8007632:	196b      	adds	r3, r5, r5
 8007634:	eb46 0406 	adc.w	r4, r6, r6
 8007638:	461a      	mov	r2, r3
 800763a:	4623      	mov	r3, r4
 800763c:	f7f9 fb24 	bl	8000c88 <__aeabi_uldivmod>
 8007640:	4603      	mov	r3, r0
 8007642:	460c      	mov	r4, r1
 8007644:	461a      	mov	r2, r3
 8007646:	4b8b      	ldr	r3, [pc, #556]	; (8007874 <UART_SetConfig+0x384>)
 8007648:	fba3 1302 	umull	r1, r3, r3, r2
 800764c:	095b      	lsrs	r3, r3, #5
 800764e:	2164      	movs	r1, #100	; 0x64
 8007650:	fb01 f303 	mul.w	r3, r1, r3
 8007654:	1ad3      	subs	r3, r2, r3
 8007656:	00db      	lsls	r3, r3, #3
 8007658:	3332      	adds	r3, #50	; 0x32
 800765a:	4a86      	ldr	r2, [pc, #536]	; (8007874 <UART_SetConfig+0x384>)
 800765c:	fba2 2303 	umull	r2, r3, r2, r3
 8007660:	095b      	lsrs	r3, r3, #5
 8007662:	005b      	lsls	r3, r3, #1
 8007664:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007668:	4498      	add	r8, r3
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	461d      	mov	r5, r3
 800766e:	f04f 0600 	mov.w	r6, #0
 8007672:	46a9      	mov	r9, r5
 8007674:	46b2      	mov	sl, r6
 8007676:	eb19 0309 	adds.w	r3, r9, r9
 800767a:	eb4a 040a 	adc.w	r4, sl, sl
 800767e:	4699      	mov	r9, r3
 8007680:	46a2      	mov	sl, r4
 8007682:	eb19 0905 	adds.w	r9, r9, r5
 8007686:	eb4a 0a06 	adc.w	sl, sl, r6
 800768a:	f04f 0100 	mov.w	r1, #0
 800768e:	f04f 0200 	mov.w	r2, #0
 8007692:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007696:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800769a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800769e:	4689      	mov	r9, r1
 80076a0:	4692      	mov	sl, r2
 80076a2:	eb19 0005 	adds.w	r0, r9, r5
 80076a6:	eb4a 0106 	adc.w	r1, sl, r6
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	685b      	ldr	r3, [r3, #4]
 80076ae:	461d      	mov	r5, r3
 80076b0:	f04f 0600 	mov.w	r6, #0
 80076b4:	196b      	adds	r3, r5, r5
 80076b6:	eb46 0406 	adc.w	r4, r6, r6
 80076ba:	461a      	mov	r2, r3
 80076bc:	4623      	mov	r3, r4
 80076be:	f7f9 fae3 	bl	8000c88 <__aeabi_uldivmod>
 80076c2:	4603      	mov	r3, r0
 80076c4:	460c      	mov	r4, r1
 80076c6:	461a      	mov	r2, r3
 80076c8:	4b6a      	ldr	r3, [pc, #424]	; (8007874 <UART_SetConfig+0x384>)
 80076ca:	fba3 1302 	umull	r1, r3, r3, r2
 80076ce:	095b      	lsrs	r3, r3, #5
 80076d0:	2164      	movs	r1, #100	; 0x64
 80076d2:	fb01 f303 	mul.w	r3, r1, r3
 80076d6:	1ad3      	subs	r3, r2, r3
 80076d8:	00db      	lsls	r3, r3, #3
 80076da:	3332      	adds	r3, #50	; 0x32
 80076dc:	4a65      	ldr	r2, [pc, #404]	; (8007874 <UART_SetConfig+0x384>)
 80076de:	fba2 2303 	umull	r2, r3, r2, r3
 80076e2:	095b      	lsrs	r3, r3, #5
 80076e4:	f003 0207 	and.w	r2, r3, #7
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4442      	add	r2, r8
 80076ee:	609a      	str	r2, [r3, #8]
 80076f0:	e26f      	b.n	8007bd2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80076f2:	f7fe fb25 	bl	8005d40 <HAL_RCC_GetPCLK1Freq>
 80076f6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	461d      	mov	r5, r3
 80076fc:	f04f 0600 	mov.w	r6, #0
 8007700:	46a8      	mov	r8, r5
 8007702:	46b1      	mov	r9, r6
 8007704:	eb18 0308 	adds.w	r3, r8, r8
 8007708:	eb49 0409 	adc.w	r4, r9, r9
 800770c:	4698      	mov	r8, r3
 800770e:	46a1      	mov	r9, r4
 8007710:	eb18 0805 	adds.w	r8, r8, r5
 8007714:	eb49 0906 	adc.w	r9, r9, r6
 8007718:	f04f 0100 	mov.w	r1, #0
 800771c:	f04f 0200 	mov.w	r2, #0
 8007720:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007724:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007728:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800772c:	4688      	mov	r8, r1
 800772e:	4691      	mov	r9, r2
 8007730:	eb18 0005 	adds.w	r0, r8, r5
 8007734:	eb49 0106 	adc.w	r1, r9, r6
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	461d      	mov	r5, r3
 800773e:	f04f 0600 	mov.w	r6, #0
 8007742:	196b      	adds	r3, r5, r5
 8007744:	eb46 0406 	adc.w	r4, r6, r6
 8007748:	461a      	mov	r2, r3
 800774a:	4623      	mov	r3, r4
 800774c:	f7f9 fa9c 	bl	8000c88 <__aeabi_uldivmod>
 8007750:	4603      	mov	r3, r0
 8007752:	460c      	mov	r4, r1
 8007754:	461a      	mov	r2, r3
 8007756:	4b47      	ldr	r3, [pc, #284]	; (8007874 <UART_SetConfig+0x384>)
 8007758:	fba3 2302 	umull	r2, r3, r3, r2
 800775c:	095b      	lsrs	r3, r3, #5
 800775e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	461d      	mov	r5, r3
 8007766:	f04f 0600 	mov.w	r6, #0
 800776a:	46a9      	mov	r9, r5
 800776c:	46b2      	mov	sl, r6
 800776e:	eb19 0309 	adds.w	r3, r9, r9
 8007772:	eb4a 040a 	adc.w	r4, sl, sl
 8007776:	4699      	mov	r9, r3
 8007778:	46a2      	mov	sl, r4
 800777a:	eb19 0905 	adds.w	r9, r9, r5
 800777e:	eb4a 0a06 	adc.w	sl, sl, r6
 8007782:	f04f 0100 	mov.w	r1, #0
 8007786:	f04f 0200 	mov.w	r2, #0
 800778a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800778e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007792:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007796:	4689      	mov	r9, r1
 8007798:	4692      	mov	sl, r2
 800779a:	eb19 0005 	adds.w	r0, r9, r5
 800779e:	eb4a 0106 	adc.w	r1, sl, r6
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	685b      	ldr	r3, [r3, #4]
 80077a6:	461d      	mov	r5, r3
 80077a8:	f04f 0600 	mov.w	r6, #0
 80077ac:	196b      	adds	r3, r5, r5
 80077ae:	eb46 0406 	adc.w	r4, r6, r6
 80077b2:	461a      	mov	r2, r3
 80077b4:	4623      	mov	r3, r4
 80077b6:	f7f9 fa67 	bl	8000c88 <__aeabi_uldivmod>
 80077ba:	4603      	mov	r3, r0
 80077bc:	460c      	mov	r4, r1
 80077be:	461a      	mov	r2, r3
 80077c0:	4b2c      	ldr	r3, [pc, #176]	; (8007874 <UART_SetConfig+0x384>)
 80077c2:	fba3 1302 	umull	r1, r3, r3, r2
 80077c6:	095b      	lsrs	r3, r3, #5
 80077c8:	2164      	movs	r1, #100	; 0x64
 80077ca:	fb01 f303 	mul.w	r3, r1, r3
 80077ce:	1ad3      	subs	r3, r2, r3
 80077d0:	00db      	lsls	r3, r3, #3
 80077d2:	3332      	adds	r3, #50	; 0x32
 80077d4:	4a27      	ldr	r2, [pc, #156]	; (8007874 <UART_SetConfig+0x384>)
 80077d6:	fba2 2303 	umull	r2, r3, r2, r3
 80077da:	095b      	lsrs	r3, r3, #5
 80077dc:	005b      	lsls	r3, r3, #1
 80077de:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80077e2:	4498      	add	r8, r3
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	461d      	mov	r5, r3
 80077e8:	f04f 0600 	mov.w	r6, #0
 80077ec:	46a9      	mov	r9, r5
 80077ee:	46b2      	mov	sl, r6
 80077f0:	eb19 0309 	adds.w	r3, r9, r9
 80077f4:	eb4a 040a 	adc.w	r4, sl, sl
 80077f8:	4699      	mov	r9, r3
 80077fa:	46a2      	mov	sl, r4
 80077fc:	eb19 0905 	adds.w	r9, r9, r5
 8007800:	eb4a 0a06 	adc.w	sl, sl, r6
 8007804:	f04f 0100 	mov.w	r1, #0
 8007808:	f04f 0200 	mov.w	r2, #0
 800780c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007810:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007814:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007818:	4689      	mov	r9, r1
 800781a:	4692      	mov	sl, r2
 800781c:	eb19 0005 	adds.w	r0, r9, r5
 8007820:	eb4a 0106 	adc.w	r1, sl, r6
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	685b      	ldr	r3, [r3, #4]
 8007828:	461d      	mov	r5, r3
 800782a:	f04f 0600 	mov.w	r6, #0
 800782e:	196b      	adds	r3, r5, r5
 8007830:	eb46 0406 	adc.w	r4, r6, r6
 8007834:	461a      	mov	r2, r3
 8007836:	4623      	mov	r3, r4
 8007838:	f7f9 fa26 	bl	8000c88 <__aeabi_uldivmod>
 800783c:	4603      	mov	r3, r0
 800783e:	460c      	mov	r4, r1
 8007840:	461a      	mov	r2, r3
 8007842:	4b0c      	ldr	r3, [pc, #48]	; (8007874 <UART_SetConfig+0x384>)
 8007844:	fba3 1302 	umull	r1, r3, r3, r2
 8007848:	095b      	lsrs	r3, r3, #5
 800784a:	2164      	movs	r1, #100	; 0x64
 800784c:	fb01 f303 	mul.w	r3, r1, r3
 8007850:	1ad3      	subs	r3, r2, r3
 8007852:	00db      	lsls	r3, r3, #3
 8007854:	3332      	adds	r3, #50	; 0x32
 8007856:	4a07      	ldr	r2, [pc, #28]	; (8007874 <UART_SetConfig+0x384>)
 8007858:	fba2 2303 	umull	r2, r3, r2, r3
 800785c:	095b      	lsrs	r3, r3, #5
 800785e:	f003 0207 	and.w	r2, r3, #7
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4442      	add	r2, r8
 8007868:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800786a:	e1b2      	b.n	8007bd2 <UART_SetConfig+0x6e2>
 800786c:	40011000 	.word	0x40011000
 8007870:	40011400 	.word	0x40011400
 8007874:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4ad7      	ldr	r2, [pc, #860]	; (8007bdc <UART_SetConfig+0x6ec>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d005      	beq.n	800788e <UART_SetConfig+0x39e>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4ad6      	ldr	r2, [pc, #856]	; (8007be0 <UART_SetConfig+0x6f0>)
 8007888:	4293      	cmp	r3, r2
 800788a:	f040 80d1 	bne.w	8007a30 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800788e:	f7fe fa6b 	bl	8005d68 <HAL_RCC_GetPCLK2Freq>
 8007892:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	469a      	mov	sl, r3
 8007898:	f04f 0b00 	mov.w	fp, #0
 800789c:	46d0      	mov	r8, sl
 800789e:	46d9      	mov	r9, fp
 80078a0:	eb18 0308 	adds.w	r3, r8, r8
 80078a4:	eb49 0409 	adc.w	r4, r9, r9
 80078a8:	4698      	mov	r8, r3
 80078aa:	46a1      	mov	r9, r4
 80078ac:	eb18 080a 	adds.w	r8, r8, sl
 80078b0:	eb49 090b 	adc.w	r9, r9, fp
 80078b4:	f04f 0100 	mov.w	r1, #0
 80078b8:	f04f 0200 	mov.w	r2, #0
 80078bc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80078c0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80078c4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80078c8:	4688      	mov	r8, r1
 80078ca:	4691      	mov	r9, r2
 80078cc:	eb1a 0508 	adds.w	r5, sl, r8
 80078d0:	eb4b 0609 	adc.w	r6, fp, r9
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	685b      	ldr	r3, [r3, #4]
 80078d8:	4619      	mov	r1, r3
 80078da:	f04f 0200 	mov.w	r2, #0
 80078de:	f04f 0300 	mov.w	r3, #0
 80078e2:	f04f 0400 	mov.w	r4, #0
 80078e6:	0094      	lsls	r4, r2, #2
 80078e8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80078ec:	008b      	lsls	r3, r1, #2
 80078ee:	461a      	mov	r2, r3
 80078f0:	4623      	mov	r3, r4
 80078f2:	4628      	mov	r0, r5
 80078f4:	4631      	mov	r1, r6
 80078f6:	f7f9 f9c7 	bl	8000c88 <__aeabi_uldivmod>
 80078fa:	4603      	mov	r3, r0
 80078fc:	460c      	mov	r4, r1
 80078fe:	461a      	mov	r2, r3
 8007900:	4bb8      	ldr	r3, [pc, #736]	; (8007be4 <UART_SetConfig+0x6f4>)
 8007902:	fba3 2302 	umull	r2, r3, r3, r2
 8007906:	095b      	lsrs	r3, r3, #5
 8007908:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	469b      	mov	fp, r3
 8007910:	f04f 0c00 	mov.w	ip, #0
 8007914:	46d9      	mov	r9, fp
 8007916:	46e2      	mov	sl, ip
 8007918:	eb19 0309 	adds.w	r3, r9, r9
 800791c:	eb4a 040a 	adc.w	r4, sl, sl
 8007920:	4699      	mov	r9, r3
 8007922:	46a2      	mov	sl, r4
 8007924:	eb19 090b 	adds.w	r9, r9, fp
 8007928:	eb4a 0a0c 	adc.w	sl, sl, ip
 800792c:	f04f 0100 	mov.w	r1, #0
 8007930:	f04f 0200 	mov.w	r2, #0
 8007934:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007938:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800793c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007940:	4689      	mov	r9, r1
 8007942:	4692      	mov	sl, r2
 8007944:	eb1b 0509 	adds.w	r5, fp, r9
 8007948:	eb4c 060a 	adc.w	r6, ip, sl
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	685b      	ldr	r3, [r3, #4]
 8007950:	4619      	mov	r1, r3
 8007952:	f04f 0200 	mov.w	r2, #0
 8007956:	f04f 0300 	mov.w	r3, #0
 800795a:	f04f 0400 	mov.w	r4, #0
 800795e:	0094      	lsls	r4, r2, #2
 8007960:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007964:	008b      	lsls	r3, r1, #2
 8007966:	461a      	mov	r2, r3
 8007968:	4623      	mov	r3, r4
 800796a:	4628      	mov	r0, r5
 800796c:	4631      	mov	r1, r6
 800796e:	f7f9 f98b 	bl	8000c88 <__aeabi_uldivmod>
 8007972:	4603      	mov	r3, r0
 8007974:	460c      	mov	r4, r1
 8007976:	461a      	mov	r2, r3
 8007978:	4b9a      	ldr	r3, [pc, #616]	; (8007be4 <UART_SetConfig+0x6f4>)
 800797a:	fba3 1302 	umull	r1, r3, r3, r2
 800797e:	095b      	lsrs	r3, r3, #5
 8007980:	2164      	movs	r1, #100	; 0x64
 8007982:	fb01 f303 	mul.w	r3, r1, r3
 8007986:	1ad3      	subs	r3, r2, r3
 8007988:	011b      	lsls	r3, r3, #4
 800798a:	3332      	adds	r3, #50	; 0x32
 800798c:	4a95      	ldr	r2, [pc, #596]	; (8007be4 <UART_SetConfig+0x6f4>)
 800798e:	fba2 2303 	umull	r2, r3, r2, r3
 8007992:	095b      	lsrs	r3, r3, #5
 8007994:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007998:	4498      	add	r8, r3
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	469b      	mov	fp, r3
 800799e:	f04f 0c00 	mov.w	ip, #0
 80079a2:	46d9      	mov	r9, fp
 80079a4:	46e2      	mov	sl, ip
 80079a6:	eb19 0309 	adds.w	r3, r9, r9
 80079aa:	eb4a 040a 	adc.w	r4, sl, sl
 80079ae:	4699      	mov	r9, r3
 80079b0:	46a2      	mov	sl, r4
 80079b2:	eb19 090b 	adds.w	r9, r9, fp
 80079b6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80079ba:	f04f 0100 	mov.w	r1, #0
 80079be:	f04f 0200 	mov.w	r2, #0
 80079c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80079c6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80079ca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80079ce:	4689      	mov	r9, r1
 80079d0:	4692      	mov	sl, r2
 80079d2:	eb1b 0509 	adds.w	r5, fp, r9
 80079d6:	eb4c 060a 	adc.w	r6, ip, sl
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	685b      	ldr	r3, [r3, #4]
 80079de:	4619      	mov	r1, r3
 80079e0:	f04f 0200 	mov.w	r2, #0
 80079e4:	f04f 0300 	mov.w	r3, #0
 80079e8:	f04f 0400 	mov.w	r4, #0
 80079ec:	0094      	lsls	r4, r2, #2
 80079ee:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80079f2:	008b      	lsls	r3, r1, #2
 80079f4:	461a      	mov	r2, r3
 80079f6:	4623      	mov	r3, r4
 80079f8:	4628      	mov	r0, r5
 80079fa:	4631      	mov	r1, r6
 80079fc:	f7f9 f944 	bl	8000c88 <__aeabi_uldivmod>
 8007a00:	4603      	mov	r3, r0
 8007a02:	460c      	mov	r4, r1
 8007a04:	461a      	mov	r2, r3
 8007a06:	4b77      	ldr	r3, [pc, #476]	; (8007be4 <UART_SetConfig+0x6f4>)
 8007a08:	fba3 1302 	umull	r1, r3, r3, r2
 8007a0c:	095b      	lsrs	r3, r3, #5
 8007a0e:	2164      	movs	r1, #100	; 0x64
 8007a10:	fb01 f303 	mul.w	r3, r1, r3
 8007a14:	1ad3      	subs	r3, r2, r3
 8007a16:	011b      	lsls	r3, r3, #4
 8007a18:	3332      	adds	r3, #50	; 0x32
 8007a1a:	4a72      	ldr	r2, [pc, #456]	; (8007be4 <UART_SetConfig+0x6f4>)
 8007a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8007a20:	095b      	lsrs	r3, r3, #5
 8007a22:	f003 020f 	and.w	r2, r3, #15
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4442      	add	r2, r8
 8007a2c:	609a      	str	r2, [r3, #8]
 8007a2e:	e0d0      	b.n	8007bd2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007a30:	f7fe f986 	bl	8005d40 <HAL_RCC_GetPCLK1Freq>
 8007a34:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	469a      	mov	sl, r3
 8007a3a:	f04f 0b00 	mov.w	fp, #0
 8007a3e:	46d0      	mov	r8, sl
 8007a40:	46d9      	mov	r9, fp
 8007a42:	eb18 0308 	adds.w	r3, r8, r8
 8007a46:	eb49 0409 	adc.w	r4, r9, r9
 8007a4a:	4698      	mov	r8, r3
 8007a4c:	46a1      	mov	r9, r4
 8007a4e:	eb18 080a 	adds.w	r8, r8, sl
 8007a52:	eb49 090b 	adc.w	r9, r9, fp
 8007a56:	f04f 0100 	mov.w	r1, #0
 8007a5a:	f04f 0200 	mov.w	r2, #0
 8007a5e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007a62:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007a66:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007a6a:	4688      	mov	r8, r1
 8007a6c:	4691      	mov	r9, r2
 8007a6e:	eb1a 0508 	adds.w	r5, sl, r8
 8007a72:	eb4b 0609 	adc.w	r6, fp, r9
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	685b      	ldr	r3, [r3, #4]
 8007a7a:	4619      	mov	r1, r3
 8007a7c:	f04f 0200 	mov.w	r2, #0
 8007a80:	f04f 0300 	mov.w	r3, #0
 8007a84:	f04f 0400 	mov.w	r4, #0
 8007a88:	0094      	lsls	r4, r2, #2
 8007a8a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007a8e:	008b      	lsls	r3, r1, #2
 8007a90:	461a      	mov	r2, r3
 8007a92:	4623      	mov	r3, r4
 8007a94:	4628      	mov	r0, r5
 8007a96:	4631      	mov	r1, r6
 8007a98:	f7f9 f8f6 	bl	8000c88 <__aeabi_uldivmod>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	460c      	mov	r4, r1
 8007aa0:	461a      	mov	r2, r3
 8007aa2:	4b50      	ldr	r3, [pc, #320]	; (8007be4 <UART_SetConfig+0x6f4>)
 8007aa4:	fba3 2302 	umull	r2, r3, r3, r2
 8007aa8:	095b      	lsrs	r3, r3, #5
 8007aaa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	469b      	mov	fp, r3
 8007ab2:	f04f 0c00 	mov.w	ip, #0
 8007ab6:	46d9      	mov	r9, fp
 8007ab8:	46e2      	mov	sl, ip
 8007aba:	eb19 0309 	adds.w	r3, r9, r9
 8007abe:	eb4a 040a 	adc.w	r4, sl, sl
 8007ac2:	4699      	mov	r9, r3
 8007ac4:	46a2      	mov	sl, r4
 8007ac6:	eb19 090b 	adds.w	r9, r9, fp
 8007aca:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007ace:	f04f 0100 	mov.w	r1, #0
 8007ad2:	f04f 0200 	mov.w	r2, #0
 8007ad6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007ada:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007ade:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007ae2:	4689      	mov	r9, r1
 8007ae4:	4692      	mov	sl, r2
 8007ae6:	eb1b 0509 	adds.w	r5, fp, r9
 8007aea:	eb4c 060a 	adc.w	r6, ip, sl
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	685b      	ldr	r3, [r3, #4]
 8007af2:	4619      	mov	r1, r3
 8007af4:	f04f 0200 	mov.w	r2, #0
 8007af8:	f04f 0300 	mov.w	r3, #0
 8007afc:	f04f 0400 	mov.w	r4, #0
 8007b00:	0094      	lsls	r4, r2, #2
 8007b02:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007b06:	008b      	lsls	r3, r1, #2
 8007b08:	461a      	mov	r2, r3
 8007b0a:	4623      	mov	r3, r4
 8007b0c:	4628      	mov	r0, r5
 8007b0e:	4631      	mov	r1, r6
 8007b10:	f7f9 f8ba 	bl	8000c88 <__aeabi_uldivmod>
 8007b14:	4603      	mov	r3, r0
 8007b16:	460c      	mov	r4, r1
 8007b18:	461a      	mov	r2, r3
 8007b1a:	4b32      	ldr	r3, [pc, #200]	; (8007be4 <UART_SetConfig+0x6f4>)
 8007b1c:	fba3 1302 	umull	r1, r3, r3, r2
 8007b20:	095b      	lsrs	r3, r3, #5
 8007b22:	2164      	movs	r1, #100	; 0x64
 8007b24:	fb01 f303 	mul.w	r3, r1, r3
 8007b28:	1ad3      	subs	r3, r2, r3
 8007b2a:	011b      	lsls	r3, r3, #4
 8007b2c:	3332      	adds	r3, #50	; 0x32
 8007b2e:	4a2d      	ldr	r2, [pc, #180]	; (8007be4 <UART_SetConfig+0x6f4>)
 8007b30:	fba2 2303 	umull	r2, r3, r2, r3
 8007b34:	095b      	lsrs	r3, r3, #5
 8007b36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007b3a:	4498      	add	r8, r3
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	469b      	mov	fp, r3
 8007b40:	f04f 0c00 	mov.w	ip, #0
 8007b44:	46d9      	mov	r9, fp
 8007b46:	46e2      	mov	sl, ip
 8007b48:	eb19 0309 	adds.w	r3, r9, r9
 8007b4c:	eb4a 040a 	adc.w	r4, sl, sl
 8007b50:	4699      	mov	r9, r3
 8007b52:	46a2      	mov	sl, r4
 8007b54:	eb19 090b 	adds.w	r9, r9, fp
 8007b58:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007b5c:	f04f 0100 	mov.w	r1, #0
 8007b60:	f04f 0200 	mov.w	r2, #0
 8007b64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007b68:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007b6c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007b70:	4689      	mov	r9, r1
 8007b72:	4692      	mov	sl, r2
 8007b74:	eb1b 0509 	adds.w	r5, fp, r9
 8007b78:	eb4c 060a 	adc.w	r6, ip, sl
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	685b      	ldr	r3, [r3, #4]
 8007b80:	4619      	mov	r1, r3
 8007b82:	f04f 0200 	mov.w	r2, #0
 8007b86:	f04f 0300 	mov.w	r3, #0
 8007b8a:	f04f 0400 	mov.w	r4, #0
 8007b8e:	0094      	lsls	r4, r2, #2
 8007b90:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007b94:	008b      	lsls	r3, r1, #2
 8007b96:	461a      	mov	r2, r3
 8007b98:	4623      	mov	r3, r4
 8007b9a:	4628      	mov	r0, r5
 8007b9c:	4631      	mov	r1, r6
 8007b9e:	f7f9 f873 	bl	8000c88 <__aeabi_uldivmod>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	460c      	mov	r4, r1
 8007ba6:	461a      	mov	r2, r3
 8007ba8:	4b0e      	ldr	r3, [pc, #56]	; (8007be4 <UART_SetConfig+0x6f4>)
 8007baa:	fba3 1302 	umull	r1, r3, r3, r2
 8007bae:	095b      	lsrs	r3, r3, #5
 8007bb0:	2164      	movs	r1, #100	; 0x64
 8007bb2:	fb01 f303 	mul.w	r3, r1, r3
 8007bb6:	1ad3      	subs	r3, r2, r3
 8007bb8:	011b      	lsls	r3, r3, #4
 8007bba:	3332      	adds	r3, #50	; 0x32
 8007bbc:	4a09      	ldr	r2, [pc, #36]	; (8007be4 <UART_SetConfig+0x6f4>)
 8007bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8007bc2:	095b      	lsrs	r3, r3, #5
 8007bc4:	f003 020f 	and.w	r2, r3, #15
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4442      	add	r2, r8
 8007bce:	609a      	str	r2, [r3, #8]
}
 8007bd0:	e7ff      	b.n	8007bd2 <UART_SetConfig+0x6e2>
 8007bd2:	bf00      	nop
 8007bd4:	3714      	adds	r7, #20
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bdc:	40011000 	.word	0x40011000
 8007be0:	40011400 	.word	0x40011400
 8007be4:	51eb851f 	.word	0x51eb851f

08007be8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007be8:	b084      	sub	sp, #16
 8007bea:	b580      	push	{r7, lr}
 8007bec:	b084      	sub	sp, #16
 8007bee:	af00      	add	r7, sp, #0
 8007bf0:	6078      	str	r0, [r7, #4]
 8007bf2:	f107 001c 	add.w	r0, r7, #28
 8007bf6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bfc:	2b01      	cmp	r3, #1
 8007bfe:	d122      	bne.n	8007c46 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c04:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	68db      	ldr	r3, [r3, #12]
 8007c10:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007c14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c18:	687a      	ldr	r2, [r7, #4]
 8007c1a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	68db      	ldr	r3, [r3, #12]
 8007c20:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007c28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c2a:	2b01      	cmp	r3, #1
 8007c2c:	d105      	bne.n	8007c3a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	68db      	ldr	r3, [r3, #12]
 8007c32:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f000 fca0 	bl	8008580 <USB_CoreReset>
 8007c40:	4603      	mov	r3, r0
 8007c42:	73fb      	strb	r3, [r7, #15]
 8007c44:	e01a      	b.n	8007c7c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	68db      	ldr	r3, [r3, #12]
 8007c4a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f000 fc94 	bl	8008580 <USB_CoreReset>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007c5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d106      	bne.n	8007c70 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c66:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	639a      	str	r2, [r3, #56]	; 0x38
 8007c6e:	e005      	b.n	8007c7c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c74:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c7e:	2b01      	cmp	r3, #1
 8007c80:	d10b      	bne.n	8007c9a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	689b      	ldr	r3, [r3, #8]
 8007c86:	f043 0206 	orr.w	r2, r3, #6
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	689b      	ldr	r3, [r3, #8]
 8007c92:	f043 0220 	orr.w	r2, r3, #32
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007c9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	3710      	adds	r7, #16
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007ca6:	b004      	add	sp, #16
 8007ca8:	4770      	bx	lr
	...

08007cac <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007cac:	b480      	push	{r7}
 8007cae:	b087      	sub	sp, #28
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	60f8      	str	r0, [r7, #12]
 8007cb4:	60b9      	str	r1, [r7, #8]
 8007cb6:	4613      	mov	r3, r2
 8007cb8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007cba:	79fb      	ldrb	r3, [r7, #7]
 8007cbc:	2b02      	cmp	r3, #2
 8007cbe:	d165      	bne.n	8007d8c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	4a41      	ldr	r2, [pc, #260]	; (8007dc8 <USB_SetTurnaroundTime+0x11c>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d906      	bls.n	8007cd6 <USB_SetTurnaroundTime+0x2a>
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	4a40      	ldr	r2, [pc, #256]	; (8007dcc <USB_SetTurnaroundTime+0x120>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d802      	bhi.n	8007cd6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007cd0:	230f      	movs	r3, #15
 8007cd2:	617b      	str	r3, [r7, #20]
 8007cd4:	e062      	b.n	8007d9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	4a3c      	ldr	r2, [pc, #240]	; (8007dcc <USB_SetTurnaroundTime+0x120>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d906      	bls.n	8007cec <USB_SetTurnaroundTime+0x40>
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	4a3b      	ldr	r2, [pc, #236]	; (8007dd0 <USB_SetTurnaroundTime+0x124>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d802      	bhi.n	8007cec <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007ce6:	230e      	movs	r3, #14
 8007ce8:	617b      	str	r3, [r7, #20]
 8007cea:	e057      	b.n	8007d9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	4a38      	ldr	r2, [pc, #224]	; (8007dd0 <USB_SetTurnaroundTime+0x124>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d906      	bls.n	8007d02 <USB_SetTurnaroundTime+0x56>
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	4a37      	ldr	r2, [pc, #220]	; (8007dd4 <USB_SetTurnaroundTime+0x128>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d802      	bhi.n	8007d02 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007cfc:	230d      	movs	r3, #13
 8007cfe:	617b      	str	r3, [r7, #20]
 8007d00:	e04c      	b.n	8007d9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	4a33      	ldr	r2, [pc, #204]	; (8007dd4 <USB_SetTurnaroundTime+0x128>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d906      	bls.n	8007d18 <USB_SetTurnaroundTime+0x6c>
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	4a32      	ldr	r2, [pc, #200]	; (8007dd8 <USB_SetTurnaroundTime+0x12c>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d802      	bhi.n	8007d18 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007d12:	230c      	movs	r3, #12
 8007d14:	617b      	str	r3, [r7, #20]
 8007d16:	e041      	b.n	8007d9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	4a2f      	ldr	r2, [pc, #188]	; (8007dd8 <USB_SetTurnaroundTime+0x12c>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d906      	bls.n	8007d2e <USB_SetTurnaroundTime+0x82>
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	4a2e      	ldr	r2, [pc, #184]	; (8007ddc <USB_SetTurnaroundTime+0x130>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d802      	bhi.n	8007d2e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007d28:	230b      	movs	r3, #11
 8007d2a:	617b      	str	r3, [r7, #20]
 8007d2c:	e036      	b.n	8007d9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	4a2a      	ldr	r2, [pc, #168]	; (8007ddc <USB_SetTurnaroundTime+0x130>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d906      	bls.n	8007d44 <USB_SetTurnaroundTime+0x98>
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	4a29      	ldr	r2, [pc, #164]	; (8007de0 <USB_SetTurnaroundTime+0x134>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d802      	bhi.n	8007d44 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007d3e:	230a      	movs	r3, #10
 8007d40:	617b      	str	r3, [r7, #20]
 8007d42:	e02b      	b.n	8007d9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	4a26      	ldr	r2, [pc, #152]	; (8007de0 <USB_SetTurnaroundTime+0x134>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d906      	bls.n	8007d5a <USB_SetTurnaroundTime+0xae>
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	4a25      	ldr	r2, [pc, #148]	; (8007de4 <USB_SetTurnaroundTime+0x138>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d802      	bhi.n	8007d5a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007d54:	2309      	movs	r3, #9
 8007d56:	617b      	str	r3, [r7, #20]
 8007d58:	e020      	b.n	8007d9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	4a21      	ldr	r2, [pc, #132]	; (8007de4 <USB_SetTurnaroundTime+0x138>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d906      	bls.n	8007d70 <USB_SetTurnaroundTime+0xc4>
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	4a20      	ldr	r2, [pc, #128]	; (8007de8 <USB_SetTurnaroundTime+0x13c>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d802      	bhi.n	8007d70 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007d6a:	2308      	movs	r3, #8
 8007d6c:	617b      	str	r3, [r7, #20]
 8007d6e:	e015      	b.n	8007d9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	4a1d      	ldr	r2, [pc, #116]	; (8007de8 <USB_SetTurnaroundTime+0x13c>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d906      	bls.n	8007d86 <USB_SetTurnaroundTime+0xda>
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	4a1c      	ldr	r2, [pc, #112]	; (8007dec <USB_SetTurnaroundTime+0x140>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d802      	bhi.n	8007d86 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007d80:	2307      	movs	r3, #7
 8007d82:	617b      	str	r3, [r7, #20]
 8007d84:	e00a      	b.n	8007d9c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007d86:	2306      	movs	r3, #6
 8007d88:	617b      	str	r3, [r7, #20]
 8007d8a:	e007      	b.n	8007d9c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007d8c:	79fb      	ldrb	r3, [r7, #7]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d102      	bne.n	8007d98 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007d92:	2309      	movs	r3, #9
 8007d94:	617b      	str	r3, [r7, #20]
 8007d96:	e001      	b.n	8007d9c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007d98:	2309      	movs	r3, #9
 8007d9a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	68db      	ldr	r3, [r3, #12]
 8007da0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	68da      	ldr	r2, [r3, #12]
 8007dac:	697b      	ldr	r3, [r7, #20]
 8007dae:	029b      	lsls	r3, r3, #10
 8007db0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007db4:	431a      	orrs	r2, r3
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007dba:	2300      	movs	r3, #0
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	371c      	adds	r7, #28
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc6:	4770      	bx	lr
 8007dc8:	00d8acbf 	.word	0x00d8acbf
 8007dcc:	00e4e1bf 	.word	0x00e4e1bf
 8007dd0:	00f423ff 	.word	0x00f423ff
 8007dd4:	0106737f 	.word	0x0106737f
 8007dd8:	011a499f 	.word	0x011a499f
 8007ddc:	01312cff 	.word	0x01312cff
 8007de0:	014ca43f 	.word	0x014ca43f
 8007de4:	016e35ff 	.word	0x016e35ff
 8007de8:	01a6ab1f 	.word	0x01a6ab1f
 8007dec:	01e847ff 	.word	0x01e847ff

08007df0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b083      	sub	sp, #12
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	689b      	ldr	r3, [r3, #8]
 8007dfc:	f023 0201 	bic.w	r2, r3, #1
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007e04:	2300      	movs	r3, #0
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	370c      	adds	r7, #12
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e10:	4770      	bx	lr

08007e12 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007e12:	b580      	push	{r7, lr}
 8007e14:	b082      	sub	sp, #8
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	6078      	str	r0, [r7, #4]
 8007e1a:	460b      	mov	r3, r1
 8007e1c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	68db      	ldr	r3, [r3, #12]
 8007e22:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007e2a:	78fb      	ldrb	r3, [r7, #3]
 8007e2c:	2b01      	cmp	r3, #1
 8007e2e:	d106      	bne.n	8007e3e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	68db      	ldr	r3, [r3, #12]
 8007e34:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	60da      	str	r2, [r3, #12]
 8007e3c:	e00b      	b.n	8007e56 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007e3e:	78fb      	ldrb	r3, [r7, #3]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d106      	bne.n	8007e52 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	68db      	ldr	r3, [r3, #12]
 8007e48:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	60da      	str	r2, [r3, #12]
 8007e50:	e001      	b.n	8007e56 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007e52:	2301      	movs	r3, #1
 8007e54:	e003      	b.n	8007e5e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007e56:	2032      	movs	r0, #50	; 0x32
 8007e58:	f7fa ff28 	bl	8002cac <HAL_Delay>

  return HAL_OK;
 8007e5c:	2300      	movs	r3, #0
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	3708      	adds	r7, #8
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}
	...

08007e68 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007e68:	b084      	sub	sp, #16
 8007e6a:	b580      	push	{r7, lr}
 8007e6c:	b086      	sub	sp, #24
 8007e6e:	af00      	add	r7, sp, #0
 8007e70:	6078      	str	r0, [r7, #4]
 8007e72:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007e76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007e82:	2300      	movs	r3, #0
 8007e84:	613b      	str	r3, [r7, #16]
 8007e86:	e009      	b.n	8007e9c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007e88:	687a      	ldr	r2, [r7, #4]
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	3340      	adds	r3, #64	; 0x40
 8007e8e:	009b      	lsls	r3, r3, #2
 8007e90:	4413      	add	r3, r2
 8007e92:	2200      	movs	r2, #0
 8007e94:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007e96:	693b      	ldr	r3, [r7, #16]
 8007e98:	3301      	adds	r3, #1
 8007e9a:	613b      	str	r3, [r7, #16]
 8007e9c:	693b      	ldr	r3, [r7, #16]
 8007e9e:	2b0e      	cmp	r3, #14
 8007ea0:	d9f2      	bls.n	8007e88 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007ea2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d11c      	bne.n	8007ee2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007eae:	685b      	ldr	r3, [r3, #4]
 8007eb0:	68fa      	ldr	r2, [r7, #12]
 8007eb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007eb6:	f043 0302 	orr.w	r3, r3, #2
 8007eba:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ec0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ecc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ed8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	639a      	str	r2, [r3, #56]	; 0x38
 8007ee0:	e00b      	b.n	8007efa <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ee6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ef2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007f00:	461a      	mov	r2, r3
 8007f02:	2300      	movs	r3, #0
 8007f04:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f0c:	4619      	mov	r1, r3
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f14:	461a      	mov	r2, r3
 8007f16:	680b      	ldr	r3, [r1, #0]
 8007f18:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f1c:	2b01      	cmp	r3, #1
 8007f1e:	d10c      	bne.n	8007f3a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d104      	bne.n	8007f30 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007f26:	2100      	movs	r1, #0
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f000 f949 	bl	80081c0 <USB_SetDevSpeed>
 8007f2e:	e008      	b.n	8007f42 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007f30:	2101      	movs	r1, #1
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f000 f944 	bl	80081c0 <USB_SetDevSpeed>
 8007f38:	e003      	b.n	8007f42 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007f3a:	2103      	movs	r1, #3
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f000 f93f 	bl	80081c0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007f42:	2110      	movs	r1, #16
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f000 f8f3 	bl	8008130 <USB_FlushTxFifo>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d001      	beq.n	8007f54 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007f50:	2301      	movs	r3, #1
 8007f52:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f000 f911 	bl	800817c <USB_FlushRxFifo>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d001      	beq.n	8007f64 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007f60:	2301      	movs	r3, #1
 8007f62:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f6a:	461a      	mov	r2, r3
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f76:	461a      	mov	r2, r3
 8007f78:	2300      	movs	r3, #0
 8007f7a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f82:	461a      	mov	r2, r3
 8007f84:	2300      	movs	r3, #0
 8007f86:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f88:	2300      	movs	r3, #0
 8007f8a:	613b      	str	r3, [r7, #16]
 8007f8c:	e043      	b.n	8008016 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007f8e:	693b      	ldr	r3, [r7, #16]
 8007f90:	015a      	lsls	r2, r3, #5
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	4413      	add	r3, r2
 8007f96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007fa0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007fa4:	d118      	bne.n	8007fd8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8007fa6:	693b      	ldr	r3, [r7, #16]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d10a      	bne.n	8007fc2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	015a      	lsls	r2, r3, #5
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	4413      	add	r3, r2
 8007fb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fb8:	461a      	mov	r2, r3
 8007fba:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007fbe:	6013      	str	r3, [r2, #0]
 8007fc0:	e013      	b.n	8007fea <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	015a      	lsls	r2, r3, #5
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	4413      	add	r3, r2
 8007fca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fce:	461a      	mov	r2, r3
 8007fd0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007fd4:	6013      	str	r3, [r2, #0]
 8007fd6:	e008      	b.n	8007fea <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007fd8:	693b      	ldr	r3, [r7, #16]
 8007fda:	015a      	lsls	r2, r3, #5
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	4413      	add	r3, r2
 8007fe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fe4:	461a      	mov	r2, r3
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007fea:	693b      	ldr	r3, [r7, #16]
 8007fec:	015a      	lsls	r2, r3, #5
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	4413      	add	r3, r2
 8007ff2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ff6:	461a      	mov	r2, r3
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	015a      	lsls	r2, r3, #5
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	4413      	add	r3, r2
 8008004:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008008:	461a      	mov	r2, r3
 800800a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800800e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008010:	693b      	ldr	r3, [r7, #16]
 8008012:	3301      	adds	r3, #1
 8008014:	613b      	str	r3, [r7, #16]
 8008016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008018:	693a      	ldr	r2, [r7, #16]
 800801a:	429a      	cmp	r2, r3
 800801c:	d3b7      	bcc.n	8007f8e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800801e:	2300      	movs	r3, #0
 8008020:	613b      	str	r3, [r7, #16]
 8008022:	e043      	b.n	80080ac <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008024:	693b      	ldr	r3, [r7, #16]
 8008026:	015a      	lsls	r2, r3, #5
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	4413      	add	r3, r2
 800802c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008036:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800803a:	d118      	bne.n	800806e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800803c:	693b      	ldr	r3, [r7, #16]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d10a      	bne.n	8008058 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	015a      	lsls	r2, r3, #5
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	4413      	add	r3, r2
 800804a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800804e:	461a      	mov	r2, r3
 8008050:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008054:	6013      	str	r3, [r2, #0]
 8008056:	e013      	b.n	8008080 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	015a      	lsls	r2, r3, #5
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	4413      	add	r3, r2
 8008060:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008064:	461a      	mov	r2, r3
 8008066:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800806a:	6013      	str	r3, [r2, #0]
 800806c:	e008      	b.n	8008080 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	015a      	lsls	r2, r3, #5
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	4413      	add	r3, r2
 8008076:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800807a:	461a      	mov	r2, r3
 800807c:	2300      	movs	r3, #0
 800807e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008080:	693b      	ldr	r3, [r7, #16]
 8008082:	015a      	lsls	r2, r3, #5
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	4413      	add	r3, r2
 8008088:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800808c:	461a      	mov	r2, r3
 800808e:	2300      	movs	r3, #0
 8008090:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	015a      	lsls	r2, r3, #5
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	4413      	add	r3, r2
 800809a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800809e:	461a      	mov	r2, r3
 80080a0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80080a4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80080a6:	693b      	ldr	r3, [r7, #16]
 80080a8:	3301      	adds	r3, #1
 80080aa:	613b      	str	r3, [r7, #16]
 80080ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ae:	693a      	ldr	r2, [r7, #16]
 80080b0:	429a      	cmp	r2, r3
 80080b2:	d3b7      	bcc.n	8008024 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080ba:	691b      	ldr	r3, [r3, #16]
 80080bc:	68fa      	ldr	r2, [r7, #12]
 80080be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80080c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80080c6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2200      	movs	r2, #0
 80080cc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80080d4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80080d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d105      	bne.n	80080e8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	699b      	ldr	r3, [r3, #24]
 80080e0:	f043 0210 	orr.w	r2, r3, #16
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	699a      	ldr	r2, [r3, #24]
 80080ec:	4b0f      	ldr	r3, [pc, #60]	; (800812c <USB_DevInit+0x2c4>)
 80080ee:	4313      	orrs	r3, r2
 80080f0:	687a      	ldr	r2, [r7, #4]
 80080f2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80080f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d005      	beq.n	8008106 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	699b      	ldr	r3, [r3, #24]
 80080fe:	f043 0208 	orr.w	r2, r3, #8
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008106:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008108:	2b01      	cmp	r3, #1
 800810a:	d107      	bne.n	800811c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	699b      	ldr	r3, [r3, #24]
 8008110:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008114:	f043 0304 	orr.w	r3, r3, #4
 8008118:	687a      	ldr	r2, [r7, #4]
 800811a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800811c:	7dfb      	ldrb	r3, [r7, #23]
}
 800811e:	4618      	mov	r0, r3
 8008120:	3718      	adds	r7, #24
 8008122:	46bd      	mov	sp, r7
 8008124:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008128:	b004      	add	sp, #16
 800812a:	4770      	bx	lr
 800812c:	803c3800 	.word	0x803c3800

08008130 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008130:	b480      	push	{r7}
 8008132:	b085      	sub	sp, #20
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
 8008138:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800813a:	2300      	movs	r3, #0
 800813c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	019b      	lsls	r3, r3, #6
 8008142:	f043 0220 	orr.w	r2, r3, #32
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	3301      	adds	r3, #1
 800814e:	60fb      	str	r3, [r7, #12]
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	4a09      	ldr	r2, [pc, #36]	; (8008178 <USB_FlushTxFifo+0x48>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d901      	bls.n	800815c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008158:	2303      	movs	r3, #3
 800815a:	e006      	b.n	800816a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	691b      	ldr	r3, [r3, #16]
 8008160:	f003 0320 	and.w	r3, r3, #32
 8008164:	2b20      	cmp	r3, #32
 8008166:	d0f0      	beq.n	800814a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008168:	2300      	movs	r3, #0
}
 800816a:	4618      	mov	r0, r3
 800816c:	3714      	adds	r7, #20
 800816e:	46bd      	mov	sp, r7
 8008170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008174:	4770      	bx	lr
 8008176:	bf00      	nop
 8008178:	00030d40 	.word	0x00030d40

0800817c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800817c:	b480      	push	{r7}
 800817e:	b085      	sub	sp, #20
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008184:	2300      	movs	r3, #0
 8008186:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2210      	movs	r2, #16
 800818c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	3301      	adds	r3, #1
 8008192:	60fb      	str	r3, [r7, #12]
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	4a09      	ldr	r2, [pc, #36]	; (80081bc <USB_FlushRxFifo+0x40>)
 8008198:	4293      	cmp	r3, r2
 800819a:	d901      	bls.n	80081a0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800819c:	2303      	movs	r3, #3
 800819e:	e006      	b.n	80081ae <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	691b      	ldr	r3, [r3, #16]
 80081a4:	f003 0310 	and.w	r3, r3, #16
 80081a8:	2b10      	cmp	r3, #16
 80081aa:	d0f0      	beq.n	800818e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80081ac:	2300      	movs	r3, #0
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	3714      	adds	r7, #20
 80081b2:	46bd      	mov	sp, r7
 80081b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b8:	4770      	bx	lr
 80081ba:	bf00      	nop
 80081bc:	00030d40 	.word	0x00030d40

080081c0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b085      	sub	sp, #20
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
 80081c8:	460b      	mov	r3, r1
 80081ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081d6:	681a      	ldr	r2, [r3, #0]
 80081d8:	78fb      	ldrb	r3, [r7, #3]
 80081da:	68f9      	ldr	r1, [r7, #12]
 80081dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80081e0:	4313      	orrs	r3, r2
 80081e2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80081e4:	2300      	movs	r3, #0
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	3714      	adds	r7, #20
 80081ea:	46bd      	mov	sp, r7
 80081ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f0:	4770      	bx	lr

080081f2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80081f2:	b480      	push	{r7}
 80081f4:	b087      	sub	sp, #28
 80081f6:	af00      	add	r7, sp, #0
 80081f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80081fe:	693b      	ldr	r3, [r7, #16]
 8008200:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008204:	689b      	ldr	r3, [r3, #8]
 8008206:	f003 0306 	and.w	r3, r3, #6
 800820a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d102      	bne.n	8008218 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008212:	2300      	movs	r3, #0
 8008214:	75fb      	strb	r3, [r7, #23]
 8008216:	e00a      	b.n	800822e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	2b02      	cmp	r3, #2
 800821c:	d002      	beq.n	8008224 <USB_GetDevSpeed+0x32>
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	2b06      	cmp	r3, #6
 8008222:	d102      	bne.n	800822a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008224:	2302      	movs	r3, #2
 8008226:	75fb      	strb	r3, [r7, #23]
 8008228:	e001      	b.n	800822e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800822a:	230f      	movs	r3, #15
 800822c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800822e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008230:	4618      	mov	r0, r3
 8008232:	371c      	adds	r7, #28
 8008234:	46bd      	mov	sp, r7
 8008236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823a:	4770      	bx	lr

0800823c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800823c:	b480      	push	{r7}
 800823e:	b089      	sub	sp, #36	; 0x24
 8008240:	af00      	add	r7, sp, #0
 8008242:	60f8      	str	r0, [r7, #12]
 8008244:	60b9      	str	r1, [r7, #8]
 8008246:	4611      	mov	r1, r2
 8008248:	461a      	mov	r2, r3
 800824a:	460b      	mov	r3, r1
 800824c:	71fb      	strb	r3, [r7, #7]
 800824e:	4613      	mov	r3, r2
 8008250:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800825a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800825e:	2b00      	cmp	r3, #0
 8008260:	d11a      	bne.n	8008298 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008262:	88bb      	ldrh	r3, [r7, #4]
 8008264:	3303      	adds	r3, #3
 8008266:	089b      	lsrs	r3, r3, #2
 8008268:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800826a:	2300      	movs	r3, #0
 800826c:	61bb      	str	r3, [r7, #24]
 800826e:	e00f      	b.n	8008290 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008270:	79fb      	ldrb	r3, [r7, #7]
 8008272:	031a      	lsls	r2, r3, #12
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	4413      	add	r3, r2
 8008278:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800827c:	461a      	mov	r2, r3
 800827e:	69fb      	ldr	r3, [r7, #28]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008284:	69fb      	ldr	r3, [r7, #28]
 8008286:	3304      	adds	r3, #4
 8008288:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800828a:	69bb      	ldr	r3, [r7, #24]
 800828c:	3301      	adds	r3, #1
 800828e:	61bb      	str	r3, [r7, #24]
 8008290:	69ba      	ldr	r2, [r7, #24]
 8008292:	693b      	ldr	r3, [r7, #16]
 8008294:	429a      	cmp	r2, r3
 8008296:	d3eb      	bcc.n	8008270 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008298:	2300      	movs	r3, #0
}
 800829a:	4618      	mov	r0, r3
 800829c:	3724      	adds	r7, #36	; 0x24
 800829e:	46bd      	mov	sp, r7
 80082a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a4:	4770      	bx	lr

080082a6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80082a6:	b480      	push	{r7}
 80082a8:	b089      	sub	sp, #36	; 0x24
 80082aa:	af00      	add	r7, sp, #0
 80082ac:	60f8      	str	r0, [r7, #12]
 80082ae:	60b9      	str	r1, [r7, #8]
 80082b0:	4613      	mov	r3, r2
 80082b2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80082bc:	88fb      	ldrh	r3, [r7, #6]
 80082be:	3303      	adds	r3, #3
 80082c0:	089b      	lsrs	r3, r3, #2
 80082c2:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80082c4:	2300      	movs	r3, #0
 80082c6:	61bb      	str	r3, [r7, #24]
 80082c8:	e00b      	b.n	80082e2 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082d0:	681a      	ldr	r2, [r3, #0]
 80082d2:	69fb      	ldr	r3, [r7, #28]
 80082d4:	601a      	str	r2, [r3, #0]
    pDest++;
 80082d6:	69fb      	ldr	r3, [r7, #28]
 80082d8:	3304      	adds	r3, #4
 80082da:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80082dc:	69bb      	ldr	r3, [r7, #24]
 80082de:	3301      	adds	r3, #1
 80082e0:	61bb      	str	r3, [r7, #24]
 80082e2:	69ba      	ldr	r2, [r7, #24]
 80082e4:	693b      	ldr	r3, [r7, #16]
 80082e6:	429a      	cmp	r2, r3
 80082e8:	d3ef      	bcc.n	80082ca <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80082ea:	69fb      	ldr	r3, [r7, #28]
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	3724      	adds	r7, #36	; 0x24
 80082f0:	46bd      	mov	sp, r7
 80082f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f6:	4770      	bx	lr

080082f8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80082f8:	b480      	push	{r7}
 80082fa:	b085      	sub	sp, #20
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	68fa      	ldr	r2, [r7, #12]
 800830e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008312:	f023 0303 	bic.w	r3, r3, #3
 8008316:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800831e:	685b      	ldr	r3, [r3, #4]
 8008320:	68fa      	ldr	r2, [r7, #12]
 8008322:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008326:	f043 0302 	orr.w	r3, r3, #2
 800832a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800832c:	2300      	movs	r3, #0
}
 800832e:	4618      	mov	r0, r3
 8008330:	3714      	adds	r7, #20
 8008332:	46bd      	mov	sp, r7
 8008334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008338:	4770      	bx	lr

0800833a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800833a:	b480      	push	{r7}
 800833c:	b085      	sub	sp, #20
 800833e:	af00      	add	r7, sp, #0
 8008340:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	695b      	ldr	r3, [r3, #20]
 8008346:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	699b      	ldr	r3, [r3, #24]
 800834c:	68fa      	ldr	r2, [r7, #12]
 800834e:	4013      	ands	r3, r2
 8008350:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008352:	68fb      	ldr	r3, [r7, #12]
}
 8008354:	4618      	mov	r0, r3
 8008356:	3714      	adds	r7, #20
 8008358:	46bd      	mov	sp, r7
 800835a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835e:	4770      	bx	lr

08008360 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008360:	b480      	push	{r7}
 8008362:	b085      	sub	sp, #20
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008372:	699b      	ldr	r3, [r3, #24]
 8008374:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800837c:	69db      	ldr	r3, [r3, #28]
 800837e:	68ba      	ldr	r2, [r7, #8]
 8008380:	4013      	ands	r3, r2
 8008382:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	0c1b      	lsrs	r3, r3, #16
}
 8008388:	4618      	mov	r0, r3
 800838a:	3714      	adds	r7, #20
 800838c:	46bd      	mov	sp, r7
 800838e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008392:	4770      	bx	lr

08008394 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008394:	b480      	push	{r7}
 8008396:	b085      	sub	sp, #20
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083a6:	699b      	ldr	r3, [r3, #24]
 80083a8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083b0:	69db      	ldr	r3, [r3, #28]
 80083b2:	68ba      	ldr	r2, [r7, #8]
 80083b4:	4013      	ands	r3, r2
 80083b6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	b29b      	uxth	r3, r3
}
 80083bc:	4618      	mov	r0, r3
 80083be:	3714      	adds	r7, #20
 80083c0:	46bd      	mov	sp, r7
 80083c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c6:	4770      	bx	lr

080083c8 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80083c8:	b480      	push	{r7}
 80083ca:	b085      	sub	sp, #20
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
 80083d0:	460b      	mov	r3, r1
 80083d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80083d8:	78fb      	ldrb	r3, [r7, #3]
 80083da:	015a      	lsls	r2, r3, #5
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	4413      	add	r3, r2
 80083e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083e4:	689b      	ldr	r3, [r3, #8]
 80083e6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083ee:	695b      	ldr	r3, [r3, #20]
 80083f0:	68ba      	ldr	r2, [r7, #8]
 80083f2:	4013      	ands	r3, r2
 80083f4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80083f6:	68bb      	ldr	r3, [r7, #8]
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	3714      	adds	r7, #20
 80083fc:	46bd      	mov	sp, r7
 80083fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008402:	4770      	bx	lr

08008404 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008404:	b480      	push	{r7}
 8008406:	b087      	sub	sp, #28
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
 800840c:	460b      	mov	r3, r1
 800840e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800841a:	691b      	ldr	r3, [r3, #16]
 800841c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008426:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008428:	78fb      	ldrb	r3, [r7, #3]
 800842a:	f003 030f 	and.w	r3, r3, #15
 800842e:	68fa      	ldr	r2, [r7, #12]
 8008430:	fa22 f303 	lsr.w	r3, r2, r3
 8008434:	01db      	lsls	r3, r3, #7
 8008436:	b2db      	uxtb	r3, r3
 8008438:	693a      	ldr	r2, [r7, #16]
 800843a:	4313      	orrs	r3, r2
 800843c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800843e:	78fb      	ldrb	r3, [r7, #3]
 8008440:	015a      	lsls	r2, r3, #5
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	4413      	add	r3, r2
 8008446:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800844a:	689b      	ldr	r3, [r3, #8]
 800844c:	693a      	ldr	r2, [r7, #16]
 800844e:	4013      	ands	r3, r2
 8008450:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008452:	68bb      	ldr	r3, [r7, #8]
}
 8008454:	4618      	mov	r0, r3
 8008456:	371c      	adds	r7, #28
 8008458:	46bd      	mov	sp, r7
 800845a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845e:	4770      	bx	lr

08008460 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008460:	b480      	push	{r7}
 8008462:	b083      	sub	sp, #12
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	695b      	ldr	r3, [r3, #20]
 800846c:	f003 0301 	and.w	r3, r3, #1
}
 8008470:	4618      	mov	r0, r3
 8008472:	370c      	adds	r7, #12
 8008474:	46bd      	mov	sp, r7
 8008476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847a:	4770      	bx	lr

0800847c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800847c:	b480      	push	{r7}
 800847e:	b085      	sub	sp, #20
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	68fa      	ldr	r2, [r7, #12]
 8008492:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008496:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800849a:	f023 0307 	bic.w	r3, r3, #7
 800849e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084a6:	685b      	ldr	r3, [r3, #4]
 80084a8:	68fa      	ldr	r2, [r7, #12]
 80084aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80084ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80084b2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80084b4:	2300      	movs	r3, #0
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	3714      	adds	r7, #20
 80084ba:	46bd      	mov	sp, r7
 80084bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c0:	4770      	bx	lr
	...

080084c4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80084c4:	b480      	push	{r7}
 80084c6:	b087      	sub	sp, #28
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	60f8      	str	r0, [r7, #12]
 80084cc:	460b      	mov	r3, r1
 80084ce:	607a      	str	r2, [r7, #4]
 80084d0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	333c      	adds	r3, #60	; 0x3c
 80084da:	3304      	adds	r3, #4
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	4a26      	ldr	r2, [pc, #152]	; (800857c <USB_EP0_OutStart+0xb8>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d90a      	bls.n	80084fe <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80084f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80084f8:	d101      	bne.n	80084fe <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80084fa:	2300      	movs	r3, #0
 80084fc:	e037      	b.n	800856e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008504:	461a      	mov	r2, r3
 8008506:	2300      	movs	r3, #0
 8008508:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008510:	691b      	ldr	r3, [r3, #16]
 8008512:	697a      	ldr	r2, [r7, #20]
 8008514:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008518:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800851c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800851e:	697b      	ldr	r3, [r7, #20]
 8008520:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008524:	691b      	ldr	r3, [r3, #16]
 8008526:	697a      	ldr	r2, [r7, #20]
 8008528:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800852c:	f043 0318 	orr.w	r3, r3, #24
 8008530:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008538:	691b      	ldr	r3, [r3, #16]
 800853a:	697a      	ldr	r2, [r7, #20]
 800853c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008540:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008544:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008546:	7afb      	ldrb	r3, [r7, #11]
 8008548:	2b01      	cmp	r3, #1
 800854a:	d10f      	bne.n	800856c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800854c:	697b      	ldr	r3, [r7, #20]
 800854e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008552:	461a      	mov	r2, r3
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008558:	697b      	ldr	r3, [r7, #20]
 800855a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	697a      	ldr	r2, [r7, #20]
 8008562:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008566:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800856a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800856c:	2300      	movs	r3, #0
}
 800856e:	4618      	mov	r0, r3
 8008570:	371c      	adds	r7, #28
 8008572:	46bd      	mov	sp, r7
 8008574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008578:	4770      	bx	lr
 800857a:	bf00      	nop
 800857c:	4f54300a 	.word	0x4f54300a

08008580 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008580:	b480      	push	{r7}
 8008582:	b085      	sub	sp, #20
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8008588:	2300      	movs	r3, #0
 800858a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	3301      	adds	r3, #1
 8008590:	60fb      	str	r3, [r7, #12]
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	4a13      	ldr	r2, [pc, #76]	; (80085e4 <USB_CoreReset+0x64>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d901      	bls.n	800859e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800859a:	2303      	movs	r3, #3
 800859c:	e01b      	b.n	80085d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	691b      	ldr	r3, [r3, #16]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	daf2      	bge.n	800858c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80085a6:	2300      	movs	r3, #0
 80085a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	691b      	ldr	r3, [r3, #16]
 80085ae:	f043 0201 	orr.w	r2, r3, #1
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	3301      	adds	r3, #1
 80085ba:	60fb      	str	r3, [r7, #12]
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	4a09      	ldr	r2, [pc, #36]	; (80085e4 <USB_CoreReset+0x64>)
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d901      	bls.n	80085c8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80085c4:	2303      	movs	r3, #3
 80085c6:	e006      	b.n	80085d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	691b      	ldr	r3, [r3, #16]
 80085cc:	f003 0301 	and.w	r3, r3, #1
 80085d0:	2b01      	cmp	r3, #1
 80085d2:	d0f0      	beq.n	80085b6 <USB_CoreReset+0x36>

  return HAL_OK;
 80085d4:	2300      	movs	r3, #0
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	3714      	adds	r7, #20
 80085da:	46bd      	mov	sp, r7
 80085dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e0:	4770      	bx	lr
 80085e2:	bf00      	nop
 80085e4:	00030d40 	.word	0x00030d40

080085e8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80085e8:	b480      	push	{r7}
 80085ea:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80085ec:	bf00      	nop
 80085ee:	46bd      	mov	sp, r7
 80085f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f4:	4770      	bx	lr
	...

080085f8 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80085f8:	b480      	push	{r7}
 80085fa:	b085      	sub	sp, #20
 80085fc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80085fe:	f3ef 8305 	mrs	r3, IPSR
 8008602:	60bb      	str	r3, [r7, #8]
  return(result);
 8008604:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008606:	2b00      	cmp	r3, #0
 8008608:	d10f      	bne.n	800862a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800860a:	f3ef 8310 	mrs	r3, PRIMASK
 800860e:	607b      	str	r3, [r7, #4]
  return(result);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d105      	bne.n	8008622 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008616:	f3ef 8311 	mrs	r3, BASEPRI
 800861a:	603b      	str	r3, [r7, #0]
  return(result);
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d007      	beq.n	8008632 <osKernelInitialize+0x3a>
 8008622:	4b0e      	ldr	r3, [pc, #56]	; (800865c <osKernelInitialize+0x64>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	2b02      	cmp	r3, #2
 8008628:	d103      	bne.n	8008632 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800862a:	f06f 0305 	mvn.w	r3, #5
 800862e:	60fb      	str	r3, [r7, #12]
 8008630:	e00c      	b.n	800864c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008632:	4b0a      	ldr	r3, [pc, #40]	; (800865c <osKernelInitialize+0x64>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d105      	bne.n	8008646 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800863a:	4b08      	ldr	r3, [pc, #32]	; (800865c <osKernelInitialize+0x64>)
 800863c:	2201      	movs	r2, #1
 800863e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008640:	2300      	movs	r3, #0
 8008642:	60fb      	str	r3, [r7, #12]
 8008644:	e002      	b.n	800864c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8008646:	f04f 33ff 	mov.w	r3, #4294967295
 800864a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800864c:	68fb      	ldr	r3, [r7, #12]
}
 800864e:	4618      	mov	r0, r3
 8008650:	3714      	adds	r7, #20
 8008652:	46bd      	mov	sp, r7
 8008654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008658:	4770      	bx	lr
 800865a:	bf00      	nop
 800865c:	2000020c 	.word	0x2000020c

08008660 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008660:	b580      	push	{r7, lr}
 8008662:	b084      	sub	sp, #16
 8008664:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008666:	f3ef 8305 	mrs	r3, IPSR
 800866a:	60bb      	str	r3, [r7, #8]
  return(result);
 800866c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800866e:	2b00      	cmp	r3, #0
 8008670:	d10f      	bne.n	8008692 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008672:	f3ef 8310 	mrs	r3, PRIMASK
 8008676:	607b      	str	r3, [r7, #4]
  return(result);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d105      	bne.n	800868a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800867e:	f3ef 8311 	mrs	r3, BASEPRI
 8008682:	603b      	str	r3, [r7, #0]
  return(result);
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d007      	beq.n	800869a <osKernelStart+0x3a>
 800868a:	4b0f      	ldr	r3, [pc, #60]	; (80086c8 <osKernelStart+0x68>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	2b02      	cmp	r3, #2
 8008690:	d103      	bne.n	800869a <osKernelStart+0x3a>
    stat = osErrorISR;
 8008692:	f06f 0305 	mvn.w	r3, #5
 8008696:	60fb      	str	r3, [r7, #12]
 8008698:	e010      	b.n	80086bc <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800869a:	4b0b      	ldr	r3, [pc, #44]	; (80086c8 <osKernelStart+0x68>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	2b01      	cmp	r3, #1
 80086a0:	d109      	bne.n	80086b6 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80086a2:	f7ff ffa1 	bl	80085e8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80086a6:	4b08      	ldr	r3, [pc, #32]	; (80086c8 <osKernelStart+0x68>)
 80086a8:	2202      	movs	r2, #2
 80086aa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80086ac:	f001 f872 	bl	8009794 <vTaskStartScheduler>
      stat = osOK;
 80086b0:	2300      	movs	r3, #0
 80086b2:	60fb      	str	r3, [r7, #12]
 80086b4:	e002      	b.n	80086bc <osKernelStart+0x5c>
    } else {
      stat = osError;
 80086b6:	f04f 33ff 	mov.w	r3, #4294967295
 80086ba:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80086bc:	68fb      	ldr	r3, [r7, #12]
}
 80086be:	4618      	mov	r0, r3
 80086c0:	3710      	adds	r7, #16
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}
 80086c6:	bf00      	nop
 80086c8:	2000020c 	.word	0x2000020c

080086cc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b090      	sub	sp, #64	; 0x40
 80086d0:	af04      	add	r7, sp, #16
 80086d2:	60f8      	str	r0, [r7, #12]
 80086d4:	60b9      	str	r1, [r7, #8]
 80086d6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80086d8:	2300      	movs	r3, #0
 80086da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80086dc:	f3ef 8305 	mrs	r3, IPSR
 80086e0:	61fb      	str	r3, [r7, #28]
  return(result);
 80086e2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	f040 808f 	bne.w	8008808 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086ea:	f3ef 8310 	mrs	r3, PRIMASK
 80086ee:	61bb      	str	r3, [r7, #24]
  return(result);
 80086f0:	69bb      	ldr	r3, [r7, #24]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d105      	bne.n	8008702 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80086f6:	f3ef 8311 	mrs	r3, BASEPRI
 80086fa:	617b      	str	r3, [r7, #20]
  return(result);
 80086fc:	697b      	ldr	r3, [r7, #20]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d003      	beq.n	800870a <osThreadNew+0x3e>
 8008702:	4b44      	ldr	r3, [pc, #272]	; (8008814 <osThreadNew+0x148>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	2b02      	cmp	r3, #2
 8008708:	d07e      	beq.n	8008808 <osThreadNew+0x13c>
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d07b      	beq.n	8008808 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8008710:	2380      	movs	r3, #128	; 0x80
 8008712:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8008714:	2318      	movs	r3, #24
 8008716:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8008718:	2300      	movs	r3, #0
 800871a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800871c:	f04f 33ff 	mov.w	r3, #4294967295
 8008720:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d045      	beq.n	80087b4 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d002      	beq.n	8008736 <osThreadNew+0x6a>
        name = attr->name;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	699b      	ldr	r3, [r3, #24]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d002      	beq.n	8008744 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	699b      	ldr	r3, [r3, #24]
 8008742:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008746:	2b00      	cmp	r3, #0
 8008748:	d008      	beq.n	800875c <osThreadNew+0x90>
 800874a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800874c:	2b38      	cmp	r3, #56	; 0x38
 800874e:	d805      	bhi.n	800875c <osThreadNew+0x90>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	685b      	ldr	r3, [r3, #4]
 8008754:	f003 0301 	and.w	r3, r3, #1
 8008758:	2b00      	cmp	r3, #0
 800875a:	d001      	beq.n	8008760 <osThreadNew+0x94>
        return (NULL);
 800875c:	2300      	movs	r3, #0
 800875e:	e054      	b.n	800880a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	695b      	ldr	r3, [r3, #20]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d003      	beq.n	8008770 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	695b      	ldr	r3, [r3, #20]
 800876c:	089b      	lsrs	r3, r3, #2
 800876e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	689b      	ldr	r3, [r3, #8]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d00e      	beq.n	8008796 <osThreadNew+0xca>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	68db      	ldr	r3, [r3, #12]
 800877c:	2b5f      	cmp	r3, #95	; 0x5f
 800877e:	d90a      	bls.n	8008796 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008784:	2b00      	cmp	r3, #0
 8008786:	d006      	beq.n	8008796 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	695b      	ldr	r3, [r3, #20]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d002      	beq.n	8008796 <osThreadNew+0xca>
        mem = 1;
 8008790:	2301      	movs	r3, #1
 8008792:	623b      	str	r3, [r7, #32]
 8008794:	e010      	b.n	80087b8 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	689b      	ldr	r3, [r3, #8]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d10c      	bne.n	80087b8 <osThreadNew+0xec>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	68db      	ldr	r3, [r3, #12]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d108      	bne.n	80087b8 <osThreadNew+0xec>
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	691b      	ldr	r3, [r3, #16]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d104      	bne.n	80087b8 <osThreadNew+0xec>
          mem = 0;
 80087ae:	2300      	movs	r3, #0
 80087b0:	623b      	str	r3, [r7, #32]
 80087b2:	e001      	b.n	80087b8 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80087b4:	2300      	movs	r3, #0
 80087b6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80087b8:	6a3b      	ldr	r3, [r7, #32]
 80087ba:	2b01      	cmp	r3, #1
 80087bc:	d110      	bne.n	80087e0 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80087c2:	687a      	ldr	r2, [r7, #4]
 80087c4:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80087c6:	9202      	str	r2, [sp, #8]
 80087c8:	9301      	str	r3, [sp, #4]
 80087ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087cc:	9300      	str	r3, [sp, #0]
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80087d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80087d4:	68f8      	ldr	r0, [r7, #12]
 80087d6:	f000 fe09 	bl	80093ec <xTaskCreateStatic>
 80087da:	4603      	mov	r3, r0
 80087dc:	613b      	str	r3, [r7, #16]
 80087de:	e013      	b.n	8008808 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80087e0:	6a3b      	ldr	r3, [r7, #32]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d110      	bne.n	8008808 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80087e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087e8:	b29a      	uxth	r2, r3
 80087ea:	f107 0310 	add.w	r3, r7, #16
 80087ee:	9301      	str	r3, [sp, #4]
 80087f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f2:	9300      	str	r3, [sp, #0]
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80087f8:	68f8      	ldr	r0, [r7, #12]
 80087fa:	f000 fe51 	bl	80094a0 <xTaskCreate>
 80087fe:	4603      	mov	r3, r0
 8008800:	2b01      	cmp	r3, #1
 8008802:	d001      	beq.n	8008808 <osThreadNew+0x13c>
          hTask = NULL;
 8008804:	2300      	movs	r3, #0
 8008806:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008808:	693b      	ldr	r3, [r7, #16]
}
 800880a:	4618      	mov	r0, r3
 800880c:	3730      	adds	r7, #48	; 0x30
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}
 8008812:	bf00      	nop
 8008814:	2000020c 	.word	0x2000020c

08008818 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8008818:	b580      	push	{r7, lr}
 800881a:	b086      	sub	sp, #24
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008820:	f3ef 8305 	mrs	r3, IPSR
 8008824:	613b      	str	r3, [r7, #16]
  return(result);
 8008826:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008828:	2b00      	cmp	r3, #0
 800882a:	d10f      	bne.n	800884c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800882c:	f3ef 8310 	mrs	r3, PRIMASK
 8008830:	60fb      	str	r3, [r7, #12]
  return(result);
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d105      	bne.n	8008844 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008838:	f3ef 8311 	mrs	r3, BASEPRI
 800883c:	60bb      	str	r3, [r7, #8]
  return(result);
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d007      	beq.n	8008854 <osDelay+0x3c>
 8008844:	4b0a      	ldr	r3, [pc, #40]	; (8008870 <osDelay+0x58>)
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	2b02      	cmp	r3, #2
 800884a:	d103      	bne.n	8008854 <osDelay+0x3c>
    stat = osErrorISR;
 800884c:	f06f 0305 	mvn.w	r3, #5
 8008850:	617b      	str	r3, [r7, #20]
 8008852:	e007      	b.n	8008864 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8008854:	2300      	movs	r3, #0
 8008856:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d002      	beq.n	8008864 <osDelay+0x4c>
      vTaskDelay(ticks);
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f000 ff64 	bl	800972c <vTaskDelay>
    }
  }

  return (stat);
 8008864:	697b      	ldr	r3, [r7, #20]
}
 8008866:	4618      	mov	r0, r3
 8008868:	3718      	adds	r7, #24
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}
 800886e:	bf00      	nop
 8008870:	2000020c 	.word	0x2000020c

08008874 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008874:	b480      	push	{r7}
 8008876:	b085      	sub	sp, #20
 8008878:	af00      	add	r7, sp, #0
 800887a:	60f8      	str	r0, [r7, #12]
 800887c:	60b9      	str	r1, [r7, #8]
 800887e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	4a07      	ldr	r2, [pc, #28]	; (80088a0 <vApplicationGetIdleTaskMemory+0x2c>)
 8008884:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	4a06      	ldr	r2, [pc, #24]	; (80088a4 <vApplicationGetIdleTaskMemory+0x30>)
 800888a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2280      	movs	r2, #128	; 0x80
 8008890:	601a      	str	r2, [r3, #0]
}
 8008892:	bf00      	nop
 8008894:	3714      	adds	r7, #20
 8008896:	46bd      	mov	sp, r7
 8008898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889c:	4770      	bx	lr
 800889e:	bf00      	nop
 80088a0:	20000210 	.word	0x20000210
 80088a4:	20000270 	.word	0x20000270

080088a8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80088a8:	b480      	push	{r7}
 80088aa:	b085      	sub	sp, #20
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	60f8      	str	r0, [r7, #12]
 80088b0:	60b9      	str	r1, [r7, #8]
 80088b2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	4a07      	ldr	r2, [pc, #28]	; (80088d4 <vApplicationGetTimerTaskMemory+0x2c>)
 80088b8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	4a06      	ldr	r2, [pc, #24]	; (80088d8 <vApplicationGetTimerTaskMemory+0x30>)
 80088be:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80088c6:	601a      	str	r2, [r3, #0]
}
 80088c8:	bf00      	nop
 80088ca:	3714      	adds	r7, #20
 80088cc:	46bd      	mov	sp, r7
 80088ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d2:	4770      	bx	lr
 80088d4:	20000470 	.word	0x20000470
 80088d8:	200004d0 	.word	0x200004d0

080088dc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80088dc:	b480      	push	{r7}
 80088de:	b083      	sub	sp, #12
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f103 0208 	add.w	r2, r3, #8
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f04f 32ff 	mov.w	r2, #4294967295
 80088f4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f103 0208 	add.w	r2, r3, #8
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f103 0208 	add.w	r2, r3, #8
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2200      	movs	r2, #0
 800890e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008910:	bf00      	nop
 8008912:	370c      	adds	r7, #12
 8008914:	46bd      	mov	sp, r7
 8008916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891a:	4770      	bx	lr

0800891c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800891c:	b480      	push	{r7}
 800891e:	b083      	sub	sp, #12
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2200      	movs	r2, #0
 8008928:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800892a:	bf00      	nop
 800892c:	370c      	adds	r7, #12
 800892e:	46bd      	mov	sp, r7
 8008930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008934:	4770      	bx	lr

08008936 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008936:	b480      	push	{r7}
 8008938:	b085      	sub	sp, #20
 800893a:	af00      	add	r7, sp, #0
 800893c:	6078      	str	r0, [r7, #4]
 800893e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	685b      	ldr	r3, [r3, #4]
 8008944:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	68fa      	ldr	r2, [r7, #12]
 800894a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	689a      	ldr	r2, [r3, #8]
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	689b      	ldr	r3, [r3, #8]
 8008958:	683a      	ldr	r2, [r7, #0]
 800895a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	683a      	ldr	r2, [r7, #0]
 8008960:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	687a      	ldr	r2, [r7, #4]
 8008966:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	1c5a      	adds	r2, r3, #1
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	601a      	str	r2, [r3, #0]
}
 8008972:	bf00      	nop
 8008974:	3714      	adds	r7, #20
 8008976:	46bd      	mov	sp, r7
 8008978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897c:	4770      	bx	lr

0800897e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800897e:	b480      	push	{r7}
 8008980:	b085      	sub	sp, #20
 8008982:	af00      	add	r7, sp, #0
 8008984:	6078      	str	r0, [r7, #4]
 8008986:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008994:	d103      	bne.n	800899e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	691b      	ldr	r3, [r3, #16]
 800899a:	60fb      	str	r3, [r7, #12]
 800899c:	e00c      	b.n	80089b8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	3308      	adds	r3, #8
 80089a2:	60fb      	str	r3, [r7, #12]
 80089a4:	e002      	b.n	80089ac <vListInsert+0x2e>
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	685b      	ldr	r3, [r3, #4]
 80089aa:	60fb      	str	r3, [r7, #12]
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	685b      	ldr	r3, [r3, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	68ba      	ldr	r2, [r7, #8]
 80089b4:	429a      	cmp	r2, r3
 80089b6:	d2f6      	bcs.n	80089a6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	685a      	ldr	r2, [r3, #4]
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	685b      	ldr	r3, [r3, #4]
 80089c4:	683a      	ldr	r2, [r7, #0]
 80089c6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	68fa      	ldr	r2, [r7, #12]
 80089cc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	683a      	ldr	r2, [r7, #0]
 80089d2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	687a      	ldr	r2, [r7, #4]
 80089d8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	1c5a      	adds	r2, r3, #1
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	601a      	str	r2, [r3, #0]
}
 80089e4:	bf00      	nop
 80089e6:	3714      	adds	r7, #20
 80089e8:	46bd      	mov	sp, r7
 80089ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ee:	4770      	bx	lr

080089f0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80089f0:	b480      	push	{r7}
 80089f2:	b085      	sub	sp, #20
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	691b      	ldr	r3, [r3, #16]
 80089fc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	685b      	ldr	r3, [r3, #4]
 8008a02:	687a      	ldr	r2, [r7, #4]
 8008a04:	6892      	ldr	r2, [r2, #8]
 8008a06:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	689b      	ldr	r3, [r3, #8]
 8008a0c:	687a      	ldr	r2, [r7, #4]
 8008a0e:	6852      	ldr	r2, [r2, #4]
 8008a10:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	685b      	ldr	r3, [r3, #4]
 8008a16:	687a      	ldr	r2, [r7, #4]
 8008a18:	429a      	cmp	r2, r3
 8008a1a:	d103      	bne.n	8008a24 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	689a      	ldr	r2, [r3, #8]
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2200      	movs	r2, #0
 8008a28:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	1e5a      	subs	r2, r3, #1
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681b      	ldr	r3, [r3, #0]
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3714      	adds	r7, #20
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a42:	4770      	bx	lr

08008a44 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b084      	sub	sp, #16
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
 8008a4c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d109      	bne.n	8008a6c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a5c:	f383 8811 	msr	BASEPRI, r3
 8008a60:	f3bf 8f6f 	isb	sy
 8008a64:	f3bf 8f4f 	dsb	sy
 8008a68:	60bb      	str	r3, [r7, #8]
 8008a6a:	e7fe      	b.n	8008a6a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8008a6c:	f002 f816 	bl	800aa9c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681a      	ldr	r2, [r3, #0]
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a78:	68f9      	ldr	r1, [r7, #12]
 8008a7a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008a7c:	fb01 f303 	mul.w	r3, r1, r3
 8008a80:	441a      	add	r2, r3
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	2200      	movs	r2, #0
 8008a8a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681a      	ldr	r2, [r3, #0]
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	681a      	ldr	r2, [r3, #0]
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a9c:	3b01      	subs	r3, #1
 8008a9e:	68f9      	ldr	r1, [r7, #12]
 8008aa0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008aa2:	fb01 f303 	mul.w	r3, r1, r3
 8008aa6:	441a      	add	r2, r3
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	22ff      	movs	r2, #255	; 0xff
 8008ab0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	22ff      	movs	r2, #255	; 0xff
 8008ab8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d114      	bne.n	8008aec <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	691b      	ldr	r3, [r3, #16]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d01a      	beq.n	8008b00 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	3310      	adds	r3, #16
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f001 f8e0 	bl	8009c94 <xTaskRemoveFromEventList>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d012      	beq.n	8008b00 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008ada:	4b0d      	ldr	r3, [pc, #52]	; (8008b10 <xQueueGenericReset+0xcc>)
 8008adc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ae0:	601a      	str	r2, [r3, #0]
 8008ae2:	f3bf 8f4f 	dsb	sy
 8008ae6:	f3bf 8f6f 	isb	sy
 8008aea:	e009      	b.n	8008b00 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	3310      	adds	r3, #16
 8008af0:	4618      	mov	r0, r3
 8008af2:	f7ff fef3 	bl	80088dc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	3324      	adds	r3, #36	; 0x24
 8008afa:	4618      	mov	r0, r3
 8008afc:	f7ff feee 	bl	80088dc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008b00:	f001 fffa 	bl	800aaf8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008b04:	2301      	movs	r3, #1
}
 8008b06:	4618      	mov	r0, r3
 8008b08:	3710      	adds	r7, #16
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd80      	pop	{r7, pc}
 8008b0e:	bf00      	nop
 8008b10:	e000ed04 	.word	0xe000ed04

08008b14 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b08e      	sub	sp, #56	; 0x38
 8008b18:	af02      	add	r7, sp, #8
 8008b1a:	60f8      	str	r0, [r7, #12]
 8008b1c:	60b9      	str	r1, [r7, #8]
 8008b1e:	607a      	str	r2, [r7, #4]
 8008b20:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d109      	bne.n	8008b3c <xQueueGenericCreateStatic+0x28>
 8008b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b2c:	f383 8811 	msr	BASEPRI, r3
 8008b30:	f3bf 8f6f 	isb	sy
 8008b34:	f3bf 8f4f 	dsb	sy
 8008b38:	62bb      	str	r3, [r7, #40]	; 0x28
 8008b3a:	e7fe      	b.n	8008b3a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d109      	bne.n	8008b56 <xQueueGenericCreateStatic+0x42>
 8008b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b46:	f383 8811 	msr	BASEPRI, r3
 8008b4a:	f3bf 8f6f 	isb	sy
 8008b4e:	f3bf 8f4f 	dsb	sy
 8008b52:	627b      	str	r3, [r7, #36]	; 0x24
 8008b54:	e7fe      	b.n	8008b54 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d002      	beq.n	8008b62 <xQueueGenericCreateStatic+0x4e>
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d001      	beq.n	8008b66 <xQueueGenericCreateStatic+0x52>
 8008b62:	2301      	movs	r3, #1
 8008b64:	e000      	b.n	8008b68 <xQueueGenericCreateStatic+0x54>
 8008b66:	2300      	movs	r3, #0
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d109      	bne.n	8008b80 <xQueueGenericCreateStatic+0x6c>
 8008b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b70:	f383 8811 	msr	BASEPRI, r3
 8008b74:	f3bf 8f6f 	isb	sy
 8008b78:	f3bf 8f4f 	dsb	sy
 8008b7c:	623b      	str	r3, [r7, #32]
 8008b7e:	e7fe      	b.n	8008b7e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d102      	bne.n	8008b8c <xQueueGenericCreateStatic+0x78>
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d101      	bne.n	8008b90 <xQueueGenericCreateStatic+0x7c>
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	e000      	b.n	8008b92 <xQueueGenericCreateStatic+0x7e>
 8008b90:	2300      	movs	r3, #0
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d109      	bne.n	8008baa <xQueueGenericCreateStatic+0x96>
 8008b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b9a:	f383 8811 	msr	BASEPRI, r3
 8008b9e:	f3bf 8f6f 	isb	sy
 8008ba2:	f3bf 8f4f 	dsb	sy
 8008ba6:	61fb      	str	r3, [r7, #28]
 8008ba8:	e7fe      	b.n	8008ba8 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008baa:	2350      	movs	r3, #80	; 0x50
 8008bac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008bae:	697b      	ldr	r3, [r7, #20]
 8008bb0:	2b50      	cmp	r3, #80	; 0x50
 8008bb2:	d009      	beq.n	8008bc8 <xQueueGenericCreateStatic+0xb4>
 8008bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bb8:	f383 8811 	msr	BASEPRI, r3
 8008bbc:	f3bf 8f6f 	isb	sy
 8008bc0:	f3bf 8f4f 	dsb	sy
 8008bc4:	61bb      	str	r3, [r7, #24]
 8008bc6:	e7fe      	b.n	8008bc6 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008bc8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d00d      	beq.n	8008bf0 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008bdc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008be2:	9300      	str	r3, [sp, #0]
 8008be4:	4613      	mov	r3, r2
 8008be6:	687a      	ldr	r2, [r7, #4]
 8008be8:	68b9      	ldr	r1, [r7, #8]
 8008bea:	68f8      	ldr	r0, [r7, #12]
 8008bec:	f000 f805 	bl	8008bfa <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3730      	adds	r7, #48	; 0x30
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}

08008bfa <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008bfa:	b580      	push	{r7, lr}
 8008bfc:	b084      	sub	sp, #16
 8008bfe:	af00      	add	r7, sp, #0
 8008c00:	60f8      	str	r0, [r7, #12]
 8008c02:	60b9      	str	r1, [r7, #8]
 8008c04:	607a      	str	r2, [r7, #4]
 8008c06:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d103      	bne.n	8008c16 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008c0e:	69bb      	ldr	r3, [r7, #24]
 8008c10:	69ba      	ldr	r2, [r7, #24]
 8008c12:	601a      	str	r2, [r3, #0]
 8008c14:	e002      	b.n	8008c1c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008c16:	69bb      	ldr	r3, [r7, #24]
 8008c18:	687a      	ldr	r2, [r7, #4]
 8008c1a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008c1c:	69bb      	ldr	r3, [r7, #24]
 8008c1e:	68fa      	ldr	r2, [r7, #12]
 8008c20:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008c22:	69bb      	ldr	r3, [r7, #24]
 8008c24:	68ba      	ldr	r2, [r7, #8]
 8008c26:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008c28:	2101      	movs	r1, #1
 8008c2a:	69b8      	ldr	r0, [r7, #24]
 8008c2c:	f7ff ff0a 	bl	8008a44 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008c30:	69bb      	ldr	r3, [r7, #24]
 8008c32:	78fa      	ldrb	r2, [r7, #3]
 8008c34:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008c38:	bf00      	nop
 8008c3a:	3710      	adds	r7, #16
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	bd80      	pop	{r7, pc}

08008c40 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b08e      	sub	sp, #56	; 0x38
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	60f8      	str	r0, [r7, #12]
 8008c48:	60b9      	str	r1, [r7, #8]
 8008c4a:	607a      	str	r2, [r7, #4]
 8008c4c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008c4e:	2300      	movs	r3, #0
 8008c50:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d109      	bne.n	8008c70 <xQueueGenericSend+0x30>
 8008c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c60:	f383 8811 	msr	BASEPRI, r3
 8008c64:	f3bf 8f6f 	isb	sy
 8008c68:	f3bf 8f4f 	dsb	sy
 8008c6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8008c6e:	e7fe      	b.n	8008c6e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d103      	bne.n	8008c7e <xQueueGenericSend+0x3e>
 8008c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d101      	bne.n	8008c82 <xQueueGenericSend+0x42>
 8008c7e:	2301      	movs	r3, #1
 8008c80:	e000      	b.n	8008c84 <xQueueGenericSend+0x44>
 8008c82:	2300      	movs	r3, #0
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d109      	bne.n	8008c9c <xQueueGenericSend+0x5c>
 8008c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c8c:	f383 8811 	msr	BASEPRI, r3
 8008c90:	f3bf 8f6f 	isb	sy
 8008c94:	f3bf 8f4f 	dsb	sy
 8008c98:	627b      	str	r3, [r7, #36]	; 0x24
 8008c9a:	e7fe      	b.n	8008c9a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	2b02      	cmp	r3, #2
 8008ca0:	d103      	bne.n	8008caa <xQueueGenericSend+0x6a>
 8008ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ca6:	2b01      	cmp	r3, #1
 8008ca8:	d101      	bne.n	8008cae <xQueueGenericSend+0x6e>
 8008caa:	2301      	movs	r3, #1
 8008cac:	e000      	b.n	8008cb0 <xQueueGenericSend+0x70>
 8008cae:	2300      	movs	r3, #0
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d109      	bne.n	8008cc8 <xQueueGenericSend+0x88>
 8008cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cb8:	f383 8811 	msr	BASEPRI, r3
 8008cbc:	f3bf 8f6f 	isb	sy
 8008cc0:	f3bf 8f4f 	dsb	sy
 8008cc4:	623b      	str	r3, [r7, #32]
 8008cc6:	e7fe      	b.n	8008cc6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008cc8:	f001 f99a 	bl	800a000 <xTaskGetSchedulerState>
 8008ccc:	4603      	mov	r3, r0
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d102      	bne.n	8008cd8 <xQueueGenericSend+0x98>
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d101      	bne.n	8008cdc <xQueueGenericSend+0x9c>
 8008cd8:	2301      	movs	r3, #1
 8008cda:	e000      	b.n	8008cde <xQueueGenericSend+0x9e>
 8008cdc:	2300      	movs	r3, #0
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d109      	bne.n	8008cf6 <xQueueGenericSend+0xb6>
 8008ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ce6:	f383 8811 	msr	BASEPRI, r3
 8008cea:	f3bf 8f6f 	isb	sy
 8008cee:	f3bf 8f4f 	dsb	sy
 8008cf2:	61fb      	str	r3, [r7, #28]
 8008cf4:	e7fe      	b.n	8008cf4 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008cf6:	f001 fed1 	bl	800aa9c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d02:	429a      	cmp	r2, r3
 8008d04:	d302      	bcc.n	8008d0c <xQueueGenericSend+0xcc>
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	2b02      	cmp	r3, #2
 8008d0a:	d129      	bne.n	8008d60 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008d0c:	683a      	ldr	r2, [r7, #0]
 8008d0e:	68b9      	ldr	r1, [r7, #8]
 8008d10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008d12:	f000 f9ff 	bl	8009114 <prvCopyDataToQueue>
 8008d16:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d010      	beq.n	8008d42 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d22:	3324      	adds	r3, #36	; 0x24
 8008d24:	4618      	mov	r0, r3
 8008d26:	f000 ffb5 	bl	8009c94 <xTaskRemoveFromEventList>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d013      	beq.n	8008d58 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008d30:	4b3f      	ldr	r3, [pc, #252]	; (8008e30 <xQueueGenericSend+0x1f0>)
 8008d32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d36:	601a      	str	r2, [r3, #0]
 8008d38:	f3bf 8f4f 	dsb	sy
 8008d3c:	f3bf 8f6f 	isb	sy
 8008d40:	e00a      	b.n	8008d58 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d007      	beq.n	8008d58 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008d48:	4b39      	ldr	r3, [pc, #228]	; (8008e30 <xQueueGenericSend+0x1f0>)
 8008d4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d4e:	601a      	str	r2, [r3, #0]
 8008d50:	f3bf 8f4f 	dsb	sy
 8008d54:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008d58:	f001 fece 	bl	800aaf8 <vPortExitCritical>
				return pdPASS;
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	e063      	b.n	8008e28 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d103      	bne.n	8008d6e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008d66:	f001 fec7 	bl	800aaf8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	e05c      	b.n	8008e28 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008d6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d106      	bne.n	8008d82 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008d74:	f107 0314 	add.w	r3, r7, #20
 8008d78:	4618      	mov	r0, r3
 8008d7a:	f000 ffed 	bl	8009d58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008d7e:	2301      	movs	r3, #1
 8008d80:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008d82:	f001 feb9 	bl	800aaf8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008d86:	f000 fd69 	bl	800985c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008d8a:	f001 fe87 	bl	800aa9c <vPortEnterCritical>
 8008d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008d94:	b25b      	sxtb	r3, r3
 8008d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d9a:	d103      	bne.n	8008da4 <xQueueGenericSend+0x164>
 8008d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d9e:	2200      	movs	r2, #0
 8008da0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008da6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008daa:	b25b      	sxtb	r3, r3
 8008dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008db0:	d103      	bne.n	8008dba <xQueueGenericSend+0x17a>
 8008db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008db4:	2200      	movs	r2, #0
 8008db6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008dba:	f001 fe9d 	bl	800aaf8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008dbe:	1d3a      	adds	r2, r7, #4
 8008dc0:	f107 0314 	add.w	r3, r7, #20
 8008dc4:	4611      	mov	r1, r2
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f000 ffdc 	bl	8009d84 <xTaskCheckForTimeOut>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d124      	bne.n	8008e1c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008dd2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008dd4:	f000 fa96 	bl	8009304 <prvIsQueueFull>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d018      	beq.n	8008e10 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008de0:	3310      	adds	r3, #16
 8008de2:	687a      	ldr	r2, [r7, #4]
 8008de4:	4611      	mov	r1, r2
 8008de6:	4618      	mov	r0, r3
 8008de8:	f000 ff06 	bl	8009bf8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008dec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008dee:	f000 fa21 	bl	8009234 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008df2:	f000 fd41 	bl	8009878 <xTaskResumeAll>
 8008df6:	4603      	mov	r3, r0
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	f47f af7c 	bne.w	8008cf6 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8008dfe:	4b0c      	ldr	r3, [pc, #48]	; (8008e30 <xQueueGenericSend+0x1f0>)
 8008e00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e04:	601a      	str	r2, [r3, #0]
 8008e06:	f3bf 8f4f 	dsb	sy
 8008e0a:	f3bf 8f6f 	isb	sy
 8008e0e:	e772      	b.n	8008cf6 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008e10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e12:	f000 fa0f 	bl	8009234 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008e16:	f000 fd2f 	bl	8009878 <xTaskResumeAll>
 8008e1a:	e76c      	b.n	8008cf6 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008e1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e1e:	f000 fa09 	bl	8009234 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008e22:	f000 fd29 	bl	8009878 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008e26:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	3738      	adds	r7, #56	; 0x38
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bd80      	pop	{r7, pc}
 8008e30:	e000ed04 	.word	0xe000ed04

08008e34 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b08e      	sub	sp, #56	; 0x38
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	60f8      	str	r0, [r7, #12]
 8008e3c:	60b9      	str	r1, [r7, #8]
 8008e3e:	607a      	str	r2, [r7, #4]
 8008e40:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d109      	bne.n	8008e60 <xQueueGenericSendFromISR+0x2c>
 8008e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e50:	f383 8811 	msr	BASEPRI, r3
 8008e54:	f3bf 8f6f 	isb	sy
 8008e58:	f3bf 8f4f 	dsb	sy
 8008e5c:	627b      	str	r3, [r7, #36]	; 0x24
 8008e5e:	e7fe      	b.n	8008e5e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d103      	bne.n	8008e6e <xQueueGenericSendFromISR+0x3a>
 8008e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d101      	bne.n	8008e72 <xQueueGenericSendFromISR+0x3e>
 8008e6e:	2301      	movs	r3, #1
 8008e70:	e000      	b.n	8008e74 <xQueueGenericSendFromISR+0x40>
 8008e72:	2300      	movs	r3, #0
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d109      	bne.n	8008e8c <xQueueGenericSendFromISR+0x58>
 8008e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e7c:	f383 8811 	msr	BASEPRI, r3
 8008e80:	f3bf 8f6f 	isb	sy
 8008e84:	f3bf 8f4f 	dsb	sy
 8008e88:	623b      	str	r3, [r7, #32]
 8008e8a:	e7fe      	b.n	8008e8a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	2b02      	cmp	r3, #2
 8008e90:	d103      	bne.n	8008e9a <xQueueGenericSendFromISR+0x66>
 8008e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e96:	2b01      	cmp	r3, #1
 8008e98:	d101      	bne.n	8008e9e <xQueueGenericSendFromISR+0x6a>
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	e000      	b.n	8008ea0 <xQueueGenericSendFromISR+0x6c>
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d109      	bne.n	8008eb8 <xQueueGenericSendFromISR+0x84>
 8008ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ea8:	f383 8811 	msr	BASEPRI, r3
 8008eac:	f3bf 8f6f 	isb	sy
 8008eb0:	f3bf 8f4f 	dsb	sy
 8008eb4:	61fb      	str	r3, [r7, #28]
 8008eb6:	e7fe      	b.n	8008eb6 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008eb8:	f001 fecc 	bl	800ac54 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008ebc:	f3ef 8211 	mrs	r2, BASEPRI
 8008ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec4:	f383 8811 	msr	BASEPRI, r3
 8008ec8:	f3bf 8f6f 	isb	sy
 8008ecc:	f3bf 8f4f 	dsb	sy
 8008ed0:	61ba      	str	r2, [r7, #24]
 8008ed2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008ed4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ede:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ee0:	429a      	cmp	r2, r3
 8008ee2:	d302      	bcc.n	8008eea <xQueueGenericSendFromISR+0xb6>
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	2b02      	cmp	r3, #2
 8008ee8:	d12c      	bne.n	8008f44 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008ef0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008ef4:	683a      	ldr	r2, [r7, #0]
 8008ef6:	68b9      	ldr	r1, [r7, #8]
 8008ef8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008efa:	f000 f90b 	bl	8009114 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008efe:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f06:	d112      	bne.n	8008f2e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d016      	beq.n	8008f3e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f12:	3324      	adds	r3, #36	; 0x24
 8008f14:	4618      	mov	r0, r3
 8008f16:	f000 febd 	bl	8009c94 <xTaskRemoveFromEventList>
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d00e      	beq.n	8008f3e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d00b      	beq.n	8008f3e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2201      	movs	r2, #1
 8008f2a:	601a      	str	r2, [r3, #0]
 8008f2c:	e007      	b.n	8008f3e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008f2e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008f32:	3301      	adds	r3, #1
 8008f34:	b2db      	uxtb	r3, r3
 8008f36:	b25a      	sxtb	r2, r3
 8008f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008f3e:	2301      	movs	r3, #1
 8008f40:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8008f42:	e001      	b.n	8008f48 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008f44:	2300      	movs	r3, #0
 8008f46:	637b      	str	r3, [r7, #52]	; 0x34
 8008f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f4a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008f4c:	693b      	ldr	r3, [r7, #16]
 8008f4e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008f52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008f54:	4618      	mov	r0, r3
 8008f56:	3738      	adds	r7, #56	; 0x38
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}

08008f5c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b08c      	sub	sp, #48	; 0x30
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	60f8      	str	r0, [r7, #12]
 8008f64:	60b9      	str	r1, [r7, #8]
 8008f66:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008f68:	2300      	movs	r3, #0
 8008f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d109      	bne.n	8008f8a <xQueueReceive+0x2e>
	__asm volatile
 8008f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f7a:	f383 8811 	msr	BASEPRI, r3
 8008f7e:	f3bf 8f6f 	isb	sy
 8008f82:	f3bf 8f4f 	dsb	sy
 8008f86:	623b      	str	r3, [r7, #32]
 8008f88:	e7fe      	b.n	8008f88 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d103      	bne.n	8008f98 <xQueueReceive+0x3c>
 8008f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d101      	bne.n	8008f9c <xQueueReceive+0x40>
 8008f98:	2301      	movs	r3, #1
 8008f9a:	e000      	b.n	8008f9e <xQueueReceive+0x42>
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d109      	bne.n	8008fb6 <xQueueReceive+0x5a>
 8008fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fa6:	f383 8811 	msr	BASEPRI, r3
 8008faa:	f3bf 8f6f 	isb	sy
 8008fae:	f3bf 8f4f 	dsb	sy
 8008fb2:	61fb      	str	r3, [r7, #28]
 8008fb4:	e7fe      	b.n	8008fb4 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008fb6:	f001 f823 	bl	800a000 <xTaskGetSchedulerState>
 8008fba:	4603      	mov	r3, r0
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d102      	bne.n	8008fc6 <xQueueReceive+0x6a>
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d101      	bne.n	8008fca <xQueueReceive+0x6e>
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	e000      	b.n	8008fcc <xQueueReceive+0x70>
 8008fca:	2300      	movs	r3, #0
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d109      	bne.n	8008fe4 <xQueueReceive+0x88>
 8008fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fd4:	f383 8811 	msr	BASEPRI, r3
 8008fd8:	f3bf 8f6f 	isb	sy
 8008fdc:	f3bf 8f4f 	dsb	sy
 8008fe0:	61bb      	str	r3, [r7, #24]
 8008fe2:	e7fe      	b.n	8008fe2 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008fe4:	f001 fd5a 	bl	800aa9c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fec:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d01f      	beq.n	8009034 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008ff4:	68b9      	ldr	r1, [r7, #8]
 8008ff6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ff8:	f000 f8f6 	bl	80091e8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ffe:	1e5a      	subs	r2, r3, #1
 8009000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009002:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009006:	691b      	ldr	r3, [r3, #16]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d00f      	beq.n	800902c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800900c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800900e:	3310      	adds	r3, #16
 8009010:	4618      	mov	r0, r3
 8009012:	f000 fe3f 	bl	8009c94 <xTaskRemoveFromEventList>
 8009016:	4603      	mov	r3, r0
 8009018:	2b00      	cmp	r3, #0
 800901a:	d007      	beq.n	800902c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800901c:	4b3c      	ldr	r3, [pc, #240]	; (8009110 <xQueueReceive+0x1b4>)
 800901e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009022:	601a      	str	r2, [r3, #0]
 8009024:	f3bf 8f4f 	dsb	sy
 8009028:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800902c:	f001 fd64 	bl	800aaf8 <vPortExitCritical>
				return pdPASS;
 8009030:	2301      	movs	r3, #1
 8009032:	e069      	b.n	8009108 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d103      	bne.n	8009042 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800903a:	f001 fd5d 	bl	800aaf8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800903e:	2300      	movs	r3, #0
 8009040:	e062      	b.n	8009108 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009044:	2b00      	cmp	r3, #0
 8009046:	d106      	bne.n	8009056 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009048:	f107 0310 	add.w	r3, r7, #16
 800904c:	4618      	mov	r0, r3
 800904e:	f000 fe83 	bl	8009d58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009052:	2301      	movs	r3, #1
 8009054:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009056:	f001 fd4f 	bl	800aaf8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800905a:	f000 fbff 	bl	800985c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800905e:	f001 fd1d 	bl	800aa9c <vPortEnterCritical>
 8009062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009064:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009068:	b25b      	sxtb	r3, r3
 800906a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800906e:	d103      	bne.n	8009078 <xQueueReceive+0x11c>
 8009070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009072:	2200      	movs	r2, #0
 8009074:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800907a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800907e:	b25b      	sxtb	r3, r3
 8009080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009084:	d103      	bne.n	800908e <xQueueReceive+0x132>
 8009086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009088:	2200      	movs	r2, #0
 800908a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800908e:	f001 fd33 	bl	800aaf8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009092:	1d3a      	adds	r2, r7, #4
 8009094:	f107 0310 	add.w	r3, r7, #16
 8009098:	4611      	mov	r1, r2
 800909a:	4618      	mov	r0, r3
 800909c:	f000 fe72 	bl	8009d84 <xTaskCheckForTimeOut>
 80090a0:	4603      	mov	r3, r0
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d123      	bne.n	80090ee <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80090a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090a8:	f000 f916 	bl	80092d8 <prvIsQueueEmpty>
 80090ac:	4603      	mov	r3, r0
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d017      	beq.n	80090e2 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80090b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090b4:	3324      	adds	r3, #36	; 0x24
 80090b6:	687a      	ldr	r2, [r7, #4]
 80090b8:	4611      	mov	r1, r2
 80090ba:	4618      	mov	r0, r3
 80090bc:	f000 fd9c 	bl	8009bf8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80090c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090c2:	f000 f8b7 	bl	8009234 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80090c6:	f000 fbd7 	bl	8009878 <xTaskResumeAll>
 80090ca:	4603      	mov	r3, r0
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d189      	bne.n	8008fe4 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80090d0:	4b0f      	ldr	r3, [pc, #60]	; (8009110 <xQueueReceive+0x1b4>)
 80090d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090d6:	601a      	str	r2, [r3, #0]
 80090d8:	f3bf 8f4f 	dsb	sy
 80090dc:	f3bf 8f6f 	isb	sy
 80090e0:	e780      	b.n	8008fe4 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80090e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090e4:	f000 f8a6 	bl	8009234 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80090e8:	f000 fbc6 	bl	8009878 <xTaskResumeAll>
 80090ec:	e77a      	b.n	8008fe4 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80090ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090f0:	f000 f8a0 	bl	8009234 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80090f4:	f000 fbc0 	bl	8009878 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80090f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090fa:	f000 f8ed 	bl	80092d8 <prvIsQueueEmpty>
 80090fe:	4603      	mov	r3, r0
 8009100:	2b00      	cmp	r3, #0
 8009102:	f43f af6f 	beq.w	8008fe4 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009106:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009108:	4618      	mov	r0, r3
 800910a:	3730      	adds	r7, #48	; 0x30
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}
 8009110:	e000ed04 	.word	0xe000ed04

08009114 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b086      	sub	sp, #24
 8009118:	af00      	add	r7, sp, #0
 800911a:	60f8      	str	r0, [r7, #12]
 800911c:	60b9      	str	r1, [r7, #8]
 800911e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009120:	2300      	movs	r3, #0
 8009122:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009128:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800912e:	2b00      	cmp	r3, #0
 8009130:	d10d      	bne.n	800914e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d14d      	bne.n	80091d6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	689b      	ldr	r3, [r3, #8]
 800913e:	4618      	mov	r0, r3
 8009140:	f000 ff7c 	bl	800a03c <xTaskPriorityDisinherit>
 8009144:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	2200      	movs	r2, #0
 800914a:	609a      	str	r2, [r3, #8]
 800914c:	e043      	b.n	80091d6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d119      	bne.n	8009188 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	6858      	ldr	r0, [r3, #4]
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800915c:	461a      	mov	r2, r3
 800915e:	68b9      	ldr	r1, [r7, #8]
 8009160:	f001 ffba 	bl	800b0d8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	685a      	ldr	r2, [r3, #4]
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800916c:	441a      	add	r2, r3
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	685a      	ldr	r2, [r3, #4]
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	689b      	ldr	r3, [r3, #8]
 800917a:	429a      	cmp	r2, r3
 800917c:	d32b      	bcc.n	80091d6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681a      	ldr	r2, [r3, #0]
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	605a      	str	r2, [r3, #4]
 8009186:	e026      	b.n	80091d6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	68d8      	ldr	r0, [r3, #12]
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009190:	461a      	mov	r2, r3
 8009192:	68b9      	ldr	r1, [r7, #8]
 8009194:	f001 ffa0 	bl	800b0d8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	68da      	ldr	r2, [r3, #12]
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091a0:	425b      	negs	r3, r3
 80091a2:	441a      	add	r2, r3
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	68da      	ldr	r2, [r3, #12]
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	429a      	cmp	r2, r3
 80091b2:	d207      	bcs.n	80091c4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	689a      	ldr	r2, [r3, #8]
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091bc:	425b      	negs	r3, r3
 80091be:	441a      	add	r2, r3
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2b02      	cmp	r3, #2
 80091c8:	d105      	bne.n	80091d6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80091ca:	693b      	ldr	r3, [r7, #16]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d002      	beq.n	80091d6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80091d0:	693b      	ldr	r3, [r7, #16]
 80091d2:	3b01      	subs	r3, #1
 80091d4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80091d6:	693b      	ldr	r3, [r7, #16]
 80091d8:	1c5a      	adds	r2, r3, #1
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80091de:	697b      	ldr	r3, [r7, #20]
}
 80091e0:	4618      	mov	r0, r3
 80091e2:	3718      	adds	r7, #24
 80091e4:	46bd      	mov	sp, r7
 80091e6:	bd80      	pop	{r7, pc}

080091e8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b082      	sub	sp, #8
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
 80091f0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d018      	beq.n	800922c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	68da      	ldr	r2, [r3, #12]
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009202:	441a      	add	r2, r3
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	68da      	ldr	r2, [r3, #12]
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	689b      	ldr	r3, [r3, #8]
 8009210:	429a      	cmp	r2, r3
 8009212:	d303      	bcc.n	800921c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681a      	ldr	r2, [r3, #0]
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	68d9      	ldr	r1, [r3, #12]
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009224:	461a      	mov	r2, r3
 8009226:	6838      	ldr	r0, [r7, #0]
 8009228:	f001 ff56 	bl	800b0d8 <memcpy>
	}
}
 800922c:	bf00      	nop
 800922e:	3708      	adds	r7, #8
 8009230:	46bd      	mov	sp, r7
 8009232:	bd80      	pop	{r7, pc}

08009234 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b084      	sub	sp, #16
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800923c:	f001 fc2e 	bl	800aa9c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009246:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009248:	e011      	b.n	800926e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800924e:	2b00      	cmp	r3, #0
 8009250:	d012      	beq.n	8009278 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	3324      	adds	r3, #36	; 0x24
 8009256:	4618      	mov	r0, r3
 8009258:	f000 fd1c 	bl	8009c94 <xTaskRemoveFromEventList>
 800925c:	4603      	mov	r3, r0
 800925e:	2b00      	cmp	r3, #0
 8009260:	d001      	beq.n	8009266 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009262:	f000 fdef 	bl	8009e44 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009266:	7bfb      	ldrb	r3, [r7, #15]
 8009268:	3b01      	subs	r3, #1
 800926a:	b2db      	uxtb	r3, r3
 800926c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800926e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009272:	2b00      	cmp	r3, #0
 8009274:	dce9      	bgt.n	800924a <prvUnlockQueue+0x16>
 8009276:	e000      	b.n	800927a <prvUnlockQueue+0x46>
					break;
 8009278:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	22ff      	movs	r2, #255	; 0xff
 800927e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009282:	f001 fc39 	bl	800aaf8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009286:	f001 fc09 	bl	800aa9c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009290:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009292:	e011      	b.n	80092b8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	691b      	ldr	r3, [r3, #16]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d012      	beq.n	80092c2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	3310      	adds	r3, #16
 80092a0:	4618      	mov	r0, r3
 80092a2:	f000 fcf7 	bl	8009c94 <xTaskRemoveFromEventList>
 80092a6:	4603      	mov	r3, r0
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d001      	beq.n	80092b0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80092ac:	f000 fdca 	bl	8009e44 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80092b0:	7bbb      	ldrb	r3, [r7, #14]
 80092b2:	3b01      	subs	r3, #1
 80092b4:	b2db      	uxtb	r3, r3
 80092b6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80092b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	dce9      	bgt.n	8009294 <prvUnlockQueue+0x60>
 80092c0:	e000      	b.n	80092c4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80092c2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	22ff      	movs	r2, #255	; 0xff
 80092c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80092cc:	f001 fc14 	bl	800aaf8 <vPortExitCritical>
}
 80092d0:	bf00      	nop
 80092d2:	3710      	adds	r7, #16
 80092d4:	46bd      	mov	sp, r7
 80092d6:	bd80      	pop	{r7, pc}

080092d8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b084      	sub	sp, #16
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80092e0:	f001 fbdc 	bl	800aa9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d102      	bne.n	80092f2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80092ec:	2301      	movs	r3, #1
 80092ee:	60fb      	str	r3, [r7, #12]
 80092f0:	e001      	b.n	80092f6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80092f2:	2300      	movs	r3, #0
 80092f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80092f6:	f001 fbff 	bl	800aaf8 <vPortExitCritical>

	return xReturn;
 80092fa:	68fb      	ldr	r3, [r7, #12]
}
 80092fc:	4618      	mov	r0, r3
 80092fe:	3710      	adds	r7, #16
 8009300:	46bd      	mov	sp, r7
 8009302:	bd80      	pop	{r7, pc}

08009304 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b084      	sub	sp, #16
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800930c:	f001 fbc6 	bl	800aa9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009318:	429a      	cmp	r2, r3
 800931a:	d102      	bne.n	8009322 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800931c:	2301      	movs	r3, #1
 800931e:	60fb      	str	r3, [r7, #12]
 8009320:	e001      	b.n	8009326 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009322:	2300      	movs	r3, #0
 8009324:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009326:	f001 fbe7 	bl	800aaf8 <vPortExitCritical>

	return xReturn;
 800932a:	68fb      	ldr	r3, [r7, #12]
}
 800932c:	4618      	mov	r0, r3
 800932e:	3710      	adds	r7, #16
 8009330:	46bd      	mov	sp, r7
 8009332:	bd80      	pop	{r7, pc}

08009334 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009334:	b480      	push	{r7}
 8009336:	b085      	sub	sp, #20
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
 800933c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800933e:	2300      	movs	r3, #0
 8009340:	60fb      	str	r3, [r7, #12]
 8009342:	e014      	b.n	800936e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009344:	4a0e      	ldr	r2, [pc, #56]	; (8009380 <vQueueAddToRegistry+0x4c>)
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d10b      	bne.n	8009368 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009350:	490b      	ldr	r1, [pc, #44]	; (8009380 <vQueueAddToRegistry+0x4c>)
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	683a      	ldr	r2, [r7, #0]
 8009356:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800935a:	4a09      	ldr	r2, [pc, #36]	; (8009380 <vQueueAddToRegistry+0x4c>)
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	00db      	lsls	r3, r3, #3
 8009360:	4413      	add	r3, r2
 8009362:	687a      	ldr	r2, [r7, #4]
 8009364:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009366:	e005      	b.n	8009374 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	3301      	adds	r3, #1
 800936c:	60fb      	str	r3, [r7, #12]
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	2b07      	cmp	r3, #7
 8009372:	d9e7      	bls.n	8009344 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009374:	bf00      	nop
 8009376:	3714      	adds	r7, #20
 8009378:	46bd      	mov	sp, r7
 800937a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937e:	4770      	bx	lr
 8009380:	200063c4 	.word	0x200063c4

08009384 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009384:	b580      	push	{r7, lr}
 8009386:	b086      	sub	sp, #24
 8009388:	af00      	add	r7, sp, #0
 800938a:	60f8      	str	r0, [r7, #12]
 800938c:	60b9      	str	r1, [r7, #8]
 800938e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009394:	f001 fb82 	bl	800aa9c <vPortEnterCritical>
 8009398:	697b      	ldr	r3, [r7, #20]
 800939a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800939e:	b25b      	sxtb	r3, r3
 80093a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093a4:	d103      	bne.n	80093ae <vQueueWaitForMessageRestricted+0x2a>
 80093a6:	697b      	ldr	r3, [r7, #20]
 80093a8:	2200      	movs	r2, #0
 80093aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80093ae:	697b      	ldr	r3, [r7, #20]
 80093b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80093b4:	b25b      	sxtb	r3, r3
 80093b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093ba:	d103      	bne.n	80093c4 <vQueueWaitForMessageRestricted+0x40>
 80093bc:	697b      	ldr	r3, [r7, #20]
 80093be:	2200      	movs	r2, #0
 80093c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80093c4:	f001 fb98 	bl	800aaf8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80093c8:	697b      	ldr	r3, [r7, #20]
 80093ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d106      	bne.n	80093de <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80093d0:	697b      	ldr	r3, [r7, #20]
 80093d2:	3324      	adds	r3, #36	; 0x24
 80093d4:	687a      	ldr	r2, [r7, #4]
 80093d6:	68b9      	ldr	r1, [r7, #8]
 80093d8:	4618      	mov	r0, r3
 80093da:	f000 fc31 	bl	8009c40 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80093de:	6978      	ldr	r0, [r7, #20]
 80093e0:	f7ff ff28 	bl	8009234 <prvUnlockQueue>
	}
 80093e4:	bf00      	nop
 80093e6:	3718      	adds	r7, #24
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bd80      	pop	{r7, pc}

080093ec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b08e      	sub	sp, #56	; 0x38
 80093f0:	af04      	add	r7, sp, #16
 80093f2:	60f8      	str	r0, [r7, #12]
 80093f4:	60b9      	str	r1, [r7, #8]
 80093f6:	607a      	str	r2, [r7, #4]
 80093f8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80093fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d109      	bne.n	8009414 <xTaskCreateStatic+0x28>
 8009400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009404:	f383 8811 	msr	BASEPRI, r3
 8009408:	f3bf 8f6f 	isb	sy
 800940c:	f3bf 8f4f 	dsb	sy
 8009410:	623b      	str	r3, [r7, #32]
 8009412:	e7fe      	b.n	8009412 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8009414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009416:	2b00      	cmp	r3, #0
 8009418:	d109      	bne.n	800942e <xTaskCreateStatic+0x42>
 800941a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800941e:	f383 8811 	msr	BASEPRI, r3
 8009422:	f3bf 8f6f 	isb	sy
 8009426:	f3bf 8f4f 	dsb	sy
 800942a:	61fb      	str	r3, [r7, #28]
 800942c:	e7fe      	b.n	800942c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800942e:	2360      	movs	r3, #96	; 0x60
 8009430:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009432:	693b      	ldr	r3, [r7, #16]
 8009434:	2b60      	cmp	r3, #96	; 0x60
 8009436:	d009      	beq.n	800944c <xTaskCreateStatic+0x60>
 8009438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800943c:	f383 8811 	msr	BASEPRI, r3
 8009440:	f3bf 8f6f 	isb	sy
 8009444:	f3bf 8f4f 	dsb	sy
 8009448:	61bb      	str	r3, [r7, #24]
 800944a:	e7fe      	b.n	800944a <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800944c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800944e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009450:	2b00      	cmp	r3, #0
 8009452:	d01e      	beq.n	8009492 <xTaskCreateStatic+0xa6>
 8009454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009456:	2b00      	cmp	r3, #0
 8009458:	d01b      	beq.n	8009492 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800945a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800945c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800945e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009460:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009462:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009466:	2202      	movs	r2, #2
 8009468:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800946c:	2300      	movs	r3, #0
 800946e:	9303      	str	r3, [sp, #12]
 8009470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009472:	9302      	str	r3, [sp, #8]
 8009474:	f107 0314 	add.w	r3, r7, #20
 8009478:	9301      	str	r3, [sp, #4]
 800947a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800947c:	9300      	str	r3, [sp, #0]
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	687a      	ldr	r2, [r7, #4]
 8009482:	68b9      	ldr	r1, [r7, #8]
 8009484:	68f8      	ldr	r0, [r7, #12]
 8009486:	f000 f850 	bl	800952a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800948a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800948c:	f000 f8de 	bl	800964c <prvAddNewTaskToReadyList>
 8009490:	e001      	b.n	8009496 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8009492:	2300      	movs	r3, #0
 8009494:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009496:	697b      	ldr	r3, [r7, #20]
	}
 8009498:	4618      	mov	r0, r3
 800949a:	3728      	adds	r7, #40	; 0x28
 800949c:	46bd      	mov	sp, r7
 800949e:	bd80      	pop	{r7, pc}

080094a0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b08c      	sub	sp, #48	; 0x30
 80094a4:	af04      	add	r7, sp, #16
 80094a6:	60f8      	str	r0, [r7, #12]
 80094a8:	60b9      	str	r1, [r7, #8]
 80094aa:	603b      	str	r3, [r7, #0]
 80094ac:	4613      	mov	r3, r2
 80094ae:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80094b0:	88fb      	ldrh	r3, [r7, #6]
 80094b2:	009b      	lsls	r3, r3, #2
 80094b4:	4618      	mov	r0, r3
 80094b6:	f001 fc0b 	bl	800acd0 <pvPortMalloc>
 80094ba:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80094bc:	697b      	ldr	r3, [r7, #20]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d00e      	beq.n	80094e0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80094c2:	2060      	movs	r0, #96	; 0x60
 80094c4:	f001 fc04 	bl	800acd0 <pvPortMalloc>
 80094c8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80094ca:	69fb      	ldr	r3, [r7, #28]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d003      	beq.n	80094d8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80094d0:	69fb      	ldr	r3, [r7, #28]
 80094d2:	697a      	ldr	r2, [r7, #20]
 80094d4:	631a      	str	r2, [r3, #48]	; 0x30
 80094d6:	e005      	b.n	80094e4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80094d8:	6978      	ldr	r0, [r7, #20]
 80094da:	f001 fcbb 	bl	800ae54 <vPortFree>
 80094de:	e001      	b.n	80094e4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80094e0:	2300      	movs	r3, #0
 80094e2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80094e4:	69fb      	ldr	r3, [r7, #28]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d017      	beq.n	800951a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80094ea:	69fb      	ldr	r3, [r7, #28]
 80094ec:	2200      	movs	r2, #0
 80094ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80094f2:	88fa      	ldrh	r2, [r7, #6]
 80094f4:	2300      	movs	r3, #0
 80094f6:	9303      	str	r3, [sp, #12]
 80094f8:	69fb      	ldr	r3, [r7, #28]
 80094fa:	9302      	str	r3, [sp, #8]
 80094fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094fe:	9301      	str	r3, [sp, #4]
 8009500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009502:	9300      	str	r3, [sp, #0]
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	68b9      	ldr	r1, [r7, #8]
 8009508:	68f8      	ldr	r0, [r7, #12]
 800950a:	f000 f80e 	bl	800952a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800950e:	69f8      	ldr	r0, [r7, #28]
 8009510:	f000 f89c 	bl	800964c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009514:	2301      	movs	r3, #1
 8009516:	61bb      	str	r3, [r7, #24]
 8009518:	e002      	b.n	8009520 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800951a:	f04f 33ff 	mov.w	r3, #4294967295
 800951e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009520:	69bb      	ldr	r3, [r7, #24]
	}
 8009522:	4618      	mov	r0, r3
 8009524:	3720      	adds	r7, #32
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}

0800952a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800952a:	b580      	push	{r7, lr}
 800952c:	b088      	sub	sp, #32
 800952e:	af00      	add	r7, sp, #0
 8009530:	60f8      	str	r0, [r7, #12]
 8009532:	60b9      	str	r1, [r7, #8]
 8009534:	607a      	str	r2, [r7, #4]
 8009536:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800953a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	009b      	lsls	r3, r3, #2
 8009540:	461a      	mov	r2, r3
 8009542:	21a5      	movs	r1, #165	; 0xa5
 8009544:	f001 fdd3 	bl	800b0ee <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800954a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009552:	3b01      	subs	r3, #1
 8009554:	009b      	lsls	r3, r3, #2
 8009556:	4413      	add	r3, r2
 8009558:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800955a:	69bb      	ldr	r3, [r7, #24]
 800955c:	f023 0307 	bic.w	r3, r3, #7
 8009560:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009562:	69bb      	ldr	r3, [r7, #24]
 8009564:	f003 0307 	and.w	r3, r3, #7
 8009568:	2b00      	cmp	r3, #0
 800956a:	d009      	beq.n	8009580 <prvInitialiseNewTask+0x56>
 800956c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009570:	f383 8811 	msr	BASEPRI, r3
 8009574:	f3bf 8f6f 	isb	sy
 8009578:	f3bf 8f4f 	dsb	sy
 800957c:	617b      	str	r3, [r7, #20]
 800957e:	e7fe      	b.n	800957e <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d01f      	beq.n	80095c6 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009586:	2300      	movs	r3, #0
 8009588:	61fb      	str	r3, [r7, #28]
 800958a:	e012      	b.n	80095b2 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800958c:	68ba      	ldr	r2, [r7, #8]
 800958e:	69fb      	ldr	r3, [r7, #28]
 8009590:	4413      	add	r3, r2
 8009592:	7819      	ldrb	r1, [r3, #0]
 8009594:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009596:	69fb      	ldr	r3, [r7, #28]
 8009598:	4413      	add	r3, r2
 800959a:	3334      	adds	r3, #52	; 0x34
 800959c:	460a      	mov	r2, r1
 800959e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80095a0:	68ba      	ldr	r2, [r7, #8]
 80095a2:	69fb      	ldr	r3, [r7, #28]
 80095a4:	4413      	add	r3, r2
 80095a6:	781b      	ldrb	r3, [r3, #0]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d006      	beq.n	80095ba <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80095ac:	69fb      	ldr	r3, [r7, #28]
 80095ae:	3301      	adds	r3, #1
 80095b0:	61fb      	str	r3, [r7, #28]
 80095b2:	69fb      	ldr	r3, [r7, #28]
 80095b4:	2b0f      	cmp	r3, #15
 80095b6:	d9e9      	bls.n	800958c <prvInitialiseNewTask+0x62>
 80095b8:	e000      	b.n	80095bc <prvInitialiseNewTask+0x92>
			{
				break;
 80095ba:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80095bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095be:	2200      	movs	r2, #0
 80095c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80095c4:	e003      	b.n	80095ce <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80095c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095c8:	2200      	movs	r2, #0
 80095ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80095ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095d0:	2b37      	cmp	r3, #55	; 0x37
 80095d2:	d901      	bls.n	80095d8 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80095d4:	2337      	movs	r3, #55	; 0x37
 80095d6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80095d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80095dc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80095de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80095e2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80095e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095e6:	2200      	movs	r2, #0
 80095e8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80095ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095ec:	3304      	adds	r3, #4
 80095ee:	4618      	mov	r0, r3
 80095f0:	f7ff f994 	bl	800891c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80095f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095f6:	3318      	adds	r3, #24
 80095f8:	4618      	mov	r0, r3
 80095fa:	f7ff f98f 	bl	800891c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80095fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009600:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009602:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009606:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800960a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800960c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800960e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009610:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009612:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8009614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009616:	2200      	movs	r2, #0
 8009618:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800961a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800961c:	2200      	movs	r2, #0
 800961e:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009622:	2200      	movs	r2, #0
 8009624:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009628:	683a      	ldr	r2, [r7, #0]
 800962a:	68f9      	ldr	r1, [r7, #12]
 800962c:	69b8      	ldr	r0, [r7, #24]
 800962e:	f001 f90b 	bl	800a848 <pxPortInitialiseStack>
 8009632:	4602      	mov	r2, r0
 8009634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009636:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800963a:	2b00      	cmp	r3, #0
 800963c:	d002      	beq.n	8009644 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800963e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009640:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009642:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009644:	bf00      	nop
 8009646:	3720      	adds	r7, #32
 8009648:	46bd      	mov	sp, r7
 800964a:	bd80      	pop	{r7, pc}

0800964c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b082      	sub	sp, #8
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009654:	f001 fa22 	bl	800aa9c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009658:	4b2d      	ldr	r3, [pc, #180]	; (8009710 <prvAddNewTaskToReadyList+0xc4>)
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	3301      	adds	r3, #1
 800965e:	4a2c      	ldr	r2, [pc, #176]	; (8009710 <prvAddNewTaskToReadyList+0xc4>)
 8009660:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009662:	4b2c      	ldr	r3, [pc, #176]	; (8009714 <prvAddNewTaskToReadyList+0xc8>)
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d109      	bne.n	800967e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800966a:	4a2a      	ldr	r2, [pc, #168]	; (8009714 <prvAddNewTaskToReadyList+0xc8>)
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009670:	4b27      	ldr	r3, [pc, #156]	; (8009710 <prvAddNewTaskToReadyList+0xc4>)
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	2b01      	cmp	r3, #1
 8009676:	d110      	bne.n	800969a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009678:	f000 fc08 	bl	8009e8c <prvInitialiseTaskLists>
 800967c:	e00d      	b.n	800969a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800967e:	4b26      	ldr	r3, [pc, #152]	; (8009718 <prvAddNewTaskToReadyList+0xcc>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d109      	bne.n	800969a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009686:	4b23      	ldr	r3, [pc, #140]	; (8009714 <prvAddNewTaskToReadyList+0xc8>)
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009690:	429a      	cmp	r2, r3
 8009692:	d802      	bhi.n	800969a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009694:	4a1f      	ldr	r2, [pc, #124]	; (8009714 <prvAddNewTaskToReadyList+0xc8>)
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800969a:	4b20      	ldr	r3, [pc, #128]	; (800971c <prvAddNewTaskToReadyList+0xd0>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	3301      	adds	r3, #1
 80096a0:	4a1e      	ldr	r2, [pc, #120]	; (800971c <prvAddNewTaskToReadyList+0xd0>)
 80096a2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80096a4:	4b1d      	ldr	r3, [pc, #116]	; (800971c <prvAddNewTaskToReadyList+0xd0>)
 80096a6:	681a      	ldr	r2, [r3, #0]
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096b0:	4b1b      	ldr	r3, [pc, #108]	; (8009720 <prvAddNewTaskToReadyList+0xd4>)
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	429a      	cmp	r2, r3
 80096b6:	d903      	bls.n	80096c0 <prvAddNewTaskToReadyList+0x74>
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096bc:	4a18      	ldr	r2, [pc, #96]	; (8009720 <prvAddNewTaskToReadyList+0xd4>)
 80096be:	6013      	str	r3, [r2, #0]
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096c4:	4613      	mov	r3, r2
 80096c6:	009b      	lsls	r3, r3, #2
 80096c8:	4413      	add	r3, r2
 80096ca:	009b      	lsls	r3, r3, #2
 80096cc:	4a15      	ldr	r2, [pc, #84]	; (8009724 <prvAddNewTaskToReadyList+0xd8>)
 80096ce:	441a      	add	r2, r3
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	3304      	adds	r3, #4
 80096d4:	4619      	mov	r1, r3
 80096d6:	4610      	mov	r0, r2
 80096d8:	f7ff f92d 	bl	8008936 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80096dc:	f001 fa0c 	bl	800aaf8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80096e0:	4b0d      	ldr	r3, [pc, #52]	; (8009718 <prvAddNewTaskToReadyList+0xcc>)
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d00e      	beq.n	8009706 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80096e8:	4b0a      	ldr	r3, [pc, #40]	; (8009714 <prvAddNewTaskToReadyList+0xc8>)
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096f2:	429a      	cmp	r2, r3
 80096f4:	d207      	bcs.n	8009706 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80096f6:	4b0c      	ldr	r3, [pc, #48]	; (8009728 <prvAddNewTaskToReadyList+0xdc>)
 80096f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096fc:	601a      	str	r2, [r3, #0]
 80096fe:	f3bf 8f4f 	dsb	sy
 8009702:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009706:	bf00      	nop
 8009708:	3708      	adds	r7, #8
 800970a:	46bd      	mov	sp, r7
 800970c:	bd80      	pop	{r7, pc}
 800970e:	bf00      	nop
 8009710:	20000da4 	.word	0x20000da4
 8009714:	200008d0 	.word	0x200008d0
 8009718:	20000db0 	.word	0x20000db0
 800971c:	20000dc0 	.word	0x20000dc0
 8009720:	20000dac 	.word	0x20000dac
 8009724:	200008d4 	.word	0x200008d4
 8009728:	e000ed04 	.word	0xe000ed04

0800972c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800972c:	b580      	push	{r7, lr}
 800972e:	b084      	sub	sp, #16
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009734:	2300      	movs	r3, #0
 8009736:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d016      	beq.n	800976c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800973e:	4b13      	ldr	r3, [pc, #76]	; (800978c <vTaskDelay+0x60>)
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d009      	beq.n	800975a <vTaskDelay+0x2e>
 8009746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800974a:	f383 8811 	msr	BASEPRI, r3
 800974e:	f3bf 8f6f 	isb	sy
 8009752:	f3bf 8f4f 	dsb	sy
 8009756:	60bb      	str	r3, [r7, #8]
 8009758:	e7fe      	b.n	8009758 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800975a:	f000 f87f 	bl	800985c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800975e:	2100      	movs	r1, #0
 8009760:	6878      	ldr	r0, [r7, #4]
 8009762:	f000 fcd7 	bl	800a114 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009766:	f000 f887 	bl	8009878 <xTaskResumeAll>
 800976a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d107      	bne.n	8009782 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8009772:	4b07      	ldr	r3, [pc, #28]	; (8009790 <vTaskDelay+0x64>)
 8009774:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009778:	601a      	str	r2, [r3, #0]
 800977a:	f3bf 8f4f 	dsb	sy
 800977e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009782:	bf00      	nop
 8009784:	3710      	adds	r7, #16
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}
 800978a:	bf00      	nop
 800978c:	20000dcc 	.word	0x20000dcc
 8009790:	e000ed04 	.word	0xe000ed04

08009794 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b08a      	sub	sp, #40	; 0x28
 8009798:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800979a:	2300      	movs	r3, #0
 800979c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800979e:	2300      	movs	r3, #0
 80097a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80097a2:	463a      	mov	r2, r7
 80097a4:	1d39      	adds	r1, r7, #4
 80097a6:	f107 0308 	add.w	r3, r7, #8
 80097aa:	4618      	mov	r0, r3
 80097ac:	f7ff f862 	bl	8008874 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80097b0:	6839      	ldr	r1, [r7, #0]
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	68ba      	ldr	r2, [r7, #8]
 80097b6:	9202      	str	r2, [sp, #8]
 80097b8:	9301      	str	r3, [sp, #4]
 80097ba:	2300      	movs	r3, #0
 80097bc:	9300      	str	r3, [sp, #0]
 80097be:	2300      	movs	r3, #0
 80097c0:	460a      	mov	r2, r1
 80097c2:	4920      	ldr	r1, [pc, #128]	; (8009844 <vTaskStartScheduler+0xb0>)
 80097c4:	4820      	ldr	r0, [pc, #128]	; (8009848 <vTaskStartScheduler+0xb4>)
 80097c6:	f7ff fe11 	bl	80093ec <xTaskCreateStatic>
 80097ca:	4602      	mov	r2, r0
 80097cc:	4b1f      	ldr	r3, [pc, #124]	; (800984c <vTaskStartScheduler+0xb8>)
 80097ce:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80097d0:	4b1e      	ldr	r3, [pc, #120]	; (800984c <vTaskStartScheduler+0xb8>)
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d002      	beq.n	80097de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80097d8:	2301      	movs	r3, #1
 80097da:	617b      	str	r3, [r7, #20]
 80097dc:	e001      	b.n	80097e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80097de:	2300      	movs	r3, #0
 80097e0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80097e2:	697b      	ldr	r3, [r7, #20]
 80097e4:	2b01      	cmp	r3, #1
 80097e6:	d102      	bne.n	80097ee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80097e8:	f000 fce8 	bl	800a1bc <xTimerCreateTimerTask>
 80097ec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80097ee:	697b      	ldr	r3, [r7, #20]
 80097f0:	2b01      	cmp	r3, #1
 80097f2:	d115      	bne.n	8009820 <vTaskStartScheduler+0x8c>
 80097f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097f8:	f383 8811 	msr	BASEPRI, r3
 80097fc:	f3bf 8f6f 	isb	sy
 8009800:	f3bf 8f4f 	dsb	sy
 8009804:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009806:	4b12      	ldr	r3, [pc, #72]	; (8009850 <vTaskStartScheduler+0xbc>)
 8009808:	f04f 32ff 	mov.w	r2, #4294967295
 800980c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800980e:	4b11      	ldr	r3, [pc, #68]	; (8009854 <vTaskStartScheduler+0xc0>)
 8009810:	2201      	movs	r2, #1
 8009812:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009814:	4b10      	ldr	r3, [pc, #64]	; (8009858 <vTaskStartScheduler+0xc4>)
 8009816:	2200      	movs	r2, #0
 8009818:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800981a:	f001 f8a1 	bl	800a960 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800981e:	e00d      	b.n	800983c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009820:	697b      	ldr	r3, [r7, #20]
 8009822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009826:	d109      	bne.n	800983c <vTaskStartScheduler+0xa8>
 8009828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800982c:	f383 8811 	msr	BASEPRI, r3
 8009830:	f3bf 8f6f 	isb	sy
 8009834:	f3bf 8f4f 	dsb	sy
 8009838:	60fb      	str	r3, [r7, #12]
 800983a:	e7fe      	b.n	800983a <vTaskStartScheduler+0xa6>
}
 800983c:	bf00      	nop
 800983e:	3718      	adds	r7, #24
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}
 8009844:	0800ecac 	.word	0x0800ecac
 8009848:	08009e5d 	.word	0x08009e5d
 800984c:	20000dc8 	.word	0x20000dc8
 8009850:	20000dc4 	.word	0x20000dc4
 8009854:	20000db0 	.word	0x20000db0
 8009858:	20000da8 	.word	0x20000da8

0800985c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800985c:	b480      	push	{r7}
 800985e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009860:	4b04      	ldr	r3, [pc, #16]	; (8009874 <vTaskSuspendAll+0x18>)
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	3301      	adds	r3, #1
 8009866:	4a03      	ldr	r2, [pc, #12]	; (8009874 <vTaskSuspendAll+0x18>)
 8009868:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800986a:	bf00      	nop
 800986c:	46bd      	mov	sp, r7
 800986e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009872:	4770      	bx	lr
 8009874:	20000dcc 	.word	0x20000dcc

08009878 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b084      	sub	sp, #16
 800987c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800987e:	2300      	movs	r3, #0
 8009880:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009882:	2300      	movs	r3, #0
 8009884:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009886:	4b41      	ldr	r3, [pc, #260]	; (800998c <xTaskResumeAll+0x114>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d109      	bne.n	80098a2 <xTaskResumeAll+0x2a>
 800988e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009892:	f383 8811 	msr	BASEPRI, r3
 8009896:	f3bf 8f6f 	isb	sy
 800989a:	f3bf 8f4f 	dsb	sy
 800989e:	603b      	str	r3, [r7, #0]
 80098a0:	e7fe      	b.n	80098a0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80098a2:	f001 f8fb 	bl	800aa9c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80098a6:	4b39      	ldr	r3, [pc, #228]	; (800998c <xTaskResumeAll+0x114>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	3b01      	subs	r3, #1
 80098ac:	4a37      	ldr	r2, [pc, #220]	; (800998c <xTaskResumeAll+0x114>)
 80098ae:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80098b0:	4b36      	ldr	r3, [pc, #216]	; (800998c <xTaskResumeAll+0x114>)
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d162      	bne.n	800997e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80098b8:	4b35      	ldr	r3, [pc, #212]	; (8009990 <xTaskResumeAll+0x118>)
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d05e      	beq.n	800997e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80098c0:	e02f      	b.n	8009922 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098c2:	4b34      	ldr	r3, [pc, #208]	; (8009994 <xTaskResumeAll+0x11c>)
 80098c4:	68db      	ldr	r3, [r3, #12]
 80098c6:	68db      	ldr	r3, [r3, #12]
 80098c8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	3318      	adds	r3, #24
 80098ce:	4618      	mov	r0, r3
 80098d0:	f7ff f88e 	bl	80089f0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	3304      	adds	r3, #4
 80098d8:	4618      	mov	r0, r3
 80098da:	f7ff f889 	bl	80089f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098e2:	4b2d      	ldr	r3, [pc, #180]	; (8009998 <xTaskResumeAll+0x120>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	429a      	cmp	r2, r3
 80098e8:	d903      	bls.n	80098f2 <xTaskResumeAll+0x7a>
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098ee:	4a2a      	ldr	r2, [pc, #168]	; (8009998 <xTaskResumeAll+0x120>)
 80098f0:	6013      	str	r3, [r2, #0]
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098f6:	4613      	mov	r3, r2
 80098f8:	009b      	lsls	r3, r3, #2
 80098fa:	4413      	add	r3, r2
 80098fc:	009b      	lsls	r3, r3, #2
 80098fe:	4a27      	ldr	r2, [pc, #156]	; (800999c <xTaskResumeAll+0x124>)
 8009900:	441a      	add	r2, r3
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	3304      	adds	r3, #4
 8009906:	4619      	mov	r1, r3
 8009908:	4610      	mov	r0, r2
 800990a:	f7ff f814 	bl	8008936 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009912:	4b23      	ldr	r3, [pc, #140]	; (80099a0 <xTaskResumeAll+0x128>)
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009918:	429a      	cmp	r2, r3
 800991a:	d302      	bcc.n	8009922 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800991c:	4b21      	ldr	r3, [pc, #132]	; (80099a4 <xTaskResumeAll+0x12c>)
 800991e:	2201      	movs	r2, #1
 8009920:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009922:	4b1c      	ldr	r3, [pc, #112]	; (8009994 <xTaskResumeAll+0x11c>)
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d1cb      	bne.n	80098c2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d001      	beq.n	8009934 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009930:	f000 fb46 	bl	8009fc0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009934:	4b1c      	ldr	r3, [pc, #112]	; (80099a8 <xTaskResumeAll+0x130>)
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d010      	beq.n	8009962 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009940:	f000 f846 	bl	80099d0 <xTaskIncrementTick>
 8009944:	4603      	mov	r3, r0
 8009946:	2b00      	cmp	r3, #0
 8009948:	d002      	beq.n	8009950 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800994a:	4b16      	ldr	r3, [pc, #88]	; (80099a4 <xTaskResumeAll+0x12c>)
 800994c:	2201      	movs	r2, #1
 800994e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	3b01      	subs	r3, #1
 8009954:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d1f1      	bne.n	8009940 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800995c:	4b12      	ldr	r3, [pc, #72]	; (80099a8 <xTaskResumeAll+0x130>)
 800995e:	2200      	movs	r2, #0
 8009960:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009962:	4b10      	ldr	r3, [pc, #64]	; (80099a4 <xTaskResumeAll+0x12c>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d009      	beq.n	800997e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800996a:	2301      	movs	r3, #1
 800996c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800996e:	4b0f      	ldr	r3, [pc, #60]	; (80099ac <xTaskResumeAll+0x134>)
 8009970:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009974:	601a      	str	r2, [r3, #0]
 8009976:	f3bf 8f4f 	dsb	sy
 800997a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800997e:	f001 f8bb 	bl	800aaf8 <vPortExitCritical>

	return xAlreadyYielded;
 8009982:	68bb      	ldr	r3, [r7, #8]
}
 8009984:	4618      	mov	r0, r3
 8009986:	3710      	adds	r7, #16
 8009988:	46bd      	mov	sp, r7
 800998a:	bd80      	pop	{r7, pc}
 800998c:	20000dcc 	.word	0x20000dcc
 8009990:	20000da4 	.word	0x20000da4
 8009994:	20000d64 	.word	0x20000d64
 8009998:	20000dac 	.word	0x20000dac
 800999c:	200008d4 	.word	0x200008d4
 80099a0:	200008d0 	.word	0x200008d0
 80099a4:	20000db8 	.word	0x20000db8
 80099a8:	20000db4 	.word	0x20000db4
 80099ac:	e000ed04 	.word	0xe000ed04

080099b0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80099b0:	b480      	push	{r7}
 80099b2:	b083      	sub	sp, #12
 80099b4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80099b6:	4b05      	ldr	r3, [pc, #20]	; (80099cc <xTaskGetTickCount+0x1c>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80099bc:	687b      	ldr	r3, [r7, #4]
}
 80099be:	4618      	mov	r0, r3
 80099c0:	370c      	adds	r7, #12
 80099c2:	46bd      	mov	sp, r7
 80099c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c8:	4770      	bx	lr
 80099ca:	bf00      	nop
 80099cc:	20000da8 	.word	0x20000da8

080099d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b086      	sub	sp, #24
 80099d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80099d6:	2300      	movs	r3, #0
 80099d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80099da:	4b4e      	ldr	r3, [pc, #312]	; (8009b14 <xTaskIncrementTick+0x144>)
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	f040 8088 	bne.w	8009af4 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80099e4:	4b4c      	ldr	r3, [pc, #304]	; (8009b18 <xTaskIncrementTick+0x148>)
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	3301      	adds	r3, #1
 80099ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80099ec:	4a4a      	ldr	r2, [pc, #296]	; (8009b18 <xTaskIncrementTick+0x148>)
 80099ee:	693b      	ldr	r3, [r7, #16]
 80099f0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80099f2:	693b      	ldr	r3, [r7, #16]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d11f      	bne.n	8009a38 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80099f8:	4b48      	ldr	r3, [pc, #288]	; (8009b1c <xTaskIncrementTick+0x14c>)
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d009      	beq.n	8009a16 <xTaskIncrementTick+0x46>
 8009a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a06:	f383 8811 	msr	BASEPRI, r3
 8009a0a:	f3bf 8f6f 	isb	sy
 8009a0e:	f3bf 8f4f 	dsb	sy
 8009a12:	603b      	str	r3, [r7, #0]
 8009a14:	e7fe      	b.n	8009a14 <xTaskIncrementTick+0x44>
 8009a16:	4b41      	ldr	r3, [pc, #260]	; (8009b1c <xTaskIncrementTick+0x14c>)
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	60fb      	str	r3, [r7, #12]
 8009a1c:	4b40      	ldr	r3, [pc, #256]	; (8009b20 <xTaskIncrementTick+0x150>)
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	4a3e      	ldr	r2, [pc, #248]	; (8009b1c <xTaskIncrementTick+0x14c>)
 8009a22:	6013      	str	r3, [r2, #0]
 8009a24:	4a3e      	ldr	r2, [pc, #248]	; (8009b20 <xTaskIncrementTick+0x150>)
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	6013      	str	r3, [r2, #0]
 8009a2a:	4b3e      	ldr	r3, [pc, #248]	; (8009b24 <xTaskIncrementTick+0x154>)
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	3301      	adds	r3, #1
 8009a30:	4a3c      	ldr	r2, [pc, #240]	; (8009b24 <xTaskIncrementTick+0x154>)
 8009a32:	6013      	str	r3, [r2, #0]
 8009a34:	f000 fac4 	bl	8009fc0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009a38:	4b3b      	ldr	r3, [pc, #236]	; (8009b28 <xTaskIncrementTick+0x158>)
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	693a      	ldr	r2, [r7, #16]
 8009a3e:	429a      	cmp	r2, r3
 8009a40:	d349      	bcc.n	8009ad6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a42:	4b36      	ldr	r3, [pc, #216]	; (8009b1c <xTaskIncrementTick+0x14c>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d104      	bne.n	8009a56 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a4c:	4b36      	ldr	r3, [pc, #216]	; (8009b28 <xTaskIncrementTick+0x158>)
 8009a4e:	f04f 32ff 	mov.w	r2, #4294967295
 8009a52:	601a      	str	r2, [r3, #0]
					break;
 8009a54:	e03f      	b.n	8009ad6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a56:	4b31      	ldr	r3, [pc, #196]	; (8009b1c <xTaskIncrementTick+0x14c>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	68db      	ldr	r3, [r3, #12]
 8009a5c:	68db      	ldr	r3, [r3, #12]
 8009a5e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009a60:	68bb      	ldr	r3, [r7, #8]
 8009a62:	685b      	ldr	r3, [r3, #4]
 8009a64:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009a66:	693a      	ldr	r2, [r7, #16]
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	429a      	cmp	r2, r3
 8009a6c:	d203      	bcs.n	8009a76 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009a6e:	4a2e      	ldr	r2, [pc, #184]	; (8009b28 <xTaskIncrementTick+0x158>)
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009a74:	e02f      	b.n	8009ad6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a76:	68bb      	ldr	r3, [r7, #8]
 8009a78:	3304      	adds	r3, #4
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f7fe ffb8 	bl	80089f0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009a80:	68bb      	ldr	r3, [r7, #8]
 8009a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d004      	beq.n	8009a92 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009a88:	68bb      	ldr	r3, [r7, #8]
 8009a8a:	3318      	adds	r3, #24
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	f7fe ffaf 	bl	80089f0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a96:	4b25      	ldr	r3, [pc, #148]	; (8009b2c <xTaskIncrementTick+0x15c>)
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	429a      	cmp	r2, r3
 8009a9c:	d903      	bls.n	8009aa6 <xTaskIncrementTick+0xd6>
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aa2:	4a22      	ldr	r2, [pc, #136]	; (8009b2c <xTaskIncrementTick+0x15c>)
 8009aa4:	6013      	str	r3, [r2, #0]
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009aaa:	4613      	mov	r3, r2
 8009aac:	009b      	lsls	r3, r3, #2
 8009aae:	4413      	add	r3, r2
 8009ab0:	009b      	lsls	r3, r3, #2
 8009ab2:	4a1f      	ldr	r2, [pc, #124]	; (8009b30 <xTaskIncrementTick+0x160>)
 8009ab4:	441a      	add	r2, r3
 8009ab6:	68bb      	ldr	r3, [r7, #8]
 8009ab8:	3304      	adds	r3, #4
 8009aba:	4619      	mov	r1, r3
 8009abc:	4610      	mov	r0, r2
 8009abe:	f7fe ff3a 	bl	8008936 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009ac2:	68bb      	ldr	r3, [r7, #8]
 8009ac4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ac6:	4b1b      	ldr	r3, [pc, #108]	; (8009b34 <xTaskIncrementTick+0x164>)
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009acc:	429a      	cmp	r2, r3
 8009ace:	d3b8      	bcc.n	8009a42 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009ad4:	e7b5      	b.n	8009a42 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009ad6:	4b17      	ldr	r3, [pc, #92]	; (8009b34 <xTaskIncrementTick+0x164>)
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009adc:	4914      	ldr	r1, [pc, #80]	; (8009b30 <xTaskIncrementTick+0x160>)
 8009ade:	4613      	mov	r3, r2
 8009ae0:	009b      	lsls	r3, r3, #2
 8009ae2:	4413      	add	r3, r2
 8009ae4:	009b      	lsls	r3, r3, #2
 8009ae6:	440b      	add	r3, r1
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	2b01      	cmp	r3, #1
 8009aec:	d907      	bls.n	8009afe <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8009aee:	2301      	movs	r3, #1
 8009af0:	617b      	str	r3, [r7, #20]
 8009af2:	e004      	b.n	8009afe <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009af4:	4b10      	ldr	r3, [pc, #64]	; (8009b38 <xTaskIncrementTick+0x168>)
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	3301      	adds	r3, #1
 8009afa:	4a0f      	ldr	r2, [pc, #60]	; (8009b38 <xTaskIncrementTick+0x168>)
 8009afc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009afe:	4b0f      	ldr	r3, [pc, #60]	; (8009b3c <xTaskIncrementTick+0x16c>)
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d001      	beq.n	8009b0a <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8009b06:	2301      	movs	r3, #1
 8009b08:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009b0a:	697b      	ldr	r3, [r7, #20]
}
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	3718      	adds	r7, #24
 8009b10:	46bd      	mov	sp, r7
 8009b12:	bd80      	pop	{r7, pc}
 8009b14:	20000dcc 	.word	0x20000dcc
 8009b18:	20000da8 	.word	0x20000da8
 8009b1c:	20000d5c 	.word	0x20000d5c
 8009b20:	20000d60 	.word	0x20000d60
 8009b24:	20000dbc 	.word	0x20000dbc
 8009b28:	20000dc4 	.word	0x20000dc4
 8009b2c:	20000dac 	.word	0x20000dac
 8009b30:	200008d4 	.word	0x200008d4
 8009b34:	200008d0 	.word	0x200008d0
 8009b38:	20000db4 	.word	0x20000db4
 8009b3c:	20000db8 	.word	0x20000db8

08009b40 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009b40:	b480      	push	{r7}
 8009b42:	b085      	sub	sp, #20
 8009b44:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009b46:	4b27      	ldr	r3, [pc, #156]	; (8009be4 <vTaskSwitchContext+0xa4>)
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d003      	beq.n	8009b56 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009b4e:	4b26      	ldr	r3, [pc, #152]	; (8009be8 <vTaskSwitchContext+0xa8>)
 8009b50:	2201      	movs	r2, #1
 8009b52:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009b54:	e040      	b.n	8009bd8 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8009b56:	4b24      	ldr	r3, [pc, #144]	; (8009be8 <vTaskSwitchContext+0xa8>)
 8009b58:	2200      	movs	r2, #0
 8009b5a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b5c:	4b23      	ldr	r3, [pc, #140]	; (8009bec <vTaskSwitchContext+0xac>)
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	60fb      	str	r3, [r7, #12]
 8009b62:	e00f      	b.n	8009b84 <vTaskSwitchContext+0x44>
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d109      	bne.n	8009b7e <vTaskSwitchContext+0x3e>
 8009b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b6e:	f383 8811 	msr	BASEPRI, r3
 8009b72:	f3bf 8f6f 	isb	sy
 8009b76:	f3bf 8f4f 	dsb	sy
 8009b7a:	607b      	str	r3, [r7, #4]
 8009b7c:	e7fe      	b.n	8009b7c <vTaskSwitchContext+0x3c>
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	3b01      	subs	r3, #1
 8009b82:	60fb      	str	r3, [r7, #12]
 8009b84:	491a      	ldr	r1, [pc, #104]	; (8009bf0 <vTaskSwitchContext+0xb0>)
 8009b86:	68fa      	ldr	r2, [r7, #12]
 8009b88:	4613      	mov	r3, r2
 8009b8a:	009b      	lsls	r3, r3, #2
 8009b8c:	4413      	add	r3, r2
 8009b8e:	009b      	lsls	r3, r3, #2
 8009b90:	440b      	add	r3, r1
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d0e5      	beq.n	8009b64 <vTaskSwitchContext+0x24>
 8009b98:	68fa      	ldr	r2, [r7, #12]
 8009b9a:	4613      	mov	r3, r2
 8009b9c:	009b      	lsls	r3, r3, #2
 8009b9e:	4413      	add	r3, r2
 8009ba0:	009b      	lsls	r3, r3, #2
 8009ba2:	4a13      	ldr	r2, [pc, #76]	; (8009bf0 <vTaskSwitchContext+0xb0>)
 8009ba4:	4413      	add	r3, r2
 8009ba6:	60bb      	str	r3, [r7, #8]
 8009ba8:	68bb      	ldr	r3, [r7, #8]
 8009baa:	685b      	ldr	r3, [r3, #4]
 8009bac:	685a      	ldr	r2, [r3, #4]
 8009bae:	68bb      	ldr	r3, [r7, #8]
 8009bb0:	605a      	str	r2, [r3, #4]
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	685a      	ldr	r2, [r3, #4]
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	3308      	adds	r3, #8
 8009bba:	429a      	cmp	r2, r3
 8009bbc:	d104      	bne.n	8009bc8 <vTaskSwitchContext+0x88>
 8009bbe:	68bb      	ldr	r3, [r7, #8]
 8009bc0:	685b      	ldr	r3, [r3, #4]
 8009bc2:	685a      	ldr	r2, [r3, #4]
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	605a      	str	r2, [r3, #4]
 8009bc8:	68bb      	ldr	r3, [r7, #8]
 8009bca:	685b      	ldr	r3, [r3, #4]
 8009bcc:	68db      	ldr	r3, [r3, #12]
 8009bce:	4a09      	ldr	r2, [pc, #36]	; (8009bf4 <vTaskSwitchContext+0xb4>)
 8009bd0:	6013      	str	r3, [r2, #0]
 8009bd2:	4a06      	ldr	r2, [pc, #24]	; (8009bec <vTaskSwitchContext+0xac>)
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	6013      	str	r3, [r2, #0]
}
 8009bd8:	bf00      	nop
 8009bda:	3714      	adds	r7, #20
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be2:	4770      	bx	lr
 8009be4:	20000dcc 	.word	0x20000dcc
 8009be8:	20000db8 	.word	0x20000db8
 8009bec:	20000dac 	.word	0x20000dac
 8009bf0:	200008d4 	.word	0x200008d4
 8009bf4:	200008d0 	.word	0x200008d0

08009bf8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b084      	sub	sp, #16
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
 8009c00:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d109      	bne.n	8009c1c <vTaskPlaceOnEventList+0x24>
 8009c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c0c:	f383 8811 	msr	BASEPRI, r3
 8009c10:	f3bf 8f6f 	isb	sy
 8009c14:	f3bf 8f4f 	dsb	sy
 8009c18:	60fb      	str	r3, [r7, #12]
 8009c1a:	e7fe      	b.n	8009c1a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009c1c:	4b07      	ldr	r3, [pc, #28]	; (8009c3c <vTaskPlaceOnEventList+0x44>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	3318      	adds	r3, #24
 8009c22:	4619      	mov	r1, r3
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	f7fe feaa 	bl	800897e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009c2a:	2101      	movs	r1, #1
 8009c2c:	6838      	ldr	r0, [r7, #0]
 8009c2e:	f000 fa71 	bl	800a114 <prvAddCurrentTaskToDelayedList>
}
 8009c32:	bf00      	nop
 8009c34:	3710      	adds	r7, #16
 8009c36:	46bd      	mov	sp, r7
 8009c38:	bd80      	pop	{r7, pc}
 8009c3a:	bf00      	nop
 8009c3c:	200008d0 	.word	0x200008d0

08009c40 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b086      	sub	sp, #24
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	60f8      	str	r0, [r7, #12]
 8009c48:	60b9      	str	r1, [r7, #8]
 8009c4a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d109      	bne.n	8009c66 <vTaskPlaceOnEventListRestricted+0x26>
 8009c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c56:	f383 8811 	msr	BASEPRI, r3
 8009c5a:	f3bf 8f6f 	isb	sy
 8009c5e:	f3bf 8f4f 	dsb	sy
 8009c62:	617b      	str	r3, [r7, #20]
 8009c64:	e7fe      	b.n	8009c64 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009c66:	4b0a      	ldr	r3, [pc, #40]	; (8009c90 <vTaskPlaceOnEventListRestricted+0x50>)
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	3318      	adds	r3, #24
 8009c6c:	4619      	mov	r1, r3
 8009c6e:	68f8      	ldr	r0, [r7, #12]
 8009c70:	f7fe fe61 	bl	8008936 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d002      	beq.n	8009c80 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8009c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8009c7e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009c80:	6879      	ldr	r1, [r7, #4]
 8009c82:	68b8      	ldr	r0, [r7, #8]
 8009c84:	f000 fa46 	bl	800a114 <prvAddCurrentTaskToDelayedList>
	}
 8009c88:	bf00      	nop
 8009c8a:	3718      	adds	r7, #24
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	bd80      	pop	{r7, pc}
 8009c90:	200008d0 	.word	0x200008d0

08009c94 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b086      	sub	sp, #24
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	68db      	ldr	r3, [r3, #12]
 8009ca0:	68db      	ldr	r3, [r3, #12]
 8009ca2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009ca4:	693b      	ldr	r3, [r7, #16]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d109      	bne.n	8009cbe <xTaskRemoveFromEventList+0x2a>
 8009caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cae:	f383 8811 	msr	BASEPRI, r3
 8009cb2:	f3bf 8f6f 	isb	sy
 8009cb6:	f3bf 8f4f 	dsb	sy
 8009cba:	60fb      	str	r3, [r7, #12]
 8009cbc:	e7fe      	b.n	8009cbc <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009cbe:	693b      	ldr	r3, [r7, #16]
 8009cc0:	3318      	adds	r3, #24
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	f7fe fe94 	bl	80089f0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009cc8:	4b1d      	ldr	r3, [pc, #116]	; (8009d40 <xTaskRemoveFromEventList+0xac>)
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d11d      	bne.n	8009d0c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009cd0:	693b      	ldr	r3, [r7, #16]
 8009cd2:	3304      	adds	r3, #4
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	f7fe fe8b 	bl	80089f0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009cda:	693b      	ldr	r3, [r7, #16]
 8009cdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cde:	4b19      	ldr	r3, [pc, #100]	; (8009d44 <xTaskRemoveFromEventList+0xb0>)
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	429a      	cmp	r2, r3
 8009ce4:	d903      	bls.n	8009cee <xTaskRemoveFromEventList+0x5a>
 8009ce6:	693b      	ldr	r3, [r7, #16]
 8009ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cea:	4a16      	ldr	r2, [pc, #88]	; (8009d44 <xTaskRemoveFromEventList+0xb0>)
 8009cec:	6013      	str	r3, [r2, #0]
 8009cee:	693b      	ldr	r3, [r7, #16]
 8009cf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cf2:	4613      	mov	r3, r2
 8009cf4:	009b      	lsls	r3, r3, #2
 8009cf6:	4413      	add	r3, r2
 8009cf8:	009b      	lsls	r3, r3, #2
 8009cfa:	4a13      	ldr	r2, [pc, #76]	; (8009d48 <xTaskRemoveFromEventList+0xb4>)
 8009cfc:	441a      	add	r2, r3
 8009cfe:	693b      	ldr	r3, [r7, #16]
 8009d00:	3304      	adds	r3, #4
 8009d02:	4619      	mov	r1, r3
 8009d04:	4610      	mov	r0, r2
 8009d06:	f7fe fe16 	bl	8008936 <vListInsertEnd>
 8009d0a:	e005      	b.n	8009d18 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009d0c:	693b      	ldr	r3, [r7, #16]
 8009d0e:	3318      	adds	r3, #24
 8009d10:	4619      	mov	r1, r3
 8009d12:	480e      	ldr	r0, [pc, #56]	; (8009d4c <xTaskRemoveFromEventList+0xb8>)
 8009d14:	f7fe fe0f 	bl	8008936 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009d18:	693b      	ldr	r3, [r7, #16]
 8009d1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d1c:	4b0c      	ldr	r3, [pc, #48]	; (8009d50 <xTaskRemoveFromEventList+0xbc>)
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d22:	429a      	cmp	r2, r3
 8009d24:	d905      	bls.n	8009d32 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009d26:	2301      	movs	r3, #1
 8009d28:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009d2a:	4b0a      	ldr	r3, [pc, #40]	; (8009d54 <xTaskRemoveFromEventList+0xc0>)
 8009d2c:	2201      	movs	r2, #1
 8009d2e:	601a      	str	r2, [r3, #0]
 8009d30:	e001      	b.n	8009d36 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8009d32:	2300      	movs	r3, #0
 8009d34:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009d36:	697b      	ldr	r3, [r7, #20]
}
 8009d38:	4618      	mov	r0, r3
 8009d3a:	3718      	adds	r7, #24
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bd80      	pop	{r7, pc}
 8009d40:	20000dcc 	.word	0x20000dcc
 8009d44:	20000dac 	.word	0x20000dac
 8009d48:	200008d4 	.word	0x200008d4
 8009d4c:	20000d64 	.word	0x20000d64
 8009d50:	200008d0 	.word	0x200008d0
 8009d54:	20000db8 	.word	0x20000db8

08009d58 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009d58:	b480      	push	{r7}
 8009d5a:	b083      	sub	sp, #12
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009d60:	4b06      	ldr	r3, [pc, #24]	; (8009d7c <vTaskInternalSetTimeOutState+0x24>)
 8009d62:	681a      	ldr	r2, [r3, #0]
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009d68:	4b05      	ldr	r3, [pc, #20]	; (8009d80 <vTaskInternalSetTimeOutState+0x28>)
 8009d6a:	681a      	ldr	r2, [r3, #0]
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	605a      	str	r2, [r3, #4]
}
 8009d70:	bf00      	nop
 8009d72:	370c      	adds	r7, #12
 8009d74:	46bd      	mov	sp, r7
 8009d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7a:	4770      	bx	lr
 8009d7c:	20000dbc 	.word	0x20000dbc
 8009d80:	20000da8 	.word	0x20000da8

08009d84 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b088      	sub	sp, #32
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
 8009d8c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d109      	bne.n	8009da8 <xTaskCheckForTimeOut+0x24>
 8009d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d98:	f383 8811 	msr	BASEPRI, r3
 8009d9c:	f3bf 8f6f 	isb	sy
 8009da0:	f3bf 8f4f 	dsb	sy
 8009da4:	613b      	str	r3, [r7, #16]
 8009da6:	e7fe      	b.n	8009da6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d109      	bne.n	8009dc2 <xTaskCheckForTimeOut+0x3e>
 8009dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009db2:	f383 8811 	msr	BASEPRI, r3
 8009db6:	f3bf 8f6f 	isb	sy
 8009dba:	f3bf 8f4f 	dsb	sy
 8009dbe:	60fb      	str	r3, [r7, #12]
 8009dc0:	e7fe      	b.n	8009dc0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8009dc2:	f000 fe6b 	bl	800aa9c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009dc6:	4b1d      	ldr	r3, [pc, #116]	; (8009e3c <xTaskCheckForTimeOut+0xb8>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	685b      	ldr	r3, [r3, #4]
 8009dd0:	69ba      	ldr	r2, [r7, #24]
 8009dd2:	1ad3      	subs	r3, r2, r3
 8009dd4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dde:	d102      	bne.n	8009de6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009de0:	2300      	movs	r3, #0
 8009de2:	61fb      	str	r3, [r7, #28]
 8009de4:	e023      	b.n	8009e2e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681a      	ldr	r2, [r3, #0]
 8009dea:	4b15      	ldr	r3, [pc, #84]	; (8009e40 <xTaskCheckForTimeOut+0xbc>)
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	429a      	cmp	r2, r3
 8009df0:	d007      	beq.n	8009e02 <xTaskCheckForTimeOut+0x7e>
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	685b      	ldr	r3, [r3, #4]
 8009df6:	69ba      	ldr	r2, [r7, #24]
 8009df8:	429a      	cmp	r2, r3
 8009dfa:	d302      	bcc.n	8009e02 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009dfc:	2301      	movs	r3, #1
 8009dfe:	61fb      	str	r3, [r7, #28]
 8009e00:	e015      	b.n	8009e2e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	697a      	ldr	r2, [r7, #20]
 8009e08:	429a      	cmp	r2, r3
 8009e0a:	d20b      	bcs.n	8009e24 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	681a      	ldr	r2, [r3, #0]
 8009e10:	697b      	ldr	r3, [r7, #20]
 8009e12:	1ad2      	subs	r2, r2, r3
 8009e14:	683b      	ldr	r3, [r7, #0]
 8009e16:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009e18:	6878      	ldr	r0, [r7, #4]
 8009e1a:	f7ff ff9d 	bl	8009d58 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009e1e:	2300      	movs	r3, #0
 8009e20:	61fb      	str	r3, [r7, #28]
 8009e22:	e004      	b.n	8009e2e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	2200      	movs	r2, #0
 8009e28:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009e2a:	2301      	movs	r3, #1
 8009e2c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009e2e:	f000 fe63 	bl	800aaf8 <vPortExitCritical>

	return xReturn;
 8009e32:	69fb      	ldr	r3, [r7, #28]
}
 8009e34:	4618      	mov	r0, r3
 8009e36:	3720      	adds	r7, #32
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bd80      	pop	{r7, pc}
 8009e3c:	20000da8 	.word	0x20000da8
 8009e40:	20000dbc 	.word	0x20000dbc

08009e44 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009e44:	b480      	push	{r7}
 8009e46:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009e48:	4b03      	ldr	r3, [pc, #12]	; (8009e58 <vTaskMissedYield+0x14>)
 8009e4a:	2201      	movs	r2, #1
 8009e4c:	601a      	str	r2, [r3, #0]
}
 8009e4e:	bf00      	nop
 8009e50:	46bd      	mov	sp, r7
 8009e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e56:	4770      	bx	lr
 8009e58:	20000db8 	.word	0x20000db8

08009e5c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b082      	sub	sp, #8
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009e64:	f000 f852 	bl	8009f0c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009e68:	4b06      	ldr	r3, [pc, #24]	; (8009e84 <prvIdleTask+0x28>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	2b01      	cmp	r3, #1
 8009e6e:	d9f9      	bls.n	8009e64 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009e70:	4b05      	ldr	r3, [pc, #20]	; (8009e88 <prvIdleTask+0x2c>)
 8009e72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e76:	601a      	str	r2, [r3, #0]
 8009e78:	f3bf 8f4f 	dsb	sy
 8009e7c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009e80:	e7f0      	b.n	8009e64 <prvIdleTask+0x8>
 8009e82:	bf00      	nop
 8009e84:	200008d4 	.word	0x200008d4
 8009e88:	e000ed04 	.word	0xe000ed04

08009e8c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b082      	sub	sp, #8
 8009e90:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009e92:	2300      	movs	r3, #0
 8009e94:	607b      	str	r3, [r7, #4]
 8009e96:	e00c      	b.n	8009eb2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009e98:	687a      	ldr	r2, [r7, #4]
 8009e9a:	4613      	mov	r3, r2
 8009e9c:	009b      	lsls	r3, r3, #2
 8009e9e:	4413      	add	r3, r2
 8009ea0:	009b      	lsls	r3, r3, #2
 8009ea2:	4a12      	ldr	r2, [pc, #72]	; (8009eec <prvInitialiseTaskLists+0x60>)
 8009ea4:	4413      	add	r3, r2
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f7fe fd18 	bl	80088dc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	3301      	adds	r3, #1
 8009eb0:	607b      	str	r3, [r7, #4]
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2b37      	cmp	r3, #55	; 0x37
 8009eb6:	d9ef      	bls.n	8009e98 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009eb8:	480d      	ldr	r0, [pc, #52]	; (8009ef0 <prvInitialiseTaskLists+0x64>)
 8009eba:	f7fe fd0f 	bl	80088dc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009ebe:	480d      	ldr	r0, [pc, #52]	; (8009ef4 <prvInitialiseTaskLists+0x68>)
 8009ec0:	f7fe fd0c 	bl	80088dc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009ec4:	480c      	ldr	r0, [pc, #48]	; (8009ef8 <prvInitialiseTaskLists+0x6c>)
 8009ec6:	f7fe fd09 	bl	80088dc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009eca:	480c      	ldr	r0, [pc, #48]	; (8009efc <prvInitialiseTaskLists+0x70>)
 8009ecc:	f7fe fd06 	bl	80088dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009ed0:	480b      	ldr	r0, [pc, #44]	; (8009f00 <prvInitialiseTaskLists+0x74>)
 8009ed2:	f7fe fd03 	bl	80088dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009ed6:	4b0b      	ldr	r3, [pc, #44]	; (8009f04 <prvInitialiseTaskLists+0x78>)
 8009ed8:	4a05      	ldr	r2, [pc, #20]	; (8009ef0 <prvInitialiseTaskLists+0x64>)
 8009eda:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009edc:	4b0a      	ldr	r3, [pc, #40]	; (8009f08 <prvInitialiseTaskLists+0x7c>)
 8009ede:	4a05      	ldr	r2, [pc, #20]	; (8009ef4 <prvInitialiseTaskLists+0x68>)
 8009ee0:	601a      	str	r2, [r3, #0]
}
 8009ee2:	bf00      	nop
 8009ee4:	3708      	adds	r7, #8
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	bd80      	pop	{r7, pc}
 8009eea:	bf00      	nop
 8009eec:	200008d4 	.word	0x200008d4
 8009ef0:	20000d34 	.word	0x20000d34
 8009ef4:	20000d48 	.word	0x20000d48
 8009ef8:	20000d64 	.word	0x20000d64
 8009efc:	20000d78 	.word	0x20000d78
 8009f00:	20000d90 	.word	0x20000d90
 8009f04:	20000d5c 	.word	0x20000d5c
 8009f08:	20000d60 	.word	0x20000d60

08009f0c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b082      	sub	sp, #8
 8009f10:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009f12:	e019      	b.n	8009f48 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009f14:	f000 fdc2 	bl	800aa9c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f18:	4b0f      	ldr	r3, [pc, #60]	; (8009f58 <prvCheckTasksWaitingTermination+0x4c>)
 8009f1a:	68db      	ldr	r3, [r3, #12]
 8009f1c:	68db      	ldr	r3, [r3, #12]
 8009f1e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	3304      	adds	r3, #4
 8009f24:	4618      	mov	r0, r3
 8009f26:	f7fe fd63 	bl	80089f0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009f2a:	4b0c      	ldr	r3, [pc, #48]	; (8009f5c <prvCheckTasksWaitingTermination+0x50>)
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	3b01      	subs	r3, #1
 8009f30:	4a0a      	ldr	r2, [pc, #40]	; (8009f5c <prvCheckTasksWaitingTermination+0x50>)
 8009f32:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009f34:	4b0a      	ldr	r3, [pc, #40]	; (8009f60 <prvCheckTasksWaitingTermination+0x54>)
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	3b01      	subs	r3, #1
 8009f3a:	4a09      	ldr	r2, [pc, #36]	; (8009f60 <prvCheckTasksWaitingTermination+0x54>)
 8009f3c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009f3e:	f000 fddb 	bl	800aaf8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	f000 f80e 	bl	8009f64 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009f48:	4b05      	ldr	r3, [pc, #20]	; (8009f60 <prvCheckTasksWaitingTermination+0x54>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d1e1      	bne.n	8009f14 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009f50:	bf00      	nop
 8009f52:	3708      	adds	r7, #8
 8009f54:	46bd      	mov	sp, r7
 8009f56:	bd80      	pop	{r7, pc}
 8009f58:	20000d78 	.word	0x20000d78
 8009f5c:	20000da4 	.word	0x20000da4
 8009f60:	20000d8c 	.word	0x20000d8c

08009f64 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b084      	sub	sp, #16
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d108      	bne.n	8009f88 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	f000 ff6a 	bl	800ae54 <vPortFree>
				vPortFree( pxTCB );
 8009f80:	6878      	ldr	r0, [r7, #4]
 8009f82:	f000 ff67 	bl	800ae54 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009f86:	e017      	b.n	8009fb8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009f8e:	2b01      	cmp	r3, #1
 8009f90:	d103      	bne.n	8009f9a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009f92:	6878      	ldr	r0, [r7, #4]
 8009f94:	f000 ff5e 	bl	800ae54 <vPortFree>
	}
 8009f98:	e00e      	b.n	8009fb8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009fa0:	2b02      	cmp	r3, #2
 8009fa2:	d009      	beq.n	8009fb8 <prvDeleteTCB+0x54>
 8009fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fa8:	f383 8811 	msr	BASEPRI, r3
 8009fac:	f3bf 8f6f 	isb	sy
 8009fb0:	f3bf 8f4f 	dsb	sy
 8009fb4:	60fb      	str	r3, [r7, #12]
 8009fb6:	e7fe      	b.n	8009fb6 <prvDeleteTCB+0x52>
	}
 8009fb8:	bf00      	nop
 8009fba:	3710      	adds	r7, #16
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bd80      	pop	{r7, pc}

08009fc0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009fc0:	b480      	push	{r7}
 8009fc2:	b083      	sub	sp, #12
 8009fc4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009fc6:	4b0c      	ldr	r3, [pc, #48]	; (8009ff8 <prvResetNextTaskUnblockTime+0x38>)
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d104      	bne.n	8009fda <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009fd0:	4b0a      	ldr	r3, [pc, #40]	; (8009ffc <prvResetNextTaskUnblockTime+0x3c>)
 8009fd2:	f04f 32ff 	mov.w	r2, #4294967295
 8009fd6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009fd8:	e008      	b.n	8009fec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009fda:	4b07      	ldr	r3, [pc, #28]	; (8009ff8 <prvResetNextTaskUnblockTime+0x38>)
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	68db      	ldr	r3, [r3, #12]
 8009fe0:	68db      	ldr	r3, [r3, #12]
 8009fe2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	685b      	ldr	r3, [r3, #4]
 8009fe8:	4a04      	ldr	r2, [pc, #16]	; (8009ffc <prvResetNextTaskUnblockTime+0x3c>)
 8009fea:	6013      	str	r3, [r2, #0]
}
 8009fec:	bf00      	nop
 8009fee:	370c      	adds	r7, #12
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff6:	4770      	bx	lr
 8009ff8:	20000d5c 	.word	0x20000d5c
 8009ffc:	20000dc4 	.word	0x20000dc4

0800a000 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a000:	b480      	push	{r7}
 800a002:	b083      	sub	sp, #12
 800a004:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a006:	4b0b      	ldr	r3, [pc, #44]	; (800a034 <xTaskGetSchedulerState+0x34>)
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d102      	bne.n	800a014 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a00e:	2301      	movs	r3, #1
 800a010:	607b      	str	r3, [r7, #4]
 800a012:	e008      	b.n	800a026 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a014:	4b08      	ldr	r3, [pc, #32]	; (800a038 <xTaskGetSchedulerState+0x38>)
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d102      	bne.n	800a022 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a01c:	2302      	movs	r3, #2
 800a01e:	607b      	str	r3, [r7, #4]
 800a020:	e001      	b.n	800a026 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a022:	2300      	movs	r3, #0
 800a024:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a026:	687b      	ldr	r3, [r7, #4]
	}
 800a028:	4618      	mov	r0, r3
 800a02a:	370c      	adds	r7, #12
 800a02c:	46bd      	mov	sp, r7
 800a02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a032:	4770      	bx	lr
 800a034:	20000db0 	.word	0x20000db0
 800a038:	20000dcc 	.word	0x20000dcc

0800a03c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b086      	sub	sp, #24
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a048:	2300      	movs	r3, #0
 800a04a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d054      	beq.n	800a0fc <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a052:	4b2d      	ldr	r3, [pc, #180]	; (800a108 <xTaskPriorityDisinherit+0xcc>)
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	693a      	ldr	r2, [r7, #16]
 800a058:	429a      	cmp	r2, r3
 800a05a:	d009      	beq.n	800a070 <xTaskPriorityDisinherit+0x34>
 800a05c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a060:	f383 8811 	msr	BASEPRI, r3
 800a064:	f3bf 8f6f 	isb	sy
 800a068:	f3bf 8f4f 	dsb	sy
 800a06c:	60fb      	str	r3, [r7, #12]
 800a06e:	e7fe      	b.n	800a06e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800a070:	693b      	ldr	r3, [r7, #16]
 800a072:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a074:	2b00      	cmp	r3, #0
 800a076:	d109      	bne.n	800a08c <xTaskPriorityDisinherit+0x50>
 800a078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a07c:	f383 8811 	msr	BASEPRI, r3
 800a080:	f3bf 8f6f 	isb	sy
 800a084:	f3bf 8f4f 	dsb	sy
 800a088:	60bb      	str	r3, [r7, #8]
 800a08a:	e7fe      	b.n	800a08a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800a08c:	693b      	ldr	r3, [r7, #16]
 800a08e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a090:	1e5a      	subs	r2, r3, #1
 800a092:	693b      	ldr	r3, [r7, #16]
 800a094:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a096:	693b      	ldr	r3, [r7, #16]
 800a098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a09a:	693b      	ldr	r3, [r7, #16]
 800a09c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a09e:	429a      	cmp	r2, r3
 800a0a0:	d02c      	beq.n	800a0fc <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a0a2:	693b      	ldr	r3, [r7, #16]
 800a0a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d128      	bne.n	800a0fc <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a0aa:	693b      	ldr	r3, [r7, #16]
 800a0ac:	3304      	adds	r3, #4
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	f7fe fc9e 	bl	80089f0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a0b4:	693b      	ldr	r3, [r7, #16]
 800a0b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a0b8:	693b      	ldr	r3, [r7, #16]
 800a0ba:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a0bc:	693b      	ldr	r3, [r7, #16]
 800a0be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0c0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a0c4:	693b      	ldr	r3, [r7, #16]
 800a0c6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a0c8:	693b      	ldr	r3, [r7, #16]
 800a0ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0cc:	4b0f      	ldr	r3, [pc, #60]	; (800a10c <xTaskPriorityDisinherit+0xd0>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	429a      	cmp	r2, r3
 800a0d2:	d903      	bls.n	800a0dc <xTaskPriorityDisinherit+0xa0>
 800a0d4:	693b      	ldr	r3, [r7, #16]
 800a0d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0d8:	4a0c      	ldr	r2, [pc, #48]	; (800a10c <xTaskPriorityDisinherit+0xd0>)
 800a0da:	6013      	str	r3, [r2, #0]
 800a0dc:	693b      	ldr	r3, [r7, #16]
 800a0de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0e0:	4613      	mov	r3, r2
 800a0e2:	009b      	lsls	r3, r3, #2
 800a0e4:	4413      	add	r3, r2
 800a0e6:	009b      	lsls	r3, r3, #2
 800a0e8:	4a09      	ldr	r2, [pc, #36]	; (800a110 <xTaskPriorityDisinherit+0xd4>)
 800a0ea:	441a      	add	r2, r3
 800a0ec:	693b      	ldr	r3, [r7, #16]
 800a0ee:	3304      	adds	r3, #4
 800a0f0:	4619      	mov	r1, r3
 800a0f2:	4610      	mov	r0, r2
 800a0f4:	f7fe fc1f 	bl	8008936 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a0fc:	697b      	ldr	r3, [r7, #20]
	}
 800a0fe:	4618      	mov	r0, r3
 800a100:	3718      	adds	r7, #24
 800a102:	46bd      	mov	sp, r7
 800a104:	bd80      	pop	{r7, pc}
 800a106:	bf00      	nop
 800a108:	200008d0 	.word	0x200008d0
 800a10c:	20000dac 	.word	0x20000dac
 800a110:	200008d4 	.word	0x200008d4

0800a114 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b084      	sub	sp, #16
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
 800a11c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a11e:	4b21      	ldr	r3, [pc, #132]	; (800a1a4 <prvAddCurrentTaskToDelayedList+0x90>)
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a124:	4b20      	ldr	r3, [pc, #128]	; (800a1a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	3304      	adds	r3, #4
 800a12a:	4618      	mov	r0, r3
 800a12c:	f7fe fc60 	bl	80089f0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a136:	d10a      	bne.n	800a14e <prvAddCurrentTaskToDelayedList+0x3a>
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d007      	beq.n	800a14e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a13e:	4b1a      	ldr	r3, [pc, #104]	; (800a1a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	3304      	adds	r3, #4
 800a144:	4619      	mov	r1, r3
 800a146:	4819      	ldr	r0, [pc, #100]	; (800a1ac <prvAddCurrentTaskToDelayedList+0x98>)
 800a148:	f7fe fbf5 	bl	8008936 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a14c:	e026      	b.n	800a19c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a14e:	68fa      	ldr	r2, [r7, #12]
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	4413      	add	r3, r2
 800a154:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a156:	4b14      	ldr	r3, [pc, #80]	; (800a1a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	68ba      	ldr	r2, [r7, #8]
 800a15c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a15e:	68ba      	ldr	r2, [r7, #8]
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	429a      	cmp	r2, r3
 800a164:	d209      	bcs.n	800a17a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a166:	4b12      	ldr	r3, [pc, #72]	; (800a1b0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a168:	681a      	ldr	r2, [r3, #0]
 800a16a:	4b0f      	ldr	r3, [pc, #60]	; (800a1a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	3304      	adds	r3, #4
 800a170:	4619      	mov	r1, r3
 800a172:	4610      	mov	r0, r2
 800a174:	f7fe fc03 	bl	800897e <vListInsert>
}
 800a178:	e010      	b.n	800a19c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a17a:	4b0e      	ldr	r3, [pc, #56]	; (800a1b4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a17c:	681a      	ldr	r2, [r3, #0]
 800a17e:	4b0a      	ldr	r3, [pc, #40]	; (800a1a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	3304      	adds	r3, #4
 800a184:	4619      	mov	r1, r3
 800a186:	4610      	mov	r0, r2
 800a188:	f7fe fbf9 	bl	800897e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a18c:	4b0a      	ldr	r3, [pc, #40]	; (800a1b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	68ba      	ldr	r2, [r7, #8]
 800a192:	429a      	cmp	r2, r3
 800a194:	d202      	bcs.n	800a19c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a196:	4a08      	ldr	r2, [pc, #32]	; (800a1b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a198:	68bb      	ldr	r3, [r7, #8]
 800a19a:	6013      	str	r3, [r2, #0]
}
 800a19c:	bf00      	nop
 800a19e:	3710      	adds	r7, #16
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	bd80      	pop	{r7, pc}
 800a1a4:	20000da8 	.word	0x20000da8
 800a1a8:	200008d0 	.word	0x200008d0
 800a1ac:	20000d90 	.word	0x20000d90
 800a1b0:	20000d60 	.word	0x20000d60
 800a1b4:	20000d5c 	.word	0x20000d5c
 800a1b8:	20000dc4 	.word	0x20000dc4

0800a1bc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b08a      	sub	sp, #40	; 0x28
 800a1c0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a1c6:	f000 faff 	bl	800a7c8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a1ca:	4b1c      	ldr	r3, [pc, #112]	; (800a23c <xTimerCreateTimerTask+0x80>)
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d021      	beq.n	800a216 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a1da:	1d3a      	adds	r2, r7, #4
 800a1dc:	f107 0108 	add.w	r1, r7, #8
 800a1e0:	f107 030c 	add.w	r3, r7, #12
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	f7fe fb5f 	bl	80088a8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a1ea:	6879      	ldr	r1, [r7, #4]
 800a1ec:	68bb      	ldr	r3, [r7, #8]
 800a1ee:	68fa      	ldr	r2, [r7, #12]
 800a1f0:	9202      	str	r2, [sp, #8]
 800a1f2:	9301      	str	r3, [sp, #4]
 800a1f4:	2302      	movs	r3, #2
 800a1f6:	9300      	str	r3, [sp, #0]
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	460a      	mov	r2, r1
 800a1fc:	4910      	ldr	r1, [pc, #64]	; (800a240 <xTimerCreateTimerTask+0x84>)
 800a1fe:	4811      	ldr	r0, [pc, #68]	; (800a244 <xTimerCreateTimerTask+0x88>)
 800a200:	f7ff f8f4 	bl	80093ec <xTaskCreateStatic>
 800a204:	4602      	mov	r2, r0
 800a206:	4b10      	ldr	r3, [pc, #64]	; (800a248 <xTimerCreateTimerTask+0x8c>)
 800a208:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a20a:	4b0f      	ldr	r3, [pc, #60]	; (800a248 <xTimerCreateTimerTask+0x8c>)
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d001      	beq.n	800a216 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a212:	2301      	movs	r3, #1
 800a214:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a216:	697b      	ldr	r3, [r7, #20]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d109      	bne.n	800a230 <xTimerCreateTimerTask+0x74>
 800a21c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a220:	f383 8811 	msr	BASEPRI, r3
 800a224:	f3bf 8f6f 	isb	sy
 800a228:	f3bf 8f4f 	dsb	sy
 800a22c:	613b      	str	r3, [r7, #16]
 800a22e:	e7fe      	b.n	800a22e <xTimerCreateTimerTask+0x72>
	return xReturn;
 800a230:	697b      	ldr	r3, [r7, #20]
}
 800a232:	4618      	mov	r0, r3
 800a234:	3718      	adds	r7, #24
 800a236:	46bd      	mov	sp, r7
 800a238:	bd80      	pop	{r7, pc}
 800a23a:	bf00      	nop
 800a23c:	20000e00 	.word	0x20000e00
 800a240:	0800ecb4 	.word	0x0800ecb4
 800a244:	0800a37d 	.word	0x0800a37d
 800a248:	20000e04 	.word	0x20000e04

0800a24c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b08a      	sub	sp, #40	; 0x28
 800a250:	af00      	add	r7, sp, #0
 800a252:	60f8      	str	r0, [r7, #12]
 800a254:	60b9      	str	r1, [r7, #8]
 800a256:	607a      	str	r2, [r7, #4]
 800a258:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a25a:	2300      	movs	r3, #0
 800a25c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d109      	bne.n	800a278 <xTimerGenericCommand+0x2c>
 800a264:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a268:	f383 8811 	msr	BASEPRI, r3
 800a26c:	f3bf 8f6f 	isb	sy
 800a270:	f3bf 8f4f 	dsb	sy
 800a274:	623b      	str	r3, [r7, #32]
 800a276:	e7fe      	b.n	800a276 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a278:	4b19      	ldr	r3, [pc, #100]	; (800a2e0 <xTimerGenericCommand+0x94>)
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d02a      	beq.n	800a2d6 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a280:	68bb      	ldr	r3, [r7, #8]
 800a282:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a28c:	68bb      	ldr	r3, [r7, #8]
 800a28e:	2b05      	cmp	r3, #5
 800a290:	dc18      	bgt.n	800a2c4 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a292:	f7ff feb5 	bl	800a000 <xTaskGetSchedulerState>
 800a296:	4603      	mov	r3, r0
 800a298:	2b02      	cmp	r3, #2
 800a29a:	d109      	bne.n	800a2b0 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a29c:	4b10      	ldr	r3, [pc, #64]	; (800a2e0 <xTimerGenericCommand+0x94>)
 800a29e:	6818      	ldr	r0, [r3, #0]
 800a2a0:	f107 0110 	add.w	r1, r7, #16
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a2a8:	f7fe fcca 	bl	8008c40 <xQueueGenericSend>
 800a2ac:	6278      	str	r0, [r7, #36]	; 0x24
 800a2ae:	e012      	b.n	800a2d6 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a2b0:	4b0b      	ldr	r3, [pc, #44]	; (800a2e0 <xTimerGenericCommand+0x94>)
 800a2b2:	6818      	ldr	r0, [r3, #0]
 800a2b4:	f107 0110 	add.w	r1, r7, #16
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	f7fe fcc0 	bl	8008c40 <xQueueGenericSend>
 800a2c0:	6278      	str	r0, [r7, #36]	; 0x24
 800a2c2:	e008      	b.n	800a2d6 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a2c4:	4b06      	ldr	r3, [pc, #24]	; (800a2e0 <xTimerGenericCommand+0x94>)
 800a2c6:	6818      	ldr	r0, [r3, #0]
 800a2c8:	f107 0110 	add.w	r1, r7, #16
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	683a      	ldr	r2, [r7, #0]
 800a2d0:	f7fe fdb0 	bl	8008e34 <xQueueGenericSendFromISR>
 800a2d4:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a2d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a2d8:	4618      	mov	r0, r3
 800a2da:	3728      	adds	r7, #40	; 0x28
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	bd80      	pop	{r7, pc}
 800a2e0:	20000e00 	.word	0x20000e00

0800a2e4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b088      	sub	sp, #32
 800a2e8:	af02      	add	r7, sp, #8
 800a2ea:	6078      	str	r0, [r7, #4]
 800a2ec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a2ee:	4b22      	ldr	r3, [pc, #136]	; (800a378 <prvProcessExpiredTimer+0x94>)
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	68db      	ldr	r3, [r3, #12]
 800a2f4:	68db      	ldr	r3, [r3, #12]
 800a2f6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a2f8:	697b      	ldr	r3, [r7, #20]
 800a2fa:	3304      	adds	r3, #4
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	f7fe fb77 	bl	80089f0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a302:	697b      	ldr	r3, [r7, #20]
 800a304:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a308:	f003 0304 	and.w	r3, r3, #4
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d021      	beq.n	800a354 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a310:	697b      	ldr	r3, [r7, #20]
 800a312:	699a      	ldr	r2, [r3, #24]
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	18d1      	adds	r1, r2, r3
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	683a      	ldr	r2, [r7, #0]
 800a31c:	6978      	ldr	r0, [r7, #20]
 800a31e:	f000 f8d1 	bl	800a4c4 <prvInsertTimerInActiveList>
 800a322:	4603      	mov	r3, r0
 800a324:	2b00      	cmp	r3, #0
 800a326:	d01e      	beq.n	800a366 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a328:	2300      	movs	r3, #0
 800a32a:	9300      	str	r3, [sp, #0]
 800a32c:	2300      	movs	r3, #0
 800a32e:	687a      	ldr	r2, [r7, #4]
 800a330:	2100      	movs	r1, #0
 800a332:	6978      	ldr	r0, [r7, #20]
 800a334:	f7ff ff8a 	bl	800a24c <xTimerGenericCommand>
 800a338:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a33a:	693b      	ldr	r3, [r7, #16]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d112      	bne.n	800a366 <prvProcessExpiredTimer+0x82>
 800a340:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a344:	f383 8811 	msr	BASEPRI, r3
 800a348:	f3bf 8f6f 	isb	sy
 800a34c:	f3bf 8f4f 	dsb	sy
 800a350:	60fb      	str	r3, [r7, #12]
 800a352:	e7fe      	b.n	800a352 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a354:	697b      	ldr	r3, [r7, #20]
 800a356:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a35a:	f023 0301 	bic.w	r3, r3, #1
 800a35e:	b2da      	uxtb	r2, r3
 800a360:	697b      	ldr	r3, [r7, #20]
 800a362:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a366:	697b      	ldr	r3, [r7, #20]
 800a368:	6a1b      	ldr	r3, [r3, #32]
 800a36a:	6978      	ldr	r0, [r7, #20]
 800a36c:	4798      	blx	r3
}
 800a36e:	bf00      	nop
 800a370:	3718      	adds	r7, #24
 800a372:	46bd      	mov	sp, r7
 800a374:	bd80      	pop	{r7, pc}
 800a376:	bf00      	nop
 800a378:	20000df8 	.word	0x20000df8

0800a37c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b084      	sub	sp, #16
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a384:	f107 0308 	add.w	r3, r7, #8
 800a388:	4618      	mov	r0, r3
 800a38a:	f000 f857 	bl	800a43c <prvGetNextExpireTime>
 800a38e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a390:	68bb      	ldr	r3, [r7, #8]
 800a392:	4619      	mov	r1, r3
 800a394:	68f8      	ldr	r0, [r7, #12]
 800a396:	f000 f803 	bl	800a3a0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a39a:	f000 f8d5 	bl	800a548 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a39e:	e7f1      	b.n	800a384 <prvTimerTask+0x8>

0800a3a0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b084      	sub	sp, #16
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
 800a3a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a3aa:	f7ff fa57 	bl	800985c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a3ae:	f107 0308 	add.w	r3, r7, #8
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	f000 f866 	bl	800a484 <prvSampleTimeNow>
 800a3b8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a3ba:	68bb      	ldr	r3, [r7, #8]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d130      	bne.n	800a422 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d10a      	bne.n	800a3dc <prvProcessTimerOrBlockTask+0x3c>
 800a3c6:	687a      	ldr	r2, [r7, #4]
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	429a      	cmp	r2, r3
 800a3cc:	d806      	bhi.n	800a3dc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a3ce:	f7ff fa53 	bl	8009878 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a3d2:	68f9      	ldr	r1, [r7, #12]
 800a3d4:	6878      	ldr	r0, [r7, #4]
 800a3d6:	f7ff ff85 	bl	800a2e4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a3da:	e024      	b.n	800a426 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d008      	beq.n	800a3f4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a3e2:	4b13      	ldr	r3, [pc, #76]	; (800a430 <prvProcessTimerOrBlockTask+0x90>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d101      	bne.n	800a3f0 <prvProcessTimerOrBlockTask+0x50>
 800a3ec:	2301      	movs	r3, #1
 800a3ee:	e000      	b.n	800a3f2 <prvProcessTimerOrBlockTask+0x52>
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a3f4:	4b0f      	ldr	r3, [pc, #60]	; (800a434 <prvProcessTimerOrBlockTask+0x94>)
 800a3f6:	6818      	ldr	r0, [r3, #0]
 800a3f8:	687a      	ldr	r2, [r7, #4]
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	1ad3      	subs	r3, r2, r3
 800a3fe:	683a      	ldr	r2, [r7, #0]
 800a400:	4619      	mov	r1, r3
 800a402:	f7fe ffbf 	bl	8009384 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a406:	f7ff fa37 	bl	8009878 <xTaskResumeAll>
 800a40a:	4603      	mov	r3, r0
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d10a      	bne.n	800a426 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a410:	4b09      	ldr	r3, [pc, #36]	; (800a438 <prvProcessTimerOrBlockTask+0x98>)
 800a412:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a416:	601a      	str	r2, [r3, #0]
 800a418:	f3bf 8f4f 	dsb	sy
 800a41c:	f3bf 8f6f 	isb	sy
}
 800a420:	e001      	b.n	800a426 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a422:	f7ff fa29 	bl	8009878 <xTaskResumeAll>
}
 800a426:	bf00      	nop
 800a428:	3710      	adds	r7, #16
 800a42a:	46bd      	mov	sp, r7
 800a42c:	bd80      	pop	{r7, pc}
 800a42e:	bf00      	nop
 800a430:	20000dfc 	.word	0x20000dfc
 800a434:	20000e00 	.word	0x20000e00
 800a438:	e000ed04 	.word	0xe000ed04

0800a43c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a43c:	b480      	push	{r7}
 800a43e:	b085      	sub	sp, #20
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a444:	4b0e      	ldr	r3, [pc, #56]	; (800a480 <prvGetNextExpireTime+0x44>)
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d101      	bne.n	800a452 <prvGetNextExpireTime+0x16>
 800a44e:	2201      	movs	r2, #1
 800a450:	e000      	b.n	800a454 <prvGetNextExpireTime+0x18>
 800a452:	2200      	movs	r2, #0
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d105      	bne.n	800a46c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a460:	4b07      	ldr	r3, [pc, #28]	; (800a480 <prvGetNextExpireTime+0x44>)
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	68db      	ldr	r3, [r3, #12]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	60fb      	str	r3, [r7, #12]
 800a46a:	e001      	b.n	800a470 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a46c:	2300      	movs	r3, #0
 800a46e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a470:	68fb      	ldr	r3, [r7, #12]
}
 800a472:	4618      	mov	r0, r3
 800a474:	3714      	adds	r7, #20
 800a476:	46bd      	mov	sp, r7
 800a478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47c:	4770      	bx	lr
 800a47e:	bf00      	nop
 800a480:	20000df8 	.word	0x20000df8

0800a484 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b084      	sub	sp, #16
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a48c:	f7ff fa90 	bl	80099b0 <xTaskGetTickCount>
 800a490:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a492:	4b0b      	ldr	r3, [pc, #44]	; (800a4c0 <prvSampleTimeNow+0x3c>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	68fa      	ldr	r2, [r7, #12]
 800a498:	429a      	cmp	r2, r3
 800a49a:	d205      	bcs.n	800a4a8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a49c:	f000 f930 	bl	800a700 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2201      	movs	r2, #1
 800a4a4:	601a      	str	r2, [r3, #0]
 800a4a6:	e002      	b.n	800a4ae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a4ae:	4a04      	ldr	r2, [pc, #16]	; (800a4c0 <prvSampleTimeNow+0x3c>)
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a4b4:	68fb      	ldr	r3, [r7, #12]
}
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	3710      	adds	r7, #16
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	bd80      	pop	{r7, pc}
 800a4be:	bf00      	nop
 800a4c0:	20000e08 	.word	0x20000e08

0800a4c4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b086      	sub	sp, #24
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	60f8      	str	r0, [r7, #12]
 800a4cc:	60b9      	str	r1, [r7, #8]
 800a4ce:	607a      	str	r2, [r7, #4]
 800a4d0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	68ba      	ldr	r2, [r7, #8]
 800a4da:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	68fa      	ldr	r2, [r7, #12]
 800a4e0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a4e2:	68ba      	ldr	r2, [r7, #8]
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	429a      	cmp	r2, r3
 800a4e8:	d812      	bhi.n	800a510 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4ea:	687a      	ldr	r2, [r7, #4]
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	1ad2      	subs	r2, r2, r3
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	699b      	ldr	r3, [r3, #24]
 800a4f4:	429a      	cmp	r2, r3
 800a4f6:	d302      	bcc.n	800a4fe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a4f8:	2301      	movs	r3, #1
 800a4fa:	617b      	str	r3, [r7, #20]
 800a4fc:	e01b      	b.n	800a536 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a4fe:	4b10      	ldr	r3, [pc, #64]	; (800a540 <prvInsertTimerInActiveList+0x7c>)
 800a500:	681a      	ldr	r2, [r3, #0]
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	3304      	adds	r3, #4
 800a506:	4619      	mov	r1, r3
 800a508:	4610      	mov	r0, r2
 800a50a:	f7fe fa38 	bl	800897e <vListInsert>
 800a50e:	e012      	b.n	800a536 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a510:	687a      	ldr	r2, [r7, #4]
 800a512:	683b      	ldr	r3, [r7, #0]
 800a514:	429a      	cmp	r2, r3
 800a516:	d206      	bcs.n	800a526 <prvInsertTimerInActiveList+0x62>
 800a518:	68ba      	ldr	r2, [r7, #8]
 800a51a:	683b      	ldr	r3, [r7, #0]
 800a51c:	429a      	cmp	r2, r3
 800a51e:	d302      	bcc.n	800a526 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a520:	2301      	movs	r3, #1
 800a522:	617b      	str	r3, [r7, #20]
 800a524:	e007      	b.n	800a536 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a526:	4b07      	ldr	r3, [pc, #28]	; (800a544 <prvInsertTimerInActiveList+0x80>)
 800a528:	681a      	ldr	r2, [r3, #0]
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	3304      	adds	r3, #4
 800a52e:	4619      	mov	r1, r3
 800a530:	4610      	mov	r0, r2
 800a532:	f7fe fa24 	bl	800897e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a536:	697b      	ldr	r3, [r7, #20]
}
 800a538:	4618      	mov	r0, r3
 800a53a:	3718      	adds	r7, #24
 800a53c:	46bd      	mov	sp, r7
 800a53e:	bd80      	pop	{r7, pc}
 800a540:	20000dfc 	.word	0x20000dfc
 800a544:	20000df8 	.word	0x20000df8

0800a548 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b08e      	sub	sp, #56	; 0x38
 800a54c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a54e:	e0c6      	b.n	800a6de <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2b00      	cmp	r3, #0
 800a554:	da17      	bge.n	800a586 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a556:	1d3b      	adds	r3, r7, #4
 800a558:	3304      	adds	r3, #4
 800a55a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a55c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d109      	bne.n	800a576 <prvProcessReceivedCommands+0x2e>
 800a562:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a566:	f383 8811 	msr	BASEPRI, r3
 800a56a:	f3bf 8f6f 	isb	sy
 800a56e:	f3bf 8f4f 	dsb	sy
 800a572:	61fb      	str	r3, [r7, #28]
 800a574:	e7fe      	b.n	800a574 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a57c:	6850      	ldr	r0, [r2, #4]
 800a57e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a580:	6892      	ldr	r2, [r2, #8]
 800a582:	4611      	mov	r1, r2
 800a584:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	f2c0 80a7 	blt.w	800a6dc <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a594:	695b      	ldr	r3, [r3, #20]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d004      	beq.n	800a5a4 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a59a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a59c:	3304      	adds	r3, #4
 800a59e:	4618      	mov	r0, r3
 800a5a0:	f7fe fa26 	bl	80089f0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a5a4:	463b      	mov	r3, r7
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	f7ff ff6c 	bl	800a484 <prvSampleTimeNow>
 800a5ac:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	2b09      	cmp	r3, #9
 800a5b2:	f200 8094 	bhi.w	800a6de <prvProcessReceivedCommands+0x196>
 800a5b6:	a201      	add	r2, pc, #4	; (adr r2, 800a5bc <prvProcessReceivedCommands+0x74>)
 800a5b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5bc:	0800a5e5 	.word	0x0800a5e5
 800a5c0:	0800a5e5 	.word	0x0800a5e5
 800a5c4:	0800a5e5 	.word	0x0800a5e5
 800a5c8:	0800a657 	.word	0x0800a657
 800a5cc:	0800a66b 	.word	0x0800a66b
 800a5d0:	0800a6b3 	.word	0x0800a6b3
 800a5d4:	0800a5e5 	.word	0x0800a5e5
 800a5d8:	0800a5e5 	.word	0x0800a5e5
 800a5dc:	0800a657 	.word	0x0800a657
 800a5e0:	0800a66b 	.word	0x0800a66b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a5e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a5ea:	f043 0301 	orr.w	r3, r3, #1
 800a5ee:	b2da      	uxtb	r2, r3
 800a5f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a5f6:	68ba      	ldr	r2, [r7, #8]
 800a5f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5fa:	699b      	ldr	r3, [r3, #24]
 800a5fc:	18d1      	adds	r1, r2, r3
 800a5fe:	68bb      	ldr	r3, [r7, #8]
 800a600:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a602:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a604:	f7ff ff5e 	bl	800a4c4 <prvInsertTimerInActiveList>
 800a608:	4603      	mov	r3, r0
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d067      	beq.n	800a6de <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a60e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a610:	6a1b      	ldr	r3, [r3, #32]
 800a612:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a614:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a618:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a61c:	f003 0304 	and.w	r3, r3, #4
 800a620:	2b00      	cmp	r3, #0
 800a622:	d05c      	beq.n	800a6de <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a624:	68ba      	ldr	r2, [r7, #8]
 800a626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a628:	699b      	ldr	r3, [r3, #24]
 800a62a:	441a      	add	r2, r3
 800a62c:	2300      	movs	r3, #0
 800a62e:	9300      	str	r3, [sp, #0]
 800a630:	2300      	movs	r3, #0
 800a632:	2100      	movs	r1, #0
 800a634:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a636:	f7ff fe09 	bl	800a24c <xTimerGenericCommand>
 800a63a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a63c:	6a3b      	ldr	r3, [r7, #32]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d14d      	bne.n	800a6de <prvProcessReceivedCommands+0x196>
 800a642:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a646:	f383 8811 	msr	BASEPRI, r3
 800a64a:	f3bf 8f6f 	isb	sy
 800a64e:	f3bf 8f4f 	dsb	sy
 800a652:	61bb      	str	r3, [r7, #24]
 800a654:	e7fe      	b.n	800a654 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a658:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a65c:	f023 0301 	bic.w	r3, r3, #1
 800a660:	b2da      	uxtb	r2, r3
 800a662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a664:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a668:	e039      	b.n	800a6de <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a66a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a66c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a670:	f043 0301 	orr.w	r3, r3, #1
 800a674:	b2da      	uxtb	r2, r3
 800a676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a678:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a67c:	68ba      	ldr	r2, [r7, #8]
 800a67e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a680:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a684:	699b      	ldr	r3, [r3, #24]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d109      	bne.n	800a69e <prvProcessReceivedCommands+0x156>
 800a68a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a68e:	f383 8811 	msr	BASEPRI, r3
 800a692:	f3bf 8f6f 	isb	sy
 800a696:	f3bf 8f4f 	dsb	sy
 800a69a:	617b      	str	r3, [r7, #20]
 800a69c:	e7fe      	b.n	800a69c <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a69e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6a0:	699a      	ldr	r2, [r3, #24]
 800a6a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6a4:	18d1      	adds	r1, r2, r3
 800a6a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a6ac:	f7ff ff0a 	bl	800a4c4 <prvInsertTimerInActiveList>
					break;
 800a6b0:	e015      	b.n	800a6de <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a6b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a6b8:	f003 0302 	and.w	r3, r3, #2
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d103      	bne.n	800a6c8 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800a6c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a6c2:	f000 fbc7 	bl	800ae54 <vPortFree>
 800a6c6:	e00a      	b.n	800a6de <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a6c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a6ce:	f023 0301 	bic.w	r3, r3, #1
 800a6d2:	b2da      	uxtb	r2, r3
 800a6d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a6da:	e000      	b.n	800a6de <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a6dc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a6de:	4b07      	ldr	r3, [pc, #28]	; (800a6fc <prvProcessReceivedCommands+0x1b4>)
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	1d39      	adds	r1, r7, #4
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	f7fe fc38 	bl	8008f5c <xQueueReceive>
 800a6ec:	4603      	mov	r3, r0
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	f47f af2e 	bne.w	800a550 <prvProcessReceivedCommands+0x8>
	}
}
 800a6f4:	bf00      	nop
 800a6f6:	3730      	adds	r7, #48	; 0x30
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	bd80      	pop	{r7, pc}
 800a6fc:	20000e00 	.word	0x20000e00

0800a700 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b088      	sub	sp, #32
 800a704:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a706:	e047      	b.n	800a798 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a708:	4b2d      	ldr	r3, [pc, #180]	; (800a7c0 <prvSwitchTimerLists+0xc0>)
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	68db      	ldr	r3, [r3, #12]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a712:	4b2b      	ldr	r3, [pc, #172]	; (800a7c0 <prvSwitchTimerLists+0xc0>)
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	68db      	ldr	r3, [r3, #12]
 800a718:	68db      	ldr	r3, [r3, #12]
 800a71a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	3304      	adds	r3, #4
 800a720:	4618      	mov	r0, r3
 800a722:	f7fe f965 	bl	80089f0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	6a1b      	ldr	r3, [r3, #32]
 800a72a:	68f8      	ldr	r0, [r7, #12]
 800a72c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a734:	f003 0304 	and.w	r3, r3, #4
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d02d      	beq.n	800a798 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	699b      	ldr	r3, [r3, #24]
 800a740:	693a      	ldr	r2, [r7, #16]
 800a742:	4413      	add	r3, r2
 800a744:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a746:	68ba      	ldr	r2, [r7, #8]
 800a748:	693b      	ldr	r3, [r7, #16]
 800a74a:	429a      	cmp	r2, r3
 800a74c:	d90e      	bls.n	800a76c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	68ba      	ldr	r2, [r7, #8]
 800a752:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	68fa      	ldr	r2, [r7, #12]
 800a758:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a75a:	4b19      	ldr	r3, [pc, #100]	; (800a7c0 <prvSwitchTimerLists+0xc0>)
 800a75c:	681a      	ldr	r2, [r3, #0]
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	3304      	adds	r3, #4
 800a762:	4619      	mov	r1, r3
 800a764:	4610      	mov	r0, r2
 800a766:	f7fe f90a 	bl	800897e <vListInsert>
 800a76a:	e015      	b.n	800a798 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a76c:	2300      	movs	r3, #0
 800a76e:	9300      	str	r3, [sp, #0]
 800a770:	2300      	movs	r3, #0
 800a772:	693a      	ldr	r2, [r7, #16]
 800a774:	2100      	movs	r1, #0
 800a776:	68f8      	ldr	r0, [r7, #12]
 800a778:	f7ff fd68 	bl	800a24c <xTimerGenericCommand>
 800a77c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d109      	bne.n	800a798 <prvSwitchTimerLists+0x98>
 800a784:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a788:	f383 8811 	msr	BASEPRI, r3
 800a78c:	f3bf 8f6f 	isb	sy
 800a790:	f3bf 8f4f 	dsb	sy
 800a794:	603b      	str	r3, [r7, #0]
 800a796:	e7fe      	b.n	800a796 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a798:	4b09      	ldr	r3, [pc, #36]	; (800a7c0 <prvSwitchTimerLists+0xc0>)
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d1b2      	bne.n	800a708 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a7a2:	4b07      	ldr	r3, [pc, #28]	; (800a7c0 <prvSwitchTimerLists+0xc0>)
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a7a8:	4b06      	ldr	r3, [pc, #24]	; (800a7c4 <prvSwitchTimerLists+0xc4>)
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	4a04      	ldr	r2, [pc, #16]	; (800a7c0 <prvSwitchTimerLists+0xc0>)
 800a7ae:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a7b0:	4a04      	ldr	r2, [pc, #16]	; (800a7c4 <prvSwitchTimerLists+0xc4>)
 800a7b2:	697b      	ldr	r3, [r7, #20]
 800a7b4:	6013      	str	r3, [r2, #0]
}
 800a7b6:	bf00      	nop
 800a7b8:	3718      	adds	r7, #24
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	bd80      	pop	{r7, pc}
 800a7be:	bf00      	nop
 800a7c0:	20000df8 	.word	0x20000df8
 800a7c4:	20000dfc 	.word	0x20000dfc

0800a7c8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b082      	sub	sp, #8
 800a7cc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a7ce:	f000 f965 	bl	800aa9c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a7d2:	4b15      	ldr	r3, [pc, #84]	; (800a828 <prvCheckForValidListAndQueue+0x60>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d120      	bne.n	800a81c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a7da:	4814      	ldr	r0, [pc, #80]	; (800a82c <prvCheckForValidListAndQueue+0x64>)
 800a7dc:	f7fe f87e 	bl	80088dc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a7e0:	4813      	ldr	r0, [pc, #76]	; (800a830 <prvCheckForValidListAndQueue+0x68>)
 800a7e2:	f7fe f87b 	bl	80088dc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a7e6:	4b13      	ldr	r3, [pc, #76]	; (800a834 <prvCheckForValidListAndQueue+0x6c>)
 800a7e8:	4a10      	ldr	r2, [pc, #64]	; (800a82c <prvCheckForValidListAndQueue+0x64>)
 800a7ea:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a7ec:	4b12      	ldr	r3, [pc, #72]	; (800a838 <prvCheckForValidListAndQueue+0x70>)
 800a7ee:	4a10      	ldr	r2, [pc, #64]	; (800a830 <prvCheckForValidListAndQueue+0x68>)
 800a7f0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	9300      	str	r3, [sp, #0]
 800a7f6:	4b11      	ldr	r3, [pc, #68]	; (800a83c <prvCheckForValidListAndQueue+0x74>)
 800a7f8:	4a11      	ldr	r2, [pc, #68]	; (800a840 <prvCheckForValidListAndQueue+0x78>)
 800a7fa:	2110      	movs	r1, #16
 800a7fc:	200a      	movs	r0, #10
 800a7fe:	f7fe f989 	bl	8008b14 <xQueueGenericCreateStatic>
 800a802:	4602      	mov	r2, r0
 800a804:	4b08      	ldr	r3, [pc, #32]	; (800a828 <prvCheckForValidListAndQueue+0x60>)
 800a806:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a808:	4b07      	ldr	r3, [pc, #28]	; (800a828 <prvCheckForValidListAndQueue+0x60>)
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d005      	beq.n	800a81c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a810:	4b05      	ldr	r3, [pc, #20]	; (800a828 <prvCheckForValidListAndQueue+0x60>)
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	490b      	ldr	r1, [pc, #44]	; (800a844 <prvCheckForValidListAndQueue+0x7c>)
 800a816:	4618      	mov	r0, r3
 800a818:	f7fe fd8c 	bl	8009334 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a81c:	f000 f96c 	bl	800aaf8 <vPortExitCritical>
}
 800a820:	bf00      	nop
 800a822:	46bd      	mov	sp, r7
 800a824:	bd80      	pop	{r7, pc}
 800a826:	bf00      	nop
 800a828:	20000e00 	.word	0x20000e00
 800a82c:	20000dd0 	.word	0x20000dd0
 800a830:	20000de4 	.word	0x20000de4
 800a834:	20000df8 	.word	0x20000df8
 800a838:	20000dfc 	.word	0x20000dfc
 800a83c:	20000eac 	.word	0x20000eac
 800a840:	20000e0c 	.word	0x20000e0c
 800a844:	0800ecbc 	.word	0x0800ecbc

0800a848 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a848:	b480      	push	{r7}
 800a84a:	b085      	sub	sp, #20
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	60f8      	str	r0, [r7, #12]
 800a850:	60b9      	str	r1, [r7, #8]
 800a852:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	3b04      	subs	r3, #4
 800a858:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a860:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	3b04      	subs	r3, #4
 800a866:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a868:	68bb      	ldr	r3, [r7, #8]
 800a86a:	f023 0201 	bic.w	r2, r3, #1
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	3b04      	subs	r3, #4
 800a876:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a878:	4a0c      	ldr	r2, [pc, #48]	; (800a8ac <pxPortInitialiseStack+0x64>)
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	3b14      	subs	r3, #20
 800a882:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a884:	687a      	ldr	r2, [r7, #4]
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	3b04      	subs	r3, #4
 800a88e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	f06f 0202 	mvn.w	r2, #2
 800a896:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	3b20      	subs	r3, #32
 800a89c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a89e:	68fb      	ldr	r3, [r7, #12]
}
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	3714      	adds	r7, #20
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8aa:	4770      	bx	lr
 800a8ac:	0800a8b1 	.word	0x0800a8b1

0800a8b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a8b0:	b480      	push	{r7}
 800a8b2:	b085      	sub	sp, #20
 800a8b4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a8ba:	4b11      	ldr	r3, [pc, #68]	; (800a900 <prvTaskExitError+0x50>)
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8c2:	d009      	beq.n	800a8d8 <prvTaskExitError+0x28>
 800a8c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8c8:	f383 8811 	msr	BASEPRI, r3
 800a8cc:	f3bf 8f6f 	isb	sy
 800a8d0:	f3bf 8f4f 	dsb	sy
 800a8d4:	60fb      	str	r3, [r7, #12]
 800a8d6:	e7fe      	b.n	800a8d6 <prvTaskExitError+0x26>
 800a8d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8dc:	f383 8811 	msr	BASEPRI, r3
 800a8e0:	f3bf 8f6f 	isb	sy
 800a8e4:	f3bf 8f4f 	dsb	sy
 800a8e8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a8ea:	bf00      	nop
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d0fc      	beq.n	800a8ec <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a8f2:	bf00      	nop
 800a8f4:	3714      	adds	r7, #20
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fc:	4770      	bx	lr
 800a8fe:	bf00      	nop
 800a900:	2000000c 	.word	0x2000000c
	...

0800a910 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a910:	4b07      	ldr	r3, [pc, #28]	; (800a930 <pxCurrentTCBConst2>)
 800a912:	6819      	ldr	r1, [r3, #0]
 800a914:	6808      	ldr	r0, [r1, #0]
 800a916:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a91a:	f380 8809 	msr	PSP, r0
 800a91e:	f3bf 8f6f 	isb	sy
 800a922:	f04f 0000 	mov.w	r0, #0
 800a926:	f380 8811 	msr	BASEPRI, r0
 800a92a:	4770      	bx	lr
 800a92c:	f3af 8000 	nop.w

0800a930 <pxCurrentTCBConst2>:
 800a930:	200008d0 	.word	0x200008d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a934:	bf00      	nop
 800a936:	bf00      	nop

0800a938 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a938:	4808      	ldr	r0, [pc, #32]	; (800a95c <prvPortStartFirstTask+0x24>)
 800a93a:	6800      	ldr	r0, [r0, #0]
 800a93c:	6800      	ldr	r0, [r0, #0]
 800a93e:	f380 8808 	msr	MSP, r0
 800a942:	f04f 0000 	mov.w	r0, #0
 800a946:	f380 8814 	msr	CONTROL, r0
 800a94a:	b662      	cpsie	i
 800a94c:	b661      	cpsie	f
 800a94e:	f3bf 8f4f 	dsb	sy
 800a952:	f3bf 8f6f 	isb	sy
 800a956:	df00      	svc	0
 800a958:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a95a:	bf00      	nop
 800a95c:	e000ed08 	.word	0xe000ed08

0800a960 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b086      	sub	sp, #24
 800a964:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a966:	4b44      	ldr	r3, [pc, #272]	; (800aa78 <xPortStartScheduler+0x118>)
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	4a44      	ldr	r2, [pc, #272]	; (800aa7c <xPortStartScheduler+0x11c>)
 800a96c:	4293      	cmp	r3, r2
 800a96e:	d109      	bne.n	800a984 <xPortStartScheduler+0x24>
 800a970:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a974:	f383 8811 	msr	BASEPRI, r3
 800a978:	f3bf 8f6f 	isb	sy
 800a97c:	f3bf 8f4f 	dsb	sy
 800a980:	613b      	str	r3, [r7, #16]
 800a982:	e7fe      	b.n	800a982 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a984:	4b3c      	ldr	r3, [pc, #240]	; (800aa78 <xPortStartScheduler+0x118>)
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	4a3d      	ldr	r2, [pc, #244]	; (800aa80 <xPortStartScheduler+0x120>)
 800a98a:	4293      	cmp	r3, r2
 800a98c:	d109      	bne.n	800a9a2 <xPortStartScheduler+0x42>
 800a98e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a992:	f383 8811 	msr	BASEPRI, r3
 800a996:	f3bf 8f6f 	isb	sy
 800a99a:	f3bf 8f4f 	dsb	sy
 800a99e:	60fb      	str	r3, [r7, #12]
 800a9a0:	e7fe      	b.n	800a9a0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a9a2:	4b38      	ldr	r3, [pc, #224]	; (800aa84 <xPortStartScheduler+0x124>)
 800a9a4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a9a6:	697b      	ldr	r3, [r7, #20]
 800a9a8:	781b      	ldrb	r3, [r3, #0]
 800a9aa:	b2db      	uxtb	r3, r3
 800a9ac:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a9ae:	697b      	ldr	r3, [r7, #20]
 800a9b0:	22ff      	movs	r2, #255	; 0xff
 800a9b2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a9b4:	697b      	ldr	r3, [r7, #20]
 800a9b6:	781b      	ldrb	r3, [r3, #0]
 800a9b8:	b2db      	uxtb	r3, r3
 800a9ba:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a9bc:	78fb      	ldrb	r3, [r7, #3]
 800a9be:	b2db      	uxtb	r3, r3
 800a9c0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a9c4:	b2da      	uxtb	r2, r3
 800a9c6:	4b30      	ldr	r3, [pc, #192]	; (800aa88 <xPortStartScheduler+0x128>)
 800a9c8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a9ca:	4b30      	ldr	r3, [pc, #192]	; (800aa8c <xPortStartScheduler+0x12c>)
 800a9cc:	2207      	movs	r2, #7
 800a9ce:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a9d0:	e009      	b.n	800a9e6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800a9d2:	4b2e      	ldr	r3, [pc, #184]	; (800aa8c <xPortStartScheduler+0x12c>)
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	3b01      	subs	r3, #1
 800a9d8:	4a2c      	ldr	r2, [pc, #176]	; (800aa8c <xPortStartScheduler+0x12c>)
 800a9da:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a9dc:	78fb      	ldrb	r3, [r7, #3]
 800a9de:	b2db      	uxtb	r3, r3
 800a9e0:	005b      	lsls	r3, r3, #1
 800a9e2:	b2db      	uxtb	r3, r3
 800a9e4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a9e6:	78fb      	ldrb	r3, [r7, #3]
 800a9e8:	b2db      	uxtb	r3, r3
 800a9ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9ee:	2b80      	cmp	r3, #128	; 0x80
 800a9f0:	d0ef      	beq.n	800a9d2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a9f2:	4b26      	ldr	r3, [pc, #152]	; (800aa8c <xPortStartScheduler+0x12c>)
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	f1c3 0307 	rsb	r3, r3, #7
 800a9fa:	2b04      	cmp	r3, #4
 800a9fc:	d009      	beq.n	800aa12 <xPortStartScheduler+0xb2>
 800a9fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa02:	f383 8811 	msr	BASEPRI, r3
 800aa06:	f3bf 8f6f 	isb	sy
 800aa0a:	f3bf 8f4f 	dsb	sy
 800aa0e:	60bb      	str	r3, [r7, #8]
 800aa10:	e7fe      	b.n	800aa10 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800aa12:	4b1e      	ldr	r3, [pc, #120]	; (800aa8c <xPortStartScheduler+0x12c>)
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	021b      	lsls	r3, r3, #8
 800aa18:	4a1c      	ldr	r2, [pc, #112]	; (800aa8c <xPortStartScheduler+0x12c>)
 800aa1a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800aa1c:	4b1b      	ldr	r3, [pc, #108]	; (800aa8c <xPortStartScheduler+0x12c>)
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800aa24:	4a19      	ldr	r2, [pc, #100]	; (800aa8c <xPortStartScheduler+0x12c>)
 800aa26:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	b2da      	uxtb	r2, r3
 800aa2c:	697b      	ldr	r3, [r7, #20]
 800aa2e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800aa30:	4b17      	ldr	r3, [pc, #92]	; (800aa90 <xPortStartScheduler+0x130>)
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	4a16      	ldr	r2, [pc, #88]	; (800aa90 <xPortStartScheduler+0x130>)
 800aa36:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800aa3a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800aa3c:	4b14      	ldr	r3, [pc, #80]	; (800aa90 <xPortStartScheduler+0x130>)
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	4a13      	ldr	r2, [pc, #76]	; (800aa90 <xPortStartScheduler+0x130>)
 800aa42:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800aa46:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800aa48:	f000 f8d6 	bl	800abf8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800aa4c:	4b11      	ldr	r3, [pc, #68]	; (800aa94 <xPortStartScheduler+0x134>)
 800aa4e:	2200      	movs	r2, #0
 800aa50:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800aa52:	f000 f8f5 	bl	800ac40 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800aa56:	4b10      	ldr	r3, [pc, #64]	; (800aa98 <xPortStartScheduler+0x138>)
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	4a0f      	ldr	r2, [pc, #60]	; (800aa98 <xPortStartScheduler+0x138>)
 800aa5c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800aa60:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800aa62:	f7ff ff69 	bl	800a938 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800aa66:	f7ff f86b 	bl	8009b40 <vTaskSwitchContext>
	prvTaskExitError();
 800aa6a:	f7ff ff21 	bl	800a8b0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800aa6e:	2300      	movs	r3, #0
}
 800aa70:	4618      	mov	r0, r3
 800aa72:	3718      	adds	r7, #24
 800aa74:	46bd      	mov	sp, r7
 800aa76:	bd80      	pop	{r7, pc}
 800aa78:	e000ed00 	.word	0xe000ed00
 800aa7c:	410fc271 	.word	0x410fc271
 800aa80:	410fc270 	.word	0x410fc270
 800aa84:	e000e400 	.word	0xe000e400
 800aa88:	20000efc 	.word	0x20000efc
 800aa8c:	20000f00 	.word	0x20000f00
 800aa90:	e000ed20 	.word	0xe000ed20
 800aa94:	2000000c 	.word	0x2000000c
 800aa98:	e000ef34 	.word	0xe000ef34

0800aa9c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800aa9c:	b480      	push	{r7}
 800aa9e:	b083      	sub	sp, #12
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaa6:	f383 8811 	msr	BASEPRI, r3
 800aaaa:	f3bf 8f6f 	isb	sy
 800aaae:	f3bf 8f4f 	dsb	sy
 800aab2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800aab4:	4b0e      	ldr	r3, [pc, #56]	; (800aaf0 <vPortEnterCritical+0x54>)
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	3301      	adds	r3, #1
 800aaba:	4a0d      	ldr	r2, [pc, #52]	; (800aaf0 <vPortEnterCritical+0x54>)
 800aabc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800aabe:	4b0c      	ldr	r3, [pc, #48]	; (800aaf0 <vPortEnterCritical+0x54>)
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	2b01      	cmp	r3, #1
 800aac4:	d10e      	bne.n	800aae4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800aac6:	4b0b      	ldr	r3, [pc, #44]	; (800aaf4 <vPortEnterCritical+0x58>)
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	b2db      	uxtb	r3, r3
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d009      	beq.n	800aae4 <vPortEnterCritical+0x48>
 800aad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aad4:	f383 8811 	msr	BASEPRI, r3
 800aad8:	f3bf 8f6f 	isb	sy
 800aadc:	f3bf 8f4f 	dsb	sy
 800aae0:	603b      	str	r3, [r7, #0]
 800aae2:	e7fe      	b.n	800aae2 <vPortEnterCritical+0x46>
	}
}
 800aae4:	bf00      	nop
 800aae6:	370c      	adds	r7, #12
 800aae8:	46bd      	mov	sp, r7
 800aaea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaee:	4770      	bx	lr
 800aaf0:	2000000c 	.word	0x2000000c
 800aaf4:	e000ed04 	.word	0xe000ed04

0800aaf8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800aaf8:	b480      	push	{r7}
 800aafa:	b083      	sub	sp, #12
 800aafc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800aafe:	4b11      	ldr	r3, [pc, #68]	; (800ab44 <vPortExitCritical+0x4c>)
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d109      	bne.n	800ab1a <vPortExitCritical+0x22>
 800ab06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab0a:	f383 8811 	msr	BASEPRI, r3
 800ab0e:	f3bf 8f6f 	isb	sy
 800ab12:	f3bf 8f4f 	dsb	sy
 800ab16:	607b      	str	r3, [r7, #4]
 800ab18:	e7fe      	b.n	800ab18 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800ab1a:	4b0a      	ldr	r3, [pc, #40]	; (800ab44 <vPortExitCritical+0x4c>)
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	3b01      	subs	r3, #1
 800ab20:	4a08      	ldr	r2, [pc, #32]	; (800ab44 <vPortExitCritical+0x4c>)
 800ab22:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ab24:	4b07      	ldr	r3, [pc, #28]	; (800ab44 <vPortExitCritical+0x4c>)
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d104      	bne.n	800ab36 <vPortExitCritical+0x3e>
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ab30:	683b      	ldr	r3, [r7, #0]
 800ab32:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800ab36:	bf00      	nop
 800ab38:	370c      	adds	r7, #12
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab40:	4770      	bx	lr
 800ab42:	bf00      	nop
 800ab44:	2000000c 	.word	0x2000000c
	...

0800ab50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ab50:	f3ef 8009 	mrs	r0, PSP
 800ab54:	f3bf 8f6f 	isb	sy
 800ab58:	4b15      	ldr	r3, [pc, #84]	; (800abb0 <pxCurrentTCBConst>)
 800ab5a:	681a      	ldr	r2, [r3, #0]
 800ab5c:	f01e 0f10 	tst.w	lr, #16
 800ab60:	bf08      	it	eq
 800ab62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ab66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab6a:	6010      	str	r0, [r2, #0]
 800ab6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ab70:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ab74:	f380 8811 	msr	BASEPRI, r0
 800ab78:	f3bf 8f4f 	dsb	sy
 800ab7c:	f3bf 8f6f 	isb	sy
 800ab80:	f7fe ffde 	bl	8009b40 <vTaskSwitchContext>
 800ab84:	f04f 0000 	mov.w	r0, #0
 800ab88:	f380 8811 	msr	BASEPRI, r0
 800ab8c:	bc09      	pop	{r0, r3}
 800ab8e:	6819      	ldr	r1, [r3, #0]
 800ab90:	6808      	ldr	r0, [r1, #0]
 800ab92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab96:	f01e 0f10 	tst.w	lr, #16
 800ab9a:	bf08      	it	eq
 800ab9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800aba0:	f380 8809 	msr	PSP, r0
 800aba4:	f3bf 8f6f 	isb	sy
 800aba8:	4770      	bx	lr
 800abaa:	bf00      	nop
 800abac:	f3af 8000 	nop.w

0800abb0 <pxCurrentTCBConst>:
 800abb0:	200008d0 	.word	0x200008d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800abb4:	bf00      	nop
 800abb6:	bf00      	nop

0800abb8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	b082      	sub	sp, #8
 800abbc:	af00      	add	r7, sp, #0
	__asm volatile
 800abbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abc2:	f383 8811 	msr	BASEPRI, r3
 800abc6:	f3bf 8f6f 	isb	sy
 800abca:	f3bf 8f4f 	dsb	sy
 800abce:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800abd0:	f7fe fefe 	bl	80099d0 <xTaskIncrementTick>
 800abd4:	4603      	mov	r3, r0
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d003      	beq.n	800abe2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800abda:	4b06      	ldr	r3, [pc, #24]	; (800abf4 <SysTick_Handler+0x3c>)
 800abdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abe0:	601a      	str	r2, [r3, #0]
 800abe2:	2300      	movs	r3, #0
 800abe4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800abec:	bf00      	nop
 800abee:	3708      	adds	r7, #8
 800abf0:	46bd      	mov	sp, r7
 800abf2:	bd80      	pop	{r7, pc}
 800abf4:	e000ed04 	.word	0xe000ed04

0800abf8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800abf8:	b480      	push	{r7}
 800abfa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800abfc:	4b0b      	ldr	r3, [pc, #44]	; (800ac2c <vPortSetupTimerInterrupt+0x34>)
 800abfe:	2200      	movs	r2, #0
 800ac00:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ac02:	4b0b      	ldr	r3, [pc, #44]	; (800ac30 <vPortSetupTimerInterrupt+0x38>)
 800ac04:	2200      	movs	r2, #0
 800ac06:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ac08:	4b0a      	ldr	r3, [pc, #40]	; (800ac34 <vPortSetupTimerInterrupt+0x3c>)
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	4a0a      	ldr	r2, [pc, #40]	; (800ac38 <vPortSetupTimerInterrupt+0x40>)
 800ac0e:	fba2 2303 	umull	r2, r3, r2, r3
 800ac12:	099b      	lsrs	r3, r3, #6
 800ac14:	4a09      	ldr	r2, [pc, #36]	; (800ac3c <vPortSetupTimerInterrupt+0x44>)
 800ac16:	3b01      	subs	r3, #1
 800ac18:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ac1a:	4b04      	ldr	r3, [pc, #16]	; (800ac2c <vPortSetupTimerInterrupt+0x34>)
 800ac1c:	2207      	movs	r2, #7
 800ac1e:	601a      	str	r2, [r3, #0]
}
 800ac20:	bf00      	nop
 800ac22:	46bd      	mov	sp, r7
 800ac24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac28:	4770      	bx	lr
 800ac2a:	bf00      	nop
 800ac2c:	e000e010 	.word	0xe000e010
 800ac30:	e000e018 	.word	0xe000e018
 800ac34:	20000000 	.word	0x20000000
 800ac38:	10624dd3 	.word	0x10624dd3
 800ac3c:	e000e014 	.word	0xe000e014

0800ac40 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ac40:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ac50 <vPortEnableVFP+0x10>
 800ac44:	6801      	ldr	r1, [r0, #0]
 800ac46:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ac4a:	6001      	str	r1, [r0, #0]
 800ac4c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ac4e:	bf00      	nop
 800ac50:	e000ed88 	.word	0xe000ed88

0800ac54 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ac54:	b480      	push	{r7}
 800ac56:	b085      	sub	sp, #20
 800ac58:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ac5a:	f3ef 8305 	mrs	r3, IPSR
 800ac5e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	2b0f      	cmp	r3, #15
 800ac64:	d913      	bls.n	800ac8e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ac66:	4a16      	ldr	r2, [pc, #88]	; (800acc0 <vPortValidateInterruptPriority+0x6c>)
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	4413      	add	r3, r2
 800ac6c:	781b      	ldrb	r3, [r3, #0]
 800ac6e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ac70:	4b14      	ldr	r3, [pc, #80]	; (800acc4 <vPortValidateInterruptPriority+0x70>)
 800ac72:	781b      	ldrb	r3, [r3, #0]
 800ac74:	7afa      	ldrb	r2, [r7, #11]
 800ac76:	429a      	cmp	r2, r3
 800ac78:	d209      	bcs.n	800ac8e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800ac7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac7e:	f383 8811 	msr	BASEPRI, r3
 800ac82:	f3bf 8f6f 	isb	sy
 800ac86:	f3bf 8f4f 	dsb	sy
 800ac8a:	607b      	str	r3, [r7, #4]
 800ac8c:	e7fe      	b.n	800ac8c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ac8e:	4b0e      	ldr	r3, [pc, #56]	; (800acc8 <vPortValidateInterruptPriority+0x74>)
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ac96:	4b0d      	ldr	r3, [pc, #52]	; (800accc <vPortValidateInterruptPriority+0x78>)
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	429a      	cmp	r2, r3
 800ac9c:	d909      	bls.n	800acb2 <vPortValidateInterruptPriority+0x5e>
 800ac9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aca2:	f383 8811 	msr	BASEPRI, r3
 800aca6:	f3bf 8f6f 	isb	sy
 800acaa:	f3bf 8f4f 	dsb	sy
 800acae:	603b      	str	r3, [r7, #0]
 800acb0:	e7fe      	b.n	800acb0 <vPortValidateInterruptPriority+0x5c>
	}
 800acb2:	bf00      	nop
 800acb4:	3714      	adds	r7, #20
 800acb6:	46bd      	mov	sp, r7
 800acb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acbc:	4770      	bx	lr
 800acbe:	bf00      	nop
 800acc0:	e000e3f0 	.word	0xe000e3f0
 800acc4:	20000efc 	.word	0x20000efc
 800acc8:	e000ed0c 	.word	0xe000ed0c
 800accc:	20000f00 	.word	0x20000f00

0800acd0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b08a      	sub	sp, #40	; 0x28
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800acd8:	2300      	movs	r3, #0
 800acda:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800acdc:	f7fe fdbe 	bl	800985c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ace0:	4b57      	ldr	r3, [pc, #348]	; (800ae40 <pvPortMalloc+0x170>)
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d101      	bne.n	800acec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ace8:	f000 f90c 	bl	800af04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800acec:	4b55      	ldr	r3, [pc, #340]	; (800ae44 <pvPortMalloc+0x174>)
 800acee:	681a      	ldr	r2, [r3, #0]
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	4013      	ands	r3, r2
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	f040 808c 	bne.w	800ae12 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d01c      	beq.n	800ad3a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800ad00:	2208      	movs	r2, #8
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	4413      	add	r3, r2
 800ad06:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	f003 0307 	and.w	r3, r3, #7
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d013      	beq.n	800ad3a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	f023 0307 	bic.w	r3, r3, #7
 800ad18:	3308      	adds	r3, #8
 800ad1a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	f003 0307 	and.w	r3, r3, #7
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d009      	beq.n	800ad3a <pvPortMalloc+0x6a>
 800ad26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad2a:	f383 8811 	msr	BASEPRI, r3
 800ad2e:	f3bf 8f6f 	isb	sy
 800ad32:	f3bf 8f4f 	dsb	sy
 800ad36:	617b      	str	r3, [r7, #20]
 800ad38:	e7fe      	b.n	800ad38 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d068      	beq.n	800ae12 <pvPortMalloc+0x142>
 800ad40:	4b41      	ldr	r3, [pc, #260]	; (800ae48 <pvPortMalloc+0x178>)
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	687a      	ldr	r2, [r7, #4]
 800ad46:	429a      	cmp	r2, r3
 800ad48:	d863      	bhi.n	800ae12 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ad4a:	4b40      	ldr	r3, [pc, #256]	; (800ae4c <pvPortMalloc+0x17c>)
 800ad4c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ad4e:	4b3f      	ldr	r3, [pc, #252]	; (800ae4c <pvPortMalloc+0x17c>)
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ad54:	e004      	b.n	800ad60 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800ad56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad58:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ad5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ad60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad62:	685b      	ldr	r3, [r3, #4]
 800ad64:	687a      	ldr	r2, [r7, #4]
 800ad66:	429a      	cmp	r2, r3
 800ad68:	d903      	bls.n	800ad72 <pvPortMalloc+0xa2>
 800ad6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d1f1      	bne.n	800ad56 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ad72:	4b33      	ldr	r3, [pc, #204]	; (800ae40 <pvPortMalloc+0x170>)
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad78:	429a      	cmp	r2, r3
 800ad7a:	d04a      	beq.n	800ae12 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ad7c:	6a3b      	ldr	r3, [r7, #32]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	2208      	movs	r2, #8
 800ad82:	4413      	add	r3, r2
 800ad84:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ad86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad88:	681a      	ldr	r2, [r3, #0]
 800ad8a:	6a3b      	ldr	r3, [r7, #32]
 800ad8c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ad8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad90:	685a      	ldr	r2, [r3, #4]
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	1ad2      	subs	r2, r2, r3
 800ad96:	2308      	movs	r3, #8
 800ad98:	005b      	lsls	r3, r3, #1
 800ad9a:	429a      	cmp	r2, r3
 800ad9c:	d91e      	bls.n	800addc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ad9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	4413      	add	r3, r2
 800ada4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ada6:	69bb      	ldr	r3, [r7, #24]
 800ada8:	f003 0307 	and.w	r3, r3, #7
 800adac:	2b00      	cmp	r3, #0
 800adae:	d009      	beq.n	800adc4 <pvPortMalloc+0xf4>
 800adb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adb4:	f383 8811 	msr	BASEPRI, r3
 800adb8:	f3bf 8f6f 	isb	sy
 800adbc:	f3bf 8f4f 	dsb	sy
 800adc0:	613b      	str	r3, [r7, #16]
 800adc2:	e7fe      	b.n	800adc2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800adc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adc6:	685a      	ldr	r2, [r3, #4]
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	1ad2      	subs	r2, r2, r3
 800adcc:	69bb      	ldr	r3, [r7, #24]
 800adce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800add0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800add2:	687a      	ldr	r2, [r7, #4]
 800add4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800add6:	69b8      	ldr	r0, [r7, #24]
 800add8:	f000 f8f6 	bl	800afc8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800addc:	4b1a      	ldr	r3, [pc, #104]	; (800ae48 <pvPortMalloc+0x178>)
 800adde:	681a      	ldr	r2, [r3, #0]
 800ade0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ade2:	685b      	ldr	r3, [r3, #4]
 800ade4:	1ad3      	subs	r3, r2, r3
 800ade6:	4a18      	ldr	r2, [pc, #96]	; (800ae48 <pvPortMalloc+0x178>)
 800ade8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800adea:	4b17      	ldr	r3, [pc, #92]	; (800ae48 <pvPortMalloc+0x178>)
 800adec:	681a      	ldr	r2, [r3, #0]
 800adee:	4b18      	ldr	r3, [pc, #96]	; (800ae50 <pvPortMalloc+0x180>)
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	429a      	cmp	r2, r3
 800adf4:	d203      	bcs.n	800adfe <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800adf6:	4b14      	ldr	r3, [pc, #80]	; (800ae48 <pvPortMalloc+0x178>)
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	4a15      	ldr	r2, [pc, #84]	; (800ae50 <pvPortMalloc+0x180>)
 800adfc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800adfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae00:	685a      	ldr	r2, [r3, #4]
 800ae02:	4b10      	ldr	r3, [pc, #64]	; (800ae44 <pvPortMalloc+0x174>)
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	431a      	orrs	r2, r3
 800ae08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae0a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ae0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae0e:	2200      	movs	r2, #0
 800ae10:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ae12:	f7fe fd31 	bl	8009878 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ae16:	69fb      	ldr	r3, [r7, #28]
 800ae18:	f003 0307 	and.w	r3, r3, #7
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d009      	beq.n	800ae34 <pvPortMalloc+0x164>
 800ae20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae24:	f383 8811 	msr	BASEPRI, r3
 800ae28:	f3bf 8f6f 	isb	sy
 800ae2c:	f3bf 8f4f 	dsb	sy
 800ae30:	60fb      	str	r3, [r7, #12]
 800ae32:	e7fe      	b.n	800ae32 <pvPortMalloc+0x162>
	return pvReturn;
 800ae34:	69fb      	ldr	r3, [r7, #28]
}
 800ae36:	4618      	mov	r0, r3
 800ae38:	3728      	adds	r7, #40	; 0x28
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	bd80      	pop	{r7, pc}
 800ae3e:	bf00      	nop
 800ae40:	20004b0c 	.word	0x20004b0c
 800ae44:	20004b18 	.word	0x20004b18
 800ae48:	20004b10 	.word	0x20004b10
 800ae4c:	20004b04 	.word	0x20004b04
 800ae50:	20004b14 	.word	0x20004b14

0800ae54 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b086      	sub	sp, #24
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d046      	beq.n	800aef4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ae66:	2308      	movs	r3, #8
 800ae68:	425b      	negs	r3, r3
 800ae6a:	697a      	ldr	r2, [r7, #20]
 800ae6c:	4413      	add	r3, r2
 800ae6e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ae70:	697b      	ldr	r3, [r7, #20]
 800ae72:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ae74:	693b      	ldr	r3, [r7, #16]
 800ae76:	685a      	ldr	r2, [r3, #4]
 800ae78:	4b20      	ldr	r3, [pc, #128]	; (800aefc <vPortFree+0xa8>)
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	4013      	ands	r3, r2
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d109      	bne.n	800ae96 <vPortFree+0x42>
 800ae82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae86:	f383 8811 	msr	BASEPRI, r3
 800ae8a:	f3bf 8f6f 	isb	sy
 800ae8e:	f3bf 8f4f 	dsb	sy
 800ae92:	60fb      	str	r3, [r7, #12]
 800ae94:	e7fe      	b.n	800ae94 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ae96:	693b      	ldr	r3, [r7, #16]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d009      	beq.n	800aeb2 <vPortFree+0x5e>
 800ae9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aea2:	f383 8811 	msr	BASEPRI, r3
 800aea6:	f3bf 8f6f 	isb	sy
 800aeaa:	f3bf 8f4f 	dsb	sy
 800aeae:	60bb      	str	r3, [r7, #8]
 800aeb0:	e7fe      	b.n	800aeb0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800aeb2:	693b      	ldr	r3, [r7, #16]
 800aeb4:	685a      	ldr	r2, [r3, #4]
 800aeb6:	4b11      	ldr	r3, [pc, #68]	; (800aefc <vPortFree+0xa8>)
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	4013      	ands	r3, r2
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d019      	beq.n	800aef4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800aec0:	693b      	ldr	r3, [r7, #16]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d115      	bne.n	800aef4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800aec8:	693b      	ldr	r3, [r7, #16]
 800aeca:	685a      	ldr	r2, [r3, #4]
 800aecc:	4b0b      	ldr	r3, [pc, #44]	; (800aefc <vPortFree+0xa8>)
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	43db      	mvns	r3, r3
 800aed2:	401a      	ands	r2, r3
 800aed4:	693b      	ldr	r3, [r7, #16]
 800aed6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800aed8:	f7fe fcc0 	bl	800985c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800aedc:	693b      	ldr	r3, [r7, #16]
 800aede:	685a      	ldr	r2, [r3, #4]
 800aee0:	4b07      	ldr	r3, [pc, #28]	; (800af00 <vPortFree+0xac>)
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	4413      	add	r3, r2
 800aee6:	4a06      	ldr	r2, [pc, #24]	; (800af00 <vPortFree+0xac>)
 800aee8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800aeea:	6938      	ldr	r0, [r7, #16]
 800aeec:	f000 f86c 	bl	800afc8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800aef0:	f7fe fcc2 	bl	8009878 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800aef4:	bf00      	nop
 800aef6:	3718      	adds	r7, #24
 800aef8:	46bd      	mov	sp, r7
 800aefa:	bd80      	pop	{r7, pc}
 800aefc:	20004b18 	.word	0x20004b18
 800af00:	20004b10 	.word	0x20004b10

0800af04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800af04:	b480      	push	{r7}
 800af06:	b085      	sub	sp, #20
 800af08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800af0a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800af0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800af10:	4b27      	ldr	r3, [pc, #156]	; (800afb0 <prvHeapInit+0xac>)
 800af12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	f003 0307 	and.w	r3, r3, #7
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d00c      	beq.n	800af38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	3307      	adds	r3, #7
 800af22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	f023 0307 	bic.w	r3, r3, #7
 800af2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800af2c:	68ba      	ldr	r2, [r7, #8]
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	1ad3      	subs	r3, r2, r3
 800af32:	4a1f      	ldr	r2, [pc, #124]	; (800afb0 <prvHeapInit+0xac>)
 800af34:	4413      	add	r3, r2
 800af36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800af3c:	4a1d      	ldr	r2, [pc, #116]	; (800afb4 <prvHeapInit+0xb0>)
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800af42:	4b1c      	ldr	r3, [pc, #112]	; (800afb4 <prvHeapInit+0xb0>)
 800af44:	2200      	movs	r2, #0
 800af46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	68ba      	ldr	r2, [r7, #8]
 800af4c:	4413      	add	r3, r2
 800af4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800af50:	2208      	movs	r2, #8
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	1a9b      	subs	r3, r3, r2
 800af56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	f023 0307 	bic.w	r3, r3, #7
 800af5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	4a15      	ldr	r2, [pc, #84]	; (800afb8 <prvHeapInit+0xb4>)
 800af64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800af66:	4b14      	ldr	r3, [pc, #80]	; (800afb8 <prvHeapInit+0xb4>)
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	2200      	movs	r2, #0
 800af6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800af6e:	4b12      	ldr	r3, [pc, #72]	; (800afb8 <prvHeapInit+0xb4>)
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	2200      	movs	r2, #0
 800af74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800af7a:	683b      	ldr	r3, [r7, #0]
 800af7c:	68fa      	ldr	r2, [r7, #12]
 800af7e:	1ad2      	subs	r2, r2, r3
 800af80:	683b      	ldr	r3, [r7, #0]
 800af82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800af84:	4b0c      	ldr	r3, [pc, #48]	; (800afb8 <prvHeapInit+0xb4>)
 800af86:	681a      	ldr	r2, [r3, #0]
 800af88:	683b      	ldr	r3, [r7, #0]
 800af8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800af8c:	683b      	ldr	r3, [r7, #0]
 800af8e:	685b      	ldr	r3, [r3, #4]
 800af90:	4a0a      	ldr	r2, [pc, #40]	; (800afbc <prvHeapInit+0xb8>)
 800af92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800af94:	683b      	ldr	r3, [r7, #0]
 800af96:	685b      	ldr	r3, [r3, #4]
 800af98:	4a09      	ldr	r2, [pc, #36]	; (800afc0 <prvHeapInit+0xbc>)
 800af9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800af9c:	4b09      	ldr	r3, [pc, #36]	; (800afc4 <prvHeapInit+0xc0>)
 800af9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800afa2:	601a      	str	r2, [r3, #0]
}
 800afa4:	bf00      	nop
 800afa6:	3714      	adds	r7, #20
 800afa8:	46bd      	mov	sp, r7
 800afaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afae:	4770      	bx	lr
 800afb0:	20000f04 	.word	0x20000f04
 800afb4:	20004b04 	.word	0x20004b04
 800afb8:	20004b0c 	.word	0x20004b0c
 800afbc:	20004b14 	.word	0x20004b14
 800afc0:	20004b10 	.word	0x20004b10
 800afc4:	20004b18 	.word	0x20004b18

0800afc8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800afc8:	b480      	push	{r7}
 800afca:	b085      	sub	sp, #20
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800afd0:	4b28      	ldr	r3, [pc, #160]	; (800b074 <prvInsertBlockIntoFreeList+0xac>)
 800afd2:	60fb      	str	r3, [r7, #12]
 800afd4:	e002      	b.n	800afdc <prvInsertBlockIntoFreeList+0x14>
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	60fb      	str	r3, [r7, #12]
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	687a      	ldr	r2, [r7, #4]
 800afe2:	429a      	cmp	r2, r3
 800afe4:	d8f7      	bhi.n	800afd6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	685b      	ldr	r3, [r3, #4]
 800afee:	68ba      	ldr	r2, [r7, #8]
 800aff0:	4413      	add	r3, r2
 800aff2:	687a      	ldr	r2, [r7, #4]
 800aff4:	429a      	cmp	r2, r3
 800aff6:	d108      	bne.n	800b00a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	685a      	ldr	r2, [r3, #4]
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	685b      	ldr	r3, [r3, #4]
 800b000:	441a      	add	r2, r3
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	685b      	ldr	r3, [r3, #4]
 800b012:	68ba      	ldr	r2, [r7, #8]
 800b014:	441a      	add	r2, r3
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	429a      	cmp	r2, r3
 800b01c:	d118      	bne.n	800b050 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	681a      	ldr	r2, [r3, #0]
 800b022:	4b15      	ldr	r3, [pc, #84]	; (800b078 <prvInsertBlockIntoFreeList+0xb0>)
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	429a      	cmp	r2, r3
 800b028:	d00d      	beq.n	800b046 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	685a      	ldr	r2, [r3, #4]
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	685b      	ldr	r3, [r3, #4]
 800b034:	441a      	add	r2, r3
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	681a      	ldr	r2, [r3, #0]
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	601a      	str	r2, [r3, #0]
 800b044:	e008      	b.n	800b058 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b046:	4b0c      	ldr	r3, [pc, #48]	; (800b078 <prvInsertBlockIntoFreeList+0xb0>)
 800b048:	681a      	ldr	r2, [r3, #0]
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	601a      	str	r2, [r3, #0]
 800b04e:	e003      	b.n	800b058 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	681a      	ldr	r2, [r3, #0]
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b058:	68fa      	ldr	r2, [r7, #12]
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	429a      	cmp	r2, r3
 800b05e:	d002      	beq.n	800b066 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	687a      	ldr	r2, [r7, #4]
 800b064:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b066:	bf00      	nop
 800b068:	3714      	adds	r7, #20
 800b06a:	46bd      	mov	sp, r7
 800b06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b070:	4770      	bx	lr
 800b072:	bf00      	nop
 800b074:	20004b04 	.word	0x20004b04
 800b078:	20004b0c 	.word	0x20004b0c

0800b07c <atoi>:
 800b07c:	220a      	movs	r2, #10
 800b07e:	2100      	movs	r1, #0
 800b080:	f001 bd50 	b.w	800cb24 <strtol>

0800b084 <__errno>:
 800b084:	4b01      	ldr	r3, [pc, #4]	; (800b08c <__errno+0x8>)
 800b086:	6818      	ldr	r0, [r3, #0]
 800b088:	4770      	bx	lr
 800b08a:	bf00      	nop
 800b08c:	20000010 	.word	0x20000010

0800b090 <__libc_init_array>:
 800b090:	b570      	push	{r4, r5, r6, lr}
 800b092:	4e0d      	ldr	r6, [pc, #52]	; (800b0c8 <__libc_init_array+0x38>)
 800b094:	4c0d      	ldr	r4, [pc, #52]	; (800b0cc <__libc_init_array+0x3c>)
 800b096:	1ba4      	subs	r4, r4, r6
 800b098:	10a4      	asrs	r4, r4, #2
 800b09a:	2500      	movs	r5, #0
 800b09c:	42a5      	cmp	r5, r4
 800b09e:	d109      	bne.n	800b0b4 <__libc_init_array+0x24>
 800b0a0:	4e0b      	ldr	r6, [pc, #44]	; (800b0d0 <__libc_init_array+0x40>)
 800b0a2:	4c0c      	ldr	r4, [pc, #48]	; (800b0d4 <__libc_init_array+0x44>)
 800b0a4:	f003 fd6c 	bl	800eb80 <_init>
 800b0a8:	1ba4      	subs	r4, r4, r6
 800b0aa:	10a4      	asrs	r4, r4, #2
 800b0ac:	2500      	movs	r5, #0
 800b0ae:	42a5      	cmp	r5, r4
 800b0b0:	d105      	bne.n	800b0be <__libc_init_array+0x2e>
 800b0b2:	bd70      	pop	{r4, r5, r6, pc}
 800b0b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b0b8:	4798      	blx	r3
 800b0ba:	3501      	adds	r5, #1
 800b0bc:	e7ee      	b.n	800b09c <__libc_init_array+0xc>
 800b0be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b0c2:	4798      	blx	r3
 800b0c4:	3501      	adds	r5, #1
 800b0c6:	e7f2      	b.n	800b0ae <__libc_init_array+0x1e>
 800b0c8:	0800f100 	.word	0x0800f100
 800b0cc:	0800f100 	.word	0x0800f100
 800b0d0:	0800f100 	.word	0x0800f100
 800b0d4:	0800f104 	.word	0x0800f104

0800b0d8 <memcpy>:
 800b0d8:	b510      	push	{r4, lr}
 800b0da:	1e43      	subs	r3, r0, #1
 800b0dc:	440a      	add	r2, r1
 800b0de:	4291      	cmp	r1, r2
 800b0e0:	d100      	bne.n	800b0e4 <memcpy+0xc>
 800b0e2:	bd10      	pop	{r4, pc}
 800b0e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b0e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b0ec:	e7f7      	b.n	800b0de <memcpy+0x6>

0800b0ee <memset>:
 800b0ee:	4402      	add	r2, r0
 800b0f0:	4603      	mov	r3, r0
 800b0f2:	4293      	cmp	r3, r2
 800b0f4:	d100      	bne.n	800b0f8 <memset+0xa>
 800b0f6:	4770      	bx	lr
 800b0f8:	f803 1b01 	strb.w	r1, [r3], #1
 800b0fc:	e7f9      	b.n	800b0f2 <memset+0x4>

0800b0fe <__cvt>:
 800b0fe:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b102:	ec55 4b10 	vmov	r4, r5, d0
 800b106:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800b108:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b10c:	2d00      	cmp	r5, #0
 800b10e:	460e      	mov	r6, r1
 800b110:	4691      	mov	r9, r2
 800b112:	4619      	mov	r1, r3
 800b114:	bfb8      	it	lt
 800b116:	4622      	movlt	r2, r4
 800b118:	462b      	mov	r3, r5
 800b11a:	f027 0720 	bic.w	r7, r7, #32
 800b11e:	bfbb      	ittet	lt
 800b120:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b124:	461d      	movlt	r5, r3
 800b126:	2300      	movge	r3, #0
 800b128:	232d      	movlt	r3, #45	; 0x2d
 800b12a:	bfb8      	it	lt
 800b12c:	4614      	movlt	r4, r2
 800b12e:	2f46      	cmp	r7, #70	; 0x46
 800b130:	700b      	strb	r3, [r1, #0]
 800b132:	d004      	beq.n	800b13e <__cvt+0x40>
 800b134:	2f45      	cmp	r7, #69	; 0x45
 800b136:	d100      	bne.n	800b13a <__cvt+0x3c>
 800b138:	3601      	adds	r6, #1
 800b13a:	2102      	movs	r1, #2
 800b13c:	e000      	b.n	800b140 <__cvt+0x42>
 800b13e:	2103      	movs	r1, #3
 800b140:	ab03      	add	r3, sp, #12
 800b142:	9301      	str	r3, [sp, #4]
 800b144:	ab02      	add	r3, sp, #8
 800b146:	9300      	str	r3, [sp, #0]
 800b148:	4632      	mov	r2, r6
 800b14a:	4653      	mov	r3, sl
 800b14c:	ec45 4b10 	vmov	d0, r4, r5
 800b150:	f001 fd8a 	bl	800cc68 <_dtoa_r>
 800b154:	2f47      	cmp	r7, #71	; 0x47
 800b156:	4680      	mov	r8, r0
 800b158:	d102      	bne.n	800b160 <__cvt+0x62>
 800b15a:	f019 0f01 	tst.w	r9, #1
 800b15e:	d026      	beq.n	800b1ae <__cvt+0xb0>
 800b160:	2f46      	cmp	r7, #70	; 0x46
 800b162:	eb08 0906 	add.w	r9, r8, r6
 800b166:	d111      	bne.n	800b18c <__cvt+0x8e>
 800b168:	f898 3000 	ldrb.w	r3, [r8]
 800b16c:	2b30      	cmp	r3, #48	; 0x30
 800b16e:	d10a      	bne.n	800b186 <__cvt+0x88>
 800b170:	2200      	movs	r2, #0
 800b172:	2300      	movs	r3, #0
 800b174:	4620      	mov	r0, r4
 800b176:	4629      	mov	r1, r5
 800b178:	f7f5 fca6 	bl	8000ac8 <__aeabi_dcmpeq>
 800b17c:	b918      	cbnz	r0, 800b186 <__cvt+0x88>
 800b17e:	f1c6 0601 	rsb	r6, r6, #1
 800b182:	f8ca 6000 	str.w	r6, [sl]
 800b186:	f8da 3000 	ldr.w	r3, [sl]
 800b18a:	4499      	add	r9, r3
 800b18c:	2200      	movs	r2, #0
 800b18e:	2300      	movs	r3, #0
 800b190:	4620      	mov	r0, r4
 800b192:	4629      	mov	r1, r5
 800b194:	f7f5 fc98 	bl	8000ac8 <__aeabi_dcmpeq>
 800b198:	b938      	cbnz	r0, 800b1aa <__cvt+0xac>
 800b19a:	2230      	movs	r2, #48	; 0x30
 800b19c:	9b03      	ldr	r3, [sp, #12]
 800b19e:	454b      	cmp	r3, r9
 800b1a0:	d205      	bcs.n	800b1ae <__cvt+0xb0>
 800b1a2:	1c59      	adds	r1, r3, #1
 800b1a4:	9103      	str	r1, [sp, #12]
 800b1a6:	701a      	strb	r2, [r3, #0]
 800b1a8:	e7f8      	b.n	800b19c <__cvt+0x9e>
 800b1aa:	f8cd 900c 	str.w	r9, [sp, #12]
 800b1ae:	9b03      	ldr	r3, [sp, #12]
 800b1b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b1b2:	eba3 0308 	sub.w	r3, r3, r8
 800b1b6:	4640      	mov	r0, r8
 800b1b8:	6013      	str	r3, [r2, #0]
 800b1ba:	b004      	add	sp, #16
 800b1bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800b1c0 <__exponent>:
 800b1c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b1c2:	2900      	cmp	r1, #0
 800b1c4:	4604      	mov	r4, r0
 800b1c6:	bfba      	itte	lt
 800b1c8:	4249      	neglt	r1, r1
 800b1ca:	232d      	movlt	r3, #45	; 0x2d
 800b1cc:	232b      	movge	r3, #43	; 0x2b
 800b1ce:	2909      	cmp	r1, #9
 800b1d0:	f804 2b02 	strb.w	r2, [r4], #2
 800b1d4:	7043      	strb	r3, [r0, #1]
 800b1d6:	dd20      	ble.n	800b21a <__exponent+0x5a>
 800b1d8:	f10d 0307 	add.w	r3, sp, #7
 800b1dc:	461f      	mov	r7, r3
 800b1de:	260a      	movs	r6, #10
 800b1e0:	fb91 f5f6 	sdiv	r5, r1, r6
 800b1e4:	fb06 1115 	mls	r1, r6, r5, r1
 800b1e8:	3130      	adds	r1, #48	; 0x30
 800b1ea:	2d09      	cmp	r5, #9
 800b1ec:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b1f0:	f103 32ff 	add.w	r2, r3, #4294967295
 800b1f4:	4629      	mov	r1, r5
 800b1f6:	dc09      	bgt.n	800b20c <__exponent+0x4c>
 800b1f8:	3130      	adds	r1, #48	; 0x30
 800b1fa:	3b02      	subs	r3, #2
 800b1fc:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b200:	42bb      	cmp	r3, r7
 800b202:	4622      	mov	r2, r4
 800b204:	d304      	bcc.n	800b210 <__exponent+0x50>
 800b206:	1a10      	subs	r0, r2, r0
 800b208:	b003      	add	sp, #12
 800b20a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b20c:	4613      	mov	r3, r2
 800b20e:	e7e7      	b.n	800b1e0 <__exponent+0x20>
 800b210:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b214:	f804 2b01 	strb.w	r2, [r4], #1
 800b218:	e7f2      	b.n	800b200 <__exponent+0x40>
 800b21a:	2330      	movs	r3, #48	; 0x30
 800b21c:	4419      	add	r1, r3
 800b21e:	7083      	strb	r3, [r0, #2]
 800b220:	1d02      	adds	r2, r0, #4
 800b222:	70c1      	strb	r1, [r0, #3]
 800b224:	e7ef      	b.n	800b206 <__exponent+0x46>
	...

0800b228 <_printf_float>:
 800b228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b22c:	b08d      	sub	sp, #52	; 0x34
 800b22e:	460c      	mov	r4, r1
 800b230:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800b234:	4616      	mov	r6, r2
 800b236:	461f      	mov	r7, r3
 800b238:	4605      	mov	r5, r0
 800b23a:	f002 fdf9 	bl	800de30 <_localeconv_r>
 800b23e:	6803      	ldr	r3, [r0, #0]
 800b240:	9304      	str	r3, [sp, #16]
 800b242:	4618      	mov	r0, r3
 800b244:	f7f4 ffc4 	bl	80001d0 <strlen>
 800b248:	2300      	movs	r3, #0
 800b24a:	930a      	str	r3, [sp, #40]	; 0x28
 800b24c:	f8d8 3000 	ldr.w	r3, [r8]
 800b250:	9005      	str	r0, [sp, #20]
 800b252:	3307      	adds	r3, #7
 800b254:	f023 0307 	bic.w	r3, r3, #7
 800b258:	f103 0208 	add.w	r2, r3, #8
 800b25c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b260:	f8d4 b000 	ldr.w	fp, [r4]
 800b264:	f8c8 2000 	str.w	r2, [r8]
 800b268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b26c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b270:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b274:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b278:	9307      	str	r3, [sp, #28]
 800b27a:	f8cd 8018 	str.w	r8, [sp, #24]
 800b27e:	f04f 32ff 	mov.w	r2, #4294967295
 800b282:	4ba7      	ldr	r3, [pc, #668]	; (800b520 <_printf_float+0x2f8>)
 800b284:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b288:	f7f5 fc50 	bl	8000b2c <__aeabi_dcmpun>
 800b28c:	bb70      	cbnz	r0, 800b2ec <_printf_float+0xc4>
 800b28e:	f04f 32ff 	mov.w	r2, #4294967295
 800b292:	4ba3      	ldr	r3, [pc, #652]	; (800b520 <_printf_float+0x2f8>)
 800b294:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b298:	f7f5 fc2a 	bl	8000af0 <__aeabi_dcmple>
 800b29c:	bb30      	cbnz	r0, 800b2ec <_printf_float+0xc4>
 800b29e:	2200      	movs	r2, #0
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	4640      	mov	r0, r8
 800b2a4:	4649      	mov	r1, r9
 800b2a6:	f7f5 fc19 	bl	8000adc <__aeabi_dcmplt>
 800b2aa:	b110      	cbz	r0, 800b2b2 <_printf_float+0x8a>
 800b2ac:	232d      	movs	r3, #45	; 0x2d
 800b2ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b2b2:	4a9c      	ldr	r2, [pc, #624]	; (800b524 <_printf_float+0x2fc>)
 800b2b4:	4b9c      	ldr	r3, [pc, #624]	; (800b528 <_printf_float+0x300>)
 800b2b6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800b2ba:	bf8c      	ite	hi
 800b2bc:	4690      	movhi	r8, r2
 800b2be:	4698      	movls	r8, r3
 800b2c0:	2303      	movs	r3, #3
 800b2c2:	f02b 0204 	bic.w	r2, fp, #4
 800b2c6:	6123      	str	r3, [r4, #16]
 800b2c8:	6022      	str	r2, [r4, #0]
 800b2ca:	f04f 0900 	mov.w	r9, #0
 800b2ce:	9700      	str	r7, [sp, #0]
 800b2d0:	4633      	mov	r3, r6
 800b2d2:	aa0b      	add	r2, sp, #44	; 0x2c
 800b2d4:	4621      	mov	r1, r4
 800b2d6:	4628      	mov	r0, r5
 800b2d8:	f000 f9e6 	bl	800b6a8 <_printf_common>
 800b2dc:	3001      	adds	r0, #1
 800b2de:	f040 808d 	bne.w	800b3fc <_printf_float+0x1d4>
 800b2e2:	f04f 30ff 	mov.w	r0, #4294967295
 800b2e6:	b00d      	add	sp, #52	; 0x34
 800b2e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2ec:	4642      	mov	r2, r8
 800b2ee:	464b      	mov	r3, r9
 800b2f0:	4640      	mov	r0, r8
 800b2f2:	4649      	mov	r1, r9
 800b2f4:	f7f5 fc1a 	bl	8000b2c <__aeabi_dcmpun>
 800b2f8:	b110      	cbz	r0, 800b300 <_printf_float+0xd8>
 800b2fa:	4a8c      	ldr	r2, [pc, #560]	; (800b52c <_printf_float+0x304>)
 800b2fc:	4b8c      	ldr	r3, [pc, #560]	; (800b530 <_printf_float+0x308>)
 800b2fe:	e7da      	b.n	800b2b6 <_printf_float+0x8e>
 800b300:	6861      	ldr	r1, [r4, #4]
 800b302:	1c4b      	adds	r3, r1, #1
 800b304:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800b308:	a80a      	add	r0, sp, #40	; 0x28
 800b30a:	d13e      	bne.n	800b38a <_printf_float+0x162>
 800b30c:	2306      	movs	r3, #6
 800b30e:	6063      	str	r3, [r4, #4]
 800b310:	2300      	movs	r3, #0
 800b312:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800b316:	ab09      	add	r3, sp, #36	; 0x24
 800b318:	9300      	str	r3, [sp, #0]
 800b31a:	ec49 8b10 	vmov	d0, r8, r9
 800b31e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b322:	6022      	str	r2, [r4, #0]
 800b324:	f8cd a004 	str.w	sl, [sp, #4]
 800b328:	6861      	ldr	r1, [r4, #4]
 800b32a:	4628      	mov	r0, r5
 800b32c:	f7ff fee7 	bl	800b0fe <__cvt>
 800b330:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800b334:	2b47      	cmp	r3, #71	; 0x47
 800b336:	4680      	mov	r8, r0
 800b338:	d109      	bne.n	800b34e <_printf_float+0x126>
 800b33a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b33c:	1cd8      	adds	r0, r3, #3
 800b33e:	db02      	blt.n	800b346 <_printf_float+0x11e>
 800b340:	6862      	ldr	r2, [r4, #4]
 800b342:	4293      	cmp	r3, r2
 800b344:	dd47      	ble.n	800b3d6 <_printf_float+0x1ae>
 800b346:	f1aa 0a02 	sub.w	sl, sl, #2
 800b34a:	fa5f fa8a 	uxtb.w	sl, sl
 800b34e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800b352:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b354:	d824      	bhi.n	800b3a0 <_printf_float+0x178>
 800b356:	3901      	subs	r1, #1
 800b358:	4652      	mov	r2, sl
 800b35a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b35e:	9109      	str	r1, [sp, #36]	; 0x24
 800b360:	f7ff ff2e 	bl	800b1c0 <__exponent>
 800b364:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b366:	1813      	adds	r3, r2, r0
 800b368:	2a01      	cmp	r2, #1
 800b36a:	4681      	mov	r9, r0
 800b36c:	6123      	str	r3, [r4, #16]
 800b36e:	dc02      	bgt.n	800b376 <_printf_float+0x14e>
 800b370:	6822      	ldr	r2, [r4, #0]
 800b372:	07d1      	lsls	r1, r2, #31
 800b374:	d501      	bpl.n	800b37a <_printf_float+0x152>
 800b376:	3301      	adds	r3, #1
 800b378:	6123      	str	r3, [r4, #16]
 800b37a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d0a5      	beq.n	800b2ce <_printf_float+0xa6>
 800b382:	232d      	movs	r3, #45	; 0x2d
 800b384:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b388:	e7a1      	b.n	800b2ce <_printf_float+0xa6>
 800b38a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800b38e:	f000 8177 	beq.w	800b680 <_printf_float+0x458>
 800b392:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800b396:	d1bb      	bne.n	800b310 <_printf_float+0xe8>
 800b398:	2900      	cmp	r1, #0
 800b39a:	d1b9      	bne.n	800b310 <_printf_float+0xe8>
 800b39c:	2301      	movs	r3, #1
 800b39e:	e7b6      	b.n	800b30e <_printf_float+0xe6>
 800b3a0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800b3a4:	d119      	bne.n	800b3da <_printf_float+0x1b2>
 800b3a6:	2900      	cmp	r1, #0
 800b3a8:	6863      	ldr	r3, [r4, #4]
 800b3aa:	dd0c      	ble.n	800b3c6 <_printf_float+0x19e>
 800b3ac:	6121      	str	r1, [r4, #16]
 800b3ae:	b913      	cbnz	r3, 800b3b6 <_printf_float+0x18e>
 800b3b0:	6822      	ldr	r2, [r4, #0]
 800b3b2:	07d2      	lsls	r2, r2, #31
 800b3b4:	d502      	bpl.n	800b3bc <_printf_float+0x194>
 800b3b6:	3301      	adds	r3, #1
 800b3b8:	440b      	add	r3, r1
 800b3ba:	6123      	str	r3, [r4, #16]
 800b3bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3be:	65a3      	str	r3, [r4, #88]	; 0x58
 800b3c0:	f04f 0900 	mov.w	r9, #0
 800b3c4:	e7d9      	b.n	800b37a <_printf_float+0x152>
 800b3c6:	b913      	cbnz	r3, 800b3ce <_printf_float+0x1a6>
 800b3c8:	6822      	ldr	r2, [r4, #0]
 800b3ca:	07d0      	lsls	r0, r2, #31
 800b3cc:	d501      	bpl.n	800b3d2 <_printf_float+0x1aa>
 800b3ce:	3302      	adds	r3, #2
 800b3d0:	e7f3      	b.n	800b3ba <_printf_float+0x192>
 800b3d2:	2301      	movs	r3, #1
 800b3d4:	e7f1      	b.n	800b3ba <_printf_float+0x192>
 800b3d6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800b3da:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b3de:	4293      	cmp	r3, r2
 800b3e0:	db05      	blt.n	800b3ee <_printf_float+0x1c6>
 800b3e2:	6822      	ldr	r2, [r4, #0]
 800b3e4:	6123      	str	r3, [r4, #16]
 800b3e6:	07d1      	lsls	r1, r2, #31
 800b3e8:	d5e8      	bpl.n	800b3bc <_printf_float+0x194>
 800b3ea:	3301      	adds	r3, #1
 800b3ec:	e7e5      	b.n	800b3ba <_printf_float+0x192>
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	bfd4      	ite	le
 800b3f2:	f1c3 0302 	rsble	r3, r3, #2
 800b3f6:	2301      	movgt	r3, #1
 800b3f8:	4413      	add	r3, r2
 800b3fa:	e7de      	b.n	800b3ba <_printf_float+0x192>
 800b3fc:	6823      	ldr	r3, [r4, #0]
 800b3fe:	055a      	lsls	r2, r3, #21
 800b400:	d407      	bmi.n	800b412 <_printf_float+0x1ea>
 800b402:	6923      	ldr	r3, [r4, #16]
 800b404:	4642      	mov	r2, r8
 800b406:	4631      	mov	r1, r6
 800b408:	4628      	mov	r0, r5
 800b40a:	47b8      	blx	r7
 800b40c:	3001      	adds	r0, #1
 800b40e:	d12b      	bne.n	800b468 <_printf_float+0x240>
 800b410:	e767      	b.n	800b2e2 <_printf_float+0xba>
 800b412:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800b416:	f240 80dc 	bls.w	800b5d2 <_printf_float+0x3aa>
 800b41a:	2200      	movs	r2, #0
 800b41c:	2300      	movs	r3, #0
 800b41e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b422:	f7f5 fb51 	bl	8000ac8 <__aeabi_dcmpeq>
 800b426:	2800      	cmp	r0, #0
 800b428:	d033      	beq.n	800b492 <_printf_float+0x26a>
 800b42a:	2301      	movs	r3, #1
 800b42c:	4a41      	ldr	r2, [pc, #260]	; (800b534 <_printf_float+0x30c>)
 800b42e:	4631      	mov	r1, r6
 800b430:	4628      	mov	r0, r5
 800b432:	47b8      	blx	r7
 800b434:	3001      	adds	r0, #1
 800b436:	f43f af54 	beq.w	800b2e2 <_printf_float+0xba>
 800b43a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b43e:	429a      	cmp	r2, r3
 800b440:	db02      	blt.n	800b448 <_printf_float+0x220>
 800b442:	6823      	ldr	r3, [r4, #0]
 800b444:	07d8      	lsls	r0, r3, #31
 800b446:	d50f      	bpl.n	800b468 <_printf_float+0x240>
 800b448:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b44c:	4631      	mov	r1, r6
 800b44e:	4628      	mov	r0, r5
 800b450:	47b8      	blx	r7
 800b452:	3001      	adds	r0, #1
 800b454:	f43f af45 	beq.w	800b2e2 <_printf_float+0xba>
 800b458:	f04f 0800 	mov.w	r8, #0
 800b45c:	f104 091a 	add.w	r9, r4, #26
 800b460:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b462:	3b01      	subs	r3, #1
 800b464:	4543      	cmp	r3, r8
 800b466:	dc09      	bgt.n	800b47c <_printf_float+0x254>
 800b468:	6823      	ldr	r3, [r4, #0]
 800b46a:	079b      	lsls	r3, r3, #30
 800b46c:	f100 8103 	bmi.w	800b676 <_printf_float+0x44e>
 800b470:	68e0      	ldr	r0, [r4, #12]
 800b472:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b474:	4298      	cmp	r0, r3
 800b476:	bfb8      	it	lt
 800b478:	4618      	movlt	r0, r3
 800b47a:	e734      	b.n	800b2e6 <_printf_float+0xbe>
 800b47c:	2301      	movs	r3, #1
 800b47e:	464a      	mov	r2, r9
 800b480:	4631      	mov	r1, r6
 800b482:	4628      	mov	r0, r5
 800b484:	47b8      	blx	r7
 800b486:	3001      	adds	r0, #1
 800b488:	f43f af2b 	beq.w	800b2e2 <_printf_float+0xba>
 800b48c:	f108 0801 	add.w	r8, r8, #1
 800b490:	e7e6      	b.n	800b460 <_printf_float+0x238>
 800b492:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b494:	2b00      	cmp	r3, #0
 800b496:	dc2b      	bgt.n	800b4f0 <_printf_float+0x2c8>
 800b498:	2301      	movs	r3, #1
 800b49a:	4a26      	ldr	r2, [pc, #152]	; (800b534 <_printf_float+0x30c>)
 800b49c:	4631      	mov	r1, r6
 800b49e:	4628      	mov	r0, r5
 800b4a0:	47b8      	blx	r7
 800b4a2:	3001      	adds	r0, #1
 800b4a4:	f43f af1d 	beq.w	800b2e2 <_printf_float+0xba>
 800b4a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4aa:	b923      	cbnz	r3, 800b4b6 <_printf_float+0x28e>
 800b4ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4ae:	b913      	cbnz	r3, 800b4b6 <_printf_float+0x28e>
 800b4b0:	6823      	ldr	r3, [r4, #0]
 800b4b2:	07d9      	lsls	r1, r3, #31
 800b4b4:	d5d8      	bpl.n	800b468 <_printf_float+0x240>
 800b4b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b4ba:	4631      	mov	r1, r6
 800b4bc:	4628      	mov	r0, r5
 800b4be:	47b8      	blx	r7
 800b4c0:	3001      	adds	r0, #1
 800b4c2:	f43f af0e 	beq.w	800b2e2 <_printf_float+0xba>
 800b4c6:	f04f 0900 	mov.w	r9, #0
 800b4ca:	f104 0a1a 	add.w	sl, r4, #26
 800b4ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4d0:	425b      	negs	r3, r3
 800b4d2:	454b      	cmp	r3, r9
 800b4d4:	dc01      	bgt.n	800b4da <_printf_float+0x2b2>
 800b4d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4d8:	e794      	b.n	800b404 <_printf_float+0x1dc>
 800b4da:	2301      	movs	r3, #1
 800b4dc:	4652      	mov	r2, sl
 800b4de:	4631      	mov	r1, r6
 800b4e0:	4628      	mov	r0, r5
 800b4e2:	47b8      	blx	r7
 800b4e4:	3001      	adds	r0, #1
 800b4e6:	f43f aefc 	beq.w	800b2e2 <_printf_float+0xba>
 800b4ea:	f109 0901 	add.w	r9, r9, #1
 800b4ee:	e7ee      	b.n	800b4ce <_printf_float+0x2a6>
 800b4f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b4f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b4f4:	429a      	cmp	r2, r3
 800b4f6:	bfa8      	it	ge
 800b4f8:	461a      	movge	r2, r3
 800b4fa:	2a00      	cmp	r2, #0
 800b4fc:	4691      	mov	r9, r2
 800b4fe:	dd07      	ble.n	800b510 <_printf_float+0x2e8>
 800b500:	4613      	mov	r3, r2
 800b502:	4631      	mov	r1, r6
 800b504:	4642      	mov	r2, r8
 800b506:	4628      	mov	r0, r5
 800b508:	47b8      	blx	r7
 800b50a:	3001      	adds	r0, #1
 800b50c:	f43f aee9 	beq.w	800b2e2 <_printf_float+0xba>
 800b510:	f104 031a 	add.w	r3, r4, #26
 800b514:	f04f 0b00 	mov.w	fp, #0
 800b518:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b51c:	9306      	str	r3, [sp, #24]
 800b51e:	e015      	b.n	800b54c <_printf_float+0x324>
 800b520:	7fefffff 	.word	0x7fefffff
 800b524:	0800ede0 	.word	0x0800ede0
 800b528:	0800eddc 	.word	0x0800eddc
 800b52c:	0800ede8 	.word	0x0800ede8
 800b530:	0800ede4 	.word	0x0800ede4
 800b534:	0800edec 	.word	0x0800edec
 800b538:	2301      	movs	r3, #1
 800b53a:	9a06      	ldr	r2, [sp, #24]
 800b53c:	4631      	mov	r1, r6
 800b53e:	4628      	mov	r0, r5
 800b540:	47b8      	blx	r7
 800b542:	3001      	adds	r0, #1
 800b544:	f43f aecd 	beq.w	800b2e2 <_printf_float+0xba>
 800b548:	f10b 0b01 	add.w	fp, fp, #1
 800b54c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800b550:	ebaa 0309 	sub.w	r3, sl, r9
 800b554:	455b      	cmp	r3, fp
 800b556:	dcef      	bgt.n	800b538 <_printf_float+0x310>
 800b558:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b55c:	429a      	cmp	r2, r3
 800b55e:	44d0      	add	r8, sl
 800b560:	db15      	blt.n	800b58e <_printf_float+0x366>
 800b562:	6823      	ldr	r3, [r4, #0]
 800b564:	07da      	lsls	r2, r3, #31
 800b566:	d412      	bmi.n	800b58e <_printf_float+0x366>
 800b568:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b56a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b56c:	eba3 020a 	sub.w	r2, r3, sl
 800b570:	eba3 0a01 	sub.w	sl, r3, r1
 800b574:	4592      	cmp	sl, r2
 800b576:	bfa8      	it	ge
 800b578:	4692      	movge	sl, r2
 800b57a:	f1ba 0f00 	cmp.w	sl, #0
 800b57e:	dc0e      	bgt.n	800b59e <_printf_float+0x376>
 800b580:	f04f 0800 	mov.w	r8, #0
 800b584:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b588:	f104 091a 	add.w	r9, r4, #26
 800b58c:	e019      	b.n	800b5c2 <_printf_float+0x39a>
 800b58e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b592:	4631      	mov	r1, r6
 800b594:	4628      	mov	r0, r5
 800b596:	47b8      	blx	r7
 800b598:	3001      	adds	r0, #1
 800b59a:	d1e5      	bne.n	800b568 <_printf_float+0x340>
 800b59c:	e6a1      	b.n	800b2e2 <_printf_float+0xba>
 800b59e:	4653      	mov	r3, sl
 800b5a0:	4642      	mov	r2, r8
 800b5a2:	4631      	mov	r1, r6
 800b5a4:	4628      	mov	r0, r5
 800b5a6:	47b8      	blx	r7
 800b5a8:	3001      	adds	r0, #1
 800b5aa:	d1e9      	bne.n	800b580 <_printf_float+0x358>
 800b5ac:	e699      	b.n	800b2e2 <_printf_float+0xba>
 800b5ae:	2301      	movs	r3, #1
 800b5b0:	464a      	mov	r2, r9
 800b5b2:	4631      	mov	r1, r6
 800b5b4:	4628      	mov	r0, r5
 800b5b6:	47b8      	blx	r7
 800b5b8:	3001      	adds	r0, #1
 800b5ba:	f43f ae92 	beq.w	800b2e2 <_printf_float+0xba>
 800b5be:	f108 0801 	add.w	r8, r8, #1
 800b5c2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b5c6:	1a9b      	subs	r3, r3, r2
 800b5c8:	eba3 030a 	sub.w	r3, r3, sl
 800b5cc:	4543      	cmp	r3, r8
 800b5ce:	dcee      	bgt.n	800b5ae <_printf_float+0x386>
 800b5d0:	e74a      	b.n	800b468 <_printf_float+0x240>
 800b5d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b5d4:	2a01      	cmp	r2, #1
 800b5d6:	dc01      	bgt.n	800b5dc <_printf_float+0x3b4>
 800b5d8:	07db      	lsls	r3, r3, #31
 800b5da:	d53a      	bpl.n	800b652 <_printf_float+0x42a>
 800b5dc:	2301      	movs	r3, #1
 800b5de:	4642      	mov	r2, r8
 800b5e0:	4631      	mov	r1, r6
 800b5e2:	4628      	mov	r0, r5
 800b5e4:	47b8      	blx	r7
 800b5e6:	3001      	adds	r0, #1
 800b5e8:	f43f ae7b 	beq.w	800b2e2 <_printf_float+0xba>
 800b5ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b5f0:	4631      	mov	r1, r6
 800b5f2:	4628      	mov	r0, r5
 800b5f4:	47b8      	blx	r7
 800b5f6:	3001      	adds	r0, #1
 800b5f8:	f108 0801 	add.w	r8, r8, #1
 800b5fc:	f43f ae71 	beq.w	800b2e2 <_printf_float+0xba>
 800b600:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b602:	2200      	movs	r2, #0
 800b604:	f103 3aff 	add.w	sl, r3, #4294967295
 800b608:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b60c:	2300      	movs	r3, #0
 800b60e:	f7f5 fa5b 	bl	8000ac8 <__aeabi_dcmpeq>
 800b612:	b9c8      	cbnz	r0, 800b648 <_printf_float+0x420>
 800b614:	4653      	mov	r3, sl
 800b616:	4642      	mov	r2, r8
 800b618:	4631      	mov	r1, r6
 800b61a:	4628      	mov	r0, r5
 800b61c:	47b8      	blx	r7
 800b61e:	3001      	adds	r0, #1
 800b620:	d10e      	bne.n	800b640 <_printf_float+0x418>
 800b622:	e65e      	b.n	800b2e2 <_printf_float+0xba>
 800b624:	2301      	movs	r3, #1
 800b626:	4652      	mov	r2, sl
 800b628:	4631      	mov	r1, r6
 800b62a:	4628      	mov	r0, r5
 800b62c:	47b8      	blx	r7
 800b62e:	3001      	adds	r0, #1
 800b630:	f43f ae57 	beq.w	800b2e2 <_printf_float+0xba>
 800b634:	f108 0801 	add.w	r8, r8, #1
 800b638:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b63a:	3b01      	subs	r3, #1
 800b63c:	4543      	cmp	r3, r8
 800b63e:	dcf1      	bgt.n	800b624 <_printf_float+0x3fc>
 800b640:	464b      	mov	r3, r9
 800b642:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b646:	e6de      	b.n	800b406 <_printf_float+0x1de>
 800b648:	f04f 0800 	mov.w	r8, #0
 800b64c:	f104 0a1a 	add.w	sl, r4, #26
 800b650:	e7f2      	b.n	800b638 <_printf_float+0x410>
 800b652:	2301      	movs	r3, #1
 800b654:	e7df      	b.n	800b616 <_printf_float+0x3ee>
 800b656:	2301      	movs	r3, #1
 800b658:	464a      	mov	r2, r9
 800b65a:	4631      	mov	r1, r6
 800b65c:	4628      	mov	r0, r5
 800b65e:	47b8      	blx	r7
 800b660:	3001      	adds	r0, #1
 800b662:	f43f ae3e 	beq.w	800b2e2 <_printf_float+0xba>
 800b666:	f108 0801 	add.w	r8, r8, #1
 800b66a:	68e3      	ldr	r3, [r4, #12]
 800b66c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b66e:	1a9b      	subs	r3, r3, r2
 800b670:	4543      	cmp	r3, r8
 800b672:	dcf0      	bgt.n	800b656 <_printf_float+0x42e>
 800b674:	e6fc      	b.n	800b470 <_printf_float+0x248>
 800b676:	f04f 0800 	mov.w	r8, #0
 800b67a:	f104 0919 	add.w	r9, r4, #25
 800b67e:	e7f4      	b.n	800b66a <_printf_float+0x442>
 800b680:	2900      	cmp	r1, #0
 800b682:	f43f ae8b 	beq.w	800b39c <_printf_float+0x174>
 800b686:	2300      	movs	r3, #0
 800b688:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800b68c:	ab09      	add	r3, sp, #36	; 0x24
 800b68e:	9300      	str	r3, [sp, #0]
 800b690:	ec49 8b10 	vmov	d0, r8, r9
 800b694:	6022      	str	r2, [r4, #0]
 800b696:	f8cd a004 	str.w	sl, [sp, #4]
 800b69a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b69e:	4628      	mov	r0, r5
 800b6a0:	f7ff fd2d 	bl	800b0fe <__cvt>
 800b6a4:	4680      	mov	r8, r0
 800b6a6:	e648      	b.n	800b33a <_printf_float+0x112>

0800b6a8 <_printf_common>:
 800b6a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6ac:	4691      	mov	r9, r2
 800b6ae:	461f      	mov	r7, r3
 800b6b0:	688a      	ldr	r2, [r1, #8]
 800b6b2:	690b      	ldr	r3, [r1, #16]
 800b6b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b6b8:	4293      	cmp	r3, r2
 800b6ba:	bfb8      	it	lt
 800b6bc:	4613      	movlt	r3, r2
 800b6be:	f8c9 3000 	str.w	r3, [r9]
 800b6c2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b6c6:	4606      	mov	r6, r0
 800b6c8:	460c      	mov	r4, r1
 800b6ca:	b112      	cbz	r2, 800b6d2 <_printf_common+0x2a>
 800b6cc:	3301      	adds	r3, #1
 800b6ce:	f8c9 3000 	str.w	r3, [r9]
 800b6d2:	6823      	ldr	r3, [r4, #0]
 800b6d4:	0699      	lsls	r1, r3, #26
 800b6d6:	bf42      	ittt	mi
 800b6d8:	f8d9 3000 	ldrmi.w	r3, [r9]
 800b6dc:	3302      	addmi	r3, #2
 800b6de:	f8c9 3000 	strmi.w	r3, [r9]
 800b6e2:	6825      	ldr	r5, [r4, #0]
 800b6e4:	f015 0506 	ands.w	r5, r5, #6
 800b6e8:	d107      	bne.n	800b6fa <_printf_common+0x52>
 800b6ea:	f104 0a19 	add.w	sl, r4, #25
 800b6ee:	68e3      	ldr	r3, [r4, #12]
 800b6f0:	f8d9 2000 	ldr.w	r2, [r9]
 800b6f4:	1a9b      	subs	r3, r3, r2
 800b6f6:	42ab      	cmp	r3, r5
 800b6f8:	dc28      	bgt.n	800b74c <_printf_common+0xa4>
 800b6fa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800b6fe:	6822      	ldr	r2, [r4, #0]
 800b700:	3300      	adds	r3, #0
 800b702:	bf18      	it	ne
 800b704:	2301      	movne	r3, #1
 800b706:	0692      	lsls	r2, r2, #26
 800b708:	d42d      	bmi.n	800b766 <_printf_common+0xbe>
 800b70a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b70e:	4639      	mov	r1, r7
 800b710:	4630      	mov	r0, r6
 800b712:	47c0      	blx	r8
 800b714:	3001      	adds	r0, #1
 800b716:	d020      	beq.n	800b75a <_printf_common+0xb2>
 800b718:	6823      	ldr	r3, [r4, #0]
 800b71a:	68e5      	ldr	r5, [r4, #12]
 800b71c:	f8d9 2000 	ldr.w	r2, [r9]
 800b720:	f003 0306 	and.w	r3, r3, #6
 800b724:	2b04      	cmp	r3, #4
 800b726:	bf08      	it	eq
 800b728:	1aad      	subeq	r5, r5, r2
 800b72a:	68a3      	ldr	r3, [r4, #8]
 800b72c:	6922      	ldr	r2, [r4, #16]
 800b72e:	bf0c      	ite	eq
 800b730:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b734:	2500      	movne	r5, #0
 800b736:	4293      	cmp	r3, r2
 800b738:	bfc4      	itt	gt
 800b73a:	1a9b      	subgt	r3, r3, r2
 800b73c:	18ed      	addgt	r5, r5, r3
 800b73e:	f04f 0900 	mov.w	r9, #0
 800b742:	341a      	adds	r4, #26
 800b744:	454d      	cmp	r5, r9
 800b746:	d11a      	bne.n	800b77e <_printf_common+0xd6>
 800b748:	2000      	movs	r0, #0
 800b74a:	e008      	b.n	800b75e <_printf_common+0xb6>
 800b74c:	2301      	movs	r3, #1
 800b74e:	4652      	mov	r2, sl
 800b750:	4639      	mov	r1, r7
 800b752:	4630      	mov	r0, r6
 800b754:	47c0      	blx	r8
 800b756:	3001      	adds	r0, #1
 800b758:	d103      	bne.n	800b762 <_printf_common+0xba>
 800b75a:	f04f 30ff 	mov.w	r0, #4294967295
 800b75e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b762:	3501      	adds	r5, #1
 800b764:	e7c3      	b.n	800b6ee <_printf_common+0x46>
 800b766:	18e1      	adds	r1, r4, r3
 800b768:	1c5a      	adds	r2, r3, #1
 800b76a:	2030      	movs	r0, #48	; 0x30
 800b76c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b770:	4422      	add	r2, r4
 800b772:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b776:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b77a:	3302      	adds	r3, #2
 800b77c:	e7c5      	b.n	800b70a <_printf_common+0x62>
 800b77e:	2301      	movs	r3, #1
 800b780:	4622      	mov	r2, r4
 800b782:	4639      	mov	r1, r7
 800b784:	4630      	mov	r0, r6
 800b786:	47c0      	blx	r8
 800b788:	3001      	adds	r0, #1
 800b78a:	d0e6      	beq.n	800b75a <_printf_common+0xb2>
 800b78c:	f109 0901 	add.w	r9, r9, #1
 800b790:	e7d8      	b.n	800b744 <_printf_common+0x9c>
	...

0800b794 <_printf_i>:
 800b794:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b798:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800b79c:	460c      	mov	r4, r1
 800b79e:	7e09      	ldrb	r1, [r1, #24]
 800b7a0:	b085      	sub	sp, #20
 800b7a2:	296e      	cmp	r1, #110	; 0x6e
 800b7a4:	4617      	mov	r7, r2
 800b7a6:	4606      	mov	r6, r0
 800b7a8:	4698      	mov	r8, r3
 800b7aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b7ac:	f000 80b3 	beq.w	800b916 <_printf_i+0x182>
 800b7b0:	d822      	bhi.n	800b7f8 <_printf_i+0x64>
 800b7b2:	2963      	cmp	r1, #99	; 0x63
 800b7b4:	d036      	beq.n	800b824 <_printf_i+0x90>
 800b7b6:	d80a      	bhi.n	800b7ce <_printf_i+0x3a>
 800b7b8:	2900      	cmp	r1, #0
 800b7ba:	f000 80b9 	beq.w	800b930 <_printf_i+0x19c>
 800b7be:	2958      	cmp	r1, #88	; 0x58
 800b7c0:	f000 8083 	beq.w	800b8ca <_printf_i+0x136>
 800b7c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b7c8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800b7cc:	e032      	b.n	800b834 <_printf_i+0xa0>
 800b7ce:	2964      	cmp	r1, #100	; 0x64
 800b7d0:	d001      	beq.n	800b7d6 <_printf_i+0x42>
 800b7d2:	2969      	cmp	r1, #105	; 0x69
 800b7d4:	d1f6      	bne.n	800b7c4 <_printf_i+0x30>
 800b7d6:	6820      	ldr	r0, [r4, #0]
 800b7d8:	6813      	ldr	r3, [r2, #0]
 800b7da:	0605      	lsls	r5, r0, #24
 800b7dc:	f103 0104 	add.w	r1, r3, #4
 800b7e0:	d52a      	bpl.n	800b838 <_printf_i+0xa4>
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	6011      	str	r1, [r2, #0]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	da03      	bge.n	800b7f2 <_printf_i+0x5e>
 800b7ea:	222d      	movs	r2, #45	; 0x2d
 800b7ec:	425b      	negs	r3, r3
 800b7ee:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800b7f2:	486f      	ldr	r0, [pc, #444]	; (800b9b0 <_printf_i+0x21c>)
 800b7f4:	220a      	movs	r2, #10
 800b7f6:	e039      	b.n	800b86c <_printf_i+0xd8>
 800b7f8:	2973      	cmp	r1, #115	; 0x73
 800b7fa:	f000 809d 	beq.w	800b938 <_printf_i+0x1a4>
 800b7fe:	d808      	bhi.n	800b812 <_printf_i+0x7e>
 800b800:	296f      	cmp	r1, #111	; 0x6f
 800b802:	d020      	beq.n	800b846 <_printf_i+0xb2>
 800b804:	2970      	cmp	r1, #112	; 0x70
 800b806:	d1dd      	bne.n	800b7c4 <_printf_i+0x30>
 800b808:	6823      	ldr	r3, [r4, #0]
 800b80a:	f043 0320 	orr.w	r3, r3, #32
 800b80e:	6023      	str	r3, [r4, #0]
 800b810:	e003      	b.n	800b81a <_printf_i+0x86>
 800b812:	2975      	cmp	r1, #117	; 0x75
 800b814:	d017      	beq.n	800b846 <_printf_i+0xb2>
 800b816:	2978      	cmp	r1, #120	; 0x78
 800b818:	d1d4      	bne.n	800b7c4 <_printf_i+0x30>
 800b81a:	2378      	movs	r3, #120	; 0x78
 800b81c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b820:	4864      	ldr	r0, [pc, #400]	; (800b9b4 <_printf_i+0x220>)
 800b822:	e055      	b.n	800b8d0 <_printf_i+0x13c>
 800b824:	6813      	ldr	r3, [r2, #0]
 800b826:	1d19      	adds	r1, r3, #4
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	6011      	str	r1, [r2, #0]
 800b82c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b830:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b834:	2301      	movs	r3, #1
 800b836:	e08c      	b.n	800b952 <_printf_i+0x1be>
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	6011      	str	r1, [r2, #0]
 800b83c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b840:	bf18      	it	ne
 800b842:	b21b      	sxthne	r3, r3
 800b844:	e7cf      	b.n	800b7e6 <_printf_i+0x52>
 800b846:	6813      	ldr	r3, [r2, #0]
 800b848:	6825      	ldr	r5, [r4, #0]
 800b84a:	1d18      	adds	r0, r3, #4
 800b84c:	6010      	str	r0, [r2, #0]
 800b84e:	0628      	lsls	r0, r5, #24
 800b850:	d501      	bpl.n	800b856 <_printf_i+0xc2>
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	e002      	b.n	800b85c <_printf_i+0xc8>
 800b856:	0668      	lsls	r0, r5, #25
 800b858:	d5fb      	bpl.n	800b852 <_printf_i+0xbe>
 800b85a:	881b      	ldrh	r3, [r3, #0]
 800b85c:	4854      	ldr	r0, [pc, #336]	; (800b9b0 <_printf_i+0x21c>)
 800b85e:	296f      	cmp	r1, #111	; 0x6f
 800b860:	bf14      	ite	ne
 800b862:	220a      	movne	r2, #10
 800b864:	2208      	moveq	r2, #8
 800b866:	2100      	movs	r1, #0
 800b868:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b86c:	6865      	ldr	r5, [r4, #4]
 800b86e:	60a5      	str	r5, [r4, #8]
 800b870:	2d00      	cmp	r5, #0
 800b872:	f2c0 8095 	blt.w	800b9a0 <_printf_i+0x20c>
 800b876:	6821      	ldr	r1, [r4, #0]
 800b878:	f021 0104 	bic.w	r1, r1, #4
 800b87c:	6021      	str	r1, [r4, #0]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d13d      	bne.n	800b8fe <_printf_i+0x16a>
 800b882:	2d00      	cmp	r5, #0
 800b884:	f040 808e 	bne.w	800b9a4 <_printf_i+0x210>
 800b888:	4665      	mov	r5, ip
 800b88a:	2a08      	cmp	r2, #8
 800b88c:	d10b      	bne.n	800b8a6 <_printf_i+0x112>
 800b88e:	6823      	ldr	r3, [r4, #0]
 800b890:	07db      	lsls	r3, r3, #31
 800b892:	d508      	bpl.n	800b8a6 <_printf_i+0x112>
 800b894:	6923      	ldr	r3, [r4, #16]
 800b896:	6862      	ldr	r2, [r4, #4]
 800b898:	429a      	cmp	r2, r3
 800b89a:	bfde      	ittt	le
 800b89c:	2330      	movle	r3, #48	; 0x30
 800b89e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b8a2:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b8a6:	ebac 0305 	sub.w	r3, ip, r5
 800b8aa:	6123      	str	r3, [r4, #16]
 800b8ac:	f8cd 8000 	str.w	r8, [sp]
 800b8b0:	463b      	mov	r3, r7
 800b8b2:	aa03      	add	r2, sp, #12
 800b8b4:	4621      	mov	r1, r4
 800b8b6:	4630      	mov	r0, r6
 800b8b8:	f7ff fef6 	bl	800b6a8 <_printf_common>
 800b8bc:	3001      	adds	r0, #1
 800b8be:	d14d      	bne.n	800b95c <_printf_i+0x1c8>
 800b8c0:	f04f 30ff 	mov.w	r0, #4294967295
 800b8c4:	b005      	add	sp, #20
 800b8c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b8ca:	4839      	ldr	r0, [pc, #228]	; (800b9b0 <_printf_i+0x21c>)
 800b8cc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800b8d0:	6813      	ldr	r3, [r2, #0]
 800b8d2:	6821      	ldr	r1, [r4, #0]
 800b8d4:	1d1d      	adds	r5, r3, #4
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	6015      	str	r5, [r2, #0]
 800b8da:	060a      	lsls	r2, r1, #24
 800b8dc:	d50b      	bpl.n	800b8f6 <_printf_i+0x162>
 800b8de:	07ca      	lsls	r2, r1, #31
 800b8e0:	bf44      	itt	mi
 800b8e2:	f041 0120 	orrmi.w	r1, r1, #32
 800b8e6:	6021      	strmi	r1, [r4, #0]
 800b8e8:	b91b      	cbnz	r3, 800b8f2 <_printf_i+0x15e>
 800b8ea:	6822      	ldr	r2, [r4, #0]
 800b8ec:	f022 0220 	bic.w	r2, r2, #32
 800b8f0:	6022      	str	r2, [r4, #0]
 800b8f2:	2210      	movs	r2, #16
 800b8f4:	e7b7      	b.n	800b866 <_printf_i+0xd2>
 800b8f6:	064d      	lsls	r5, r1, #25
 800b8f8:	bf48      	it	mi
 800b8fa:	b29b      	uxthmi	r3, r3
 800b8fc:	e7ef      	b.n	800b8de <_printf_i+0x14a>
 800b8fe:	4665      	mov	r5, ip
 800b900:	fbb3 f1f2 	udiv	r1, r3, r2
 800b904:	fb02 3311 	mls	r3, r2, r1, r3
 800b908:	5cc3      	ldrb	r3, [r0, r3]
 800b90a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800b90e:	460b      	mov	r3, r1
 800b910:	2900      	cmp	r1, #0
 800b912:	d1f5      	bne.n	800b900 <_printf_i+0x16c>
 800b914:	e7b9      	b.n	800b88a <_printf_i+0xf6>
 800b916:	6813      	ldr	r3, [r2, #0]
 800b918:	6825      	ldr	r5, [r4, #0]
 800b91a:	6961      	ldr	r1, [r4, #20]
 800b91c:	1d18      	adds	r0, r3, #4
 800b91e:	6010      	str	r0, [r2, #0]
 800b920:	0628      	lsls	r0, r5, #24
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	d501      	bpl.n	800b92a <_printf_i+0x196>
 800b926:	6019      	str	r1, [r3, #0]
 800b928:	e002      	b.n	800b930 <_printf_i+0x19c>
 800b92a:	066a      	lsls	r2, r5, #25
 800b92c:	d5fb      	bpl.n	800b926 <_printf_i+0x192>
 800b92e:	8019      	strh	r1, [r3, #0]
 800b930:	2300      	movs	r3, #0
 800b932:	6123      	str	r3, [r4, #16]
 800b934:	4665      	mov	r5, ip
 800b936:	e7b9      	b.n	800b8ac <_printf_i+0x118>
 800b938:	6813      	ldr	r3, [r2, #0]
 800b93a:	1d19      	adds	r1, r3, #4
 800b93c:	6011      	str	r1, [r2, #0]
 800b93e:	681d      	ldr	r5, [r3, #0]
 800b940:	6862      	ldr	r2, [r4, #4]
 800b942:	2100      	movs	r1, #0
 800b944:	4628      	mov	r0, r5
 800b946:	f7f4 fc4b 	bl	80001e0 <memchr>
 800b94a:	b108      	cbz	r0, 800b950 <_printf_i+0x1bc>
 800b94c:	1b40      	subs	r0, r0, r5
 800b94e:	6060      	str	r0, [r4, #4]
 800b950:	6863      	ldr	r3, [r4, #4]
 800b952:	6123      	str	r3, [r4, #16]
 800b954:	2300      	movs	r3, #0
 800b956:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b95a:	e7a7      	b.n	800b8ac <_printf_i+0x118>
 800b95c:	6923      	ldr	r3, [r4, #16]
 800b95e:	462a      	mov	r2, r5
 800b960:	4639      	mov	r1, r7
 800b962:	4630      	mov	r0, r6
 800b964:	47c0      	blx	r8
 800b966:	3001      	adds	r0, #1
 800b968:	d0aa      	beq.n	800b8c0 <_printf_i+0x12c>
 800b96a:	6823      	ldr	r3, [r4, #0]
 800b96c:	079b      	lsls	r3, r3, #30
 800b96e:	d413      	bmi.n	800b998 <_printf_i+0x204>
 800b970:	68e0      	ldr	r0, [r4, #12]
 800b972:	9b03      	ldr	r3, [sp, #12]
 800b974:	4298      	cmp	r0, r3
 800b976:	bfb8      	it	lt
 800b978:	4618      	movlt	r0, r3
 800b97a:	e7a3      	b.n	800b8c4 <_printf_i+0x130>
 800b97c:	2301      	movs	r3, #1
 800b97e:	464a      	mov	r2, r9
 800b980:	4639      	mov	r1, r7
 800b982:	4630      	mov	r0, r6
 800b984:	47c0      	blx	r8
 800b986:	3001      	adds	r0, #1
 800b988:	d09a      	beq.n	800b8c0 <_printf_i+0x12c>
 800b98a:	3501      	adds	r5, #1
 800b98c:	68e3      	ldr	r3, [r4, #12]
 800b98e:	9a03      	ldr	r2, [sp, #12]
 800b990:	1a9b      	subs	r3, r3, r2
 800b992:	42ab      	cmp	r3, r5
 800b994:	dcf2      	bgt.n	800b97c <_printf_i+0x1e8>
 800b996:	e7eb      	b.n	800b970 <_printf_i+0x1dc>
 800b998:	2500      	movs	r5, #0
 800b99a:	f104 0919 	add.w	r9, r4, #25
 800b99e:	e7f5      	b.n	800b98c <_printf_i+0x1f8>
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d1ac      	bne.n	800b8fe <_printf_i+0x16a>
 800b9a4:	7803      	ldrb	r3, [r0, #0]
 800b9a6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b9aa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b9ae:	e76c      	b.n	800b88a <_printf_i+0xf6>
 800b9b0:	0800edee 	.word	0x0800edee
 800b9b4:	0800edff 	.word	0x0800edff

0800b9b8 <_scanf_float>:
 800b9b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9bc:	469a      	mov	sl, r3
 800b9be:	688b      	ldr	r3, [r1, #8]
 800b9c0:	4616      	mov	r6, r2
 800b9c2:	1e5a      	subs	r2, r3, #1
 800b9c4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b9c8:	b087      	sub	sp, #28
 800b9ca:	bf83      	ittte	hi
 800b9cc:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800b9d0:	189b      	addhi	r3, r3, r2
 800b9d2:	9301      	strhi	r3, [sp, #4]
 800b9d4:	2300      	movls	r3, #0
 800b9d6:	bf86      	itte	hi
 800b9d8:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b9dc:	608b      	strhi	r3, [r1, #8]
 800b9de:	9301      	strls	r3, [sp, #4]
 800b9e0:	680b      	ldr	r3, [r1, #0]
 800b9e2:	4688      	mov	r8, r1
 800b9e4:	f04f 0b00 	mov.w	fp, #0
 800b9e8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800b9ec:	f848 3b1c 	str.w	r3, [r8], #28
 800b9f0:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800b9f4:	4607      	mov	r7, r0
 800b9f6:	460c      	mov	r4, r1
 800b9f8:	4645      	mov	r5, r8
 800b9fa:	465a      	mov	r2, fp
 800b9fc:	46d9      	mov	r9, fp
 800b9fe:	f8cd b008 	str.w	fp, [sp, #8]
 800ba02:	68a1      	ldr	r1, [r4, #8]
 800ba04:	b181      	cbz	r1, 800ba28 <_scanf_float+0x70>
 800ba06:	6833      	ldr	r3, [r6, #0]
 800ba08:	781b      	ldrb	r3, [r3, #0]
 800ba0a:	2b49      	cmp	r3, #73	; 0x49
 800ba0c:	d071      	beq.n	800baf2 <_scanf_float+0x13a>
 800ba0e:	d84d      	bhi.n	800baac <_scanf_float+0xf4>
 800ba10:	2b39      	cmp	r3, #57	; 0x39
 800ba12:	d840      	bhi.n	800ba96 <_scanf_float+0xde>
 800ba14:	2b31      	cmp	r3, #49	; 0x31
 800ba16:	f080 8088 	bcs.w	800bb2a <_scanf_float+0x172>
 800ba1a:	2b2d      	cmp	r3, #45	; 0x2d
 800ba1c:	f000 8090 	beq.w	800bb40 <_scanf_float+0x188>
 800ba20:	d815      	bhi.n	800ba4e <_scanf_float+0x96>
 800ba22:	2b2b      	cmp	r3, #43	; 0x2b
 800ba24:	f000 808c 	beq.w	800bb40 <_scanf_float+0x188>
 800ba28:	f1b9 0f00 	cmp.w	r9, #0
 800ba2c:	d003      	beq.n	800ba36 <_scanf_float+0x7e>
 800ba2e:	6823      	ldr	r3, [r4, #0]
 800ba30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ba34:	6023      	str	r3, [r4, #0]
 800ba36:	3a01      	subs	r2, #1
 800ba38:	2a01      	cmp	r2, #1
 800ba3a:	f200 80ea 	bhi.w	800bc12 <_scanf_float+0x25a>
 800ba3e:	4545      	cmp	r5, r8
 800ba40:	f200 80dc 	bhi.w	800bbfc <_scanf_float+0x244>
 800ba44:	2601      	movs	r6, #1
 800ba46:	4630      	mov	r0, r6
 800ba48:	b007      	add	sp, #28
 800ba4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba4e:	2b2e      	cmp	r3, #46	; 0x2e
 800ba50:	f000 809f 	beq.w	800bb92 <_scanf_float+0x1da>
 800ba54:	2b30      	cmp	r3, #48	; 0x30
 800ba56:	d1e7      	bne.n	800ba28 <_scanf_float+0x70>
 800ba58:	6820      	ldr	r0, [r4, #0]
 800ba5a:	f410 7f80 	tst.w	r0, #256	; 0x100
 800ba5e:	d064      	beq.n	800bb2a <_scanf_float+0x172>
 800ba60:	9b01      	ldr	r3, [sp, #4]
 800ba62:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800ba66:	6020      	str	r0, [r4, #0]
 800ba68:	f109 0901 	add.w	r9, r9, #1
 800ba6c:	b11b      	cbz	r3, 800ba76 <_scanf_float+0xbe>
 800ba6e:	3b01      	subs	r3, #1
 800ba70:	3101      	adds	r1, #1
 800ba72:	9301      	str	r3, [sp, #4]
 800ba74:	60a1      	str	r1, [r4, #8]
 800ba76:	68a3      	ldr	r3, [r4, #8]
 800ba78:	3b01      	subs	r3, #1
 800ba7a:	60a3      	str	r3, [r4, #8]
 800ba7c:	6923      	ldr	r3, [r4, #16]
 800ba7e:	3301      	adds	r3, #1
 800ba80:	6123      	str	r3, [r4, #16]
 800ba82:	6873      	ldr	r3, [r6, #4]
 800ba84:	3b01      	subs	r3, #1
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	6073      	str	r3, [r6, #4]
 800ba8a:	f340 80ac 	ble.w	800bbe6 <_scanf_float+0x22e>
 800ba8e:	6833      	ldr	r3, [r6, #0]
 800ba90:	3301      	adds	r3, #1
 800ba92:	6033      	str	r3, [r6, #0]
 800ba94:	e7b5      	b.n	800ba02 <_scanf_float+0x4a>
 800ba96:	2b45      	cmp	r3, #69	; 0x45
 800ba98:	f000 8085 	beq.w	800bba6 <_scanf_float+0x1ee>
 800ba9c:	2b46      	cmp	r3, #70	; 0x46
 800ba9e:	d06a      	beq.n	800bb76 <_scanf_float+0x1be>
 800baa0:	2b41      	cmp	r3, #65	; 0x41
 800baa2:	d1c1      	bne.n	800ba28 <_scanf_float+0x70>
 800baa4:	2a01      	cmp	r2, #1
 800baa6:	d1bf      	bne.n	800ba28 <_scanf_float+0x70>
 800baa8:	2202      	movs	r2, #2
 800baaa:	e046      	b.n	800bb3a <_scanf_float+0x182>
 800baac:	2b65      	cmp	r3, #101	; 0x65
 800baae:	d07a      	beq.n	800bba6 <_scanf_float+0x1ee>
 800bab0:	d818      	bhi.n	800bae4 <_scanf_float+0x12c>
 800bab2:	2b54      	cmp	r3, #84	; 0x54
 800bab4:	d066      	beq.n	800bb84 <_scanf_float+0x1cc>
 800bab6:	d811      	bhi.n	800badc <_scanf_float+0x124>
 800bab8:	2b4e      	cmp	r3, #78	; 0x4e
 800baba:	d1b5      	bne.n	800ba28 <_scanf_float+0x70>
 800babc:	2a00      	cmp	r2, #0
 800babe:	d146      	bne.n	800bb4e <_scanf_float+0x196>
 800bac0:	f1b9 0f00 	cmp.w	r9, #0
 800bac4:	d145      	bne.n	800bb52 <_scanf_float+0x19a>
 800bac6:	6821      	ldr	r1, [r4, #0]
 800bac8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800bacc:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800bad0:	d13f      	bne.n	800bb52 <_scanf_float+0x19a>
 800bad2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800bad6:	6021      	str	r1, [r4, #0]
 800bad8:	2201      	movs	r2, #1
 800bada:	e02e      	b.n	800bb3a <_scanf_float+0x182>
 800badc:	2b59      	cmp	r3, #89	; 0x59
 800bade:	d01e      	beq.n	800bb1e <_scanf_float+0x166>
 800bae0:	2b61      	cmp	r3, #97	; 0x61
 800bae2:	e7de      	b.n	800baa2 <_scanf_float+0xea>
 800bae4:	2b6e      	cmp	r3, #110	; 0x6e
 800bae6:	d0e9      	beq.n	800babc <_scanf_float+0x104>
 800bae8:	d815      	bhi.n	800bb16 <_scanf_float+0x15e>
 800baea:	2b66      	cmp	r3, #102	; 0x66
 800baec:	d043      	beq.n	800bb76 <_scanf_float+0x1be>
 800baee:	2b69      	cmp	r3, #105	; 0x69
 800baf0:	d19a      	bne.n	800ba28 <_scanf_float+0x70>
 800baf2:	f1bb 0f00 	cmp.w	fp, #0
 800baf6:	d138      	bne.n	800bb6a <_scanf_float+0x1b2>
 800baf8:	f1b9 0f00 	cmp.w	r9, #0
 800bafc:	d197      	bne.n	800ba2e <_scanf_float+0x76>
 800bafe:	6821      	ldr	r1, [r4, #0]
 800bb00:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800bb04:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800bb08:	d195      	bne.n	800ba36 <_scanf_float+0x7e>
 800bb0a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800bb0e:	6021      	str	r1, [r4, #0]
 800bb10:	f04f 0b01 	mov.w	fp, #1
 800bb14:	e011      	b.n	800bb3a <_scanf_float+0x182>
 800bb16:	2b74      	cmp	r3, #116	; 0x74
 800bb18:	d034      	beq.n	800bb84 <_scanf_float+0x1cc>
 800bb1a:	2b79      	cmp	r3, #121	; 0x79
 800bb1c:	d184      	bne.n	800ba28 <_scanf_float+0x70>
 800bb1e:	f1bb 0f07 	cmp.w	fp, #7
 800bb22:	d181      	bne.n	800ba28 <_scanf_float+0x70>
 800bb24:	f04f 0b08 	mov.w	fp, #8
 800bb28:	e007      	b.n	800bb3a <_scanf_float+0x182>
 800bb2a:	eb12 0f0b 	cmn.w	r2, fp
 800bb2e:	f47f af7b 	bne.w	800ba28 <_scanf_float+0x70>
 800bb32:	6821      	ldr	r1, [r4, #0]
 800bb34:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800bb38:	6021      	str	r1, [r4, #0]
 800bb3a:	702b      	strb	r3, [r5, #0]
 800bb3c:	3501      	adds	r5, #1
 800bb3e:	e79a      	b.n	800ba76 <_scanf_float+0xbe>
 800bb40:	6821      	ldr	r1, [r4, #0]
 800bb42:	0608      	lsls	r0, r1, #24
 800bb44:	f57f af70 	bpl.w	800ba28 <_scanf_float+0x70>
 800bb48:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800bb4c:	e7f4      	b.n	800bb38 <_scanf_float+0x180>
 800bb4e:	2a02      	cmp	r2, #2
 800bb50:	d047      	beq.n	800bbe2 <_scanf_float+0x22a>
 800bb52:	f1bb 0f01 	cmp.w	fp, #1
 800bb56:	d003      	beq.n	800bb60 <_scanf_float+0x1a8>
 800bb58:	f1bb 0f04 	cmp.w	fp, #4
 800bb5c:	f47f af64 	bne.w	800ba28 <_scanf_float+0x70>
 800bb60:	f10b 0b01 	add.w	fp, fp, #1
 800bb64:	fa5f fb8b 	uxtb.w	fp, fp
 800bb68:	e7e7      	b.n	800bb3a <_scanf_float+0x182>
 800bb6a:	f1bb 0f03 	cmp.w	fp, #3
 800bb6e:	d0f7      	beq.n	800bb60 <_scanf_float+0x1a8>
 800bb70:	f1bb 0f05 	cmp.w	fp, #5
 800bb74:	e7f2      	b.n	800bb5c <_scanf_float+0x1a4>
 800bb76:	f1bb 0f02 	cmp.w	fp, #2
 800bb7a:	f47f af55 	bne.w	800ba28 <_scanf_float+0x70>
 800bb7e:	f04f 0b03 	mov.w	fp, #3
 800bb82:	e7da      	b.n	800bb3a <_scanf_float+0x182>
 800bb84:	f1bb 0f06 	cmp.w	fp, #6
 800bb88:	f47f af4e 	bne.w	800ba28 <_scanf_float+0x70>
 800bb8c:	f04f 0b07 	mov.w	fp, #7
 800bb90:	e7d3      	b.n	800bb3a <_scanf_float+0x182>
 800bb92:	6821      	ldr	r1, [r4, #0]
 800bb94:	0588      	lsls	r0, r1, #22
 800bb96:	f57f af47 	bpl.w	800ba28 <_scanf_float+0x70>
 800bb9a:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800bb9e:	6021      	str	r1, [r4, #0]
 800bba0:	f8cd 9008 	str.w	r9, [sp, #8]
 800bba4:	e7c9      	b.n	800bb3a <_scanf_float+0x182>
 800bba6:	6821      	ldr	r1, [r4, #0]
 800bba8:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800bbac:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800bbb0:	d006      	beq.n	800bbc0 <_scanf_float+0x208>
 800bbb2:	0548      	lsls	r0, r1, #21
 800bbb4:	f57f af38 	bpl.w	800ba28 <_scanf_float+0x70>
 800bbb8:	f1b9 0f00 	cmp.w	r9, #0
 800bbbc:	f43f af3b 	beq.w	800ba36 <_scanf_float+0x7e>
 800bbc0:	0588      	lsls	r0, r1, #22
 800bbc2:	bf58      	it	pl
 800bbc4:	9802      	ldrpl	r0, [sp, #8]
 800bbc6:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800bbca:	bf58      	it	pl
 800bbcc:	eba9 0000 	subpl.w	r0, r9, r0
 800bbd0:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800bbd4:	bf58      	it	pl
 800bbd6:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800bbda:	6021      	str	r1, [r4, #0]
 800bbdc:	f04f 0900 	mov.w	r9, #0
 800bbe0:	e7ab      	b.n	800bb3a <_scanf_float+0x182>
 800bbe2:	2203      	movs	r2, #3
 800bbe4:	e7a9      	b.n	800bb3a <_scanf_float+0x182>
 800bbe6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800bbea:	9205      	str	r2, [sp, #20]
 800bbec:	4631      	mov	r1, r6
 800bbee:	4638      	mov	r0, r7
 800bbf0:	4798      	blx	r3
 800bbf2:	9a05      	ldr	r2, [sp, #20]
 800bbf4:	2800      	cmp	r0, #0
 800bbf6:	f43f af04 	beq.w	800ba02 <_scanf_float+0x4a>
 800bbfa:	e715      	b.n	800ba28 <_scanf_float+0x70>
 800bbfc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bc00:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800bc04:	4632      	mov	r2, r6
 800bc06:	4638      	mov	r0, r7
 800bc08:	4798      	blx	r3
 800bc0a:	6923      	ldr	r3, [r4, #16]
 800bc0c:	3b01      	subs	r3, #1
 800bc0e:	6123      	str	r3, [r4, #16]
 800bc10:	e715      	b.n	800ba3e <_scanf_float+0x86>
 800bc12:	f10b 33ff 	add.w	r3, fp, #4294967295
 800bc16:	2b06      	cmp	r3, #6
 800bc18:	d80a      	bhi.n	800bc30 <_scanf_float+0x278>
 800bc1a:	f1bb 0f02 	cmp.w	fp, #2
 800bc1e:	d968      	bls.n	800bcf2 <_scanf_float+0x33a>
 800bc20:	f1ab 0b03 	sub.w	fp, fp, #3
 800bc24:	fa5f fb8b 	uxtb.w	fp, fp
 800bc28:	eba5 0b0b 	sub.w	fp, r5, fp
 800bc2c:	455d      	cmp	r5, fp
 800bc2e:	d14b      	bne.n	800bcc8 <_scanf_float+0x310>
 800bc30:	6823      	ldr	r3, [r4, #0]
 800bc32:	05da      	lsls	r2, r3, #23
 800bc34:	d51f      	bpl.n	800bc76 <_scanf_float+0x2be>
 800bc36:	055b      	lsls	r3, r3, #21
 800bc38:	d468      	bmi.n	800bd0c <_scanf_float+0x354>
 800bc3a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800bc3e:	6923      	ldr	r3, [r4, #16]
 800bc40:	2965      	cmp	r1, #101	; 0x65
 800bc42:	f103 33ff 	add.w	r3, r3, #4294967295
 800bc46:	f105 3bff 	add.w	fp, r5, #4294967295
 800bc4a:	6123      	str	r3, [r4, #16]
 800bc4c:	d00d      	beq.n	800bc6a <_scanf_float+0x2b2>
 800bc4e:	2945      	cmp	r1, #69	; 0x45
 800bc50:	d00b      	beq.n	800bc6a <_scanf_float+0x2b2>
 800bc52:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bc56:	4632      	mov	r2, r6
 800bc58:	4638      	mov	r0, r7
 800bc5a:	4798      	blx	r3
 800bc5c:	6923      	ldr	r3, [r4, #16]
 800bc5e:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800bc62:	3b01      	subs	r3, #1
 800bc64:	f1a5 0b02 	sub.w	fp, r5, #2
 800bc68:	6123      	str	r3, [r4, #16]
 800bc6a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bc6e:	4632      	mov	r2, r6
 800bc70:	4638      	mov	r0, r7
 800bc72:	4798      	blx	r3
 800bc74:	465d      	mov	r5, fp
 800bc76:	6826      	ldr	r6, [r4, #0]
 800bc78:	f016 0610 	ands.w	r6, r6, #16
 800bc7c:	d17a      	bne.n	800bd74 <_scanf_float+0x3bc>
 800bc7e:	702e      	strb	r6, [r5, #0]
 800bc80:	6823      	ldr	r3, [r4, #0]
 800bc82:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800bc86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bc8a:	d142      	bne.n	800bd12 <_scanf_float+0x35a>
 800bc8c:	9b02      	ldr	r3, [sp, #8]
 800bc8e:	eba9 0303 	sub.w	r3, r9, r3
 800bc92:	425a      	negs	r2, r3
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d149      	bne.n	800bd2c <_scanf_float+0x374>
 800bc98:	2200      	movs	r2, #0
 800bc9a:	4641      	mov	r1, r8
 800bc9c:	4638      	mov	r0, r7
 800bc9e:	f000 fea3 	bl	800c9e8 <_strtod_r>
 800bca2:	6825      	ldr	r5, [r4, #0]
 800bca4:	f8da 3000 	ldr.w	r3, [sl]
 800bca8:	f015 0f02 	tst.w	r5, #2
 800bcac:	f103 0204 	add.w	r2, r3, #4
 800bcb0:	ec59 8b10 	vmov	r8, r9, d0
 800bcb4:	f8ca 2000 	str.w	r2, [sl]
 800bcb8:	d043      	beq.n	800bd42 <_scanf_float+0x38a>
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	e9c3 8900 	strd	r8, r9, [r3]
 800bcc0:	68e3      	ldr	r3, [r4, #12]
 800bcc2:	3301      	adds	r3, #1
 800bcc4:	60e3      	str	r3, [r4, #12]
 800bcc6:	e6be      	b.n	800ba46 <_scanf_float+0x8e>
 800bcc8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bccc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800bcd0:	4632      	mov	r2, r6
 800bcd2:	4638      	mov	r0, r7
 800bcd4:	4798      	blx	r3
 800bcd6:	6923      	ldr	r3, [r4, #16]
 800bcd8:	3b01      	subs	r3, #1
 800bcda:	6123      	str	r3, [r4, #16]
 800bcdc:	e7a6      	b.n	800bc2c <_scanf_float+0x274>
 800bcde:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bce2:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800bce6:	4632      	mov	r2, r6
 800bce8:	4638      	mov	r0, r7
 800bcea:	4798      	blx	r3
 800bcec:	6923      	ldr	r3, [r4, #16]
 800bcee:	3b01      	subs	r3, #1
 800bcf0:	6123      	str	r3, [r4, #16]
 800bcf2:	4545      	cmp	r5, r8
 800bcf4:	d8f3      	bhi.n	800bcde <_scanf_float+0x326>
 800bcf6:	e6a5      	b.n	800ba44 <_scanf_float+0x8c>
 800bcf8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bcfc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800bd00:	4632      	mov	r2, r6
 800bd02:	4638      	mov	r0, r7
 800bd04:	4798      	blx	r3
 800bd06:	6923      	ldr	r3, [r4, #16]
 800bd08:	3b01      	subs	r3, #1
 800bd0a:	6123      	str	r3, [r4, #16]
 800bd0c:	4545      	cmp	r5, r8
 800bd0e:	d8f3      	bhi.n	800bcf8 <_scanf_float+0x340>
 800bd10:	e698      	b.n	800ba44 <_scanf_float+0x8c>
 800bd12:	9b03      	ldr	r3, [sp, #12]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d0bf      	beq.n	800bc98 <_scanf_float+0x2e0>
 800bd18:	9904      	ldr	r1, [sp, #16]
 800bd1a:	230a      	movs	r3, #10
 800bd1c:	4632      	mov	r2, r6
 800bd1e:	3101      	adds	r1, #1
 800bd20:	4638      	mov	r0, r7
 800bd22:	f000 feed 	bl	800cb00 <_strtol_r>
 800bd26:	9b03      	ldr	r3, [sp, #12]
 800bd28:	9d04      	ldr	r5, [sp, #16]
 800bd2a:	1ac2      	subs	r2, r0, r3
 800bd2c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800bd30:	429d      	cmp	r5, r3
 800bd32:	bf28      	it	cs
 800bd34:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800bd38:	490f      	ldr	r1, [pc, #60]	; (800bd78 <_scanf_float+0x3c0>)
 800bd3a:	4628      	mov	r0, r5
 800bd3c:	f000 f824 	bl	800bd88 <siprintf>
 800bd40:	e7aa      	b.n	800bc98 <_scanf_float+0x2e0>
 800bd42:	f015 0504 	ands.w	r5, r5, #4
 800bd46:	d1b8      	bne.n	800bcba <_scanf_float+0x302>
 800bd48:	681f      	ldr	r7, [r3, #0]
 800bd4a:	ee10 2a10 	vmov	r2, s0
 800bd4e:	464b      	mov	r3, r9
 800bd50:	ee10 0a10 	vmov	r0, s0
 800bd54:	4649      	mov	r1, r9
 800bd56:	f7f4 fee9 	bl	8000b2c <__aeabi_dcmpun>
 800bd5a:	b128      	cbz	r0, 800bd68 <_scanf_float+0x3b0>
 800bd5c:	4628      	mov	r0, r5
 800bd5e:	f000 f80d 	bl	800bd7c <nanf>
 800bd62:	ed87 0a00 	vstr	s0, [r7]
 800bd66:	e7ab      	b.n	800bcc0 <_scanf_float+0x308>
 800bd68:	4640      	mov	r0, r8
 800bd6a:	4649      	mov	r1, r9
 800bd6c:	f7f4 ff3c 	bl	8000be8 <__aeabi_d2f>
 800bd70:	6038      	str	r0, [r7, #0]
 800bd72:	e7a5      	b.n	800bcc0 <_scanf_float+0x308>
 800bd74:	2600      	movs	r6, #0
 800bd76:	e666      	b.n	800ba46 <_scanf_float+0x8e>
 800bd78:	0800ee10 	.word	0x0800ee10

0800bd7c <nanf>:
 800bd7c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800bd84 <nanf+0x8>
 800bd80:	4770      	bx	lr
 800bd82:	bf00      	nop
 800bd84:	7fc00000 	.word	0x7fc00000

0800bd88 <siprintf>:
 800bd88:	b40e      	push	{r1, r2, r3}
 800bd8a:	b500      	push	{lr}
 800bd8c:	b09c      	sub	sp, #112	; 0x70
 800bd8e:	ab1d      	add	r3, sp, #116	; 0x74
 800bd90:	9002      	str	r0, [sp, #8]
 800bd92:	9006      	str	r0, [sp, #24]
 800bd94:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bd98:	4809      	ldr	r0, [pc, #36]	; (800bdc0 <siprintf+0x38>)
 800bd9a:	9107      	str	r1, [sp, #28]
 800bd9c:	9104      	str	r1, [sp, #16]
 800bd9e:	4909      	ldr	r1, [pc, #36]	; (800bdc4 <siprintf+0x3c>)
 800bda0:	f853 2b04 	ldr.w	r2, [r3], #4
 800bda4:	9105      	str	r1, [sp, #20]
 800bda6:	6800      	ldr	r0, [r0, #0]
 800bda8:	9301      	str	r3, [sp, #4]
 800bdaa:	a902      	add	r1, sp, #8
 800bdac:	f002 fd78 	bl	800e8a0 <_svfiprintf_r>
 800bdb0:	9b02      	ldr	r3, [sp, #8]
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	701a      	strb	r2, [r3, #0]
 800bdb6:	b01c      	add	sp, #112	; 0x70
 800bdb8:	f85d eb04 	ldr.w	lr, [sp], #4
 800bdbc:	b003      	add	sp, #12
 800bdbe:	4770      	bx	lr
 800bdc0:	20000010 	.word	0x20000010
 800bdc4:	ffff0208 	.word	0xffff0208

0800bdc8 <sulp>:
 800bdc8:	b570      	push	{r4, r5, r6, lr}
 800bdca:	4604      	mov	r4, r0
 800bdcc:	460d      	mov	r5, r1
 800bdce:	ec45 4b10 	vmov	d0, r4, r5
 800bdd2:	4616      	mov	r6, r2
 800bdd4:	f002 fb20 	bl	800e418 <__ulp>
 800bdd8:	ec51 0b10 	vmov	r0, r1, d0
 800bddc:	b17e      	cbz	r6, 800bdfe <sulp+0x36>
 800bdde:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800bde2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	dd09      	ble.n	800bdfe <sulp+0x36>
 800bdea:	051b      	lsls	r3, r3, #20
 800bdec:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800bdf0:	2400      	movs	r4, #0
 800bdf2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800bdf6:	4622      	mov	r2, r4
 800bdf8:	462b      	mov	r3, r5
 800bdfa:	f7f4 fbfd 	bl	80005f8 <__aeabi_dmul>
 800bdfe:	bd70      	pop	{r4, r5, r6, pc}

0800be00 <_strtod_l>:
 800be00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be04:	461f      	mov	r7, r3
 800be06:	b0a1      	sub	sp, #132	; 0x84
 800be08:	2300      	movs	r3, #0
 800be0a:	4681      	mov	r9, r0
 800be0c:	4638      	mov	r0, r7
 800be0e:	460e      	mov	r6, r1
 800be10:	9217      	str	r2, [sp, #92]	; 0x5c
 800be12:	931c      	str	r3, [sp, #112]	; 0x70
 800be14:	f002 f809 	bl	800de2a <__localeconv_l>
 800be18:	4680      	mov	r8, r0
 800be1a:	6800      	ldr	r0, [r0, #0]
 800be1c:	f7f4 f9d8 	bl	80001d0 <strlen>
 800be20:	f04f 0a00 	mov.w	sl, #0
 800be24:	4604      	mov	r4, r0
 800be26:	f04f 0b00 	mov.w	fp, #0
 800be2a:	961b      	str	r6, [sp, #108]	; 0x6c
 800be2c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800be2e:	781a      	ldrb	r2, [r3, #0]
 800be30:	2a0d      	cmp	r2, #13
 800be32:	d832      	bhi.n	800be9a <_strtod_l+0x9a>
 800be34:	2a09      	cmp	r2, #9
 800be36:	d236      	bcs.n	800bea6 <_strtod_l+0xa6>
 800be38:	2a00      	cmp	r2, #0
 800be3a:	d03e      	beq.n	800beba <_strtod_l+0xba>
 800be3c:	2300      	movs	r3, #0
 800be3e:	930d      	str	r3, [sp, #52]	; 0x34
 800be40:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800be42:	782b      	ldrb	r3, [r5, #0]
 800be44:	2b30      	cmp	r3, #48	; 0x30
 800be46:	f040 80ac 	bne.w	800bfa2 <_strtod_l+0x1a2>
 800be4a:	786b      	ldrb	r3, [r5, #1]
 800be4c:	2b58      	cmp	r3, #88	; 0x58
 800be4e:	d001      	beq.n	800be54 <_strtod_l+0x54>
 800be50:	2b78      	cmp	r3, #120	; 0x78
 800be52:	d167      	bne.n	800bf24 <_strtod_l+0x124>
 800be54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800be56:	9301      	str	r3, [sp, #4]
 800be58:	ab1c      	add	r3, sp, #112	; 0x70
 800be5a:	9300      	str	r3, [sp, #0]
 800be5c:	9702      	str	r7, [sp, #8]
 800be5e:	ab1d      	add	r3, sp, #116	; 0x74
 800be60:	4a88      	ldr	r2, [pc, #544]	; (800c084 <_strtod_l+0x284>)
 800be62:	a91b      	add	r1, sp, #108	; 0x6c
 800be64:	4648      	mov	r0, r9
 800be66:	f001 fd06 	bl	800d876 <__gethex>
 800be6a:	f010 0407 	ands.w	r4, r0, #7
 800be6e:	4606      	mov	r6, r0
 800be70:	d005      	beq.n	800be7e <_strtod_l+0x7e>
 800be72:	2c06      	cmp	r4, #6
 800be74:	d12b      	bne.n	800bece <_strtod_l+0xce>
 800be76:	3501      	adds	r5, #1
 800be78:	2300      	movs	r3, #0
 800be7a:	951b      	str	r5, [sp, #108]	; 0x6c
 800be7c:	930d      	str	r3, [sp, #52]	; 0x34
 800be7e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800be80:	2b00      	cmp	r3, #0
 800be82:	f040 859a 	bne.w	800c9ba <_strtod_l+0xbba>
 800be86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800be88:	b1e3      	cbz	r3, 800bec4 <_strtod_l+0xc4>
 800be8a:	4652      	mov	r2, sl
 800be8c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800be90:	ec43 2b10 	vmov	d0, r2, r3
 800be94:	b021      	add	sp, #132	; 0x84
 800be96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be9a:	2a2b      	cmp	r2, #43	; 0x2b
 800be9c:	d015      	beq.n	800beca <_strtod_l+0xca>
 800be9e:	2a2d      	cmp	r2, #45	; 0x2d
 800bea0:	d004      	beq.n	800beac <_strtod_l+0xac>
 800bea2:	2a20      	cmp	r2, #32
 800bea4:	d1ca      	bne.n	800be3c <_strtod_l+0x3c>
 800bea6:	3301      	adds	r3, #1
 800bea8:	931b      	str	r3, [sp, #108]	; 0x6c
 800beaa:	e7bf      	b.n	800be2c <_strtod_l+0x2c>
 800beac:	2201      	movs	r2, #1
 800beae:	920d      	str	r2, [sp, #52]	; 0x34
 800beb0:	1c5a      	adds	r2, r3, #1
 800beb2:	921b      	str	r2, [sp, #108]	; 0x6c
 800beb4:	785b      	ldrb	r3, [r3, #1]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d1c2      	bne.n	800be40 <_strtod_l+0x40>
 800beba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bebc:	961b      	str	r6, [sp, #108]	; 0x6c
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	f040 8579 	bne.w	800c9b6 <_strtod_l+0xbb6>
 800bec4:	4652      	mov	r2, sl
 800bec6:	465b      	mov	r3, fp
 800bec8:	e7e2      	b.n	800be90 <_strtod_l+0x90>
 800beca:	2200      	movs	r2, #0
 800becc:	e7ef      	b.n	800beae <_strtod_l+0xae>
 800bece:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800bed0:	b13a      	cbz	r2, 800bee2 <_strtod_l+0xe2>
 800bed2:	2135      	movs	r1, #53	; 0x35
 800bed4:	a81e      	add	r0, sp, #120	; 0x78
 800bed6:	f002 fb97 	bl	800e608 <__copybits>
 800beda:	991c      	ldr	r1, [sp, #112]	; 0x70
 800bedc:	4648      	mov	r0, r9
 800bede:	f002 f803 	bl	800dee8 <_Bfree>
 800bee2:	3c01      	subs	r4, #1
 800bee4:	2c04      	cmp	r4, #4
 800bee6:	d806      	bhi.n	800bef6 <_strtod_l+0xf6>
 800bee8:	e8df f004 	tbb	[pc, r4]
 800beec:	1714030a 	.word	0x1714030a
 800bef0:	0a          	.byte	0x0a
 800bef1:	00          	.byte	0x00
 800bef2:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800bef6:	0730      	lsls	r0, r6, #28
 800bef8:	d5c1      	bpl.n	800be7e <_strtod_l+0x7e>
 800befa:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800befe:	e7be      	b.n	800be7e <_strtod_l+0x7e>
 800bf00:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800bf04:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800bf06:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800bf0a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800bf0e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800bf12:	e7f0      	b.n	800bef6 <_strtod_l+0xf6>
 800bf14:	f8df b170 	ldr.w	fp, [pc, #368]	; 800c088 <_strtod_l+0x288>
 800bf18:	e7ed      	b.n	800bef6 <_strtod_l+0xf6>
 800bf1a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800bf1e:	f04f 3aff 	mov.w	sl, #4294967295
 800bf22:	e7e8      	b.n	800bef6 <_strtod_l+0xf6>
 800bf24:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bf26:	1c5a      	adds	r2, r3, #1
 800bf28:	921b      	str	r2, [sp, #108]	; 0x6c
 800bf2a:	785b      	ldrb	r3, [r3, #1]
 800bf2c:	2b30      	cmp	r3, #48	; 0x30
 800bf2e:	d0f9      	beq.n	800bf24 <_strtod_l+0x124>
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d0a4      	beq.n	800be7e <_strtod_l+0x7e>
 800bf34:	2301      	movs	r3, #1
 800bf36:	2500      	movs	r5, #0
 800bf38:	9306      	str	r3, [sp, #24]
 800bf3a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bf3c:	9308      	str	r3, [sp, #32]
 800bf3e:	9507      	str	r5, [sp, #28]
 800bf40:	9505      	str	r5, [sp, #20]
 800bf42:	220a      	movs	r2, #10
 800bf44:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800bf46:	7807      	ldrb	r7, [r0, #0]
 800bf48:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800bf4c:	b2d9      	uxtb	r1, r3
 800bf4e:	2909      	cmp	r1, #9
 800bf50:	d929      	bls.n	800bfa6 <_strtod_l+0x1a6>
 800bf52:	4622      	mov	r2, r4
 800bf54:	f8d8 1000 	ldr.w	r1, [r8]
 800bf58:	f002 fdaa 	bl	800eab0 <strncmp>
 800bf5c:	2800      	cmp	r0, #0
 800bf5e:	d031      	beq.n	800bfc4 <_strtod_l+0x1c4>
 800bf60:	2000      	movs	r0, #0
 800bf62:	9c05      	ldr	r4, [sp, #20]
 800bf64:	9004      	str	r0, [sp, #16]
 800bf66:	463b      	mov	r3, r7
 800bf68:	4602      	mov	r2, r0
 800bf6a:	2b65      	cmp	r3, #101	; 0x65
 800bf6c:	d001      	beq.n	800bf72 <_strtod_l+0x172>
 800bf6e:	2b45      	cmp	r3, #69	; 0x45
 800bf70:	d114      	bne.n	800bf9c <_strtod_l+0x19c>
 800bf72:	b924      	cbnz	r4, 800bf7e <_strtod_l+0x17e>
 800bf74:	b910      	cbnz	r0, 800bf7c <_strtod_l+0x17c>
 800bf76:	9b06      	ldr	r3, [sp, #24]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d09e      	beq.n	800beba <_strtod_l+0xba>
 800bf7c:	2400      	movs	r4, #0
 800bf7e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800bf80:	1c73      	adds	r3, r6, #1
 800bf82:	931b      	str	r3, [sp, #108]	; 0x6c
 800bf84:	7873      	ldrb	r3, [r6, #1]
 800bf86:	2b2b      	cmp	r3, #43	; 0x2b
 800bf88:	d078      	beq.n	800c07c <_strtod_l+0x27c>
 800bf8a:	2b2d      	cmp	r3, #45	; 0x2d
 800bf8c:	d070      	beq.n	800c070 <_strtod_l+0x270>
 800bf8e:	f04f 0c00 	mov.w	ip, #0
 800bf92:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800bf96:	2f09      	cmp	r7, #9
 800bf98:	d97c      	bls.n	800c094 <_strtod_l+0x294>
 800bf9a:	961b      	str	r6, [sp, #108]	; 0x6c
 800bf9c:	f04f 0e00 	mov.w	lr, #0
 800bfa0:	e09a      	b.n	800c0d8 <_strtod_l+0x2d8>
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	e7c7      	b.n	800bf36 <_strtod_l+0x136>
 800bfa6:	9905      	ldr	r1, [sp, #20]
 800bfa8:	2908      	cmp	r1, #8
 800bfaa:	bfdd      	ittte	le
 800bfac:	9907      	ldrle	r1, [sp, #28]
 800bfae:	fb02 3301 	mlale	r3, r2, r1, r3
 800bfb2:	9307      	strle	r3, [sp, #28]
 800bfb4:	fb02 3505 	mlagt	r5, r2, r5, r3
 800bfb8:	9b05      	ldr	r3, [sp, #20]
 800bfba:	3001      	adds	r0, #1
 800bfbc:	3301      	adds	r3, #1
 800bfbe:	9305      	str	r3, [sp, #20]
 800bfc0:	901b      	str	r0, [sp, #108]	; 0x6c
 800bfc2:	e7bf      	b.n	800bf44 <_strtod_l+0x144>
 800bfc4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bfc6:	191a      	adds	r2, r3, r4
 800bfc8:	921b      	str	r2, [sp, #108]	; 0x6c
 800bfca:	9a05      	ldr	r2, [sp, #20]
 800bfcc:	5d1b      	ldrb	r3, [r3, r4]
 800bfce:	2a00      	cmp	r2, #0
 800bfd0:	d037      	beq.n	800c042 <_strtod_l+0x242>
 800bfd2:	9c05      	ldr	r4, [sp, #20]
 800bfd4:	4602      	mov	r2, r0
 800bfd6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800bfda:	2909      	cmp	r1, #9
 800bfdc:	d913      	bls.n	800c006 <_strtod_l+0x206>
 800bfde:	2101      	movs	r1, #1
 800bfe0:	9104      	str	r1, [sp, #16]
 800bfe2:	e7c2      	b.n	800bf6a <_strtod_l+0x16a>
 800bfe4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bfe6:	1c5a      	adds	r2, r3, #1
 800bfe8:	921b      	str	r2, [sp, #108]	; 0x6c
 800bfea:	785b      	ldrb	r3, [r3, #1]
 800bfec:	3001      	adds	r0, #1
 800bfee:	2b30      	cmp	r3, #48	; 0x30
 800bff0:	d0f8      	beq.n	800bfe4 <_strtod_l+0x1e4>
 800bff2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800bff6:	2a08      	cmp	r2, #8
 800bff8:	f200 84e4 	bhi.w	800c9c4 <_strtod_l+0xbc4>
 800bffc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800bffe:	9208      	str	r2, [sp, #32]
 800c000:	4602      	mov	r2, r0
 800c002:	2000      	movs	r0, #0
 800c004:	4604      	mov	r4, r0
 800c006:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800c00a:	f100 0101 	add.w	r1, r0, #1
 800c00e:	d012      	beq.n	800c036 <_strtod_l+0x236>
 800c010:	440a      	add	r2, r1
 800c012:	eb00 0c04 	add.w	ip, r0, r4
 800c016:	4621      	mov	r1, r4
 800c018:	270a      	movs	r7, #10
 800c01a:	458c      	cmp	ip, r1
 800c01c:	d113      	bne.n	800c046 <_strtod_l+0x246>
 800c01e:	1821      	adds	r1, r4, r0
 800c020:	2908      	cmp	r1, #8
 800c022:	f104 0401 	add.w	r4, r4, #1
 800c026:	4404      	add	r4, r0
 800c028:	dc19      	bgt.n	800c05e <_strtod_l+0x25e>
 800c02a:	9b07      	ldr	r3, [sp, #28]
 800c02c:	210a      	movs	r1, #10
 800c02e:	fb01 e303 	mla	r3, r1, r3, lr
 800c032:	9307      	str	r3, [sp, #28]
 800c034:	2100      	movs	r1, #0
 800c036:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c038:	1c58      	adds	r0, r3, #1
 800c03a:	901b      	str	r0, [sp, #108]	; 0x6c
 800c03c:	785b      	ldrb	r3, [r3, #1]
 800c03e:	4608      	mov	r0, r1
 800c040:	e7c9      	b.n	800bfd6 <_strtod_l+0x1d6>
 800c042:	9805      	ldr	r0, [sp, #20]
 800c044:	e7d3      	b.n	800bfee <_strtod_l+0x1ee>
 800c046:	2908      	cmp	r1, #8
 800c048:	f101 0101 	add.w	r1, r1, #1
 800c04c:	dc03      	bgt.n	800c056 <_strtod_l+0x256>
 800c04e:	9b07      	ldr	r3, [sp, #28]
 800c050:	437b      	muls	r3, r7
 800c052:	9307      	str	r3, [sp, #28]
 800c054:	e7e1      	b.n	800c01a <_strtod_l+0x21a>
 800c056:	2910      	cmp	r1, #16
 800c058:	bfd8      	it	le
 800c05a:	437d      	mulle	r5, r7
 800c05c:	e7dd      	b.n	800c01a <_strtod_l+0x21a>
 800c05e:	2c10      	cmp	r4, #16
 800c060:	bfdc      	itt	le
 800c062:	210a      	movle	r1, #10
 800c064:	fb01 e505 	mlale	r5, r1, r5, lr
 800c068:	e7e4      	b.n	800c034 <_strtod_l+0x234>
 800c06a:	2301      	movs	r3, #1
 800c06c:	9304      	str	r3, [sp, #16]
 800c06e:	e781      	b.n	800bf74 <_strtod_l+0x174>
 800c070:	f04f 0c01 	mov.w	ip, #1
 800c074:	1cb3      	adds	r3, r6, #2
 800c076:	931b      	str	r3, [sp, #108]	; 0x6c
 800c078:	78b3      	ldrb	r3, [r6, #2]
 800c07a:	e78a      	b.n	800bf92 <_strtod_l+0x192>
 800c07c:	f04f 0c00 	mov.w	ip, #0
 800c080:	e7f8      	b.n	800c074 <_strtod_l+0x274>
 800c082:	bf00      	nop
 800c084:	0800ee18 	.word	0x0800ee18
 800c088:	7ff00000 	.word	0x7ff00000
 800c08c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c08e:	1c5f      	adds	r7, r3, #1
 800c090:	971b      	str	r7, [sp, #108]	; 0x6c
 800c092:	785b      	ldrb	r3, [r3, #1]
 800c094:	2b30      	cmp	r3, #48	; 0x30
 800c096:	d0f9      	beq.n	800c08c <_strtod_l+0x28c>
 800c098:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800c09c:	2f08      	cmp	r7, #8
 800c09e:	f63f af7d 	bhi.w	800bf9c <_strtod_l+0x19c>
 800c0a2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800c0a6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c0a8:	930a      	str	r3, [sp, #40]	; 0x28
 800c0aa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c0ac:	1c5f      	adds	r7, r3, #1
 800c0ae:	971b      	str	r7, [sp, #108]	; 0x6c
 800c0b0:	785b      	ldrb	r3, [r3, #1]
 800c0b2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800c0b6:	f1b8 0f09 	cmp.w	r8, #9
 800c0ba:	d937      	bls.n	800c12c <_strtod_l+0x32c>
 800c0bc:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c0be:	1a7f      	subs	r7, r7, r1
 800c0c0:	2f08      	cmp	r7, #8
 800c0c2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800c0c6:	dc37      	bgt.n	800c138 <_strtod_l+0x338>
 800c0c8:	45be      	cmp	lr, r7
 800c0ca:	bfa8      	it	ge
 800c0cc:	46be      	movge	lr, r7
 800c0ce:	f1bc 0f00 	cmp.w	ip, #0
 800c0d2:	d001      	beq.n	800c0d8 <_strtod_l+0x2d8>
 800c0d4:	f1ce 0e00 	rsb	lr, lr, #0
 800c0d8:	2c00      	cmp	r4, #0
 800c0da:	d151      	bne.n	800c180 <_strtod_l+0x380>
 800c0dc:	2800      	cmp	r0, #0
 800c0de:	f47f aece 	bne.w	800be7e <_strtod_l+0x7e>
 800c0e2:	9a06      	ldr	r2, [sp, #24]
 800c0e4:	2a00      	cmp	r2, #0
 800c0e6:	f47f aeca 	bne.w	800be7e <_strtod_l+0x7e>
 800c0ea:	9a04      	ldr	r2, [sp, #16]
 800c0ec:	2a00      	cmp	r2, #0
 800c0ee:	f47f aee4 	bne.w	800beba <_strtod_l+0xba>
 800c0f2:	2b4e      	cmp	r3, #78	; 0x4e
 800c0f4:	d027      	beq.n	800c146 <_strtod_l+0x346>
 800c0f6:	dc21      	bgt.n	800c13c <_strtod_l+0x33c>
 800c0f8:	2b49      	cmp	r3, #73	; 0x49
 800c0fa:	f47f aede 	bne.w	800beba <_strtod_l+0xba>
 800c0fe:	49a0      	ldr	r1, [pc, #640]	; (800c380 <_strtod_l+0x580>)
 800c100:	a81b      	add	r0, sp, #108	; 0x6c
 800c102:	f001 fdeb 	bl	800dcdc <__match>
 800c106:	2800      	cmp	r0, #0
 800c108:	f43f aed7 	beq.w	800beba <_strtod_l+0xba>
 800c10c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c10e:	499d      	ldr	r1, [pc, #628]	; (800c384 <_strtod_l+0x584>)
 800c110:	3b01      	subs	r3, #1
 800c112:	a81b      	add	r0, sp, #108	; 0x6c
 800c114:	931b      	str	r3, [sp, #108]	; 0x6c
 800c116:	f001 fde1 	bl	800dcdc <__match>
 800c11a:	b910      	cbnz	r0, 800c122 <_strtod_l+0x322>
 800c11c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c11e:	3301      	adds	r3, #1
 800c120:	931b      	str	r3, [sp, #108]	; 0x6c
 800c122:	f8df b274 	ldr.w	fp, [pc, #628]	; 800c398 <_strtod_l+0x598>
 800c126:	f04f 0a00 	mov.w	sl, #0
 800c12a:	e6a8      	b.n	800be7e <_strtod_l+0x7e>
 800c12c:	210a      	movs	r1, #10
 800c12e:	fb01 3e0e 	mla	lr, r1, lr, r3
 800c132:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800c136:	e7b8      	b.n	800c0aa <_strtod_l+0x2aa>
 800c138:	46be      	mov	lr, r7
 800c13a:	e7c8      	b.n	800c0ce <_strtod_l+0x2ce>
 800c13c:	2b69      	cmp	r3, #105	; 0x69
 800c13e:	d0de      	beq.n	800c0fe <_strtod_l+0x2fe>
 800c140:	2b6e      	cmp	r3, #110	; 0x6e
 800c142:	f47f aeba 	bne.w	800beba <_strtod_l+0xba>
 800c146:	4990      	ldr	r1, [pc, #576]	; (800c388 <_strtod_l+0x588>)
 800c148:	a81b      	add	r0, sp, #108	; 0x6c
 800c14a:	f001 fdc7 	bl	800dcdc <__match>
 800c14e:	2800      	cmp	r0, #0
 800c150:	f43f aeb3 	beq.w	800beba <_strtod_l+0xba>
 800c154:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c156:	781b      	ldrb	r3, [r3, #0]
 800c158:	2b28      	cmp	r3, #40	; 0x28
 800c15a:	d10e      	bne.n	800c17a <_strtod_l+0x37a>
 800c15c:	aa1e      	add	r2, sp, #120	; 0x78
 800c15e:	498b      	ldr	r1, [pc, #556]	; (800c38c <_strtod_l+0x58c>)
 800c160:	a81b      	add	r0, sp, #108	; 0x6c
 800c162:	f001 fdcf 	bl	800dd04 <__hexnan>
 800c166:	2805      	cmp	r0, #5
 800c168:	d107      	bne.n	800c17a <_strtod_l+0x37a>
 800c16a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c16c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800c170:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800c174:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800c178:	e681      	b.n	800be7e <_strtod_l+0x7e>
 800c17a:	f8df b224 	ldr.w	fp, [pc, #548]	; 800c3a0 <_strtod_l+0x5a0>
 800c17e:	e7d2      	b.n	800c126 <_strtod_l+0x326>
 800c180:	ebae 0302 	sub.w	r3, lr, r2
 800c184:	9306      	str	r3, [sp, #24]
 800c186:	9b05      	ldr	r3, [sp, #20]
 800c188:	9807      	ldr	r0, [sp, #28]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	bf08      	it	eq
 800c18e:	4623      	moveq	r3, r4
 800c190:	2c10      	cmp	r4, #16
 800c192:	9305      	str	r3, [sp, #20]
 800c194:	46a0      	mov	r8, r4
 800c196:	bfa8      	it	ge
 800c198:	f04f 0810 	movge.w	r8, #16
 800c19c:	f7f4 f9b2 	bl	8000504 <__aeabi_ui2d>
 800c1a0:	2c09      	cmp	r4, #9
 800c1a2:	4682      	mov	sl, r0
 800c1a4:	468b      	mov	fp, r1
 800c1a6:	dc13      	bgt.n	800c1d0 <_strtod_l+0x3d0>
 800c1a8:	9b06      	ldr	r3, [sp, #24]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	f43f ae67 	beq.w	800be7e <_strtod_l+0x7e>
 800c1b0:	9b06      	ldr	r3, [sp, #24]
 800c1b2:	dd7a      	ble.n	800c2aa <_strtod_l+0x4aa>
 800c1b4:	2b16      	cmp	r3, #22
 800c1b6:	dc61      	bgt.n	800c27c <_strtod_l+0x47c>
 800c1b8:	4a75      	ldr	r2, [pc, #468]	; (800c390 <_strtod_l+0x590>)
 800c1ba:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800c1be:	e9de 0100 	ldrd	r0, r1, [lr]
 800c1c2:	4652      	mov	r2, sl
 800c1c4:	465b      	mov	r3, fp
 800c1c6:	f7f4 fa17 	bl	80005f8 <__aeabi_dmul>
 800c1ca:	4682      	mov	sl, r0
 800c1cc:	468b      	mov	fp, r1
 800c1ce:	e656      	b.n	800be7e <_strtod_l+0x7e>
 800c1d0:	4b6f      	ldr	r3, [pc, #444]	; (800c390 <_strtod_l+0x590>)
 800c1d2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c1d6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800c1da:	f7f4 fa0d 	bl	80005f8 <__aeabi_dmul>
 800c1de:	4606      	mov	r6, r0
 800c1e0:	4628      	mov	r0, r5
 800c1e2:	460f      	mov	r7, r1
 800c1e4:	f7f4 f98e 	bl	8000504 <__aeabi_ui2d>
 800c1e8:	4602      	mov	r2, r0
 800c1ea:	460b      	mov	r3, r1
 800c1ec:	4630      	mov	r0, r6
 800c1ee:	4639      	mov	r1, r7
 800c1f0:	f7f4 f84c 	bl	800028c <__adddf3>
 800c1f4:	2c0f      	cmp	r4, #15
 800c1f6:	4682      	mov	sl, r0
 800c1f8:	468b      	mov	fp, r1
 800c1fa:	ddd5      	ble.n	800c1a8 <_strtod_l+0x3a8>
 800c1fc:	9b06      	ldr	r3, [sp, #24]
 800c1fe:	eba4 0808 	sub.w	r8, r4, r8
 800c202:	4498      	add	r8, r3
 800c204:	f1b8 0f00 	cmp.w	r8, #0
 800c208:	f340 8096 	ble.w	800c338 <_strtod_l+0x538>
 800c20c:	f018 030f 	ands.w	r3, r8, #15
 800c210:	d00a      	beq.n	800c228 <_strtod_l+0x428>
 800c212:	495f      	ldr	r1, [pc, #380]	; (800c390 <_strtod_l+0x590>)
 800c214:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c218:	4652      	mov	r2, sl
 800c21a:	465b      	mov	r3, fp
 800c21c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c220:	f7f4 f9ea 	bl	80005f8 <__aeabi_dmul>
 800c224:	4682      	mov	sl, r0
 800c226:	468b      	mov	fp, r1
 800c228:	f038 080f 	bics.w	r8, r8, #15
 800c22c:	d073      	beq.n	800c316 <_strtod_l+0x516>
 800c22e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800c232:	dd47      	ble.n	800c2c4 <_strtod_l+0x4c4>
 800c234:	2400      	movs	r4, #0
 800c236:	46a0      	mov	r8, r4
 800c238:	9407      	str	r4, [sp, #28]
 800c23a:	9405      	str	r4, [sp, #20]
 800c23c:	2322      	movs	r3, #34	; 0x22
 800c23e:	f8df b158 	ldr.w	fp, [pc, #344]	; 800c398 <_strtod_l+0x598>
 800c242:	f8c9 3000 	str.w	r3, [r9]
 800c246:	f04f 0a00 	mov.w	sl, #0
 800c24a:	9b07      	ldr	r3, [sp, #28]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	f43f ae16 	beq.w	800be7e <_strtod_l+0x7e>
 800c252:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c254:	4648      	mov	r0, r9
 800c256:	f001 fe47 	bl	800dee8 <_Bfree>
 800c25a:	9905      	ldr	r1, [sp, #20]
 800c25c:	4648      	mov	r0, r9
 800c25e:	f001 fe43 	bl	800dee8 <_Bfree>
 800c262:	4641      	mov	r1, r8
 800c264:	4648      	mov	r0, r9
 800c266:	f001 fe3f 	bl	800dee8 <_Bfree>
 800c26a:	9907      	ldr	r1, [sp, #28]
 800c26c:	4648      	mov	r0, r9
 800c26e:	f001 fe3b 	bl	800dee8 <_Bfree>
 800c272:	4621      	mov	r1, r4
 800c274:	4648      	mov	r0, r9
 800c276:	f001 fe37 	bl	800dee8 <_Bfree>
 800c27a:	e600      	b.n	800be7e <_strtod_l+0x7e>
 800c27c:	9a06      	ldr	r2, [sp, #24]
 800c27e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800c282:	4293      	cmp	r3, r2
 800c284:	dbba      	blt.n	800c1fc <_strtod_l+0x3fc>
 800c286:	4d42      	ldr	r5, [pc, #264]	; (800c390 <_strtod_l+0x590>)
 800c288:	f1c4 040f 	rsb	r4, r4, #15
 800c28c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800c290:	4652      	mov	r2, sl
 800c292:	465b      	mov	r3, fp
 800c294:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c298:	f7f4 f9ae 	bl	80005f8 <__aeabi_dmul>
 800c29c:	9b06      	ldr	r3, [sp, #24]
 800c29e:	1b1c      	subs	r4, r3, r4
 800c2a0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800c2a4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c2a8:	e78d      	b.n	800c1c6 <_strtod_l+0x3c6>
 800c2aa:	f113 0f16 	cmn.w	r3, #22
 800c2ae:	dba5      	blt.n	800c1fc <_strtod_l+0x3fc>
 800c2b0:	4a37      	ldr	r2, [pc, #220]	; (800c390 <_strtod_l+0x590>)
 800c2b2:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800c2b6:	e9d2 2300 	ldrd	r2, r3, [r2]
 800c2ba:	4650      	mov	r0, sl
 800c2bc:	4659      	mov	r1, fp
 800c2be:	f7f4 fac5 	bl	800084c <__aeabi_ddiv>
 800c2c2:	e782      	b.n	800c1ca <_strtod_l+0x3ca>
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	4e33      	ldr	r6, [pc, #204]	; (800c394 <_strtod_l+0x594>)
 800c2c8:	ea4f 1828 	mov.w	r8, r8, asr #4
 800c2cc:	4650      	mov	r0, sl
 800c2ce:	4659      	mov	r1, fp
 800c2d0:	461d      	mov	r5, r3
 800c2d2:	f1b8 0f01 	cmp.w	r8, #1
 800c2d6:	dc21      	bgt.n	800c31c <_strtod_l+0x51c>
 800c2d8:	b10b      	cbz	r3, 800c2de <_strtod_l+0x4de>
 800c2da:	4682      	mov	sl, r0
 800c2dc:	468b      	mov	fp, r1
 800c2de:	4b2d      	ldr	r3, [pc, #180]	; (800c394 <_strtod_l+0x594>)
 800c2e0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800c2e4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800c2e8:	4652      	mov	r2, sl
 800c2ea:	465b      	mov	r3, fp
 800c2ec:	e9d5 0100 	ldrd	r0, r1, [r5]
 800c2f0:	f7f4 f982 	bl	80005f8 <__aeabi_dmul>
 800c2f4:	4b28      	ldr	r3, [pc, #160]	; (800c398 <_strtod_l+0x598>)
 800c2f6:	460a      	mov	r2, r1
 800c2f8:	400b      	ands	r3, r1
 800c2fa:	4928      	ldr	r1, [pc, #160]	; (800c39c <_strtod_l+0x59c>)
 800c2fc:	428b      	cmp	r3, r1
 800c2fe:	4682      	mov	sl, r0
 800c300:	d898      	bhi.n	800c234 <_strtod_l+0x434>
 800c302:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800c306:	428b      	cmp	r3, r1
 800c308:	bf86      	itte	hi
 800c30a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800c3a4 <_strtod_l+0x5a4>
 800c30e:	f04f 3aff 	movhi.w	sl, #4294967295
 800c312:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800c316:	2300      	movs	r3, #0
 800c318:	9304      	str	r3, [sp, #16]
 800c31a:	e077      	b.n	800c40c <_strtod_l+0x60c>
 800c31c:	f018 0f01 	tst.w	r8, #1
 800c320:	d006      	beq.n	800c330 <_strtod_l+0x530>
 800c322:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800c326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c32a:	f7f4 f965 	bl	80005f8 <__aeabi_dmul>
 800c32e:	2301      	movs	r3, #1
 800c330:	3501      	adds	r5, #1
 800c332:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c336:	e7cc      	b.n	800c2d2 <_strtod_l+0x4d2>
 800c338:	d0ed      	beq.n	800c316 <_strtod_l+0x516>
 800c33a:	f1c8 0800 	rsb	r8, r8, #0
 800c33e:	f018 020f 	ands.w	r2, r8, #15
 800c342:	d00a      	beq.n	800c35a <_strtod_l+0x55a>
 800c344:	4b12      	ldr	r3, [pc, #72]	; (800c390 <_strtod_l+0x590>)
 800c346:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c34a:	4650      	mov	r0, sl
 800c34c:	4659      	mov	r1, fp
 800c34e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c352:	f7f4 fa7b 	bl	800084c <__aeabi_ddiv>
 800c356:	4682      	mov	sl, r0
 800c358:	468b      	mov	fp, r1
 800c35a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800c35e:	d0da      	beq.n	800c316 <_strtod_l+0x516>
 800c360:	f1b8 0f1f 	cmp.w	r8, #31
 800c364:	dd20      	ble.n	800c3a8 <_strtod_l+0x5a8>
 800c366:	2400      	movs	r4, #0
 800c368:	46a0      	mov	r8, r4
 800c36a:	9407      	str	r4, [sp, #28]
 800c36c:	9405      	str	r4, [sp, #20]
 800c36e:	2322      	movs	r3, #34	; 0x22
 800c370:	f04f 0a00 	mov.w	sl, #0
 800c374:	f04f 0b00 	mov.w	fp, #0
 800c378:	f8c9 3000 	str.w	r3, [r9]
 800c37c:	e765      	b.n	800c24a <_strtod_l+0x44a>
 800c37e:	bf00      	nop
 800c380:	0800ede1 	.word	0x0800ede1
 800c384:	0800ee6b 	.word	0x0800ee6b
 800c388:	0800ede9 	.word	0x0800ede9
 800c38c:	0800ee2c 	.word	0x0800ee2c
 800c390:	0800ef10 	.word	0x0800ef10
 800c394:	0800eee8 	.word	0x0800eee8
 800c398:	7ff00000 	.word	0x7ff00000
 800c39c:	7ca00000 	.word	0x7ca00000
 800c3a0:	fff80000 	.word	0xfff80000
 800c3a4:	7fefffff 	.word	0x7fefffff
 800c3a8:	f018 0310 	ands.w	r3, r8, #16
 800c3ac:	bf18      	it	ne
 800c3ae:	236a      	movne	r3, #106	; 0x6a
 800c3b0:	4da0      	ldr	r5, [pc, #640]	; (800c634 <_strtod_l+0x834>)
 800c3b2:	9304      	str	r3, [sp, #16]
 800c3b4:	4650      	mov	r0, sl
 800c3b6:	4659      	mov	r1, fp
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	f1b8 0f00 	cmp.w	r8, #0
 800c3be:	f300 810a 	bgt.w	800c5d6 <_strtod_l+0x7d6>
 800c3c2:	b10b      	cbz	r3, 800c3c8 <_strtod_l+0x5c8>
 800c3c4:	4682      	mov	sl, r0
 800c3c6:	468b      	mov	fp, r1
 800c3c8:	9b04      	ldr	r3, [sp, #16]
 800c3ca:	b1bb      	cbz	r3, 800c3fc <_strtod_l+0x5fc>
 800c3cc:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800c3d0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	4659      	mov	r1, fp
 800c3d8:	dd10      	ble.n	800c3fc <_strtod_l+0x5fc>
 800c3da:	2b1f      	cmp	r3, #31
 800c3dc:	f340 8107 	ble.w	800c5ee <_strtod_l+0x7ee>
 800c3e0:	2b34      	cmp	r3, #52	; 0x34
 800c3e2:	bfde      	ittt	le
 800c3e4:	3b20      	suble	r3, #32
 800c3e6:	f04f 32ff 	movle.w	r2, #4294967295
 800c3ea:	fa02 f303 	lslle.w	r3, r2, r3
 800c3ee:	f04f 0a00 	mov.w	sl, #0
 800c3f2:	bfcc      	ite	gt
 800c3f4:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800c3f8:	ea03 0b01 	andle.w	fp, r3, r1
 800c3fc:	2200      	movs	r2, #0
 800c3fe:	2300      	movs	r3, #0
 800c400:	4650      	mov	r0, sl
 800c402:	4659      	mov	r1, fp
 800c404:	f7f4 fb60 	bl	8000ac8 <__aeabi_dcmpeq>
 800c408:	2800      	cmp	r0, #0
 800c40a:	d1ac      	bne.n	800c366 <_strtod_l+0x566>
 800c40c:	9b07      	ldr	r3, [sp, #28]
 800c40e:	9300      	str	r3, [sp, #0]
 800c410:	9a05      	ldr	r2, [sp, #20]
 800c412:	9908      	ldr	r1, [sp, #32]
 800c414:	4623      	mov	r3, r4
 800c416:	4648      	mov	r0, r9
 800c418:	f001 fdb8 	bl	800df8c <__s2b>
 800c41c:	9007      	str	r0, [sp, #28]
 800c41e:	2800      	cmp	r0, #0
 800c420:	f43f af08 	beq.w	800c234 <_strtod_l+0x434>
 800c424:	9a06      	ldr	r2, [sp, #24]
 800c426:	9b06      	ldr	r3, [sp, #24]
 800c428:	2a00      	cmp	r2, #0
 800c42a:	f1c3 0300 	rsb	r3, r3, #0
 800c42e:	bfa8      	it	ge
 800c430:	2300      	movge	r3, #0
 800c432:	930e      	str	r3, [sp, #56]	; 0x38
 800c434:	2400      	movs	r4, #0
 800c436:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c43a:	9316      	str	r3, [sp, #88]	; 0x58
 800c43c:	46a0      	mov	r8, r4
 800c43e:	9b07      	ldr	r3, [sp, #28]
 800c440:	4648      	mov	r0, r9
 800c442:	6859      	ldr	r1, [r3, #4]
 800c444:	f001 fd1c 	bl	800de80 <_Balloc>
 800c448:	9005      	str	r0, [sp, #20]
 800c44a:	2800      	cmp	r0, #0
 800c44c:	f43f aef6 	beq.w	800c23c <_strtod_l+0x43c>
 800c450:	9b07      	ldr	r3, [sp, #28]
 800c452:	691a      	ldr	r2, [r3, #16]
 800c454:	3202      	adds	r2, #2
 800c456:	f103 010c 	add.w	r1, r3, #12
 800c45a:	0092      	lsls	r2, r2, #2
 800c45c:	300c      	adds	r0, #12
 800c45e:	f7fe fe3b 	bl	800b0d8 <memcpy>
 800c462:	aa1e      	add	r2, sp, #120	; 0x78
 800c464:	a91d      	add	r1, sp, #116	; 0x74
 800c466:	ec4b ab10 	vmov	d0, sl, fp
 800c46a:	4648      	mov	r0, r9
 800c46c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800c470:	f002 f848 	bl	800e504 <__d2b>
 800c474:	901c      	str	r0, [sp, #112]	; 0x70
 800c476:	2800      	cmp	r0, #0
 800c478:	f43f aee0 	beq.w	800c23c <_strtod_l+0x43c>
 800c47c:	2101      	movs	r1, #1
 800c47e:	4648      	mov	r0, r9
 800c480:	f001 fe10 	bl	800e0a4 <__i2b>
 800c484:	4680      	mov	r8, r0
 800c486:	2800      	cmp	r0, #0
 800c488:	f43f aed8 	beq.w	800c23c <_strtod_l+0x43c>
 800c48c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800c48e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800c490:	2e00      	cmp	r6, #0
 800c492:	bfab      	itete	ge
 800c494:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800c496:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800c498:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800c49a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800c49c:	bfac      	ite	ge
 800c49e:	18f7      	addge	r7, r6, r3
 800c4a0:	1b9d      	sublt	r5, r3, r6
 800c4a2:	9b04      	ldr	r3, [sp, #16]
 800c4a4:	1af6      	subs	r6, r6, r3
 800c4a6:	4416      	add	r6, r2
 800c4a8:	4b63      	ldr	r3, [pc, #396]	; (800c638 <_strtod_l+0x838>)
 800c4aa:	3e01      	subs	r6, #1
 800c4ac:	429e      	cmp	r6, r3
 800c4ae:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c4b2:	f280 80af 	bge.w	800c614 <_strtod_l+0x814>
 800c4b6:	1b9b      	subs	r3, r3, r6
 800c4b8:	2b1f      	cmp	r3, #31
 800c4ba:	eba2 0203 	sub.w	r2, r2, r3
 800c4be:	f04f 0101 	mov.w	r1, #1
 800c4c2:	f300 809b 	bgt.w	800c5fc <_strtod_l+0x7fc>
 800c4c6:	fa01 f303 	lsl.w	r3, r1, r3
 800c4ca:	930f      	str	r3, [sp, #60]	; 0x3c
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	930a      	str	r3, [sp, #40]	; 0x28
 800c4d0:	18be      	adds	r6, r7, r2
 800c4d2:	9b04      	ldr	r3, [sp, #16]
 800c4d4:	42b7      	cmp	r7, r6
 800c4d6:	4415      	add	r5, r2
 800c4d8:	441d      	add	r5, r3
 800c4da:	463b      	mov	r3, r7
 800c4dc:	bfa8      	it	ge
 800c4de:	4633      	movge	r3, r6
 800c4e0:	42ab      	cmp	r3, r5
 800c4e2:	bfa8      	it	ge
 800c4e4:	462b      	movge	r3, r5
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	bfc2      	ittt	gt
 800c4ea:	1af6      	subgt	r6, r6, r3
 800c4ec:	1aed      	subgt	r5, r5, r3
 800c4ee:	1aff      	subgt	r7, r7, r3
 800c4f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c4f2:	b1bb      	cbz	r3, 800c524 <_strtod_l+0x724>
 800c4f4:	4641      	mov	r1, r8
 800c4f6:	461a      	mov	r2, r3
 800c4f8:	4648      	mov	r0, r9
 800c4fa:	f001 fe73 	bl	800e1e4 <__pow5mult>
 800c4fe:	4680      	mov	r8, r0
 800c500:	2800      	cmp	r0, #0
 800c502:	f43f ae9b 	beq.w	800c23c <_strtod_l+0x43c>
 800c506:	4601      	mov	r1, r0
 800c508:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c50a:	4648      	mov	r0, r9
 800c50c:	f001 fdd3 	bl	800e0b6 <__multiply>
 800c510:	900c      	str	r0, [sp, #48]	; 0x30
 800c512:	2800      	cmp	r0, #0
 800c514:	f43f ae92 	beq.w	800c23c <_strtod_l+0x43c>
 800c518:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c51a:	4648      	mov	r0, r9
 800c51c:	f001 fce4 	bl	800dee8 <_Bfree>
 800c520:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c522:	931c      	str	r3, [sp, #112]	; 0x70
 800c524:	2e00      	cmp	r6, #0
 800c526:	dc7a      	bgt.n	800c61e <_strtod_l+0x81e>
 800c528:	9b06      	ldr	r3, [sp, #24]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	dd08      	ble.n	800c540 <_strtod_l+0x740>
 800c52e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c530:	9905      	ldr	r1, [sp, #20]
 800c532:	4648      	mov	r0, r9
 800c534:	f001 fe56 	bl	800e1e4 <__pow5mult>
 800c538:	9005      	str	r0, [sp, #20]
 800c53a:	2800      	cmp	r0, #0
 800c53c:	f43f ae7e 	beq.w	800c23c <_strtod_l+0x43c>
 800c540:	2d00      	cmp	r5, #0
 800c542:	dd08      	ble.n	800c556 <_strtod_l+0x756>
 800c544:	462a      	mov	r2, r5
 800c546:	9905      	ldr	r1, [sp, #20]
 800c548:	4648      	mov	r0, r9
 800c54a:	f001 fe99 	bl	800e280 <__lshift>
 800c54e:	9005      	str	r0, [sp, #20]
 800c550:	2800      	cmp	r0, #0
 800c552:	f43f ae73 	beq.w	800c23c <_strtod_l+0x43c>
 800c556:	2f00      	cmp	r7, #0
 800c558:	dd08      	ble.n	800c56c <_strtod_l+0x76c>
 800c55a:	4641      	mov	r1, r8
 800c55c:	463a      	mov	r2, r7
 800c55e:	4648      	mov	r0, r9
 800c560:	f001 fe8e 	bl	800e280 <__lshift>
 800c564:	4680      	mov	r8, r0
 800c566:	2800      	cmp	r0, #0
 800c568:	f43f ae68 	beq.w	800c23c <_strtod_l+0x43c>
 800c56c:	9a05      	ldr	r2, [sp, #20]
 800c56e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c570:	4648      	mov	r0, r9
 800c572:	f001 fef3 	bl	800e35c <__mdiff>
 800c576:	4604      	mov	r4, r0
 800c578:	2800      	cmp	r0, #0
 800c57a:	f43f ae5f 	beq.w	800c23c <_strtod_l+0x43c>
 800c57e:	68c3      	ldr	r3, [r0, #12]
 800c580:	930c      	str	r3, [sp, #48]	; 0x30
 800c582:	2300      	movs	r3, #0
 800c584:	60c3      	str	r3, [r0, #12]
 800c586:	4641      	mov	r1, r8
 800c588:	f001 fece 	bl	800e328 <__mcmp>
 800c58c:	2800      	cmp	r0, #0
 800c58e:	da55      	bge.n	800c63c <_strtod_l+0x83c>
 800c590:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c592:	b9e3      	cbnz	r3, 800c5ce <_strtod_l+0x7ce>
 800c594:	f1ba 0f00 	cmp.w	sl, #0
 800c598:	d119      	bne.n	800c5ce <_strtod_l+0x7ce>
 800c59a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c59e:	b9b3      	cbnz	r3, 800c5ce <_strtod_l+0x7ce>
 800c5a0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c5a4:	0d1b      	lsrs	r3, r3, #20
 800c5a6:	051b      	lsls	r3, r3, #20
 800c5a8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c5ac:	d90f      	bls.n	800c5ce <_strtod_l+0x7ce>
 800c5ae:	6963      	ldr	r3, [r4, #20]
 800c5b0:	b913      	cbnz	r3, 800c5b8 <_strtod_l+0x7b8>
 800c5b2:	6923      	ldr	r3, [r4, #16]
 800c5b4:	2b01      	cmp	r3, #1
 800c5b6:	dd0a      	ble.n	800c5ce <_strtod_l+0x7ce>
 800c5b8:	4621      	mov	r1, r4
 800c5ba:	2201      	movs	r2, #1
 800c5bc:	4648      	mov	r0, r9
 800c5be:	f001 fe5f 	bl	800e280 <__lshift>
 800c5c2:	4641      	mov	r1, r8
 800c5c4:	4604      	mov	r4, r0
 800c5c6:	f001 feaf 	bl	800e328 <__mcmp>
 800c5ca:	2800      	cmp	r0, #0
 800c5cc:	dc67      	bgt.n	800c69e <_strtod_l+0x89e>
 800c5ce:	9b04      	ldr	r3, [sp, #16]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d171      	bne.n	800c6b8 <_strtod_l+0x8b8>
 800c5d4:	e63d      	b.n	800c252 <_strtod_l+0x452>
 800c5d6:	f018 0f01 	tst.w	r8, #1
 800c5da:	d004      	beq.n	800c5e6 <_strtod_l+0x7e6>
 800c5dc:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c5e0:	f7f4 f80a 	bl	80005f8 <__aeabi_dmul>
 800c5e4:	2301      	movs	r3, #1
 800c5e6:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c5ea:	3508      	adds	r5, #8
 800c5ec:	e6e5      	b.n	800c3ba <_strtod_l+0x5ba>
 800c5ee:	f04f 32ff 	mov.w	r2, #4294967295
 800c5f2:	fa02 f303 	lsl.w	r3, r2, r3
 800c5f6:	ea03 0a0a 	and.w	sl, r3, sl
 800c5fa:	e6ff      	b.n	800c3fc <_strtod_l+0x5fc>
 800c5fc:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800c600:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800c604:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800c608:	36e2      	adds	r6, #226	; 0xe2
 800c60a:	fa01 f306 	lsl.w	r3, r1, r6
 800c60e:	930a      	str	r3, [sp, #40]	; 0x28
 800c610:	910f      	str	r1, [sp, #60]	; 0x3c
 800c612:	e75d      	b.n	800c4d0 <_strtod_l+0x6d0>
 800c614:	2300      	movs	r3, #0
 800c616:	930a      	str	r3, [sp, #40]	; 0x28
 800c618:	2301      	movs	r3, #1
 800c61a:	930f      	str	r3, [sp, #60]	; 0x3c
 800c61c:	e758      	b.n	800c4d0 <_strtod_l+0x6d0>
 800c61e:	4632      	mov	r2, r6
 800c620:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c622:	4648      	mov	r0, r9
 800c624:	f001 fe2c 	bl	800e280 <__lshift>
 800c628:	901c      	str	r0, [sp, #112]	; 0x70
 800c62a:	2800      	cmp	r0, #0
 800c62c:	f47f af7c 	bne.w	800c528 <_strtod_l+0x728>
 800c630:	e604      	b.n	800c23c <_strtod_l+0x43c>
 800c632:	bf00      	nop
 800c634:	0800ee40 	.word	0x0800ee40
 800c638:	fffffc02 	.word	0xfffffc02
 800c63c:	465d      	mov	r5, fp
 800c63e:	f040 8086 	bne.w	800c74e <_strtod_l+0x94e>
 800c642:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c644:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c648:	b32a      	cbz	r2, 800c696 <_strtod_l+0x896>
 800c64a:	4aaf      	ldr	r2, [pc, #700]	; (800c908 <_strtod_l+0xb08>)
 800c64c:	4293      	cmp	r3, r2
 800c64e:	d153      	bne.n	800c6f8 <_strtod_l+0x8f8>
 800c650:	9b04      	ldr	r3, [sp, #16]
 800c652:	4650      	mov	r0, sl
 800c654:	b1d3      	cbz	r3, 800c68c <_strtod_l+0x88c>
 800c656:	4aad      	ldr	r2, [pc, #692]	; (800c90c <_strtod_l+0xb0c>)
 800c658:	402a      	ands	r2, r5
 800c65a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800c65e:	f04f 31ff 	mov.w	r1, #4294967295
 800c662:	d816      	bhi.n	800c692 <_strtod_l+0x892>
 800c664:	0d12      	lsrs	r2, r2, #20
 800c666:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800c66a:	fa01 f303 	lsl.w	r3, r1, r3
 800c66e:	4298      	cmp	r0, r3
 800c670:	d142      	bne.n	800c6f8 <_strtod_l+0x8f8>
 800c672:	4ba7      	ldr	r3, [pc, #668]	; (800c910 <_strtod_l+0xb10>)
 800c674:	429d      	cmp	r5, r3
 800c676:	d102      	bne.n	800c67e <_strtod_l+0x87e>
 800c678:	3001      	adds	r0, #1
 800c67a:	f43f addf 	beq.w	800c23c <_strtod_l+0x43c>
 800c67e:	4ba3      	ldr	r3, [pc, #652]	; (800c90c <_strtod_l+0xb0c>)
 800c680:	402b      	ands	r3, r5
 800c682:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800c686:	f04f 0a00 	mov.w	sl, #0
 800c68a:	e7a0      	b.n	800c5ce <_strtod_l+0x7ce>
 800c68c:	f04f 33ff 	mov.w	r3, #4294967295
 800c690:	e7ed      	b.n	800c66e <_strtod_l+0x86e>
 800c692:	460b      	mov	r3, r1
 800c694:	e7eb      	b.n	800c66e <_strtod_l+0x86e>
 800c696:	bb7b      	cbnz	r3, 800c6f8 <_strtod_l+0x8f8>
 800c698:	f1ba 0f00 	cmp.w	sl, #0
 800c69c:	d12c      	bne.n	800c6f8 <_strtod_l+0x8f8>
 800c69e:	9904      	ldr	r1, [sp, #16]
 800c6a0:	4a9a      	ldr	r2, [pc, #616]	; (800c90c <_strtod_l+0xb0c>)
 800c6a2:	465b      	mov	r3, fp
 800c6a4:	b1f1      	cbz	r1, 800c6e4 <_strtod_l+0x8e4>
 800c6a6:	ea02 010b 	and.w	r1, r2, fp
 800c6aa:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c6ae:	dc19      	bgt.n	800c6e4 <_strtod_l+0x8e4>
 800c6b0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c6b4:	f77f ae5b 	ble.w	800c36e <_strtod_l+0x56e>
 800c6b8:	4a96      	ldr	r2, [pc, #600]	; (800c914 <_strtod_l+0xb14>)
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800c6c0:	4650      	mov	r0, sl
 800c6c2:	4659      	mov	r1, fp
 800c6c4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800c6c8:	f7f3 ff96 	bl	80005f8 <__aeabi_dmul>
 800c6cc:	4682      	mov	sl, r0
 800c6ce:	468b      	mov	fp, r1
 800c6d0:	2900      	cmp	r1, #0
 800c6d2:	f47f adbe 	bne.w	800c252 <_strtod_l+0x452>
 800c6d6:	2800      	cmp	r0, #0
 800c6d8:	f47f adbb 	bne.w	800c252 <_strtod_l+0x452>
 800c6dc:	2322      	movs	r3, #34	; 0x22
 800c6de:	f8c9 3000 	str.w	r3, [r9]
 800c6e2:	e5b6      	b.n	800c252 <_strtod_l+0x452>
 800c6e4:	4013      	ands	r3, r2
 800c6e6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c6ea:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c6ee:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c6f2:	f04f 3aff 	mov.w	sl, #4294967295
 800c6f6:	e76a      	b.n	800c5ce <_strtod_l+0x7ce>
 800c6f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6fa:	b193      	cbz	r3, 800c722 <_strtod_l+0x922>
 800c6fc:	422b      	tst	r3, r5
 800c6fe:	f43f af66 	beq.w	800c5ce <_strtod_l+0x7ce>
 800c702:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c704:	9a04      	ldr	r2, [sp, #16]
 800c706:	4650      	mov	r0, sl
 800c708:	4659      	mov	r1, fp
 800c70a:	b173      	cbz	r3, 800c72a <_strtod_l+0x92a>
 800c70c:	f7ff fb5c 	bl	800bdc8 <sulp>
 800c710:	4602      	mov	r2, r0
 800c712:	460b      	mov	r3, r1
 800c714:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c718:	f7f3 fdb8 	bl	800028c <__adddf3>
 800c71c:	4682      	mov	sl, r0
 800c71e:	468b      	mov	fp, r1
 800c720:	e755      	b.n	800c5ce <_strtod_l+0x7ce>
 800c722:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c724:	ea13 0f0a 	tst.w	r3, sl
 800c728:	e7e9      	b.n	800c6fe <_strtod_l+0x8fe>
 800c72a:	f7ff fb4d 	bl	800bdc8 <sulp>
 800c72e:	4602      	mov	r2, r0
 800c730:	460b      	mov	r3, r1
 800c732:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c736:	f7f3 fda7 	bl	8000288 <__aeabi_dsub>
 800c73a:	2200      	movs	r2, #0
 800c73c:	2300      	movs	r3, #0
 800c73e:	4682      	mov	sl, r0
 800c740:	468b      	mov	fp, r1
 800c742:	f7f4 f9c1 	bl	8000ac8 <__aeabi_dcmpeq>
 800c746:	2800      	cmp	r0, #0
 800c748:	f47f ae11 	bne.w	800c36e <_strtod_l+0x56e>
 800c74c:	e73f      	b.n	800c5ce <_strtod_l+0x7ce>
 800c74e:	4641      	mov	r1, r8
 800c750:	4620      	mov	r0, r4
 800c752:	f001 ff26 	bl	800e5a2 <__ratio>
 800c756:	ec57 6b10 	vmov	r6, r7, d0
 800c75a:	2200      	movs	r2, #0
 800c75c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c760:	ee10 0a10 	vmov	r0, s0
 800c764:	4639      	mov	r1, r7
 800c766:	f7f4 f9c3 	bl	8000af0 <__aeabi_dcmple>
 800c76a:	2800      	cmp	r0, #0
 800c76c:	d077      	beq.n	800c85e <_strtod_l+0xa5e>
 800c76e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c770:	2b00      	cmp	r3, #0
 800c772:	d04a      	beq.n	800c80a <_strtod_l+0xa0a>
 800c774:	4b68      	ldr	r3, [pc, #416]	; (800c918 <_strtod_l+0xb18>)
 800c776:	2200      	movs	r2, #0
 800c778:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800c77c:	4f66      	ldr	r7, [pc, #408]	; (800c918 <_strtod_l+0xb18>)
 800c77e:	2600      	movs	r6, #0
 800c780:	4b62      	ldr	r3, [pc, #392]	; (800c90c <_strtod_l+0xb0c>)
 800c782:	402b      	ands	r3, r5
 800c784:	930f      	str	r3, [sp, #60]	; 0x3c
 800c786:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c788:	4b64      	ldr	r3, [pc, #400]	; (800c91c <_strtod_l+0xb1c>)
 800c78a:	429a      	cmp	r2, r3
 800c78c:	f040 80ce 	bne.w	800c92c <_strtod_l+0xb2c>
 800c790:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c794:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c798:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800c79c:	ec4b ab10 	vmov	d0, sl, fp
 800c7a0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800c7a4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c7a8:	f001 fe36 	bl	800e418 <__ulp>
 800c7ac:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c7b0:	ec53 2b10 	vmov	r2, r3, d0
 800c7b4:	f7f3 ff20 	bl	80005f8 <__aeabi_dmul>
 800c7b8:	4652      	mov	r2, sl
 800c7ba:	465b      	mov	r3, fp
 800c7bc:	f7f3 fd66 	bl	800028c <__adddf3>
 800c7c0:	460b      	mov	r3, r1
 800c7c2:	4952      	ldr	r1, [pc, #328]	; (800c90c <_strtod_l+0xb0c>)
 800c7c4:	4a56      	ldr	r2, [pc, #344]	; (800c920 <_strtod_l+0xb20>)
 800c7c6:	4019      	ands	r1, r3
 800c7c8:	4291      	cmp	r1, r2
 800c7ca:	4682      	mov	sl, r0
 800c7cc:	d95b      	bls.n	800c886 <_strtod_l+0xa86>
 800c7ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7d0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800c7d4:	4293      	cmp	r3, r2
 800c7d6:	d103      	bne.n	800c7e0 <_strtod_l+0x9e0>
 800c7d8:	9b08      	ldr	r3, [sp, #32]
 800c7da:	3301      	adds	r3, #1
 800c7dc:	f43f ad2e 	beq.w	800c23c <_strtod_l+0x43c>
 800c7e0:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800c910 <_strtod_l+0xb10>
 800c7e4:	f04f 3aff 	mov.w	sl, #4294967295
 800c7e8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c7ea:	4648      	mov	r0, r9
 800c7ec:	f001 fb7c 	bl	800dee8 <_Bfree>
 800c7f0:	9905      	ldr	r1, [sp, #20]
 800c7f2:	4648      	mov	r0, r9
 800c7f4:	f001 fb78 	bl	800dee8 <_Bfree>
 800c7f8:	4641      	mov	r1, r8
 800c7fa:	4648      	mov	r0, r9
 800c7fc:	f001 fb74 	bl	800dee8 <_Bfree>
 800c800:	4621      	mov	r1, r4
 800c802:	4648      	mov	r0, r9
 800c804:	f001 fb70 	bl	800dee8 <_Bfree>
 800c808:	e619      	b.n	800c43e <_strtod_l+0x63e>
 800c80a:	f1ba 0f00 	cmp.w	sl, #0
 800c80e:	d11a      	bne.n	800c846 <_strtod_l+0xa46>
 800c810:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c814:	b9eb      	cbnz	r3, 800c852 <_strtod_l+0xa52>
 800c816:	2200      	movs	r2, #0
 800c818:	4b3f      	ldr	r3, [pc, #252]	; (800c918 <_strtod_l+0xb18>)
 800c81a:	4630      	mov	r0, r6
 800c81c:	4639      	mov	r1, r7
 800c81e:	f7f4 f95d 	bl	8000adc <__aeabi_dcmplt>
 800c822:	b9c8      	cbnz	r0, 800c858 <_strtod_l+0xa58>
 800c824:	4630      	mov	r0, r6
 800c826:	4639      	mov	r1, r7
 800c828:	2200      	movs	r2, #0
 800c82a:	4b3e      	ldr	r3, [pc, #248]	; (800c924 <_strtod_l+0xb24>)
 800c82c:	f7f3 fee4 	bl	80005f8 <__aeabi_dmul>
 800c830:	4606      	mov	r6, r0
 800c832:	460f      	mov	r7, r1
 800c834:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800c838:	9618      	str	r6, [sp, #96]	; 0x60
 800c83a:	9319      	str	r3, [sp, #100]	; 0x64
 800c83c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800c840:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800c844:	e79c      	b.n	800c780 <_strtod_l+0x980>
 800c846:	f1ba 0f01 	cmp.w	sl, #1
 800c84a:	d102      	bne.n	800c852 <_strtod_l+0xa52>
 800c84c:	2d00      	cmp	r5, #0
 800c84e:	f43f ad8e 	beq.w	800c36e <_strtod_l+0x56e>
 800c852:	2200      	movs	r2, #0
 800c854:	4b34      	ldr	r3, [pc, #208]	; (800c928 <_strtod_l+0xb28>)
 800c856:	e78f      	b.n	800c778 <_strtod_l+0x978>
 800c858:	2600      	movs	r6, #0
 800c85a:	4f32      	ldr	r7, [pc, #200]	; (800c924 <_strtod_l+0xb24>)
 800c85c:	e7ea      	b.n	800c834 <_strtod_l+0xa34>
 800c85e:	4b31      	ldr	r3, [pc, #196]	; (800c924 <_strtod_l+0xb24>)
 800c860:	4630      	mov	r0, r6
 800c862:	4639      	mov	r1, r7
 800c864:	2200      	movs	r2, #0
 800c866:	f7f3 fec7 	bl	80005f8 <__aeabi_dmul>
 800c86a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c86c:	4606      	mov	r6, r0
 800c86e:	460f      	mov	r7, r1
 800c870:	b933      	cbnz	r3, 800c880 <_strtod_l+0xa80>
 800c872:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c876:	9010      	str	r0, [sp, #64]	; 0x40
 800c878:	9311      	str	r3, [sp, #68]	; 0x44
 800c87a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c87e:	e7df      	b.n	800c840 <_strtod_l+0xa40>
 800c880:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800c884:	e7f9      	b.n	800c87a <_strtod_l+0xa7a>
 800c886:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800c88a:	9b04      	ldr	r3, [sp, #16]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d1ab      	bne.n	800c7e8 <_strtod_l+0x9e8>
 800c890:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c894:	0d1b      	lsrs	r3, r3, #20
 800c896:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c898:	051b      	lsls	r3, r3, #20
 800c89a:	429a      	cmp	r2, r3
 800c89c:	465d      	mov	r5, fp
 800c89e:	d1a3      	bne.n	800c7e8 <_strtod_l+0x9e8>
 800c8a0:	4639      	mov	r1, r7
 800c8a2:	4630      	mov	r0, r6
 800c8a4:	f7f4 f958 	bl	8000b58 <__aeabi_d2iz>
 800c8a8:	f7f3 fe3c 	bl	8000524 <__aeabi_i2d>
 800c8ac:	460b      	mov	r3, r1
 800c8ae:	4602      	mov	r2, r0
 800c8b0:	4639      	mov	r1, r7
 800c8b2:	4630      	mov	r0, r6
 800c8b4:	f7f3 fce8 	bl	8000288 <__aeabi_dsub>
 800c8b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c8ba:	4606      	mov	r6, r0
 800c8bc:	460f      	mov	r7, r1
 800c8be:	b933      	cbnz	r3, 800c8ce <_strtod_l+0xace>
 800c8c0:	f1ba 0f00 	cmp.w	sl, #0
 800c8c4:	d103      	bne.n	800c8ce <_strtod_l+0xace>
 800c8c6:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800c8ca:	2d00      	cmp	r5, #0
 800c8cc:	d06d      	beq.n	800c9aa <_strtod_l+0xbaa>
 800c8ce:	a30a      	add	r3, pc, #40	; (adr r3, 800c8f8 <_strtod_l+0xaf8>)
 800c8d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8d4:	4630      	mov	r0, r6
 800c8d6:	4639      	mov	r1, r7
 800c8d8:	f7f4 f900 	bl	8000adc <__aeabi_dcmplt>
 800c8dc:	2800      	cmp	r0, #0
 800c8de:	f47f acb8 	bne.w	800c252 <_strtod_l+0x452>
 800c8e2:	a307      	add	r3, pc, #28	; (adr r3, 800c900 <_strtod_l+0xb00>)
 800c8e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8e8:	4630      	mov	r0, r6
 800c8ea:	4639      	mov	r1, r7
 800c8ec:	f7f4 f914 	bl	8000b18 <__aeabi_dcmpgt>
 800c8f0:	2800      	cmp	r0, #0
 800c8f2:	f43f af79 	beq.w	800c7e8 <_strtod_l+0x9e8>
 800c8f6:	e4ac      	b.n	800c252 <_strtod_l+0x452>
 800c8f8:	94a03595 	.word	0x94a03595
 800c8fc:	3fdfffff 	.word	0x3fdfffff
 800c900:	35afe535 	.word	0x35afe535
 800c904:	3fe00000 	.word	0x3fe00000
 800c908:	000fffff 	.word	0x000fffff
 800c90c:	7ff00000 	.word	0x7ff00000
 800c910:	7fefffff 	.word	0x7fefffff
 800c914:	39500000 	.word	0x39500000
 800c918:	3ff00000 	.word	0x3ff00000
 800c91c:	7fe00000 	.word	0x7fe00000
 800c920:	7c9fffff 	.word	0x7c9fffff
 800c924:	3fe00000 	.word	0x3fe00000
 800c928:	bff00000 	.word	0xbff00000
 800c92c:	9b04      	ldr	r3, [sp, #16]
 800c92e:	b333      	cbz	r3, 800c97e <_strtod_l+0xb7e>
 800c930:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c932:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c936:	d822      	bhi.n	800c97e <_strtod_l+0xb7e>
 800c938:	a327      	add	r3, pc, #156	; (adr r3, 800c9d8 <_strtod_l+0xbd8>)
 800c93a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c93e:	4630      	mov	r0, r6
 800c940:	4639      	mov	r1, r7
 800c942:	f7f4 f8d5 	bl	8000af0 <__aeabi_dcmple>
 800c946:	b1a0      	cbz	r0, 800c972 <_strtod_l+0xb72>
 800c948:	4639      	mov	r1, r7
 800c94a:	4630      	mov	r0, r6
 800c94c:	f7f4 f92c 	bl	8000ba8 <__aeabi_d2uiz>
 800c950:	2800      	cmp	r0, #0
 800c952:	bf08      	it	eq
 800c954:	2001      	moveq	r0, #1
 800c956:	f7f3 fdd5 	bl	8000504 <__aeabi_ui2d>
 800c95a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c95c:	4606      	mov	r6, r0
 800c95e:	460f      	mov	r7, r1
 800c960:	bb03      	cbnz	r3, 800c9a4 <_strtod_l+0xba4>
 800c962:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c966:	9012      	str	r0, [sp, #72]	; 0x48
 800c968:	9313      	str	r3, [sp, #76]	; 0x4c
 800c96a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800c96e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800c972:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c974:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c976:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c97a:	1a9b      	subs	r3, r3, r2
 800c97c:	930b      	str	r3, [sp, #44]	; 0x2c
 800c97e:	ed9d 0b08 	vldr	d0, [sp, #32]
 800c982:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800c986:	f001 fd47 	bl	800e418 <__ulp>
 800c98a:	4650      	mov	r0, sl
 800c98c:	ec53 2b10 	vmov	r2, r3, d0
 800c990:	4659      	mov	r1, fp
 800c992:	f7f3 fe31 	bl	80005f8 <__aeabi_dmul>
 800c996:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c99a:	f7f3 fc77 	bl	800028c <__adddf3>
 800c99e:	4682      	mov	sl, r0
 800c9a0:	468b      	mov	fp, r1
 800c9a2:	e772      	b.n	800c88a <_strtod_l+0xa8a>
 800c9a4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800c9a8:	e7df      	b.n	800c96a <_strtod_l+0xb6a>
 800c9aa:	a30d      	add	r3, pc, #52	; (adr r3, 800c9e0 <_strtod_l+0xbe0>)
 800c9ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9b0:	f7f4 f894 	bl	8000adc <__aeabi_dcmplt>
 800c9b4:	e79c      	b.n	800c8f0 <_strtod_l+0xaf0>
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	930d      	str	r3, [sp, #52]	; 0x34
 800c9ba:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c9bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c9be:	6013      	str	r3, [r2, #0]
 800c9c0:	f7ff ba61 	b.w	800be86 <_strtod_l+0x86>
 800c9c4:	2b65      	cmp	r3, #101	; 0x65
 800c9c6:	f04f 0200 	mov.w	r2, #0
 800c9ca:	f43f ab4e 	beq.w	800c06a <_strtod_l+0x26a>
 800c9ce:	2101      	movs	r1, #1
 800c9d0:	4614      	mov	r4, r2
 800c9d2:	9104      	str	r1, [sp, #16]
 800c9d4:	f7ff bacb 	b.w	800bf6e <_strtod_l+0x16e>
 800c9d8:	ffc00000 	.word	0xffc00000
 800c9dc:	41dfffff 	.word	0x41dfffff
 800c9e0:	94a03595 	.word	0x94a03595
 800c9e4:	3fcfffff 	.word	0x3fcfffff

0800c9e8 <_strtod_r>:
 800c9e8:	4b05      	ldr	r3, [pc, #20]	; (800ca00 <_strtod_r+0x18>)
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	b410      	push	{r4}
 800c9ee:	6a1b      	ldr	r3, [r3, #32]
 800c9f0:	4c04      	ldr	r4, [pc, #16]	; (800ca04 <_strtod_r+0x1c>)
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	bf08      	it	eq
 800c9f6:	4623      	moveq	r3, r4
 800c9f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c9fc:	f7ff ba00 	b.w	800be00 <_strtod_l>
 800ca00:	20000010 	.word	0x20000010
 800ca04:	20000074 	.word	0x20000074

0800ca08 <_strtol_l.isra.0>:
 800ca08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca0c:	4680      	mov	r8, r0
 800ca0e:	4689      	mov	r9, r1
 800ca10:	4692      	mov	sl, r2
 800ca12:	461e      	mov	r6, r3
 800ca14:	460f      	mov	r7, r1
 800ca16:	463d      	mov	r5, r7
 800ca18:	9808      	ldr	r0, [sp, #32]
 800ca1a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ca1e:	f001 fa01 	bl	800de24 <__locale_ctype_ptr_l>
 800ca22:	4420      	add	r0, r4
 800ca24:	7843      	ldrb	r3, [r0, #1]
 800ca26:	f013 0308 	ands.w	r3, r3, #8
 800ca2a:	d132      	bne.n	800ca92 <_strtol_l.isra.0+0x8a>
 800ca2c:	2c2d      	cmp	r4, #45	; 0x2d
 800ca2e:	d132      	bne.n	800ca96 <_strtol_l.isra.0+0x8e>
 800ca30:	787c      	ldrb	r4, [r7, #1]
 800ca32:	1cbd      	adds	r5, r7, #2
 800ca34:	2201      	movs	r2, #1
 800ca36:	2e00      	cmp	r6, #0
 800ca38:	d05d      	beq.n	800caf6 <_strtol_l.isra.0+0xee>
 800ca3a:	2e10      	cmp	r6, #16
 800ca3c:	d109      	bne.n	800ca52 <_strtol_l.isra.0+0x4a>
 800ca3e:	2c30      	cmp	r4, #48	; 0x30
 800ca40:	d107      	bne.n	800ca52 <_strtol_l.isra.0+0x4a>
 800ca42:	782b      	ldrb	r3, [r5, #0]
 800ca44:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ca48:	2b58      	cmp	r3, #88	; 0x58
 800ca4a:	d14f      	bne.n	800caec <_strtol_l.isra.0+0xe4>
 800ca4c:	786c      	ldrb	r4, [r5, #1]
 800ca4e:	2610      	movs	r6, #16
 800ca50:	3502      	adds	r5, #2
 800ca52:	2a00      	cmp	r2, #0
 800ca54:	bf14      	ite	ne
 800ca56:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800ca5a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800ca5e:	2700      	movs	r7, #0
 800ca60:	fbb1 fcf6 	udiv	ip, r1, r6
 800ca64:	4638      	mov	r0, r7
 800ca66:	fb06 1e1c 	mls	lr, r6, ip, r1
 800ca6a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800ca6e:	2b09      	cmp	r3, #9
 800ca70:	d817      	bhi.n	800caa2 <_strtol_l.isra.0+0x9a>
 800ca72:	461c      	mov	r4, r3
 800ca74:	42a6      	cmp	r6, r4
 800ca76:	dd23      	ble.n	800cac0 <_strtol_l.isra.0+0xb8>
 800ca78:	1c7b      	adds	r3, r7, #1
 800ca7a:	d007      	beq.n	800ca8c <_strtol_l.isra.0+0x84>
 800ca7c:	4584      	cmp	ip, r0
 800ca7e:	d31c      	bcc.n	800caba <_strtol_l.isra.0+0xb2>
 800ca80:	d101      	bne.n	800ca86 <_strtol_l.isra.0+0x7e>
 800ca82:	45a6      	cmp	lr, r4
 800ca84:	db19      	blt.n	800caba <_strtol_l.isra.0+0xb2>
 800ca86:	fb00 4006 	mla	r0, r0, r6, r4
 800ca8a:	2701      	movs	r7, #1
 800ca8c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ca90:	e7eb      	b.n	800ca6a <_strtol_l.isra.0+0x62>
 800ca92:	462f      	mov	r7, r5
 800ca94:	e7bf      	b.n	800ca16 <_strtol_l.isra.0+0xe>
 800ca96:	2c2b      	cmp	r4, #43	; 0x2b
 800ca98:	bf04      	itt	eq
 800ca9a:	1cbd      	addeq	r5, r7, #2
 800ca9c:	787c      	ldrbeq	r4, [r7, #1]
 800ca9e:	461a      	mov	r2, r3
 800caa0:	e7c9      	b.n	800ca36 <_strtol_l.isra.0+0x2e>
 800caa2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800caa6:	2b19      	cmp	r3, #25
 800caa8:	d801      	bhi.n	800caae <_strtol_l.isra.0+0xa6>
 800caaa:	3c37      	subs	r4, #55	; 0x37
 800caac:	e7e2      	b.n	800ca74 <_strtol_l.isra.0+0x6c>
 800caae:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800cab2:	2b19      	cmp	r3, #25
 800cab4:	d804      	bhi.n	800cac0 <_strtol_l.isra.0+0xb8>
 800cab6:	3c57      	subs	r4, #87	; 0x57
 800cab8:	e7dc      	b.n	800ca74 <_strtol_l.isra.0+0x6c>
 800caba:	f04f 37ff 	mov.w	r7, #4294967295
 800cabe:	e7e5      	b.n	800ca8c <_strtol_l.isra.0+0x84>
 800cac0:	1c7b      	adds	r3, r7, #1
 800cac2:	d108      	bne.n	800cad6 <_strtol_l.isra.0+0xce>
 800cac4:	2322      	movs	r3, #34	; 0x22
 800cac6:	f8c8 3000 	str.w	r3, [r8]
 800caca:	4608      	mov	r0, r1
 800cacc:	f1ba 0f00 	cmp.w	sl, #0
 800cad0:	d107      	bne.n	800cae2 <_strtol_l.isra.0+0xda>
 800cad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cad6:	b102      	cbz	r2, 800cada <_strtol_l.isra.0+0xd2>
 800cad8:	4240      	negs	r0, r0
 800cada:	f1ba 0f00 	cmp.w	sl, #0
 800cade:	d0f8      	beq.n	800cad2 <_strtol_l.isra.0+0xca>
 800cae0:	b10f      	cbz	r7, 800cae6 <_strtol_l.isra.0+0xde>
 800cae2:	f105 39ff 	add.w	r9, r5, #4294967295
 800cae6:	f8ca 9000 	str.w	r9, [sl]
 800caea:	e7f2      	b.n	800cad2 <_strtol_l.isra.0+0xca>
 800caec:	2430      	movs	r4, #48	; 0x30
 800caee:	2e00      	cmp	r6, #0
 800caf0:	d1af      	bne.n	800ca52 <_strtol_l.isra.0+0x4a>
 800caf2:	2608      	movs	r6, #8
 800caf4:	e7ad      	b.n	800ca52 <_strtol_l.isra.0+0x4a>
 800caf6:	2c30      	cmp	r4, #48	; 0x30
 800caf8:	d0a3      	beq.n	800ca42 <_strtol_l.isra.0+0x3a>
 800cafa:	260a      	movs	r6, #10
 800cafc:	e7a9      	b.n	800ca52 <_strtol_l.isra.0+0x4a>
	...

0800cb00 <_strtol_r>:
 800cb00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cb02:	4c06      	ldr	r4, [pc, #24]	; (800cb1c <_strtol_r+0x1c>)
 800cb04:	4d06      	ldr	r5, [pc, #24]	; (800cb20 <_strtol_r+0x20>)
 800cb06:	6824      	ldr	r4, [r4, #0]
 800cb08:	6a24      	ldr	r4, [r4, #32]
 800cb0a:	2c00      	cmp	r4, #0
 800cb0c:	bf08      	it	eq
 800cb0e:	462c      	moveq	r4, r5
 800cb10:	9400      	str	r4, [sp, #0]
 800cb12:	f7ff ff79 	bl	800ca08 <_strtol_l.isra.0>
 800cb16:	b003      	add	sp, #12
 800cb18:	bd30      	pop	{r4, r5, pc}
 800cb1a:	bf00      	nop
 800cb1c:	20000010 	.word	0x20000010
 800cb20:	20000074 	.word	0x20000074

0800cb24 <strtol>:
 800cb24:	4b08      	ldr	r3, [pc, #32]	; (800cb48 <strtol+0x24>)
 800cb26:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cb28:	681c      	ldr	r4, [r3, #0]
 800cb2a:	4d08      	ldr	r5, [pc, #32]	; (800cb4c <strtol+0x28>)
 800cb2c:	6a23      	ldr	r3, [r4, #32]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	bf08      	it	eq
 800cb32:	462b      	moveq	r3, r5
 800cb34:	9300      	str	r3, [sp, #0]
 800cb36:	4613      	mov	r3, r2
 800cb38:	460a      	mov	r2, r1
 800cb3a:	4601      	mov	r1, r0
 800cb3c:	4620      	mov	r0, r4
 800cb3e:	f7ff ff63 	bl	800ca08 <_strtol_l.isra.0>
 800cb42:	b003      	add	sp, #12
 800cb44:	bd30      	pop	{r4, r5, pc}
 800cb46:	bf00      	nop
 800cb48:	20000010 	.word	0x20000010
 800cb4c:	20000074 	.word	0x20000074

0800cb50 <quorem>:
 800cb50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb54:	6903      	ldr	r3, [r0, #16]
 800cb56:	690c      	ldr	r4, [r1, #16]
 800cb58:	42a3      	cmp	r3, r4
 800cb5a:	4680      	mov	r8, r0
 800cb5c:	f2c0 8082 	blt.w	800cc64 <quorem+0x114>
 800cb60:	3c01      	subs	r4, #1
 800cb62:	f101 0714 	add.w	r7, r1, #20
 800cb66:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800cb6a:	f100 0614 	add.w	r6, r0, #20
 800cb6e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800cb72:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800cb76:	eb06 030c 	add.w	r3, r6, ip
 800cb7a:	3501      	adds	r5, #1
 800cb7c:	eb07 090c 	add.w	r9, r7, ip
 800cb80:	9301      	str	r3, [sp, #4]
 800cb82:	fbb0 f5f5 	udiv	r5, r0, r5
 800cb86:	b395      	cbz	r5, 800cbee <quorem+0x9e>
 800cb88:	f04f 0a00 	mov.w	sl, #0
 800cb8c:	4638      	mov	r0, r7
 800cb8e:	46b6      	mov	lr, r6
 800cb90:	46d3      	mov	fp, sl
 800cb92:	f850 2b04 	ldr.w	r2, [r0], #4
 800cb96:	b293      	uxth	r3, r2
 800cb98:	fb05 a303 	mla	r3, r5, r3, sl
 800cb9c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cba0:	b29b      	uxth	r3, r3
 800cba2:	ebab 0303 	sub.w	r3, fp, r3
 800cba6:	0c12      	lsrs	r2, r2, #16
 800cba8:	f8de b000 	ldr.w	fp, [lr]
 800cbac:	fb05 a202 	mla	r2, r5, r2, sl
 800cbb0:	fa13 f38b 	uxtah	r3, r3, fp
 800cbb4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800cbb8:	fa1f fb82 	uxth.w	fp, r2
 800cbbc:	f8de 2000 	ldr.w	r2, [lr]
 800cbc0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800cbc4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cbc8:	b29b      	uxth	r3, r3
 800cbca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cbce:	4581      	cmp	r9, r0
 800cbd0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800cbd4:	f84e 3b04 	str.w	r3, [lr], #4
 800cbd8:	d2db      	bcs.n	800cb92 <quorem+0x42>
 800cbda:	f856 300c 	ldr.w	r3, [r6, ip]
 800cbde:	b933      	cbnz	r3, 800cbee <quorem+0x9e>
 800cbe0:	9b01      	ldr	r3, [sp, #4]
 800cbe2:	3b04      	subs	r3, #4
 800cbe4:	429e      	cmp	r6, r3
 800cbe6:	461a      	mov	r2, r3
 800cbe8:	d330      	bcc.n	800cc4c <quorem+0xfc>
 800cbea:	f8c8 4010 	str.w	r4, [r8, #16]
 800cbee:	4640      	mov	r0, r8
 800cbf0:	f001 fb9a 	bl	800e328 <__mcmp>
 800cbf4:	2800      	cmp	r0, #0
 800cbf6:	db25      	blt.n	800cc44 <quorem+0xf4>
 800cbf8:	3501      	adds	r5, #1
 800cbfa:	4630      	mov	r0, r6
 800cbfc:	f04f 0c00 	mov.w	ip, #0
 800cc00:	f857 2b04 	ldr.w	r2, [r7], #4
 800cc04:	f8d0 e000 	ldr.w	lr, [r0]
 800cc08:	b293      	uxth	r3, r2
 800cc0a:	ebac 0303 	sub.w	r3, ip, r3
 800cc0e:	0c12      	lsrs	r2, r2, #16
 800cc10:	fa13 f38e 	uxtah	r3, r3, lr
 800cc14:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800cc18:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cc1c:	b29b      	uxth	r3, r3
 800cc1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cc22:	45b9      	cmp	r9, r7
 800cc24:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800cc28:	f840 3b04 	str.w	r3, [r0], #4
 800cc2c:	d2e8      	bcs.n	800cc00 <quorem+0xb0>
 800cc2e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800cc32:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800cc36:	b92a      	cbnz	r2, 800cc44 <quorem+0xf4>
 800cc38:	3b04      	subs	r3, #4
 800cc3a:	429e      	cmp	r6, r3
 800cc3c:	461a      	mov	r2, r3
 800cc3e:	d30b      	bcc.n	800cc58 <quorem+0x108>
 800cc40:	f8c8 4010 	str.w	r4, [r8, #16]
 800cc44:	4628      	mov	r0, r5
 800cc46:	b003      	add	sp, #12
 800cc48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc4c:	6812      	ldr	r2, [r2, #0]
 800cc4e:	3b04      	subs	r3, #4
 800cc50:	2a00      	cmp	r2, #0
 800cc52:	d1ca      	bne.n	800cbea <quorem+0x9a>
 800cc54:	3c01      	subs	r4, #1
 800cc56:	e7c5      	b.n	800cbe4 <quorem+0x94>
 800cc58:	6812      	ldr	r2, [r2, #0]
 800cc5a:	3b04      	subs	r3, #4
 800cc5c:	2a00      	cmp	r2, #0
 800cc5e:	d1ef      	bne.n	800cc40 <quorem+0xf0>
 800cc60:	3c01      	subs	r4, #1
 800cc62:	e7ea      	b.n	800cc3a <quorem+0xea>
 800cc64:	2000      	movs	r0, #0
 800cc66:	e7ee      	b.n	800cc46 <quorem+0xf6>

0800cc68 <_dtoa_r>:
 800cc68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc6c:	ec57 6b10 	vmov	r6, r7, d0
 800cc70:	b097      	sub	sp, #92	; 0x5c
 800cc72:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800cc74:	9106      	str	r1, [sp, #24]
 800cc76:	4604      	mov	r4, r0
 800cc78:	920b      	str	r2, [sp, #44]	; 0x2c
 800cc7a:	9312      	str	r3, [sp, #72]	; 0x48
 800cc7c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800cc80:	e9cd 6700 	strd	r6, r7, [sp]
 800cc84:	b93d      	cbnz	r5, 800cc96 <_dtoa_r+0x2e>
 800cc86:	2010      	movs	r0, #16
 800cc88:	f001 f8e0 	bl	800de4c <malloc>
 800cc8c:	6260      	str	r0, [r4, #36]	; 0x24
 800cc8e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800cc92:	6005      	str	r5, [r0, #0]
 800cc94:	60c5      	str	r5, [r0, #12]
 800cc96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cc98:	6819      	ldr	r1, [r3, #0]
 800cc9a:	b151      	cbz	r1, 800ccb2 <_dtoa_r+0x4a>
 800cc9c:	685a      	ldr	r2, [r3, #4]
 800cc9e:	604a      	str	r2, [r1, #4]
 800cca0:	2301      	movs	r3, #1
 800cca2:	4093      	lsls	r3, r2
 800cca4:	608b      	str	r3, [r1, #8]
 800cca6:	4620      	mov	r0, r4
 800cca8:	f001 f91e 	bl	800dee8 <_Bfree>
 800ccac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ccae:	2200      	movs	r2, #0
 800ccb0:	601a      	str	r2, [r3, #0]
 800ccb2:	1e3b      	subs	r3, r7, #0
 800ccb4:	bfbb      	ittet	lt
 800ccb6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ccba:	9301      	strlt	r3, [sp, #4]
 800ccbc:	2300      	movge	r3, #0
 800ccbe:	2201      	movlt	r2, #1
 800ccc0:	bfac      	ite	ge
 800ccc2:	f8c8 3000 	strge.w	r3, [r8]
 800ccc6:	f8c8 2000 	strlt.w	r2, [r8]
 800ccca:	4baf      	ldr	r3, [pc, #700]	; (800cf88 <_dtoa_r+0x320>)
 800cccc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ccd0:	ea33 0308 	bics.w	r3, r3, r8
 800ccd4:	d114      	bne.n	800cd00 <_dtoa_r+0x98>
 800ccd6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ccd8:	f242 730f 	movw	r3, #9999	; 0x270f
 800ccdc:	6013      	str	r3, [r2, #0]
 800ccde:	9b00      	ldr	r3, [sp, #0]
 800cce0:	b923      	cbnz	r3, 800ccec <_dtoa_r+0x84>
 800cce2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800cce6:	2800      	cmp	r0, #0
 800cce8:	f000 8542 	beq.w	800d770 <_dtoa_r+0xb08>
 800ccec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ccee:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800cf9c <_dtoa_r+0x334>
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	f000 8544 	beq.w	800d780 <_dtoa_r+0xb18>
 800ccf8:	f10b 0303 	add.w	r3, fp, #3
 800ccfc:	f000 bd3e 	b.w	800d77c <_dtoa_r+0xb14>
 800cd00:	e9dd 6700 	ldrd	r6, r7, [sp]
 800cd04:	2200      	movs	r2, #0
 800cd06:	2300      	movs	r3, #0
 800cd08:	4630      	mov	r0, r6
 800cd0a:	4639      	mov	r1, r7
 800cd0c:	f7f3 fedc 	bl	8000ac8 <__aeabi_dcmpeq>
 800cd10:	4681      	mov	r9, r0
 800cd12:	b168      	cbz	r0, 800cd30 <_dtoa_r+0xc8>
 800cd14:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cd16:	2301      	movs	r3, #1
 800cd18:	6013      	str	r3, [r2, #0]
 800cd1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	f000 8524 	beq.w	800d76a <_dtoa_r+0xb02>
 800cd22:	4b9a      	ldr	r3, [pc, #616]	; (800cf8c <_dtoa_r+0x324>)
 800cd24:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800cd26:	f103 3bff 	add.w	fp, r3, #4294967295
 800cd2a:	6013      	str	r3, [r2, #0]
 800cd2c:	f000 bd28 	b.w	800d780 <_dtoa_r+0xb18>
 800cd30:	aa14      	add	r2, sp, #80	; 0x50
 800cd32:	a915      	add	r1, sp, #84	; 0x54
 800cd34:	ec47 6b10 	vmov	d0, r6, r7
 800cd38:	4620      	mov	r0, r4
 800cd3a:	f001 fbe3 	bl	800e504 <__d2b>
 800cd3e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800cd42:	9004      	str	r0, [sp, #16]
 800cd44:	2d00      	cmp	r5, #0
 800cd46:	d07c      	beq.n	800ce42 <_dtoa_r+0x1da>
 800cd48:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cd4c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800cd50:	46b2      	mov	sl, r6
 800cd52:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800cd56:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800cd5a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800cd5e:	2200      	movs	r2, #0
 800cd60:	4b8b      	ldr	r3, [pc, #556]	; (800cf90 <_dtoa_r+0x328>)
 800cd62:	4650      	mov	r0, sl
 800cd64:	4659      	mov	r1, fp
 800cd66:	f7f3 fa8f 	bl	8000288 <__aeabi_dsub>
 800cd6a:	a381      	add	r3, pc, #516	; (adr r3, 800cf70 <_dtoa_r+0x308>)
 800cd6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd70:	f7f3 fc42 	bl	80005f8 <__aeabi_dmul>
 800cd74:	a380      	add	r3, pc, #512	; (adr r3, 800cf78 <_dtoa_r+0x310>)
 800cd76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd7a:	f7f3 fa87 	bl	800028c <__adddf3>
 800cd7e:	4606      	mov	r6, r0
 800cd80:	4628      	mov	r0, r5
 800cd82:	460f      	mov	r7, r1
 800cd84:	f7f3 fbce 	bl	8000524 <__aeabi_i2d>
 800cd88:	a37d      	add	r3, pc, #500	; (adr r3, 800cf80 <_dtoa_r+0x318>)
 800cd8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd8e:	f7f3 fc33 	bl	80005f8 <__aeabi_dmul>
 800cd92:	4602      	mov	r2, r0
 800cd94:	460b      	mov	r3, r1
 800cd96:	4630      	mov	r0, r6
 800cd98:	4639      	mov	r1, r7
 800cd9a:	f7f3 fa77 	bl	800028c <__adddf3>
 800cd9e:	4606      	mov	r6, r0
 800cda0:	460f      	mov	r7, r1
 800cda2:	f7f3 fed9 	bl	8000b58 <__aeabi_d2iz>
 800cda6:	2200      	movs	r2, #0
 800cda8:	4682      	mov	sl, r0
 800cdaa:	2300      	movs	r3, #0
 800cdac:	4630      	mov	r0, r6
 800cdae:	4639      	mov	r1, r7
 800cdb0:	f7f3 fe94 	bl	8000adc <__aeabi_dcmplt>
 800cdb4:	b148      	cbz	r0, 800cdca <_dtoa_r+0x162>
 800cdb6:	4650      	mov	r0, sl
 800cdb8:	f7f3 fbb4 	bl	8000524 <__aeabi_i2d>
 800cdbc:	4632      	mov	r2, r6
 800cdbe:	463b      	mov	r3, r7
 800cdc0:	f7f3 fe82 	bl	8000ac8 <__aeabi_dcmpeq>
 800cdc4:	b908      	cbnz	r0, 800cdca <_dtoa_r+0x162>
 800cdc6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cdca:	f1ba 0f16 	cmp.w	sl, #22
 800cdce:	d859      	bhi.n	800ce84 <_dtoa_r+0x21c>
 800cdd0:	4970      	ldr	r1, [pc, #448]	; (800cf94 <_dtoa_r+0x32c>)
 800cdd2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800cdd6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cdda:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cdde:	f7f3 fe9b 	bl	8000b18 <__aeabi_dcmpgt>
 800cde2:	2800      	cmp	r0, #0
 800cde4:	d050      	beq.n	800ce88 <_dtoa_r+0x220>
 800cde6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cdea:	2300      	movs	r3, #0
 800cdec:	930f      	str	r3, [sp, #60]	; 0x3c
 800cdee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cdf0:	1b5d      	subs	r5, r3, r5
 800cdf2:	f1b5 0801 	subs.w	r8, r5, #1
 800cdf6:	bf49      	itett	mi
 800cdf8:	f1c5 0301 	rsbmi	r3, r5, #1
 800cdfc:	2300      	movpl	r3, #0
 800cdfe:	9305      	strmi	r3, [sp, #20]
 800ce00:	f04f 0800 	movmi.w	r8, #0
 800ce04:	bf58      	it	pl
 800ce06:	9305      	strpl	r3, [sp, #20]
 800ce08:	f1ba 0f00 	cmp.w	sl, #0
 800ce0c:	db3e      	blt.n	800ce8c <_dtoa_r+0x224>
 800ce0e:	2300      	movs	r3, #0
 800ce10:	44d0      	add	r8, sl
 800ce12:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800ce16:	9307      	str	r3, [sp, #28]
 800ce18:	9b06      	ldr	r3, [sp, #24]
 800ce1a:	2b09      	cmp	r3, #9
 800ce1c:	f200 8090 	bhi.w	800cf40 <_dtoa_r+0x2d8>
 800ce20:	2b05      	cmp	r3, #5
 800ce22:	bfc4      	itt	gt
 800ce24:	3b04      	subgt	r3, #4
 800ce26:	9306      	strgt	r3, [sp, #24]
 800ce28:	9b06      	ldr	r3, [sp, #24]
 800ce2a:	f1a3 0302 	sub.w	r3, r3, #2
 800ce2e:	bfcc      	ite	gt
 800ce30:	2500      	movgt	r5, #0
 800ce32:	2501      	movle	r5, #1
 800ce34:	2b03      	cmp	r3, #3
 800ce36:	f200 808f 	bhi.w	800cf58 <_dtoa_r+0x2f0>
 800ce3a:	e8df f003 	tbb	[pc, r3]
 800ce3e:	7f7d      	.short	0x7f7d
 800ce40:	7131      	.short	0x7131
 800ce42:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800ce46:	441d      	add	r5, r3
 800ce48:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800ce4c:	2820      	cmp	r0, #32
 800ce4e:	dd13      	ble.n	800ce78 <_dtoa_r+0x210>
 800ce50:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800ce54:	9b00      	ldr	r3, [sp, #0]
 800ce56:	fa08 f800 	lsl.w	r8, r8, r0
 800ce5a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800ce5e:	fa23 f000 	lsr.w	r0, r3, r0
 800ce62:	ea48 0000 	orr.w	r0, r8, r0
 800ce66:	f7f3 fb4d 	bl	8000504 <__aeabi_ui2d>
 800ce6a:	2301      	movs	r3, #1
 800ce6c:	4682      	mov	sl, r0
 800ce6e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800ce72:	3d01      	subs	r5, #1
 800ce74:	9313      	str	r3, [sp, #76]	; 0x4c
 800ce76:	e772      	b.n	800cd5e <_dtoa_r+0xf6>
 800ce78:	9b00      	ldr	r3, [sp, #0]
 800ce7a:	f1c0 0020 	rsb	r0, r0, #32
 800ce7e:	fa03 f000 	lsl.w	r0, r3, r0
 800ce82:	e7f0      	b.n	800ce66 <_dtoa_r+0x1fe>
 800ce84:	2301      	movs	r3, #1
 800ce86:	e7b1      	b.n	800cdec <_dtoa_r+0x184>
 800ce88:	900f      	str	r0, [sp, #60]	; 0x3c
 800ce8a:	e7b0      	b.n	800cdee <_dtoa_r+0x186>
 800ce8c:	9b05      	ldr	r3, [sp, #20]
 800ce8e:	eba3 030a 	sub.w	r3, r3, sl
 800ce92:	9305      	str	r3, [sp, #20]
 800ce94:	f1ca 0300 	rsb	r3, sl, #0
 800ce98:	9307      	str	r3, [sp, #28]
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	930e      	str	r3, [sp, #56]	; 0x38
 800ce9e:	e7bb      	b.n	800ce18 <_dtoa_r+0x1b0>
 800cea0:	2301      	movs	r3, #1
 800cea2:	930a      	str	r3, [sp, #40]	; 0x28
 800cea4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	dd59      	ble.n	800cf5e <_dtoa_r+0x2f6>
 800ceaa:	9302      	str	r3, [sp, #8]
 800ceac:	4699      	mov	r9, r3
 800ceae:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ceb0:	2200      	movs	r2, #0
 800ceb2:	6072      	str	r2, [r6, #4]
 800ceb4:	2204      	movs	r2, #4
 800ceb6:	f102 0014 	add.w	r0, r2, #20
 800ceba:	4298      	cmp	r0, r3
 800cebc:	6871      	ldr	r1, [r6, #4]
 800cebe:	d953      	bls.n	800cf68 <_dtoa_r+0x300>
 800cec0:	4620      	mov	r0, r4
 800cec2:	f000 ffdd 	bl	800de80 <_Balloc>
 800cec6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cec8:	6030      	str	r0, [r6, #0]
 800ceca:	f1b9 0f0e 	cmp.w	r9, #14
 800cece:	f8d3 b000 	ldr.w	fp, [r3]
 800ced2:	f200 80e6 	bhi.w	800d0a2 <_dtoa_r+0x43a>
 800ced6:	2d00      	cmp	r5, #0
 800ced8:	f000 80e3 	beq.w	800d0a2 <_dtoa_r+0x43a>
 800cedc:	ed9d 7b00 	vldr	d7, [sp]
 800cee0:	f1ba 0f00 	cmp.w	sl, #0
 800cee4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800cee8:	dd74      	ble.n	800cfd4 <_dtoa_r+0x36c>
 800ceea:	4a2a      	ldr	r2, [pc, #168]	; (800cf94 <_dtoa_r+0x32c>)
 800ceec:	f00a 030f 	and.w	r3, sl, #15
 800cef0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800cef4:	ed93 7b00 	vldr	d7, [r3]
 800cef8:	ea4f 162a 	mov.w	r6, sl, asr #4
 800cefc:	06f0      	lsls	r0, r6, #27
 800cefe:	ed8d 7b08 	vstr	d7, [sp, #32]
 800cf02:	d565      	bpl.n	800cfd0 <_dtoa_r+0x368>
 800cf04:	4b24      	ldr	r3, [pc, #144]	; (800cf98 <_dtoa_r+0x330>)
 800cf06:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800cf0a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cf0e:	f7f3 fc9d 	bl	800084c <__aeabi_ddiv>
 800cf12:	e9cd 0100 	strd	r0, r1, [sp]
 800cf16:	f006 060f 	and.w	r6, r6, #15
 800cf1a:	2503      	movs	r5, #3
 800cf1c:	4f1e      	ldr	r7, [pc, #120]	; (800cf98 <_dtoa_r+0x330>)
 800cf1e:	e04c      	b.n	800cfba <_dtoa_r+0x352>
 800cf20:	2301      	movs	r3, #1
 800cf22:	930a      	str	r3, [sp, #40]	; 0x28
 800cf24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf26:	4453      	add	r3, sl
 800cf28:	f103 0901 	add.w	r9, r3, #1
 800cf2c:	9302      	str	r3, [sp, #8]
 800cf2e:	464b      	mov	r3, r9
 800cf30:	2b01      	cmp	r3, #1
 800cf32:	bfb8      	it	lt
 800cf34:	2301      	movlt	r3, #1
 800cf36:	e7ba      	b.n	800ceae <_dtoa_r+0x246>
 800cf38:	2300      	movs	r3, #0
 800cf3a:	e7b2      	b.n	800cea2 <_dtoa_r+0x23a>
 800cf3c:	2300      	movs	r3, #0
 800cf3e:	e7f0      	b.n	800cf22 <_dtoa_r+0x2ba>
 800cf40:	2501      	movs	r5, #1
 800cf42:	2300      	movs	r3, #0
 800cf44:	9306      	str	r3, [sp, #24]
 800cf46:	950a      	str	r5, [sp, #40]	; 0x28
 800cf48:	f04f 33ff 	mov.w	r3, #4294967295
 800cf4c:	9302      	str	r3, [sp, #8]
 800cf4e:	4699      	mov	r9, r3
 800cf50:	2200      	movs	r2, #0
 800cf52:	2312      	movs	r3, #18
 800cf54:	920b      	str	r2, [sp, #44]	; 0x2c
 800cf56:	e7aa      	b.n	800ceae <_dtoa_r+0x246>
 800cf58:	2301      	movs	r3, #1
 800cf5a:	930a      	str	r3, [sp, #40]	; 0x28
 800cf5c:	e7f4      	b.n	800cf48 <_dtoa_r+0x2e0>
 800cf5e:	2301      	movs	r3, #1
 800cf60:	9302      	str	r3, [sp, #8]
 800cf62:	4699      	mov	r9, r3
 800cf64:	461a      	mov	r2, r3
 800cf66:	e7f5      	b.n	800cf54 <_dtoa_r+0x2ec>
 800cf68:	3101      	adds	r1, #1
 800cf6a:	6071      	str	r1, [r6, #4]
 800cf6c:	0052      	lsls	r2, r2, #1
 800cf6e:	e7a2      	b.n	800ceb6 <_dtoa_r+0x24e>
 800cf70:	636f4361 	.word	0x636f4361
 800cf74:	3fd287a7 	.word	0x3fd287a7
 800cf78:	8b60c8b3 	.word	0x8b60c8b3
 800cf7c:	3fc68a28 	.word	0x3fc68a28
 800cf80:	509f79fb 	.word	0x509f79fb
 800cf84:	3fd34413 	.word	0x3fd34413
 800cf88:	7ff00000 	.word	0x7ff00000
 800cf8c:	0800eded 	.word	0x0800eded
 800cf90:	3ff80000 	.word	0x3ff80000
 800cf94:	0800ef10 	.word	0x0800ef10
 800cf98:	0800eee8 	.word	0x0800eee8
 800cf9c:	0800ee71 	.word	0x0800ee71
 800cfa0:	07f1      	lsls	r1, r6, #31
 800cfa2:	d508      	bpl.n	800cfb6 <_dtoa_r+0x34e>
 800cfa4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cfa8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cfac:	f7f3 fb24 	bl	80005f8 <__aeabi_dmul>
 800cfb0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800cfb4:	3501      	adds	r5, #1
 800cfb6:	1076      	asrs	r6, r6, #1
 800cfb8:	3708      	adds	r7, #8
 800cfba:	2e00      	cmp	r6, #0
 800cfbc:	d1f0      	bne.n	800cfa0 <_dtoa_r+0x338>
 800cfbe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800cfc2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cfc6:	f7f3 fc41 	bl	800084c <__aeabi_ddiv>
 800cfca:	e9cd 0100 	strd	r0, r1, [sp]
 800cfce:	e01a      	b.n	800d006 <_dtoa_r+0x39e>
 800cfd0:	2502      	movs	r5, #2
 800cfd2:	e7a3      	b.n	800cf1c <_dtoa_r+0x2b4>
 800cfd4:	f000 80a0 	beq.w	800d118 <_dtoa_r+0x4b0>
 800cfd8:	f1ca 0600 	rsb	r6, sl, #0
 800cfdc:	4b9f      	ldr	r3, [pc, #636]	; (800d25c <_dtoa_r+0x5f4>)
 800cfde:	4fa0      	ldr	r7, [pc, #640]	; (800d260 <_dtoa_r+0x5f8>)
 800cfe0:	f006 020f 	and.w	r2, r6, #15
 800cfe4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cfe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfec:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800cff0:	f7f3 fb02 	bl	80005f8 <__aeabi_dmul>
 800cff4:	e9cd 0100 	strd	r0, r1, [sp]
 800cff8:	1136      	asrs	r6, r6, #4
 800cffa:	2300      	movs	r3, #0
 800cffc:	2502      	movs	r5, #2
 800cffe:	2e00      	cmp	r6, #0
 800d000:	d17f      	bne.n	800d102 <_dtoa_r+0x49a>
 800d002:	2b00      	cmp	r3, #0
 800d004:	d1e1      	bne.n	800cfca <_dtoa_r+0x362>
 800d006:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d008:	2b00      	cmp	r3, #0
 800d00a:	f000 8087 	beq.w	800d11c <_dtoa_r+0x4b4>
 800d00e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d012:	2200      	movs	r2, #0
 800d014:	4b93      	ldr	r3, [pc, #588]	; (800d264 <_dtoa_r+0x5fc>)
 800d016:	4630      	mov	r0, r6
 800d018:	4639      	mov	r1, r7
 800d01a:	f7f3 fd5f 	bl	8000adc <__aeabi_dcmplt>
 800d01e:	2800      	cmp	r0, #0
 800d020:	d07c      	beq.n	800d11c <_dtoa_r+0x4b4>
 800d022:	f1b9 0f00 	cmp.w	r9, #0
 800d026:	d079      	beq.n	800d11c <_dtoa_r+0x4b4>
 800d028:	9b02      	ldr	r3, [sp, #8]
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	dd35      	ble.n	800d09a <_dtoa_r+0x432>
 800d02e:	f10a 33ff 	add.w	r3, sl, #4294967295
 800d032:	9308      	str	r3, [sp, #32]
 800d034:	4639      	mov	r1, r7
 800d036:	2200      	movs	r2, #0
 800d038:	4b8b      	ldr	r3, [pc, #556]	; (800d268 <_dtoa_r+0x600>)
 800d03a:	4630      	mov	r0, r6
 800d03c:	f7f3 fadc 	bl	80005f8 <__aeabi_dmul>
 800d040:	e9cd 0100 	strd	r0, r1, [sp]
 800d044:	9f02      	ldr	r7, [sp, #8]
 800d046:	3501      	adds	r5, #1
 800d048:	4628      	mov	r0, r5
 800d04a:	f7f3 fa6b 	bl	8000524 <__aeabi_i2d>
 800d04e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d052:	f7f3 fad1 	bl	80005f8 <__aeabi_dmul>
 800d056:	2200      	movs	r2, #0
 800d058:	4b84      	ldr	r3, [pc, #528]	; (800d26c <_dtoa_r+0x604>)
 800d05a:	f7f3 f917 	bl	800028c <__adddf3>
 800d05e:	4605      	mov	r5, r0
 800d060:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800d064:	2f00      	cmp	r7, #0
 800d066:	d15d      	bne.n	800d124 <_dtoa_r+0x4bc>
 800d068:	2200      	movs	r2, #0
 800d06a:	4b81      	ldr	r3, [pc, #516]	; (800d270 <_dtoa_r+0x608>)
 800d06c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d070:	f7f3 f90a 	bl	8000288 <__aeabi_dsub>
 800d074:	462a      	mov	r2, r5
 800d076:	4633      	mov	r3, r6
 800d078:	e9cd 0100 	strd	r0, r1, [sp]
 800d07c:	f7f3 fd4c 	bl	8000b18 <__aeabi_dcmpgt>
 800d080:	2800      	cmp	r0, #0
 800d082:	f040 8288 	bne.w	800d596 <_dtoa_r+0x92e>
 800d086:	462a      	mov	r2, r5
 800d088:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800d08c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d090:	f7f3 fd24 	bl	8000adc <__aeabi_dcmplt>
 800d094:	2800      	cmp	r0, #0
 800d096:	f040 827c 	bne.w	800d592 <_dtoa_r+0x92a>
 800d09a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d09e:	e9cd 2300 	strd	r2, r3, [sp]
 800d0a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	f2c0 8150 	blt.w	800d34a <_dtoa_r+0x6e2>
 800d0aa:	f1ba 0f0e 	cmp.w	sl, #14
 800d0ae:	f300 814c 	bgt.w	800d34a <_dtoa_r+0x6e2>
 800d0b2:	4b6a      	ldr	r3, [pc, #424]	; (800d25c <_dtoa_r+0x5f4>)
 800d0b4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d0b8:	ed93 7b00 	vldr	d7, [r3]
 800d0bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d0c4:	f280 80d8 	bge.w	800d278 <_dtoa_r+0x610>
 800d0c8:	f1b9 0f00 	cmp.w	r9, #0
 800d0cc:	f300 80d4 	bgt.w	800d278 <_dtoa_r+0x610>
 800d0d0:	f040 825e 	bne.w	800d590 <_dtoa_r+0x928>
 800d0d4:	2200      	movs	r2, #0
 800d0d6:	4b66      	ldr	r3, [pc, #408]	; (800d270 <_dtoa_r+0x608>)
 800d0d8:	ec51 0b17 	vmov	r0, r1, d7
 800d0dc:	f7f3 fa8c 	bl	80005f8 <__aeabi_dmul>
 800d0e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d0e4:	f7f3 fd0e 	bl	8000b04 <__aeabi_dcmpge>
 800d0e8:	464f      	mov	r7, r9
 800d0ea:	464e      	mov	r6, r9
 800d0ec:	2800      	cmp	r0, #0
 800d0ee:	f040 8234 	bne.w	800d55a <_dtoa_r+0x8f2>
 800d0f2:	2331      	movs	r3, #49	; 0x31
 800d0f4:	f10b 0501 	add.w	r5, fp, #1
 800d0f8:	f88b 3000 	strb.w	r3, [fp]
 800d0fc:	f10a 0a01 	add.w	sl, sl, #1
 800d100:	e22f      	b.n	800d562 <_dtoa_r+0x8fa>
 800d102:	07f2      	lsls	r2, r6, #31
 800d104:	d505      	bpl.n	800d112 <_dtoa_r+0x4aa>
 800d106:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d10a:	f7f3 fa75 	bl	80005f8 <__aeabi_dmul>
 800d10e:	3501      	adds	r5, #1
 800d110:	2301      	movs	r3, #1
 800d112:	1076      	asrs	r6, r6, #1
 800d114:	3708      	adds	r7, #8
 800d116:	e772      	b.n	800cffe <_dtoa_r+0x396>
 800d118:	2502      	movs	r5, #2
 800d11a:	e774      	b.n	800d006 <_dtoa_r+0x39e>
 800d11c:	f8cd a020 	str.w	sl, [sp, #32]
 800d120:	464f      	mov	r7, r9
 800d122:	e791      	b.n	800d048 <_dtoa_r+0x3e0>
 800d124:	4b4d      	ldr	r3, [pc, #308]	; (800d25c <_dtoa_r+0x5f4>)
 800d126:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d12a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800d12e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d130:	2b00      	cmp	r3, #0
 800d132:	d047      	beq.n	800d1c4 <_dtoa_r+0x55c>
 800d134:	4602      	mov	r2, r0
 800d136:	460b      	mov	r3, r1
 800d138:	2000      	movs	r0, #0
 800d13a:	494e      	ldr	r1, [pc, #312]	; (800d274 <_dtoa_r+0x60c>)
 800d13c:	f7f3 fb86 	bl	800084c <__aeabi_ddiv>
 800d140:	462a      	mov	r2, r5
 800d142:	4633      	mov	r3, r6
 800d144:	f7f3 f8a0 	bl	8000288 <__aeabi_dsub>
 800d148:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d14c:	465d      	mov	r5, fp
 800d14e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d152:	f7f3 fd01 	bl	8000b58 <__aeabi_d2iz>
 800d156:	4606      	mov	r6, r0
 800d158:	f7f3 f9e4 	bl	8000524 <__aeabi_i2d>
 800d15c:	4602      	mov	r2, r0
 800d15e:	460b      	mov	r3, r1
 800d160:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d164:	f7f3 f890 	bl	8000288 <__aeabi_dsub>
 800d168:	3630      	adds	r6, #48	; 0x30
 800d16a:	f805 6b01 	strb.w	r6, [r5], #1
 800d16e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d172:	e9cd 0100 	strd	r0, r1, [sp]
 800d176:	f7f3 fcb1 	bl	8000adc <__aeabi_dcmplt>
 800d17a:	2800      	cmp	r0, #0
 800d17c:	d163      	bne.n	800d246 <_dtoa_r+0x5de>
 800d17e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d182:	2000      	movs	r0, #0
 800d184:	4937      	ldr	r1, [pc, #220]	; (800d264 <_dtoa_r+0x5fc>)
 800d186:	f7f3 f87f 	bl	8000288 <__aeabi_dsub>
 800d18a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d18e:	f7f3 fca5 	bl	8000adc <__aeabi_dcmplt>
 800d192:	2800      	cmp	r0, #0
 800d194:	f040 80b7 	bne.w	800d306 <_dtoa_r+0x69e>
 800d198:	eba5 030b 	sub.w	r3, r5, fp
 800d19c:	429f      	cmp	r7, r3
 800d19e:	f77f af7c 	ble.w	800d09a <_dtoa_r+0x432>
 800d1a2:	2200      	movs	r2, #0
 800d1a4:	4b30      	ldr	r3, [pc, #192]	; (800d268 <_dtoa_r+0x600>)
 800d1a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d1aa:	f7f3 fa25 	bl	80005f8 <__aeabi_dmul>
 800d1ae:	2200      	movs	r2, #0
 800d1b0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d1b4:	4b2c      	ldr	r3, [pc, #176]	; (800d268 <_dtoa_r+0x600>)
 800d1b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d1ba:	f7f3 fa1d 	bl	80005f8 <__aeabi_dmul>
 800d1be:	e9cd 0100 	strd	r0, r1, [sp]
 800d1c2:	e7c4      	b.n	800d14e <_dtoa_r+0x4e6>
 800d1c4:	462a      	mov	r2, r5
 800d1c6:	4633      	mov	r3, r6
 800d1c8:	f7f3 fa16 	bl	80005f8 <__aeabi_dmul>
 800d1cc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d1d0:	eb0b 0507 	add.w	r5, fp, r7
 800d1d4:	465e      	mov	r6, fp
 800d1d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d1da:	f7f3 fcbd 	bl	8000b58 <__aeabi_d2iz>
 800d1de:	4607      	mov	r7, r0
 800d1e0:	f7f3 f9a0 	bl	8000524 <__aeabi_i2d>
 800d1e4:	3730      	adds	r7, #48	; 0x30
 800d1e6:	4602      	mov	r2, r0
 800d1e8:	460b      	mov	r3, r1
 800d1ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d1ee:	f7f3 f84b 	bl	8000288 <__aeabi_dsub>
 800d1f2:	f806 7b01 	strb.w	r7, [r6], #1
 800d1f6:	42ae      	cmp	r6, r5
 800d1f8:	e9cd 0100 	strd	r0, r1, [sp]
 800d1fc:	f04f 0200 	mov.w	r2, #0
 800d200:	d126      	bne.n	800d250 <_dtoa_r+0x5e8>
 800d202:	4b1c      	ldr	r3, [pc, #112]	; (800d274 <_dtoa_r+0x60c>)
 800d204:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d208:	f7f3 f840 	bl	800028c <__adddf3>
 800d20c:	4602      	mov	r2, r0
 800d20e:	460b      	mov	r3, r1
 800d210:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d214:	f7f3 fc80 	bl	8000b18 <__aeabi_dcmpgt>
 800d218:	2800      	cmp	r0, #0
 800d21a:	d174      	bne.n	800d306 <_dtoa_r+0x69e>
 800d21c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d220:	2000      	movs	r0, #0
 800d222:	4914      	ldr	r1, [pc, #80]	; (800d274 <_dtoa_r+0x60c>)
 800d224:	f7f3 f830 	bl	8000288 <__aeabi_dsub>
 800d228:	4602      	mov	r2, r0
 800d22a:	460b      	mov	r3, r1
 800d22c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d230:	f7f3 fc54 	bl	8000adc <__aeabi_dcmplt>
 800d234:	2800      	cmp	r0, #0
 800d236:	f43f af30 	beq.w	800d09a <_dtoa_r+0x432>
 800d23a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d23e:	2b30      	cmp	r3, #48	; 0x30
 800d240:	f105 32ff 	add.w	r2, r5, #4294967295
 800d244:	d002      	beq.n	800d24c <_dtoa_r+0x5e4>
 800d246:	f8dd a020 	ldr.w	sl, [sp, #32]
 800d24a:	e04a      	b.n	800d2e2 <_dtoa_r+0x67a>
 800d24c:	4615      	mov	r5, r2
 800d24e:	e7f4      	b.n	800d23a <_dtoa_r+0x5d2>
 800d250:	4b05      	ldr	r3, [pc, #20]	; (800d268 <_dtoa_r+0x600>)
 800d252:	f7f3 f9d1 	bl	80005f8 <__aeabi_dmul>
 800d256:	e9cd 0100 	strd	r0, r1, [sp]
 800d25a:	e7bc      	b.n	800d1d6 <_dtoa_r+0x56e>
 800d25c:	0800ef10 	.word	0x0800ef10
 800d260:	0800eee8 	.word	0x0800eee8
 800d264:	3ff00000 	.word	0x3ff00000
 800d268:	40240000 	.word	0x40240000
 800d26c:	401c0000 	.word	0x401c0000
 800d270:	40140000 	.word	0x40140000
 800d274:	3fe00000 	.word	0x3fe00000
 800d278:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d27c:	465d      	mov	r5, fp
 800d27e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d282:	4630      	mov	r0, r6
 800d284:	4639      	mov	r1, r7
 800d286:	f7f3 fae1 	bl	800084c <__aeabi_ddiv>
 800d28a:	f7f3 fc65 	bl	8000b58 <__aeabi_d2iz>
 800d28e:	4680      	mov	r8, r0
 800d290:	f7f3 f948 	bl	8000524 <__aeabi_i2d>
 800d294:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d298:	f7f3 f9ae 	bl	80005f8 <__aeabi_dmul>
 800d29c:	4602      	mov	r2, r0
 800d29e:	460b      	mov	r3, r1
 800d2a0:	4630      	mov	r0, r6
 800d2a2:	4639      	mov	r1, r7
 800d2a4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800d2a8:	f7f2 ffee 	bl	8000288 <__aeabi_dsub>
 800d2ac:	f805 6b01 	strb.w	r6, [r5], #1
 800d2b0:	eba5 060b 	sub.w	r6, r5, fp
 800d2b4:	45b1      	cmp	r9, r6
 800d2b6:	4602      	mov	r2, r0
 800d2b8:	460b      	mov	r3, r1
 800d2ba:	d139      	bne.n	800d330 <_dtoa_r+0x6c8>
 800d2bc:	f7f2 ffe6 	bl	800028c <__adddf3>
 800d2c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d2c4:	4606      	mov	r6, r0
 800d2c6:	460f      	mov	r7, r1
 800d2c8:	f7f3 fc26 	bl	8000b18 <__aeabi_dcmpgt>
 800d2cc:	b9c8      	cbnz	r0, 800d302 <_dtoa_r+0x69a>
 800d2ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d2d2:	4630      	mov	r0, r6
 800d2d4:	4639      	mov	r1, r7
 800d2d6:	f7f3 fbf7 	bl	8000ac8 <__aeabi_dcmpeq>
 800d2da:	b110      	cbz	r0, 800d2e2 <_dtoa_r+0x67a>
 800d2dc:	f018 0f01 	tst.w	r8, #1
 800d2e0:	d10f      	bne.n	800d302 <_dtoa_r+0x69a>
 800d2e2:	9904      	ldr	r1, [sp, #16]
 800d2e4:	4620      	mov	r0, r4
 800d2e6:	f000 fdff 	bl	800dee8 <_Bfree>
 800d2ea:	2300      	movs	r3, #0
 800d2ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d2ee:	702b      	strb	r3, [r5, #0]
 800d2f0:	f10a 0301 	add.w	r3, sl, #1
 800d2f4:	6013      	str	r3, [r2, #0]
 800d2f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	f000 8241 	beq.w	800d780 <_dtoa_r+0xb18>
 800d2fe:	601d      	str	r5, [r3, #0]
 800d300:	e23e      	b.n	800d780 <_dtoa_r+0xb18>
 800d302:	f8cd a020 	str.w	sl, [sp, #32]
 800d306:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d30a:	2a39      	cmp	r2, #57	; 0x39
 800d30c:	f105 33ff 	add.w	r3, r5, #4294967295
 800d310:	d108      	bne.n	800d324 <_dtoa_r+0x6bc>
 800d312:	459b      	cmp	fp, r3
 800d314:	d10a      	bne.n	800d32c <_dtoa_r+0x6c4>
 800d316:	9b08      	ldr	r3, [sp, #32]
 800d318:	3301      	adds	r3, #1
 800d31a:	9308      	str	r3, [sp, #32]
 800d31c:	2330      	movs	r3, #48	; 0x30
 800d31e:	f88b 3000 	strb.w	r3, [fp]
 800d322:	465b      	mov	r3, fp
 800d324:	781a      	ldrb	r2, [r3, #0]
 800d326:	3201      	adds	r2, #1
 800d328:	701a      	strb	r2, [r3, #0]
 800d32a:	e78c      	b.n	800d246 <_dtoa_r+0x5de>
 800d32c:	461d      	mov	r5, r3
 800d32e:	e7ea      	b.n	800d306 <_dtoa_r+0x69e>
 800d330:	2200      	movs	r2, #0
 800d332:	4b9b      	ldr	r3, [pc, #620]	; (800d5a0 <_dtoa_r+0x938>)
 800d334:	f7f3 f960 	bl	80005f8 <__aeabi_dmul>
 800d338:	2200      	movs	r2, #0
 800d33a:	2300      	movs	r3, #0
 800d33c:	4606      	mov	r6, r0
 800d33e:	460f      	mov	r7, r1
 800d340:	f7f3 fbc2 	bl	8000ac8 <__aeabi_dcmpeq>
 800d344:	2800      	cmp	r0, #0
 800d346:	d09a      	beq.n	800d27e <_dtoa_r+0x616>
 800d348:	e7cb      	b.n	800d2e2 <_dtoa_r+0x67a>
 800d34a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d34c:	2a00      	cmp	r2, #0
 800d34e:	f000 808b 	beq.w	800d468 <_dtoa_r+0x800>
 800d352:	9a06      	ldr	r2, [sp, #24]
 800d354:	2a01      	cmp	r2, #1
 800d356:	dc6e      	bgt.n	800d436 <_dtoa_r+0x7ce>
 800d358:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d35a:	2a00      	cmp	r2, #0
 800d35c:	d067      	beq.n	800d42e <_dtoa_r+0x7c6>
 800d35e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d362:	9f07      	ldr	r7, [sp, #28]
 800d364:	9d05      	ldr	r5, [sp, #20]
 800d366:	9a05      	ldr	r2, [sp, #20]
 800d368:	2101      	movs	r1, #1
 800d36a:	441a      	add	r2, r3
 800d36c:	4620      	mov	r0, r4
 800d36e:	9205      	str	r2, [sp, #20]
 800d370:	4498      	add	r8, r3
 800d372:	f000 fe97 	bl	800e0a4 <__i2b>
 800d376:	4606      	mov	r6, r0
 800d378:	2d00      	cmp	r5, #0
 800d37a:	dd0c      	ble.n	800d396 <_dtoa_r+0x72e>
 800d37c:	f1b8 0f00 	cmp.w	r8, #0
 800d380:	dd09      	ble.n	800d396 <_dtoa_r+0x72e>
 800d382:	4545      	cmp	r5, r8
 800d384:	9a05      	ldr	r2, [sp, #20]
 800d386:	462b      	mov	r3, r5
 800d388:	bfa8      	it	ge
 800d38a:	4643      	movge	r3, r8
 800d38c:	1ad2      	subs	r2, r2, r3
 800d38e:	9205      	str	r2, [sp, #20]
 800d390:	1aed      	subs	r5, r5, r3
 800d392:	eba8 0803 	sub.w	r8, r8, r3
 800d396:	9b07      	ldr	r3, [sp, #28]
 800d398:	b1eb      	cbz	r3, 800d3d6 <_dtoa_r+0x76e>
 800d39a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d067      	beq.n	800d470 <_dtoa_r+0x808>
 800d3a0:	b18f      	cbz	r7, 800d3c6 <_dtoa_r+0x75e>
 800d3a2:	4631      	mov	r1, r6
 800d3a4:	463a      	mov	r2, r7
 800d3a6:	4620      	mov	r0, r4
 800d3a8:	f000 ff1c 	bl	800e1e4 <__pow5mult>
 800d3ac:	9a04      	ldr	r2, [sp, #16]
 800d3ae:	4601      	mov	r1, r0
 800d3b0:	4606      	mov	r6, r0
 800d3b2:	4620      	mov	r0, r4
 800d3b4:	f000 fe7f 	bl	800e0b6 <__multiply>
 800d3b8:	9904      	ldr	r1, [sp, #16]
 800d3ba:	9008      	str	r0, [sp, #32]
 800d3bc:	4620      	mov	r0, r4
 800d3be:	f000 fd93 	bl	800dee8 <_Bfree>
 800d3c2:	9b08      	ldr	r3, [sp, #32]
 800d3c4:	9304      	str	r3, [sp, #16]
 800d3c6:	9b07      	ldr	r3, [sp, #28]
 800d3c8:	1bda      	subs	r2, r3, r7
 800d3ca:	d004      	beq.n	800d3d6 <_dtoa_r+0x76e>
 800d3cc:	9904      	ldr	r1, [sp, #16]
 800d3ce:	4620      	mov	r0, r4
 800d3d0:	f000 ff08 	bl	800e1e4 <__pow5mult>
 800d3d4:	9004      	str	r0, [sp, #16]
 800d3d6:	2101      	movs	r1, #1
 800d3d8:	4620      	mov	r0, r4
 800d3da:	f000 fe63 	bl	800e0a4 <__i2b>
 800d3de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d3e0:	4607      	mov	r7, r0
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	f000 81d0 	beq.w	800d788 <_dtoa_r+0xb20>
 800d3e8:	461a      	mov	r2, r3
 800d3ea:	4601      	mov	r1, r0
 800d3ec:	4620      	mov	r0, r4
 800d3ee:	f000 fef9 	bl	800e1e4 <__pow5mult>
 800d3f2:	9b06      	ldr	r3, [sp, #24]
 800d3f4:	2b01      	cmp	r3, #1
 800d3f6:	4607      	mov	r7, r0
 800d3f8:	dc40      	bgt.n	800d47c <_dtoa_r+0x814>
 800d3fa:	9b00      	ldr	r3, [sp, #0]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d139      	bne.n	800d474 <_dtoa_r+0x80c>
 800d400:	9b01      	ldr	r3, [sp, #4]
 800d402:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d406:	2b00      	cmp	r3, #0
 800d408:	d136      	bne.n	800d478 <_dtoa_r+0x810>
 800d40a:	9b01      	ldr	r3, [sp, #4]
 800d40c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d410:	0d1b      	lsrs	r3, r3, #20
 800d412:	051b      	lsls	r3, r3, #20
 800d414:	b12b      	cbz	r3, 800d422 <_dtoa_r+0x7ba>
 800d416:	9b05      	ldr	r3, [sp, #20]
 800d418:	3301      	adds	r3, #1
 800d41a:	9305      	str	r3, [sp, #20]
 800d41c:	f108 0801 	add.w	r8, r8, #1
 800d420:	2301      	movs	r3, #1
 800d422:	9307      	str	r3, [sp, #28]
 800d424:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d426:	2b00      	cmp	r3, #0
 800d428:	d12a      	bne.n	800d480 <_dtoa_r+0x818>
 800d42a:	2001      	movs	r0, #1
 800d42c:	e030      	b.n	800d490 <_dtoa_r+0x828>
 800d42e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d430:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d434:	e795      	b.n	800d362 <_dtoa_r+0x6fa>
 800d436:	9b07      	ldr	r3, [sp, #28]
 800d438:	f109 37ff 	add.w	r7, r9, #4294967295
 800d43c:	42bb      	cmp	r3, r7
 800d43e:	bfbf      	itttt	lt
 800d440:	9b07      	ldrlt	r3, [sp, #28]
 800d442:	9707      	strlt	r7, [sp, #28]
 800d444:	1afa      	sublt	r2, r7, r3
 800d446:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800d448:	bfbb      	ittet	lt
 800d44a:	189b      	addlt	r3, r3, r2
 800d44c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800d44e:	1bdf      	subge	r7, r3, r7
 800d450:	2700      	movlt	r7, #0
 800d452:	f1b9 0f00 	cmp.w	r9, #0
 800d456:	bfb5      	itete	lt
 800d458:	9b05      	ldrlt	r3, [sp, #20]
 800d45a:	9d05      	ldrge	r5, [sp, #20]
 800d45c:	eba3 0509 	sublt.w	r5, r3, r9
 800d460:	464b      	movge	r3, r9
 800d462:	bfb8      	it	lt
 800d464:	2300      	movlt	r3, #0
 800d466:	e77e      	b.n	800d366 <_dtoa_r+0x6fe>
 800d468:	9f07      	ldr	r7, [sp, #28]
 800d46a:	9d05      	ldr	r5, [sp, #20]
 800d46c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800d46e:	e783      	b.n	800d378 <_dtoa_r+0x710>
 800d470:	9a07      	ldr	r2, [sp, #28]
 800d472:	e7ab      	b.n	800d3cc <_dtoa_r+0x764>
 800d474:	2300      	movs	r3, #0
 800d476:	e7d4      	b.n	800d422 <_dtoa_r+0x7ba>
 800d478:	9b00      	ldr	r3, [sp, #0]
 800d47a:	e7d2      	b.n	800d422 <_dtoa_r+0x7ba>
 800d47c:	2300      	movs	r3, #0
 800d47e:	9307      	str	r3, [sp, #28]
 800d480:	693b      	ldr	r3, [r7, #16]
 800d482:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800d486:	6918      	ldr	r0, [r3, #16]
 800d488:	f000 fdbe 	bl	800e008 <__hi0bits>
 800d48c:	f1c0 0020 	rsb	r0, r0, #32
 800d490:	4440      	add	r0, r8
 800d492:	f010 001f 	ands.w	r0, r0, #31
 800d496:	d047      	beq.n	800d528 <_dtoa_r+0x8c0>
 800d498:	f1c0 0320 	rsb	r3, r0, #32
 800d49c:	2b04      	cmp	r3, #4
 800d49e:	dd3b      	ble.n	800d518 <_dtoa_r+0x8b0>
 800d4a0:	9b05      	ldr	r3, [sp, #20]
 800d4a2:	f1c0 001c 	rsb	r0, r0, #28
 800d4a6:	4403      	add	r3, r0
 800d4a8:	9305      	str	r3, [sp, #20]
 800d4aa:	4405      	add	r5, r0
 800d4ac:	4480      	add	r8, r0
 800d4ae:	9b05      	ldr	r3, [sp, #20]
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	dd05      	ble.n	800d4c0 <_dtoa_r+0x858>
 800d4b4:	461a      	mov	r2, r3
 800d4b6:	9904      	ldr	r1, [sp, #16]
 800d4b8:	4620      	mov	r0, r4
 800d4ba:	f000 fee1 	bl	800e280 <__lshift>
 800d4be:	9004      	str	r0, [sp, #16]
 800d4c0:	f1b8 0f00 	cmp.w	r8, #0
 800d4c4:	dd05      	ble.n	800d4d2 <_dtoa_r+0x86a>
 800d4c6:	4639      	mov	r1, r7
 800d4c8:	4642      	mov	r2, r8
 800d4ca:	4620      	mov	r0, r4
 800d4cc:	f000 fed8 	bl	800e280 <__lshift>
 800d4d0:	4607      	mov	r7, r0
 800d4d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d4d4:	b353      	cbz	r3, 800d52c <_dtoa_r+0x8c4>
 800d4d6:	4639      	mov	r1, r7
 800d4d8:	9804      	ldr	r0, [sp, #16]
 800d4da:	f000 ff25 	bl	800e328 <__mcmp>
 800d4de:	2800      	cmp	r0, #0
 800d4e0:	da24      	bge.n	800d52c <_dtoa_r+0x8c4>
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	220a      	movs	r2, #10
 800d4e6:	9904      	ldr	r1, [sp, #16]
 800d4e8:	4620      	mov	r0, r4
 800d4ea:	f000 fd14 	bl	800df16 <__multadd>
 800d4ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d4f0:	9004      	str	r0, [sp, #16]
 800d4f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	f000 814d 	beq.w	800d796 <_dtoa_r+0xb2e>
 800d4fc:	2300      	movs	r3, #0
 800d4fe:	4631      	mov	r1, r6
 800d500:	220a      	movs	r2, #10
 800d502:	4620      	mov	r0, r4
 800d504:	f000 fd07 	bl	800df16 <__multadd>
 800d508:	9b02      	ldr	r3, [sp, #8]
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	4606      	mov	r6, r0
 800d50e:	dc4f      	bgt.n	800d5b0 <_dtoa_r+0x948>
 800d510:	9b06      	ldr	r3, [sp, #24]
 800d512:	2b02      	cmp	r3, #2
 800d514:	dd4c      	ble.n	800d5b0 <_dtoa_r+0x948>
 800d516:	e011      	b.n	800d53c <_dtoa_r+0x8d4>
 800d518:	d0c9      	beq.n	800d4ae <_dtoa_r+0x846>
 800d51a:	9a05      	ldr	r2, [sp, #20]
 800d51c:	331c      	adds	r3, #28
 800d51e:	441a      	add	r2, r3
 800d520:	9205      	str	r2, [sp, #20]
 800d522:	441d      	add	r5, r3
 800d524:	4498      	add	r8, r3
 800d526:	e7c2      	b.n	800d4ae <_dtoa_r+0x846>
 800d528:	4603      	mov	r3, r0
 800d52a:	e7f6      	b.n	800d51a <_dtoa_r+0x8b2>
 800d52c:	f1b9 0f00 	cmp.w	r9, #0
 800d530:	dc38      	bgt.n	800d5a4 <_dtoa_r+0x93c>
 800d532:	9b06      	ldr	r3, [sp, #24]
 800d534:	2b02      	cmp	r3, #2
 800d536:	dd35      	ble.n	800d5a4 <_dtoa_r+0x93c>
 800d538:	f8cd 9008 	str.w	r9, [sp, #8]
 800d53c:	9b02      	ldr	r3, [sp, #8]
 800d53e:	b963      	cbnz	r3, 800d55a <_dtoa_r+0x8f2>
 800d540:	4639      	mov	r1, r7
 800d542:	2205      	movs	r2, #5
 800d544:	4620      	mov	r0, r4
 800d546:	f000 fce6 	bl	800df16 <__multadd>
 800d54a:	4601      	mov	r1, r0
 800d54c:	4607      	mov	r7, r0
 800d54e:	9804      	ldr	r0, [sp, #16]
 800d550:	f000 feea 	bl	800e328 <__mcmp>
 800d554:	2800      	cmp	r0, #0
 800d556:	f73f adcc 	bgt.w	800d0f2 <_dtoa_r+0x48a>
 800d55a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d55c:	465d      	mov	r5, fp
 800d55e:	ea6f 0a03 	mvn.w	sl, r3
 800d562:	f04f 0900 	mov.w	r9, #0
 800d566:	4639      	mov	r1, r7
 800d568:	4620      	mov	r0, r4
 800d56a:	f000 fcbd 	bl	800dee8 <_Bfree>
 800d56e:	2e00      	cmp	r6, #0
 800d570:	f43f aeb7 	beq.w	800d2e2 <_dtoa_r+0x67a>
 800d574:	f1b9 0f00 	cmp.w	r9, #0
 800d578:	d005      	beq.n	800d586 <_dtoa_r+0x91e>
 800d57a:	45b1      	cmp	r9, r6
 800d57c:	d003      	beq.n	800d586 <_dtoa_r+0x91e>
 800d57e:	4649      	mov	r1, r9
 800d580:	4620      	mov	r0, r4
 800d582:	f000 fcb1 	bl	800dee8 <_Bfree>
 800d586:	4631      	mov	r1, r6
 800d588:	4620      	mov	r0, r4
 800d58a:	f000 fcad 	bl	800dee8 <_Bfree>
 800d58e:	e6a8      	b.n	800d2e2 <_dtoa_r+0x67a>
 800d590:	2700      	movs	r7, #0
 800d592:	463e      	mov	r6, r7
 800d594:	e7e1      	b.n	800d55a <_dtoa_r+0x8f2>
 800d596:	f8dd a020 	ldr.w	sl, [sp, #32]
 800d59a:	463e      	mov	r6, r7
 800d59c:	e5a9      	b.n	800d0f2 <_dtoa_r+0x48a>
 800d59e:	bf00      	nop
 800d5a0:	40240000 	.word	0x40240000
 800d5a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d5a6:	f8cd 9008 	str.w	r9, [sp, #8]
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	f000 80fa 	beq.w	800d7a4 <_dtoa_r+0xb3c>
 800d5b0:	2d00      	cmp	r5, #0
 800d5b2:	dd05      	ble.n	800d5c0 <_dtoa_r+0x958>
 800d5b4:	4631      	mov	r1, r6
 800d5b6:	462a      	mov	r2, r5
 800d5b8:	4620      	mov	r0, r4
 800d5ba:	f000 fe61 	bl	800e280 <__lshift>
 800d5be:	4606      	mov	r6, r0
 800d5c0:	9b07      	ldr	r3, [sp, #28]
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d04c      	beq.n	800d660 <_dtoa_r+0x9f8>
 800d5c6:	6871      	ldr	r1, [r6, #4]
 800d5c8:	4620      	mov	r0, r4
 800d5ca:	f000 fc59 	bl	800de80 <_Balloc>
 800d5ce:	6932      	ldr	r2, [r6, #16]
 800d5d0:	3202      	adds	r2, #2
 800d5d2:	4605      	mov	r5, r0
 800d5d4:	0092      	lsls	r2, r2, #2
 800d5d6:	f106 010c 	add.w	r1, r6, #12
 800d5da:	300c      	adds	r0, #12
 800d5dc:	f7fd fd7c 	bl	800b0d8 <memcpy>
 800d5e0:	2201      	movs	r2, #1
 800d5e2:	4629      	mov	r1, r5
 800d5e4:	4620      	mov	r0, r4
 800d5e6:	f000 fe4b 	bl	800e280 <__lshift>
 800d5ea:	9b00      	ldr	r3, [sp, #0]
 800d5ec:	f8cd b014 	str.w	fp, [sp, #20]
 800d5f0:	f003 0301 	and.w	r3, r3, #1
 800d5f4:	46b1      	mov	r9, r6
 800d5f6:	9307      	str	r3, [sp, #28]
 800d5f8:	4606      	mov	r6, r0
 800d5fa:	4639      	mov	r1, r7
 800d5fc:	9804      	ldr	r0, [sp, #16]
 800d5fe:	f7ff faa7 	bl	800cb50 <quorem>
 800d602:	4649      	mov	r1, r9
 800d604:	4605      	mov	r5, r0
 800d606:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800d60a:	9804      	ldr	r0, [sp, #16]
 800d60c:	f000 fe8c 	bl	800e328 <__mcmp>
 800d610:	4632      	mov	r2, r6
 800d612:	9000      	str	r0, [sp, #0]
 800d614:	4639      	mov	r1, r7
 800d616:	4620      	mov	r0, r4
 800d618:	f000 fea0 	bl	800e35c <__mdiff>
 800d61c:	68c3      	ldr	r3, [r0, #12]
 800d61e:	4602      	mov	r2, r0
 800d620:	bb03      	cbnz	r3, 800d664 <_dtoa_r+0x9fc>
 800d622:	4601      	mov	r1, r0
 800d624:	9008      	str	r0, [sp, #32]
 800d626:	9804      	ldr	r0, [sp, #16]
 800d628:	f000 fe7e 	bl	800e328 <__mcmp>
 800d62c:	9a08      	ldr	r2, [sp, #32]
 800d62e:	4603      	mov	r3, r0
 800d630:	4611      	mov	r1, r2
 800d632:	4620      	mov	r0, r4
 800d634:	9308      	str	r3, [sp, #32]
 800d636:	f000 fc57 	bl	800dee8 <_Bfree>
 800d63a:	9b08      	ldr	r3, [sp, #32]
 800d63c:	b9a3      	cbnz	r3, 800d668 <_dtoa_r+0xa00>
 800d63e:	9a06      	ldr	r2, [sp, #24]
 800d640:	b992      	cbnz	r2, 800d668 <_dtoa_r+0xa00>
 800d642:	9a07      	ldr	r2, [sp, #28]
 800d644:	b982      	cbnz	r2, 800d668 <_dtoa_r+0xa00>
 800d646:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d64a:	d029      	beq.n	800d6a0 <_dtoa_r+0xa38>
 800d64c:	9b00      	ldr	r3, [sp, #0]
 800d64e:	2b00      	cmp	r3, #0
 800d650:	dd01      	ble.n	800d656 <_dtoa_r+0x9ee>
 800d652:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800d656:	9b05      	ldr	r3, [sp, #20]
 800d658:	1c5d      	adds	r5, r3, #1
 800d65a:	f883 8000 	strb.w	r8, [r3]
 800d65e:	e782      	b.n	800d566 <_dtoa_r+0x8fe>
 800d660:	4630      	mov	r0, r6
 800d662:	e7c2      	b.n	800d5ea <_dtoa_r+0x982>
 800d664:	2301      	movs	r3, #1
 800d666:	e7e3      	b.n	800d630 <_dtoa_r+0x9c8>
 800d668:	9a00      	ldr	r2, [sp, #0]
 800d66a:	2a00      	cmp	r2, #0
 800d66c:	db04      	blt.n	800d678 <_dtoa_r+0xa10>
 800d66e:	d125      	bne.n	800d6bc <_dtoa_r+0xa54>
 800d670:	9a06      	ldr	r2, [sp, #24]
 800d672:	bb1a      	cbnz	r2, 800d6bc <_dtoa_r+0xa54>
 800d674:	9a07      	ldr	r2, [sp, #28]
 800d676:	bb0a      	cbnz	r2, 800d6bc <_dtoa_r+0xa54>
 800d678:	2b00      	cmp	r3, #0
 800d67a:	ddec      	ble.n	800d656 <_dtoa_r+0x9ee>
 800d67c:	2201      	movs	r2, #1
 800d67e:	9904      	ldr	r1, [sp, #16]
 800d680:	4620      	mov	r0, r4
 800d682:	f000 fdfd 	bl	800e280 <__lshift>
 800d686:	4639      	mov	r1, r7
 800d688:	9004      	str	r0, [sp, #16]
 800d68a:	f000 fe4d 	bl	800e328 <__mcmp>
 800d68e:	2800      	cmp	r0, #0
 800d690:	dc03      	bgt.n	800d69a <_dtoa_r+0xa32>
 800d692:	d1e0      	bne.n	800d656 <_dtoa_r+0x9ee>
 800d694:	f018 0f01 	tst.w	r8, #1
 800d698:	d0dd      	beq.n	800d656 <_dtoa_r+0x9ee>
 800d69a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d69e:	d1d8      	bne.n	800d652 <_dtoa_r+0x9ea>
 800d6a0:	9b05      	ldr	r3, [sp, #20]
 800d6a2:	9a05      	ldr	r2, [sp, #20]
 800d6a4:	1c5d      	adds	r5, r3, #1
 800d6a6:	2339      	movs	r3, #57	; 0x39
 800d6a8:	7013      	strb	r3, [r2, #0]
 800d6aa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d6ae:	2b39      	cmp	r3, #57	; 0x39
 800d6b0:	f105 32ff 	add.w	r2, r5, #4294967295
 800d6b4:	d04f      	beq.n	800d756 <_dtoa_r+0xaee>
 800d6b6:	3301      	adds	r3, #1
 800d6b8:	7013      	strb	r3, [r2, #0]
 800d6ba:	e754      	b.n	800d566 <_dtoa_r+0x8fe>
 800d6bc:	9a05      	ldr	r2, [sp, #20]
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	f102 0501 	add.w	r5, r2, #1
 800d6c4:	dd06      	ble.n	800d6d4 <_dtoa_r+0xa6c>
 800d6c6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d6ca:	d0e9      	beq.n	800d6a0 <_dtoa_r+0xa38>
 800d6cc:	f108 0801 	add.w	r8, r8, #1
 800d6d0:	9b05      	ldr	r3, [sp, #20]
 800d6d2:	e7c2      	b.n	800d65a <_dtoa_r+0x9f2>
 800d6d4:	9a02      	ldr	r2, [sp, #8]
 800d6d6:	f805 8c01 	strb.w	r8, [r5, #-1]
 800d6da:	eba5 030b 	sub.w	r3, r5, fp
 800d6de:	4293      	cmp	r3, r2
 800d6e0:	d021      	beq.n	800d726 <_dtoa_r+0xabe>
 800d6e2:	2300      	movs	r3, #0
 800d6e4:	220a      	movs	r2, #10
 800d6e6:	9904      	ldr	r1, [sp, #16]
 800d6e8:	4620      	mov	r0, r4
 800d6ea:	f000 fc14 	bl	800df16 <__multadd>
 800d6ee:	45b1      	cmp	r9, r6
 800d6f0:	9004      	str	r0, [sp, #16]
 800d6f2:	f04f 0300 	mov.w	r3, #0
 800d6f6:	f04f 020a 	mov.w	r2, #10
 800d6fa:	4649      	mov	r1, r9
 800d6fc:	4620      	mov	r0, r4
 800d6fe:	d105      	bne.n	800d70c <_dtoa_r+0xaa4>
 800d700:	f000 fc09 	bl	800df16 <__multadd>
 800d704:	4681      	mov	r9, r0
 800d706:	4606      	mov	r6, r0
 800d708:	9505      	str	r5, [sp, #20]
 800d70a:	e776      	b.n	800d5fa <_dtoa_r+0x992>
 800d70c:	f000 fc03 	bl	800df16 <__multadd>
 800d710:	4631      	mov	r1, r6
 800d712:	4681      	mov	r9, r0
 800d714:	2300      	movs	r3, #0
 800d716:	220a      	movs	r2, #10
 800d718:	4620      	mov	r0, r4
 800d71a:	f000 fbfc 	bl	800df16 <__multadd>
 800d71e:	4606      	mov	r6, r0
 800d720:	e7f2      	b.n	800d708 <_dtoa_r+0xaa0>
 800d722:	f04f 0900 	mov.w	r9, #0
 800d726:	2201      	movs	r2, #1
 800d728:	9904      	ldr	r1, [sp, #16]
 800d72a:	4620      	mov	r0, r4
 800d72c:	f000 fda8 	bl	800e280 <__lshift>
 800d730:	4639      	mov	r1, r7
 800d732:	9004      	str	r0, [sp, #16]
 800d734:	f000 fdf8 	bl	800e328 <__mcmp>
 800d738:	2800      	cmp	r0, #0
 800d73a:	dcb6      	bgt.n	800d6aa <_dtoa_r+0xa42>
 800d73c:	d102      	bne.n	800d744 <_dtoa_r+0xadc>
 800d73e:	f018 0f01 	tst.w	r8, #1
 800d742:	d1b2      	bne.n	800d6aa <_dtoa_r+0xa42>
 800d744:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d748:	2b30      	cmp	r3, #48	; 0x30
 800d74a:	f105 32ff 	add.w	r2, r5, #4294967295
 800d74e:	f47f af0a 	bne.w	800d566 <_dtoa_r+0x8fe>
 800d752:	4615      	mov	r5, r2
 800d754:	e7f6      	b.n	800d744 <_dtoa_r+0xadc>
 800d756:	4593      	cmp	fp, r2
 800d758:	d105      	bne.n	800d766 <_dtoa_r+0xafe>
 800d75a:	2331      	movs	r3, #49	; 0x31
 800d75c:	f10a 0a01 	add.w	sl, sl, #1
 800d760:	f88b 3000 	strb.w	r3, [fp]
 800d764:	e6ff      	b.n	800d566 <_dtoa_r+0x8fe>
 800d766:	4615      	mov	r5, r2
 800d768:	e79f      	b.n	800d6aa <_dtoa_r+0xa42>
 800d76a:	f8df b064 	ldr.w	fp, [pc, #100]	; 800d7d0 <_dtoa_r+0xb68>
 800d76e:	e007      	b.n	800d780 <_dtoa_r+0xb18>
 800d770:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d772:	f8df b060 	ldr.w	fp, [pc, #96]	; 800d7d4 <_dtoa_r+0xb6c>
 800d776:	b11b      	cbz	r3, 800d780 <_dtoa_r+0xb18>
 800d778:	f10b 0308 	add.w	r3, fp, #8
 800d77c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d77e:	6013      	str	r3, [r2, #0]
 800d780:	4658      	mov	r0, fp
 800d782:	b017      	add	sp, #92	; 0x5c
 800d784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d788:	9b06      	ldr	r3, [sp, #24]
 800d78a:	2b01      	cmp	r3, #1
 800d78c:	f77f ae35 	ble.w	800d3fa <_dtoa_r+0x792>
 800d790:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d792:	9307      	str	r3, [sp, #28]
 800d794:	e649      	b.n	800d42a <_dtoa_r+0x7c2>
 800d796:	9b02      	ldr	r3, [sp, #8]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	dc03      	bgt.n	800d7a4 <_dtoa_r+0xb3c>
 800d79c:	9b06      	ldr	r3, [sp, #24]
 800d79e:	2b02      	cmp	r3, #2
 800d7a0:	f73f aecc 	bgt.w	800d53c <_dtoa_r+0x8d4>
 800d7a4:	465d      	mov	r5, fp
 800d7a6:	4639      	mov	r1, r7
 800d7a8:	9804      	ldr	r0, [sp, #16]
 800d7aa:	f7ff f9d1 	bl	800cb50 <quorem>
 800d7ae:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800d7b2:	f805 8b01 	strb.w	r8, [r5], #1
 800d7b6:	9a02      	ldr	r2, [sp, #8]
 800d7b8:	eba5 030b 	sub.w	r3, r5, fp
 800d7bc:	429a      	cmp	r2, r3
 800d7be:	ddb0      	ble.n	800d722 <_dtoa_r+0xaba>
 800d7c0:	2300      	movs	r3, #0
 800d7c2:	220a      	movs	r2, #10
 800d7c4:	9904      	ldr	r1, [sp, #16]
 800d7c6:	4620      	mov	r0, r4
 800d7c8:	f000 fba5 	bl	800df16 <__multadd>
 800d7cc:	9004      	str	r0, [sp, #16]
 800d7ce:	e7ea      	b.n	800d7a6 <_dtoa_r+0xb3e>
 800d7d0:	0800edec 	.word	0x0800edec
 800d7d4:	0800ee68 	.word	0x0800ee68

0800d7d8 <rshift>:
 800d7d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d7da:	6906      	ldr	r6, [r0, #16]
 800d7dc:	114b      	asrs	r3, r1, #5
 800d7de:	429e      	cmp	r6, r3
 800d7e0:	f100 0414 	add.w	r4, r0, #20
 800d7e4:	dd30      	ble.n	800d848 <rshift+0x70>
 800d7e6:	f011 011f 	ands.w	r1, r1, #31
 800d7ea:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800d7ee:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800d7f2:	d108      	bne.n	800d806 <rshift+0x2e>
 800d7f4:	4621      	mov	r1, r4
 800d7f6:	42b2      	cmp	r2, r6
 800d7f8:	460b      	mov	r3, r1
 800d7fa:	d211      	bcs.n	800d820 <rshift+0x48>
 800d7fc:	f852 3b04 	ldr.w	r3, [r2], #4
 800d800:	f841 3b04 	str.w	r3, [r1], #4
 800d804:	e7f7      	b.n	800d7f6 <rshift+0x1e>
 800d806:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800d80a:	f1c1 0c20 	rsb	ip, r1, #32
 800d80e:	40cd      	lsrs	r5, r1
 800d810:	3204      	adds	r2, #4
 800d812:	4623      	mov	r3, r4
 800d814:	42b2      	cmp	r2, r6
 800d816:	4617      	mov	r7, r2
 800d818:	d30c      	bcc.n	800d834 <rshift+0x5c>
 800d81a:	601d      	str	r5, [r3, #0]
 800d81c:	b105      	cbz	r5, 800d820 <rshift+0x48>
 800d81e:	3304      	adds	r3, #4
 800d820:	1b1a      	subs	r2, r3, r4
 800d822:	42a3      	cmp	r3, r4
 800d824:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d828:	bf08      	it	eq
 800d82a:	2300      	moveq	r3, #0
 800d82c:	6102      	str	r2, [r0, #16]
 800d82e:	bf08      	it	eq
 800d830:	6143      	streq	r3, [r0, #20]
 800d832:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d834:	683f      	ldr	r7, [r7, #0]
 800d836:	fa07 f70c 	lsl.w	r7, r7, ip
 800d83a:	433d      	orrs	r5, r7
 800d83c:	f843 5b04 	str.w	r5, [r3], #4
 800d840:	f852 5b04 	ldr.w	r5, [r2], #4
 800d844:	40cd      	lsrs	r5, r1
 800d846:	e7e5      	b.n	800d814 <rshift+0x3c>
 800d848:	4623      	mov	r3, r4
 800d84a:	e7e9      	b.n	800d820 <rshift+0x48>

0800d84c <__hexdig_fun>:
 800d84c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d850:	2b09      	cmp	r3, #9
 800d852:	d802      	bhi.n	800d85a <__hexdig_fun+0xe>
 800d854:	3820      	subs	r0, #32
 800d856:	b2c0      	uxtb	r0, r0
 800d858:	4770      	bx	lr
 800d85a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d85e:	2b05      	cmp	r3, #5
 800d860:	d801      	bhi.n	800d866 <__hexdig_fun+0x1a>
 800d862:	3847      	subs	r0, #71	; 0x47
 800d864:	e7f7      	b.n	800d856 <__hexdig_fun+0xa>
 800d866:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d86a:	2b05      	cmp	r3, #5
 800d86c:	d801      	bhi.n	800d872 <__hexdig_fun+0x26>
 800d86e:	3827      	subs	r0, #39	; 0x27
 800d870:	e7f1      	b.n	800d856 <__hexdig_fun+0xa>
 800d872:	2000      	movs	r0, #0
 800d874:	4770      	bx	lr

0800d876 <__gethex>:
 800d876:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d87a:	b08b      	sub	sp, #44	; 0x2c
 800d87c:	468a      	mov	sl, r1
 800d87e:	9002      	str	r0, [sp, #8]
 800d880:	9816      	ldr	r0, [sp, #88]	; 0x58
 800d882:	9306      	str	r3, [sp, #24]
 800d884:	4690      	mov	r8, r2
 800d886:	f000 fad0 	bl	800de2a <__localeconv_l>
 800d88a:	6803      	ldr	r3, [r0, #0]
 800d88c:	9303      	str	r3, [sp, #12]
 800d88e:	4618      	mov	r0, r3
 800d890:	f7f2 fc9e 	bl	80001d0 <strlen>
 800d894:	9b03      	ldr	r3, [sp, #12]
 800d896:	9001      	str	r0, [sp, #4]
 800d898:	4403      	add	r3, r0
 800d89a:	f04f 0b00 	mov.w	fp, #0
 800d89e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800d8a2:	9307      	str	r3, [sp, #28]
 800d8a4:	f8da 3000 	ldr.w	r3, [sl]
 800d8a8:	3302      	adds	r3, #2
 800d8aa:	461f      	mov	r7, r3
 800d8ac:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d8b0:	2830      	cmp	r0, #48	; 0x30
 800d8b2:	d06c      	beq.n	800d98e <__gethex+0x118>
 800d8b4:	f7ff ffca 	bl	800d84c <__hexdig_fun>
 800d8b8:	4604      	mov	r4, r0
 800d8ba:	2800      	cmp	r0, #0
 800d8bc:	d16a      	bne.n	800d994 <__gethex+0x11e>
 800d8be:	9a01      	ldr	r2, [sp, #4]
 800d8c0:	9903      	ldr	r1, [sp, #12]
 800d8c2:	4638      	mov	r0, r7
 800d8c4:	f001 f8f4 	bl	800eab0 <strncmp>
 800d8c8:	2800      	cmp	r0, #0
 800d8ca:	d166      	bne.n	800d99a <__gethex+0x124>
 800d8cc:	9b01      	ldr	r3, [sp, #4]
 800d8ce:	5cf8      	ldrb	r0, [r7, r3]
 800d8d0:	18fe      	adds	r6, r7, r3
 800d8d2:	f7ff ffbb 	bl	800d84c <__hexdig_fun>
 800d8d6:	2800      	cmp	r0, #0
 800d8d8:	d062      	beq.n	800d9a0 <__gethex+0x12a>
 800d8da:	4633      	mov	r3, r6
 800d8dc:	7818      	ldrb	r0, [r3, #0]
 800d8de:	2830      	cmp	r0, #48	; 0x30
 800d8e0:	461f      	mov	r7, r3
 800d8e2:	f103 0301 	add.w	r3, r3, #1
 800d8e6:	d0f9      	beq.n	800d8dc <__gethex+0x66>
 800d8e8:	f7ff ffb0 	bl	800d84c <__hexdig_fun>
 800d8ec:	fab0 f580 	clz	r5, r0
 800d8f0:	096d      	lsrs	r5, r5, #5
 800d8f2:	4634      	mov	r4, r6
 800d8f4:	f04f 0b01 	mov.w	fp, #1
 800d8f8:	463a      	mov	r2, r7
 800d8fa:	4616      	mov	r6, r2
 800d8fc:	3201      	adds	r2, #1
 800d8fe:	7830      	ldrb	r0, [r6, #0]
 800d900:	f7ff ffa4 	bl	800d84c <__hexdig_fun>
 800d904:	2800      	cmp	r0, #0
 800d906:	d1f8      	bne.n	800d8fa <__gethex+0x84>
 800d908:	9a01      	ldr	r2, [sp, #4]
 800d90a:	9903      	ldr	r1, [sp, #12]
 800d90c:	4630      	mov	r0, r6
 800d90e:	f001 f8cf 	bl	800eab0 <strncmp>
 800d912:	b950      	cbnz	r0, 800d92a <__gethex+0xb4>
 800d914:	b954      	cbnz	r4, 800d92c <__gethex+0xb6>
 800d916:	9b01      	ldr	r3, [sp, #4]
 800d918:	18f4      	adds	r4, r6, r3
 800d91a:	4622      	mov	r2, r4
 800d91c:	4616      	mov	r6, r2
 800d91e:	3201      	adds	r2, #1
 800d920:	7830      	ldrb	r0, [r6, #0]
 800d922:	f7ff ff93 	bl	800d84c <__hexdig_fun>
 800d926:	2800      	cmp	r0, #0
 800d928:	d1f8      	bne.n	800d91c <__gethex+0xa6>
 800d92a:	b10c      	cbz	r4, 800d930 <__gethex+0xba>
 800d92c:	1ba4      	subs	r4, r4, r6
 800d92e:	00a4      	lsls	r4, r4, #2
 800d930:	7833      	ldrb	r3, [r6, #0]
 800d932:	2b50      	cmp	r3, #80	; 0x50
 800d934:	d001      	beq.n	800d93a <__gethex+0xc4>
 800d936:	2b70      	cmp	r3, #112	; 0x70
 800d938:	d140      	bne.n	800d9bc <__gethex+0x146>
 800d93a:	7873      	ldrb	r3, [r6, #1]
 800d93c:	2b2b      	cmp	r3, #43	; 0x2b
 800d93e:	d031      	beq.n	800d9a4 <__gethex+0x12e>
 800d940:	2b2d      	cmp	r3, #45	; 0x2d
 800d942:	d033      	beq.n	800d9ac <__gethex+0x136>
 800d944:	1c71      	adds	r1, r6, #1
 800d946:	f04f 0900 	mov.w	r9, #0
 800d94a:	7808      	ldrb	r0, [r1, #0]
 800d94c:	f7ff ff7e 	bl	800d84c <__hexdig_fun>
 800d950:	1e43      	subs	r3, r0, #1
 800d952:	b2db      	uxtb	r3, r3
 800d954:	2b18      	cmp	r3, #24
 800d956:	d831      	bhi.n	800d9bc <__gethex+0x146>
 800d958:	f1a0 0210 	sub.w	r2, r0, #16
 800d95c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d960:	f7ff ff74 	bl	800d84c <__hexdig_fun>
 800d964:	1e43      	subs	r3, r0, #1
 800d966:	b2db      	uxtb	r3, r3
 800d968:	2b18      	cmp	r3, #24
 800d96a:	d922      	bls.n	800d9b2 <__gethex+0x13c>
 800d96c:	f1b9 0f00 	cmp.w	r9, #0
 800d970:	d000      	beq.n	800d974 <__gethex+0xfe>
 800d972:	4252      	negs	r2, r2
 800d974:	4414      	add	r4, r2
 800d976:	f8ca 1000 	str.w	r1, [sl]
 800d97a:	b30d      	cbz	r5, 800d9c0 <__gethex+0x14a>
 800d97c:	f1bb 0f00 	cmp.w	fp, #0
 800d980:	bf0c      	ite	eq
 800d982:	2706      	moveq	r7, #6
 800d984:	2700      	movne	r7, #0
 800d986:	4638      	mov	r0, r7
 800d988:	b00b      	add	sp, #44	; 0x2c
 800d98a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d98e:	f10b 0b01 	add.w	fp, fp, #1
 800d992:	e78a      	b.n	800d8aa <__gethex+0x34>
 800d994:	2500      	movs	r5, #0
 800d996:	462c      	mov	r4, r5
 800d998:	e7ae      	b.n	800d8f8 <__gethex+0x82>
 800d99a:	463e      	mov	r6, r7
 800d99c:	2501      	movs	r5, #1
 800d99e:	e7c7      	b.n	800d930 <__gethex+0xba>
 800d9a0:	4604      	mov	r4, r0
 800d9a2:	e7fb      	b.n	800d99c <__gethex+0x126>
 800d9a4:	f04f 0900 	mov.w	r9, #0
 800d9a8:	1cb1      	adds	r1, r6, #2
 800d9aa:	e7ce      	b.n	800d94a <__gethex+0xd4>
 800d9ac:	f04f 0901 	mov.w	r9, #1
 800d9b0:	e7fa      	b.n	800d9a8 <__gethex+0x132>
 800d9b2:	230a      	movs	r3, #10
 800d9b4:	fb03 0202 	mla	r2, r3, r2, r0
 800d9b8:	3a10      	subs	r2, #16
 800d9ba:	e7cf      	b.n	800d95c <__gethex+0xe6>
 800d9bc:	4631      	mov	r1, r6
 800d9be:	e7da      	b.n	800d976 <__gethex+0x100>
 800d9c0:	1bf3      	subs	r3, r6, r7
 800d9c2:	3b01      	subs	r3, #1
 800d9c4:	4629      	mov	r1, r5
 800d9c6:	2b07      	cmp	r3, #7
 800d9c8:	dc49      	bgt.n	800da5e <__gethex+0x1e8>
 800d9ca:	9802      	ldr	r0, [sp, #8]
 800d9cc:	f000 fa58 	bl	800de80 <_Balloc>
 800d9d0:	9b01      	ldr	r3, [sp, #4]
 800d9d2:	f100 0914 	add.w	r9, r0, #20
 800d9d6:	f04f 0b00 	mov.w	fp, #0
 800d9da:	f1c3 0301 	rsb	r3, r3, #1
 800d9de:	4605      	mov	r5, r0
 800d9e0:	f8cd 9010 	str.w	r9, [sp, #16]
 800d9e4:	46da      	mov	sl, fp
 800d9e6:	9308      	str	r3, [sp, #32]
 800d9e8:	42b7      	cmp	r7, r6
 800d9ea:	d33b      	bcc.n	800da64 <__gethex+0x1ee>
 800d9ec:	9804      	ldr	r0, [sp, #16]
 800d9ee:	f840 ab04 	str.w	sl, [r0], #4
 800d9f2:	eba0 0009 	sub.w	r0, r0, r9
 800d9f6:	1080      	asrs	r0, r0, #2
 800d9f8:	6128      	str	r0, [r5, #16]
 800d9fa:	0147      	lsls	r7, r0, #5
 800d9fc:	4650      	mov	r0, sl
 800d9fe:	f000 fb03 	bl	800e008 <__hi0bits>
 800da02:	f8d8 6000 	ldr.w	r6, [r8]
 800da06:	1a3f      	subs	r7, r7, r0
 800da08:	42b7      	cmp	r7, r6
 800da0a:	dd64      	ble.n	800dad6 <__gethex+0x260>
 800da0c:	1bbf      	subs	r7, r7, r6
 800da0e:	4639      	mov	r1, r7
 800da10:	4628      	mov	r0, r5
 800da12:	f000 fe13 	bl	800e63c <__any_on>
 800da16:	4682      	mov	sl, r0
 800da18:	b178      	cbz	r0, 800da3a <__gethex+0x1c4>
 800da1a:	1e7b      	subs	r3, r7, #1
 800da1c:	1159      	asrs	r1, r3, #5
 800da1e:	f003 021f 	and.w	r2, r3, #31
 800da22:	f04f 0a01 	mov.w	sl, #1
 800da26:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800da2a:	fa0a f202 	lsl.w	r2, sl, r2
 800da2e:	420a      	tst	r2, r1
 800da30:	d003      	beq.n	800da3a <__gethex+0x1c4>
 800da32:	4553      	cmp	r3, sl
 800da34:	dc46      	bgt.n	800dac4 <__gethex+0x24e>
 800da36:	f04f 0a02 	mov.w	sl, #2
 800da3a:	4639      	mov	r1, r7
 800da3c:	4628      	mov	r0, r5
 800da3e:	f7ff fecb 	bl	800d7d8 <rshift>
 800da42:	443c      	add	r4, r7
 800da44:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800da48:	42a3      	cmp	r3, r4
 800da4a:	da52      	bge.n	800daf2 <__gethex+0x27c>
 800da4c:	4629      	mov	r1, r5
 800da4e:	9802      	ldr	r0, [sp, #8]
 800da50:	f000 fa4a 	bl	800dee8 <_Bfree>
 800da54:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800da56:	2300      	movs	r3, #0
 800da58:	6013      	str	r3, [r2, #0]
 800da5a:	27a3      	movs	r7, #163	; 0xa3
 800da5c:	e793      	b.n	800d986 <__gethex+0x110>
 800da5e:	3101      	adds	r1, #1
 800da60:	105b      	asrs	r3, r3, #1
 800da62:	e7b0      	b.n	800d9c6 <__gethex+0x150>
 800da64:	1e73      	subs	r3, r6, #1
 800da66:	9305      	str	r3, [sp, #20]
 800da68:	9a07      	ldr	r2, [sp, #28]
 800da6a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800da6e:	4293      	cmp	r3, r2
 800da70:	d018      	beq.n	800daa4 <__gethex+0x22e>
 800da72:	f1bb 0f20 	cmp.w	fp, #32
 800da76:	d107      	bne.n	800da88 <__gethex+0x212>
 800da78:	9b04      	ldr	r3, [sp, #16]
 800da7a:	f8c3 a000 	str.w	sl, [r3]
 800da7e:	3304      	adds	r3, #4
 800da80:	f04f 0a00 	mov.w	sl, #0
 800da84:	9304      	str	r3, [sp, #16]
 800da86:	46d3      	mov	fp, sl
 800da88:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800da8c:	f7ff fede 	bl	800d84c <__hexdig_fun>
 800da90:	f000 000f 	and.w	r0, r0, #15
 800da94:	fa00 f00b 	lsl.w	r0, r0, fp
 800da98:	ea4a 0a00 	orr.w	sl, sl, r0
 800da9c:	f10b 0b04 	add.w	fp, fp, #4
 800daa0:	9b05      	ldr	r3, [sp, #20]
 800daa2:	e00d      	b.n	800dac0 <__gethex+0x24a>
 800daa4:	9b05      	ldr	r3, [sp, #20]
 800daa6:	9a08      	ldr	r2, [sp, #32]
 800daa8:	4413      	add	r3, r2
 800daaa:	42bb      	cmp	r3, r7
 800daac:	d3e1      	bcc.n	800da72 <__gethex+0x1fc>
 800daae:	4618      	mov	r0, r3
 800dab0:	9a01      	ldr	r2, [sp, #4]
 800dab2:	9903      	ldr	r1, [sp, #12]
 800dab4:	9309      	str	r3, [sp, #36]	; 0x24
 800dab6:	f000 fffb 	bl	800eab0 <strncmp>
 800daba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dabc:	2800      	cmp	r0, #0
 800dabe:	d1d8      	bne.n	800da72 <__gethex+0x1fc>
 800dac0:	461e      	mov	r6, r3
 800dac2:	e791      	b.n	800d9e8 <__gethex+0x172>
 800dac4:	1eb9      	subs	r1, r7, #2
 800dac6:	4628      	mov	r0, r5
 800dac8:	f000 fdb8 	bl	800e63c <__any_on>
 800dacc:	2800      	cmp	r0, #0
 800dace:	d0b2      	beq.n	800da36 <__gethex+0x1c0>
 800dad0:	f04f 0a03 	mov.w	sl, #3
 800dad4:	e7b1      	b.n	800da3a <__gethex+0x1c4>
 800dad6:	da09      	bge.n	800daec <__gethex+0x276>
 800dad8:	1bf7      	subs	r7, r6, r7
 800dada:	4629      	mov	r1, r5
 800dadc:	463a      	mov	r2, r7
 800dade:	9802      	ldr	r0, [sp, #8]
 800dae0:	f000 fbce 	bl	800e280 <__lshift>
 800dae4:	1be4      	subs	r4, r4, r7
 800dae6:	4605      	mov	r5, r0
 800dae8:	f100 0914 	add.w	r9, r0, #20
 800daec:	f04f 0a00 	mov.w	sl, #0
 800daf0:	e7a8      	b.n	800da44 <__gethex+0x1ce>
 800daf2:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800daf6:	42a0      	cmp	r0, r4
 800daf8:	dd6a      	ble.n	800dbd0 <__gethex+0x35a>
 800dafa:	1b04      	subs	r4, r0, r4
 800dafc:	42a6      	cmp	r6, r4
 800dafe:	dc2e      	bgt.n	800db5e <__gethex+0x2e8>
 800db00:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800db04:	2b02      	cmp	r3, #2
 800db06:	d022      	beq.n	800db4e <__gethex+0x2d8>
 800db08:	2b03      	cmp	r3, #3
 800db0a:	d024      	beq.n	800db56 <__gethex+0x2e0>
 800db0c:	2b01      	cmp	r3, #1
 800db0e:	d115      	bne.n	800db3c <__gethex+0x2c6>
 800db10:	42a6      	cmp	r6, r4
 800db12:	d113      	bne.n	800db3c <__gethex+0x2c6>
 800db14:	2e01      	cmp	r6, #1
 800db16:	dc0b      	bgt.n	800db30 <__gethex+0x2ba>
 800db18:	9a06      	ldr	r2, [sp, #24]
 800db1a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800db1e:	6013      	str	r3, [r2, #0]
 800db20:	2301      	movs	r3, #1
 800db22:	612b      	str	r3, [r5, #16]
 800db24:	f8c9 3000 	str.w	r3, [r9]
 800db28:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800db2a:	2762      	movs	r7, #98	; 0x62
 800db2c:	601d      	str	r5, [r3, #0]
 800db2e:	e72a      	b.n	800d986 <__gethex+0x110>
 800db30:	1e71      	subs	r1, r6, #1
 800db32:	4628      	mov	r0, r5
 800db34:	f000 fd82 	bl	800e63c <__any_on>
 800db38:	2800      	cmp	r0, #0
 800db3a:	d1ed      	bne.n	800db18 <__gethex+0x2a2>
 800db3c:	4629      	mov	r1, r5
 800db3e:	9802      	ldr	r0, [sp, #8]
 800db40:	f000 f9d2 	bl	800dee8 <_Bfree>
 800db44:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800db46:	2300      	movs	r3, #0
 800db48:	6013      	str	r3, [r2, #0]
 800db4a:	2750      	movs	r7, #80	; 0x50
 800db4c:	e71b      	b.n	800d986 <__gethex+0x110>
 800db4e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800db50:	2b00      	cmp	r3, #0
 800db52:	d0e1      	beq.n	800db18 <__gethex+0x2a2>
 800db54:	e7f2      	b.n	800db3c <__gethex+0x2c6>
 800db56:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d1dd      	bne.n	800db18 <__gethex+0x2a2>
 800db5c:	e7ee      	b.n	800db3c <__gethex+0x2c6>
 800db5e:	1e67      	subs	r7, r4, #1
 800db60:	f1ba 0f00 	cmp.w	sl, #0
 800db64:	d131      	bne.n	800dbca <__gethex+0x354>
 800db66:	b127      	cbz	r7, 800db72 <__gethex+0x2fc>
 800db68:	4639      	mov	r1, r7
 800db6a:	4628      	mov	r0, r5
 800db6c:	f000 fd66 	bl	800e63c <__any_on>
 800db70:	4682      	mov	sl, r0
 800db72:	117a      	asrs	r2, r7, #5
 800db74:	2301      	movs	r3, #1
 800db76:	f007 071f 	and.w	r7, r7, #31
 800db7a:	fa03 f707 	lsl.w	r7, r3, r7
 800db7e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800db82:	4621      	mov	r1, r4
 800db84:	421f      	tst	r7, r3
 800db86:	4628      	mov	r0, r5
 800db88:	bf18      	it	ne
 800db8a:	f04a 0a02 	orrne.w	sl, sl, #2
 800db8e:	1b36      	subs	r6, r6, r4
 800db90:	f7ff fe22 	bl	800d7d8 <rshift>
 800db94:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800db98:	2702      	movs	r7, #2
 800db9a:	f1ba 0f00 	cmp.w	sl, #0
 800db9e:	d048      	beq.n	800dc32 <__gethex+0x3bc>
 800dba0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dba4:	2b02      	cmp	r3, #2
 800dba6:	d015      	beq.n	800dbd4 <__gethex+0x35e>
 800dba8:	2b03      	cmp	r3, #3
 800dbaa:	d017      	beq.n	800dbdc <__gethex+0x366>
 800dbac:	2b01      	cmp	r3, #1
 800dbae:	d109      	bne.n	800dbc4 <__gethex+0x34e>
 800dbb0:	f01a 0f02 	tst.w	sl, #2
 800dbb4:	d006      	beq.n	800dbc4 <__gethex+0x34e>
 800dbb6:	f8d9 3000 	ldr.w	r3, [r9]
 800dbba:	ea4a 0a03 	orr.w	sl, sl, r3
 800dbbe:	f01a 0f01 	tst.w	sl, #1
 800dbc2:	d10e      	bne.n	800dbe2 <__gethex+0x36c>
 800dbc4:	f047 0710 	orr.w	r7, r7, #16
 800dbc8:	e033      	b.n	800dc32 <__gethex+0x3bc>
 800dbca:	f04f 0a01 	mov.w	sl, #1
 800dbce:	e7d0      	b.n	800db72 <__gethex+0x2fc>
 800dbd0:	2701      	movs	r7, #1
 800dbd2:	e7e2      	b.n	800db9a <__gethex+0x324>
 800dbd4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dbd6:	f1c3 0301 	rsb	r3, r3, #1
 800dbda:	9315      	str	r3, [sp, #84]	; 0x54
 800dbdc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d0f0      	beq.n	800dbc4 <__gethex+0x34e>
 800dbe2:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800dbe6:	f105 0314 	add.w	r3, r5, #20
 800dbea:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800dbee:	eb03 010a 	add.w	r1, r3, sl
 800dbf2:	f04f 0c00 	mov.w	ip, #0
 800dbf6:	4618      	mov	r0, r3
 800dbf8:	f853 2b04 	ldr.w	r2, [r3], #4
 800dbfc:	f1b2 3fff 	cmp.w	r2, #4294967295
 800dc00:	d01c      	beq.n	800dc3c <__gethex+0x3c6>
 800dc02:	3201      	adds	r2, #1
 800dc04:	6002      	str	r2, [r0, #0]
 800dc06:	2f02      	cmp	r7, #2
 800dc08:	f105 0314 	add.w	r3, r5, #20
 800dc0c:	d138      	bne.n	800dc80 <__gethex+0x40a>
 800dc0e:	f8d8 2000 	ldr.w	r2, [r8]
 800dc12:	3a01      	subs	r2, #1
 800dc14:	42b2      	cmp	r2, r6
 800dc16:	d10a      	bne.n	800dc2e <__gethex+0x3b8>
 800dc18:	1171      	asrs	r1, r6, #5
 800dc1a:	2201      	movs	r2, #1
 800dc1c:	f006 061f 	and.w	r6, r6, #31
 800dc20:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dc24:	fa02 f606 	lsl.w	r6, r2, r6
 800dc28:	421e      	tst	r6, r3
 800dc2a:	bf18      	it	ne
 800dc2c:	4617      	movne	r7, r2
 800dc2e:	f047 0720 	orr.w	r7, r7, #32
 800dc32:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800dc34:	601d      	str	r5, [r3, #0]
 800dc36:	9b06      	ldr	r3, [sp, #24]
 800dc38:	601c      	str	r4, [r3, #0]
 800dc3a:	e6a4      	b.n	800d986 <__gethex+0x110>
 800dc3c:	4299      	cmp	r1, r3
 800dc3e:	f843 cc04 	str.w	ip, [r3, #-4]
 800dc42:	d8d8      	bhi.n	800dbf6 <__gethex+0x380>
 800dc44:	68ab      	ldr	r3, [r5, #8]
 800dc46:	4599      	cmp	r9, r3
 800dc48:	db12      	blt.n	800dc70 <__gethex+0x3fa>
 800dc4a:	6869      	ldr	r1, [r5, #4]
 800dc4c:	9802      	ldr	r0, [sp, #8]
 800dc4e:	3101      	adds	r1, #1
 800dc50:	f000 f916 	bl	800de80 <_Balloc>
 800dc54:	692a      	ldr	r2, [r5, #16]
 800dc56:	3202      	adds	r2, #2
 800dc58:	f105 010c 	add.w	r1, r5, #12
 800dc5c:	4683      	mov	fp, r0
 800dc5e:	0092      	lsls	r2, r2, #2
 800dc60:	300c      	adds	r0, #12
 800dc62:	f7fd fa39 	bl	800b0d8 <memcpy>
 800dc66:	4629      	mov	r1, r5
 800dc68:	9802      	ldr	r0, [sp, #8]
 800dc6a:	f000 f93d 	bl	800dee8 <_Bfree>
 800dc6e:	465d      	mov	r5, fp
 800dc70:	692b      	ldr	r3, [r5, #16]
 800dc72:	1c5a      	adds	r2, r3, #1
 800dc74:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800dc78:	612a      	str	r2, [r5, #16]
 800dc7a:	2201      	movs	r2, #1
 800dc7c:	615a      	str	r2, [r3, #20]
 800dc7e:	e7c2      	b.n	800dc06 <__gethex+0x390>
 800dc80:	692a      	ldr	r2, [r5, #16]
 800dc82:	454a      	cmp	r2, r9
 800dc84:	dd0b      	ble.n	800dc9e <__gethex+0x428>
 800dc86:	2101      	movs	r1, #1
 800dc88:	4628      	mov	r0, r5
 800dc8a:	f7ff fda5 	bl	800d7d8 <rshift>
 800dc8e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dc92:	3401      	adds	r4, #1
 800dc94:	42a3      	cmp	r3, r4
 800dc96:	f6ff aed9 	blt.w	800da4c <__gethex+0x1d6>
 800dc9a:	2701      	movs	r7, #1
 800dc9c:	e7c7      	b.n	800dc2e <__gethex+0x3b8>
 800dc9e:	f016 061f 	ands.w	r6, r6, #31
 800dca2:	d0fa      	beq.n	800dc9a <__gethex+0x424>
 800dca4:	449a      	add	sl, r3
 800dca6:	f1c6 0620 	rsb	r6, r6, #32
 800dcaa:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800dcae:	f000 f9ab 	bl	800e008 <__hi0bits>
 800dcb2:	42b0      	cmp	r0, r6
 800dcb4:	dbe7      	blt.n	800dc86 <__gethex+0x410>
 800dcb6:	e7f0      	b.n	800dc9a <__gethex+0x424>

0800dcb8 <L_shift>:
 800dcb8:	f1c2 0208 	rsb	r2, r2, #8
 800dcbc:	0092      	lsls	r2, r2, #2
 800dcbe:	b570      	push	{r4, r5, r6, lr}
 800dcc0:	f1c2 0620 	rsb	r6, r2, #32
 800dcc4:	6843      	ldr	r3, [r0, #4]
 800dcc6:	6804      	ldr	r4, [r0, #0]
 800dcc8:	fa03 f506 	lsl.w	r5, r3, r6
 800dccc:	432c      	orrs	r4, r5
 800dcce:	40d3      	lsrs	r3, r2
 800dcd0:	6004      	str	r4, [r0, #0]
 800dcd2:	f840 3f04 	str.w	r3, [r0, #4]!
 800dcd6:	4288      	cmp	r0, r1
 800dcd8:	d3f4      	bcc.n	800dcc4 <L_shift+0xc>
 800dcda:	bd70      	pop	{r4, r5, r6, pc}

0800dcdc <__match>:
 800dcdc:	b530      	push	{r4, r5, lr}
 800dcde:	6803      	ldr	r3, [r0, #0]
 800dce0:	3301      	adds	r3, #1
 800dce2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dce6:	b914      	cbnz	r4, 800dcee <__match+0x12>
 800dce8:	6003      	str	r3, [r0, #0]
 800dcea:	2001      	movs	r0, #1
 800dcec:	bd30      	pop	{r4, r5, pc}
 800dcee:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dcf2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800dcf6:	2d19      	cmp	r5, #25
 800dcf8:	bf98      	it	ls
 800dcfa:	3220      	addls	r2, #32
 800dcfc:	42a2      	cmp	r2, r4
 800dcfe:	d0f0      	beq.n	800dce2 <__match+0x6>
 800dd00:	2000      	movs	r0, #0
 800dd02:	e7f3      	b.n	800dcec <__match+0x10>

0800dd04 <__hexnan>:
 800dd04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd08:	680b      	ldr	r3, [r1, #0]
 800dd0a:	6801      	ldr	r1, [r0, #0]
 800dd0c:	115f      	asrs	r7, r3, #5
 800dd0e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800dd12:	f013 031f 	ands.w	r3, r3, #31
 800dd16:	b087      	sub	sp, #28
 800dd18:	bf18      	it	ne
 800dd1a:	3704      	addne	r7, #4
 800dd1c:	2500      	movs	r5, #0
 800dd1e:	1f3e      	subs	r6, r7, #4
 800dd20:	4682      	mov	sl, r0
 800dd22:	4690      	mov	r8, r2
 800dd24:	9301      	str	r3, [sp, #4]
 800dd26:	f847 5c04 	str.w	r5, [r7, #-4]
 800dd2a:	46b1      	mov	r9, r6
 800dd2c:	4634      	mov	r4, r6
 800dd2e:	9502      	str	r5, [sp, #8]
 800dd30:	46ab      	mov	fp, r5
 800dd32:	784a      	ldrb	r2, [r1, #1]
 800dd34:	1c4b      	adds	r3, r1, #1
 800dd36:	9303      	str	r3, [sp, #12]
 800dd38:	b342      	cbz	r2, 800dd8c <__hexnan+0x88>
 800dd3a:	4610      	mov	r0, r2
 800dd3c:	9105      	str	r1, [sp, #20]
 800dd3e:	9204      	str	r2, [sp, #16]
 800dd40:	f7ff fd84 	bl	800d84c <__hexdig_fun>
 800dd44:	2800      	cmp	r0, #0
 800dd46:	d143      	bne.n	800ddd0 <__hexnan+0xcc>
 800dd48:	9a04      	ldr	r2, [sp, #16]
 800dd4a:	9905      	ldr	r1, [sp, #20]
 800dd4c:	2a20      	cmp	r2, #32
 800dd4e:	d818      	bhi.n	800dd82 <__hexnan+0x7e>
 800dd50:	9b02      	ldr	r3, [sp, #8]
 800dd52:	459b      	cmp	fp, r3
 800dd54:	dd13      	ble.n	800dd7e <__hexnan+0x7a>
 800dd56:	454c      	cmp	r4, r9
 800dd58:	d206      	bcs.n	800dd68 <__hexnan+0x64>
 800dd5a:	2d07      	cmp	r5, #7
 800dd5c:	dc04      	bgt.n	800dd68 <__hexnan+0x64>
 800dd5e:	462a      	mov	r2, r5
 800dd60:	4649      	mov	r1, r9
 800dd62:	4620      	mov	r0, r4
 800dd64:	f7ff ffa8 	bl	800dcb8 <L_shift>
 800dd68:	4544      	cmp	r4, r8
 800dd6a:	d944      	bls.n	800ddf6 <__hexnan+0xf2>
 800dd6c:	2300      	movs	r3, #0
 800dd6e:	f1a4 0904 	sub.w	r9, r4, #4
 800dd72:	f844 3c04 	str.w	r3, [r4, #-4]
 800dd76:	f8cd b008 	str.w	fp, [sp, #8]
 800dd7a:	464c      	mov	r4, r9
 800dd7c:	461d      	mov	r5, r3
 800dd7e:	9903      	ldr	r1, [sp, #12]
 800dd80:	e7d7      	b.n	800dd32 <__hexnan+0x2e>
 800dd82:	2a29      	cmp	r2, #41	; 0x29
 800dd84:	d14a      	bne.n	800de1c <__hexnan+0x118>
 800dd86:	3102      	adds	r1, #2
 800dd88:	f8ca 1000 	str.w	r1, [sl]
 800dd8c:	f1bb 0f00 	cmp.w	fp, #0
 800dd90:	d044      	beq.n	800de1c <__hexnan+0x118>
 800dd92:	454c      	cmp	r4, r9
 800dd94:	d206      	bcs.n	800dda4 <__hexnan+0xa0>
 800dd96:	2d07      	cmp	r5, #7
 800dd98:	dc04      	bgt.n	800dda4 <__hexnan+0xa0>
 800dd9a:	462a      	mov	r2, r5
 800dd9c:	4649      	mov	r1, r9
 800dd9e:	4620      	mov	r0, r4
 800dda0:	f7ff ff8a 	bl	800dcb8 <L_shift>
 800dda4:	4544      	cmp	r4, r8
 800dda6:	d928      	bls.n	800ddfa <__hexnan+0xf6>
 800dda8:	4643      	mov	r3, r8
 800ddaa:	f854 2b04 	ldr.w	r2, [r4], #4
 800ddae:	f843 2b04 	str.w	r2, [r3], #4
 800ddb2:	42a6      	cmp	r6, r4
 800ddb4:	d2f9      	bcs.n	800ddaa <__hexnan+0xa6>
 800ddb6:	2200      	movs	r2, #0
 800ddb8:	f843 2b04 	str.w	r2, [r3], #4
 800ddbc:	429e      	cmp	r6, r3
 800ddbe:	d2fb      	bcs.n	800ddb8 <__hexnan+0xb4>
 800ddc0:	6833      	ldr	r3, [r6, #0]
 800ddc2:	b91b      	cbnz	r3, 800ddcc <__hexnan+0xc8>
 800ddc4:	4546      	cmp	r6, r8
 800ddc6:	d127      	bne.n	800de18 <__hexnan+0x114>
 800ddc8:	2301      	movs	r3, #1
 800ddca:	6033      	str	r3, [r6, #0]
 800ddcc:	2005      	movs	r0, #5
 800ddce:	e026      	b.n	800de1e <__hexnan+0x11a>
 800ddd0:	3501      	adds	r5, #1
 800ddd2:	2d08      	cmp	r5, #8
 800ddd4:	f10b 0b01 	add.w	fp, fp, #1
 800ddd8:	dd06      	ble.n	800dde8 <__hexnan+0xe4>
 800ddda:	4544      	cmp	r4, r8
 800dddc:	d9cf      	bls.n	800dd7e <__hexnan+0x7a>
 800ddde:	2300      	movs	r3, #0
 800dde0:	f844 3c04 	str.w	r3, [r4, #-4]
 800dde4:	2501      	movs	r5, #1
 800dde6:	3c04      	subs	r4, #4
 800dde8:	6822      	ldr	r2, [r4, #0]
 800ddea:	f000 000f 	and.w	r0, r0, #15
 800ddee:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ddf2:	6020      	str	r0, [r4, #0]
 800ddf4:	e7c3      	b.n	800dd7e <__hexnan+0x7a>
 800ddf6:	2508      	movs	r5, #8
 800ddf8:	e7c1      	b.n	800dd7e <__hexnan+0x7a>
 800ddfa:	9b01      	ldr	r3, [sp, #4]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d0df      	beq.n	800ddc0 <__hexnan+0xbc>
 800de00:	f04f 32ff 	mov.w	r2, #4294967295
 800de04:	f1c3 0320 	rsb	r3, r3, #32
 800de08:	fa22 f303 	lsr.w	r3, r2, r3
 800de0c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800de10:	401a      	ands	r2, r3
 800de12:	f847 2c04 	str.w	r2, [r7, #-4]
 800de16:	e7d3      	b.n	800ddc0 <__hexnan+0xbc>
 800de18:	3e04      	subs	r6, #4
 800de1a:	e7d1      	b.n	800ddc0 <__hexnan+0xbc>
 800de1c:	2004      	movs	r0, #4
 800de1e:	b007      	add	sp, #28
 800de20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800de24 <__locale_ctype_ptr_l>:
 800de24:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800de28:	4770      	bx	lr

0800de2a <__localeconv_l>:
 800de2a:	30f0      	adds	r0, #240	; 0xf0
 800de2c:	4770      	bx	lr
	...

0800de30 <_localeconv_r>:
 800de30:	4b04      	ldr	r3, [pc, #16]	; (800de44 <_localeconv_r+0x14>)
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	6a18      	ldr	r0, [r3, #32]
 800de36:	4b04      	ldr	r3, [pc, #16]	; (800de48 <_localeconv_r+0x18>)
 800de38:	2800      	cmp	r0, #0
 800de3a:	bf08      	it	eq
 800de3c:	4618      	moveq	r0, r3
 800de3e:	30f0      	adds	r0, #240	; 0xf0
 800de40:	4770      	bx	lr
 800de42:	bf00      	nop
 800de44:	20000010 	.word	0x20000010
 800de48:	20000074 	.word	0x20000074

0800de4c <malloc>:
 800de4c:	4b02      	ldr	r3, [pc, #8]	; (800de58 <malloc+0xc>)
 800de4e:	4601      	mov	r1, r0
 800de50:	6818      	ldr	r0, [r3, #0]
 800de52:	f000 bc71 	b.w	800e738 <_malloc_r>
 800de56:	bf00      	nop
 800de58:	20000010 	.word	0x20000010

0800de5c <__ascii_mbtowc>:
 800de5c:	b082      	sub	sp, #8
 800de5e:	b901      	cbnz	r1, 800de62 <__ascii_mbtowc+0x6>
 800de60:	a901      	add	r1, sp, #4
 800de62:	b142      	cbz	r2, 800de76 <__ascii_mbtowc+0x1a>
 800de64:	b14b      	cbz	r3, 800de7a <__ascii_mbtowc+0x1e>
 800de66:	7813      	ldrb	r3, [r2, #0]
 800de68:	600b      	str	r3, [r1, #0]
 800de6a:	7812      	ldrb	r2, [r2, #0]
 800de6c:	1c10      	adds	r0, r2, #0
 800de6e:	bf18      	it	ne
 800de70:	2001      	movne	r0, #1
 800de72:	b002      	add	sp, #8
 800de74:	4770      	bx	lr
 800de76:	4610      	mov	r0, r2
 800de78:	e7fb      	b.n	800de72 <__ascii_mbtowc+0x16>
 800de7a:	f06f 0001 	mvn.w	r0, #1
 800de7e:	e7f8      	b.n	800de72 <__ascii_mbtowc+0x16>

0800de80 <_Balloc>:
 800de80:	b570      	push	{r4, r5, r6, lr}
 800de82:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800de84:	4604      	mov	r4, r0
 800de86:	460e      	mov	r6, r1
 800de88:	b93d      	cbnz	r5, 800de9a <_Balloc+0x1a>
 800de8a:	2010      	movs	r0, #16
 800de8c:	f7ff ffde 	bl	800de4c <malloc>
 800de90:	6260      	str	r0, [r4, #36]	; 0x24
 800de92:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800de96:	6005      	str	r5, [r0, #0]
 800de98:	60c5      	str	r5, [r0, #12]
 800de9a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800de9c:	68eb      	ldr	r3, [r5, #12]
 800de9e:	b183      	cbz	r3, 800dec2 <_Balloc+0x42>
 800dea0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dea2:	68db      	ldr	r3, [r3, #12]
 800dea4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800dea8:	b9b8      	cbnz	r0, 800deda <_Balloc+0x5a>
 800deaa:	2101      	movs	r1, #1
 800deac:	fa01 f506 	lsl.w	r5, r1, r6
 800deb0:	1d6a      	adds	r2, r5, #5
 800deb2:	0092      	lsls	r2, r2, #2
 800deb4:	4620      	mov	r0, r4
 800deb6:	f000 fbe2 	bl	800e67e <_calloc_r>
 800deba:	b160      	cbz	r0, 800ded6 <_Balloc+0x56>
 800debc:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800dec0:	e00e      	b.n	800dee0 <_Balloc+0x60>
 800dec2:	2221      	movs	r2, #33	; 0x21
 800dec4:	2104      	movs	r1, #4
 800dec6:	4620      	mov	r0, r4
 800dec8:	f000 fbd9 	bl	800e67e <_calloc_r>
 800decc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dece:	60e8      	str	r0, [r5, #12]
 800ded0:	68db      	ldr	r3, [r3, #12]
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d1e4      	bne.n	800dea0 <_Balloc+0x20>
 800ded6:	2000      	movs	r0, #0
 800ded8:	bd70      	pop	{r4, r5, r6, pc}
 800deda:	6802      	ldr	r2, [r0, #0]
 800dedc:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800dee0:	2300      	movs	r3, #0
 800dee2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dee6:	e7f7      	b.n	800ded8 <_Balloc+0x58>

0800dee8 <_Bfree>:
 800dee8:	b570      	push	{r4, r5, r6, lr}
 800deea:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800deec:	4606      	mov	r6, r0
 800deee:	460d      	mov	r5, r1
 800def0:	b93c      	cbnz	r4, 800df02 <_Bfree+0x1a>
 800def2:	2010      	movs	r0, #16
 800def4:	f7ff ffaa 	bl	800de4c <malloc>
 800def8:	6270      	str	r0, [r6, #36]	; 0x24
 800defa:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800defe:	6004      	str	r4, [r0, #0]
 800df00:	60c4      	str	r4, [r0, #12]
 800df02:	b13d      	cbz	r5, 800df14 <_Bfree+0x2c>
 800df04:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800df06:	686a      	ldr	r2, [r5, #4]
 800df08:	68db      	ldr	r3, [r3, #12]
 800df0a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800df0e:	6029      	str	r1, [r5, #0]
 800df10:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800df14:	bd70      	pop	{r4, r5, r6, pc}

0800df16 <__multadd>:
 800df16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df1a:	690d      	ldr	r5, [r1, #16]
 800df1c:	461f      	mov	r7, r3
 800df1e:	4606      	mov	r6, r0
 800df20:	460c      	mov	r4, r1
 800df22:	f101 0c14 	add.w	ip, r1, #20
 800df26:	2300      	movs	r3, #0
 800df28:	f8dc 0000 	ldr.w	r0, [ip]
 800df2c:	b281      	uxth	r1, r0
 800df2e:	fb02 7101 	mla	r1, r2, r1, r7
 800df32:	0c0f      	lsrs	r7, r1, #16
 800df34:	0c00      	lsrs	r0, r0, #16
 800df36:	fb02 7000 	mla	r0, r2, r0, r7
 800df3a:	b289      	uxth	r1, r1
 800df3c:	3301      	adds	r3, #1
 800df3e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800df42:	429d      	cmp	r5, r3
 800df44:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800df48:	f84c 1b04 	str.w	r1, [ip], #4
 800df4c:	dcec      	bgt.n	800df28 <__multadd+0x12>
 800df4e:	b1d7      	cbz	r7, 800df86 <__multadd+0x70>
 800df50:	68a3      	ldr	r3, [r4, #8]
 800df52:	42ab      	cmp	r3, r5
 800df54:	dc12      	bgt.n	800df7c <__multadd+0x66>
 800df56:	6861      	ldr	r1, [r4, #4]
 800df58:	4630      	mov	r0, r6
 800df5a:	3101      	adds	r1, #1
 800df5c:	f7ff ff90 	bl	800de80 <_Balloc>
 800df60:	6922      	ldr	r2, [r4, #16]
 800df62:	3202      	adds	r2, #2
 800df64:	f104 010c 	add.w	r1, r4, #12
 800df68:	4680      	mov	r8, r0
 800df6a:	0092      	lsls	r2, r2, #2
 800df6c:	300c      	adds	r0, #12
 800df6e:	f7fd f8b3 	bl	800b0d8 <memcpy>
 800df72:	4621      	mov	r1, r4
 800df74:	4630      	mov	r0, r6
 800df76:	f7ff ffb7 	bl	800dee8 <_Bfree>
 800df7a:	4644      	mov	r4, r8
 800df7c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800df80:	3501      	adds	r5, #1
 800df82:	615f      	str	r7, [r3, #20]
 800df84:	6125      	str	r5, [r4, #16]
 800df86:	4620      	mov	r0, r4
 800df88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800df8c <__s2b>:
 800df8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df90:	460c      	mov	r4, r1
 800df92:	4615      	mov	r5, r2
 800df94:	461f      	mov	r7, r3
 800df96:	2209      	movs	r2, #9
 800df98:	3308      	adds	r3, #8
 800df9a:	4606      	mov	r6, r0
 800df9c:	fb93 f3f2 	sdiv	r3, r3, r2
 800dfa0:	2100      	movs	r1, #0
 800dfa2:	2201      	movs	r2, #1
 800dfa4:	429a      	cmp	r2, r3
 800dfa6:	db20      	blt.n	800dfea <__s2b+0x5e>
 800dfa8:	4630      	mov	r0, r6
 800dfaa:	f7ff ff69 	bl	800de80 <_Balloc>
 800dfae:	9b08      	ldr	r3, [sp, #32]
 800dfb0:	6143      	str	r3, [r0, #20]
 800dfb2:	2d09      	cmp	r5, #9
 800dfb4:	f04f 0301 	mov.w	r3, #1
 800dfb8:	6103      	str	r3, [r0, #16]
 800dfba:	dd19      	ble.n	800dff0 <__s2b+0x64>
 800dfbc:	f104 0809 	add.w	r8, r4, #9
 800dfc0:	46c1      	mov	r9, r8
 800dfc2:	442c      	add	r4, r5
 800dfc4:	f819 3b01 	ldrb.w	r3, [r9], #1
 800dfc8:	4601      	mov	r1, r0
 800dfca:	3b30      	subs	r3, #48	; 0x30
 800dfcc:	220a      	movs	r2, #10
 800dfce:	4630      	mov	r0, r6
 800dfd0:	f7ff ffa1 	bl	800df16 <__multadd>
 800dfd4:	45a1      	cmp	r9, r4
 800dfd6:	d1f5      	bne.n	800dfc4 <__s2b+0x38>
 800dfd8:	eb08 0405 	add.w	r4, r8, r5
 800dfdc:	3c08      	subs	r4, #8
 800dfde:	1b2d      	subs	r5, r5, r4
 800dfe0:	1963      	adds	r3, r4, r5
 800dfe2:	42bb      	cmp	r3, r7
 800dfe4:	db07      	blt.n	800dff6 <__s2b+0x6a>
 800dfe6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dfea:	0052      	lsls	r2, r2, #1
 800dfec:	3101      	adds	r1, #1
 800dfee:	e7d9      	b.n	800dfa4 <__s2b+0x18>
 800dff0:	340a      	adds	r4, #10
 800dff2:	2509      	movs	r5, #9
 800dff4:	e7f3      	b.n	800dfde <__s2b+0x52>
 800dff6:	f814 3b01 	ldrb.w	r3, [r4], #1
 800dffa:	4601      	mov	r1, r0
 800dffc:	3b30      	subs	r3, #48	; 0x30
 800dffe:	220a      	movs	r2, #10
 800e000:	4630      	mov	r0, r6
 800e002:	f7ff ff88 	bl	800df16 <__multadd>
 800e006:	e7eb      	b.n	800dfe0 <__s2b+0x54>

0800e008 <__hi0bits>:
 800e008:	0c02      	lsrs	r2, r0, #16
 800e00a:	0412      	lsls	r2, r2, #16
 800e00c:	4603      	mov	r3, r0
 800e00e:	b9b2      	cbnz	r2, 800e03e <__hi0bits+0x36>
 800e010:	0403      	lsls	r3, r0, #16
 800e012:	2010      	movs	r0, #16
 800e014:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800e018:	bf04      	itt	eq
 800e01a:	021b      	lsleq	r3, r3, #8
 800e01c:	3008      	addeq	r0, #8
 800e01e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800e022:	bf04      	itt	eq
 800e024:	011b      	lsleq	r3, r3, #4
 800e026:	3004      	addeq	r0, #4
 800e028:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800e02c:	bf04      	itt	eq
 800e02e:	009b      	lsleq	r3, r3, #2
 800e030:	3002      	addeq	r0, #2
 800e032:	2b00      	cmp	r3, #0
 800e034:	db06      	blt.n	800e044 <__hi0bits+0x3c>
 800e036:	005b      	lsls	r3, r3, #1
 800e038:	d503      	bpl.n	800e042 <__hi0bits+0x3a>
 800e03a:	3001      	adds	r0, #1
 800e03c:	4770      	bx	lr
 800e03e:	2000      	movs	r0, #0
 800e040:	e7e8      	b.n	800e014 <__hi0bits+0xc>
 800e042:	2020      	movs	r0, #32
 800e044:	4770      	bx	lr

0800e046 <__lo0bits>:
 800e046:	6803      	ldr	r3, [r0, #0]
 800e048:	f013 0207 	ands.w	r2, r3, #7
 800e04c:	4601      	mov	r1, r0
 800e04e:	d00b      	beq.n	800e068 <__lo0bits+0x22>
 800e050:	07da      	lsls	r2, r3, #31
 800e052:	d423      	bmi.n	800e09c <__lo0bits+0x56>
 800e054:	0798      	lsls	r0, r3, #30
 800e056:	bf49      	itett	mi
 800e058:	085b      	lsrmi	r3, r3, #1
 800e05a:	089b      	lsrpl	r3, r3, #2
 800e05c:	2001      	movmi	r0, #1
 800e05e:	600b      	strmi	r3, [r1, #0]
 800e060:	bf5c      	itt	pl
 800e062:	600b      	strpl	r3, [r1, #0]
 800e064:	2002      	movpl	r0, #2
 800e066:	4770      	bx	lr
 800e068:	b298      	uxth	r0, r3
 800e06a:	b9a8      	cbnz	r0, 800e098 <__lo0bits+0x52>
 800e06c:	0c1b      	lsrs	r3, r3, #16
 800e06e:	2010      	movs	r0, #16
 800e070:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e074:	bf04      	itt	eq
 800e076:	0a1b      	lsreq	r3, r3, #8
 800e078:	3008      	addeq	r0, #8
 800e07a:	071a      	lsls	r2, r3, #28
 800e07c:	bf04      	itt	eq
 800e07e:	091b      	lsreq	r3, r3, #4
 800e080:	3004      	addeq	r0, #4
 800e082:	079a      	lsls	r2, r3, #30
 800e084:	bf04      	itt	eq
 800e086:	089b      	lsreq	r3, r3, #2
 800e088:	3002      	addeq	r0, #2
 800e08a:	07da      	lsls	r2, r3, #31
 800e08c:	d402      	bmi.n	800e094 <__lo0bits+0x4e>
 800e08e:	085b      	lsrs	r3, r3, #1
 800e090:	d006      	beq.n	800e0a0 <__lo0bits+0x5a>
 800e092:	3001      	adds	r0, #1
 800e094:	600b      	str	r3, [r1, #0]
 800e096:	4770      	bx	lr
 800e098:	4610      	mov	r0, r2
 800e09a:	e7e9      	b.n	800e070 <__lo0bits+0x2a>
 800e09c:	2000      	movs	r0, #0
 800e09e:	4770      	bx	lr
 800e0a0:	2020      	movs	r0, #32
 800e0a2:	4770      	bx	lr

0800e0a4 <__i2b>:
 800e0a4:	b510      	push	{r4, lr}
 800e0a6:	460c      	mov	r4, r1
 800e0a8:	2101      	movs	r1, #1
 800e0aa:	f7ff fee9 	bl	800de80 <_Balloc>
 800e0ae:	2201      	movs	r2, #1
 800e0b0:	6144      	str	r4, [r0, #20]
 800e0b2:	6102      	str	r2, [r0, #16]
 800e0b4:	bd10      	pop	{r4, pc}

0800e0b6 <__multiply>:
 800e0b6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0ba:	4614      	mov	r4, r2
 800e0bc:	690a      	ldr	r2, [r1, #16]
 800e0be:	6923      	ldr	r3, [r4, #16]
 800e0c0:	429a      	cmp	r2, r3
 800e0c2:	bfb8      	it	lt
 800e0c4:	460b      	movlt	r3, r1
 800e0c6:	4688      	mov	r8, r1
 800e0c8:	bfbc      	itt	lt
 800e0ca:	46a0      	movlt	r8, r4
 800e0cc:	461c      	movlt	r4, r3
 800e0ce:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e0d2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800e0d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e0da:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e0de:	eb07 0609 	add.w	r6, r7, r9
 800e0e2:	42b3      	cmp	r3, r6
 800e0e4:	bfb8      	it	lt
 800e0e6:	3101      	addlt	r1, #1
 800e0e8:	f7ff feca 	bl	800de80 <_Balloc>
 800e0ec:	f100 0514 	add.w	r5, r0, #20
 800e0f0:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800e0f4:	462b      	mov	r3, r5
 800e0f6:	2200      	movs	r2, #0
 800e0f8:	4573      	cmp	r3, lr
 800e0fa:	d316      	bcc.n	800e12a <__multiply+0x74>
 800e0fc:	f104 0214 	add.w	r2, r4, #20
 800e100:	f108 0114 	add.w	r1, r8, #20
 800e104:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800e108:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800e10c:	9300      	str	r3, [sp, #0]
 800e10e:	9b00      	ldr	r3, [sp, #0]
 800e110:	9201      	str	r2, [sp, #4]
 800e112:	4293      	cmp	r3, r2
 800e114:	d80c      	bhi.n	800e130 <__multiply+0x7a>
 800e116:	2e00      	cmp	r6, #0
 800e118:	dd03      	ble.n	800e122 <__multiply+0x6c>
 800e11a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d05d      	beq.n	800e1de <__multiply+0x128>
 800e122:	6106      	str	r6, [r0, #16]
 800e124:	b003      	add	sp, #12
 800e126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e12a:	f843 2b04 	str.w	r2, [r3], #4
 800e12e:	e7e3      	b.n	800e0f8 <__multiply+0x42>
 800e130:	f8b2 b000 	ldrh.w	fp, [r2]
 800e134:	f1bb 0f00 	cmp.w	fp, #0
 800e138:	d023      	beq.n	800e182 <__multiply+0xcc>
 800e13a:	4689      	mov	r9, r1
 800e13c:	46ac      	mov	ip, r5
 800e13e:	f04f 0800 	mov.w	r8, #0
 800e142:	f859 4b04 	ldr.w	r4, [r9], #4
 800e146:	f8dc a000 	ldr.w	sl, [ip]
 800e14a:	b2a3      	uxth	r3, r4
 800e14c:	fa1f fa8a 	uxth.w	sl, sl
 800e150:	fb0b a303 	mla	r3, fp, r3, sl
 800e154:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800e158:	f8dc 4000 	ldr.w	r4, [ip]
 800e15c:	4443      	add	r3, r8
 800e15e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800e162:	fb0b 840a 	mla	r4, fp, sl, r8
 800e166:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800e16a:	46e2      	mov	sl, ip
 800e16c:	b29b      	uxth	r3, r3
 800e16e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800e172:	454f      	cmp	r7, r9
 800e174:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800e178:	f84a 3b04 	str.w	r3, [sl], #4
 800e17c:	d82b      	bhi.n	800e1d6 <__multiply+0x120>
 800e17e:	f8cc 8004 	str.w	r8, [ip, #4]
 800e182:	9b01      	ldr	r3, [sp, #4]
 800e184:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800e188:	3204      	adds	r2, #4
 800e18a:	f1ba 0f00 	cmp.w	sl, #0
 800e18e:	d020      	beq.n	800e1d2 <__multiply+0x11c>
 800e190:	682b      	ldr	r3, [r5, #0]
 800e192:	4689      	mov	r9, r1
 800e194:	46a8      	mov	r8, r5
 800e196:	f04f 0b00 	mov.w	fp, #0
 800e19a:	f8b9 c000 	ldrh.w	ip, [r9]
 800e19e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800e1a2:	fb0a 440c 	mla	r4, sl, ip, r4
 800e1a6:	445c      	add	r4, fp
 800e1a8:	46c4      	mov	ip, r8
 800e1aa:	b29b      	uxth	r3, r3
 800e1ac:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800e1b0:	f84c 3b04 	str.w	r3, [ip], #4
 800e1b4:	f859 3b04 	ldr.w	r3, [r9], #4
 800e1b8:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800e1bc:	0c1b      	lsrs	r3, r3, #16
 800e1be:	fb0a b303 	mla	r3, sl, r3, fp
 800e1c2:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800e1c6:	454f      	cmp	r7, r9
 800e1c8:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800e1cc:	d805      	bhi.n	800e1da <__multiply+0x124>
 800e1ce:	f8c8 3004 	str.w	r3, [r8, #4]
 800e1d2:	3504      	adds	r5, #4
 800e1d4:	e79b      	b.n	800e10e <__multiply+0x58>
 800e1d6:	46d4      	mov	ip, sl
 800e1d8:	e7b3      	b.n	800e142 <__multiply+0x8c>
 800e1da:	46e0      	mov	r8, ip
 800e1dc:	e7dd      	b.n	800e19a <__multiply+0xe4>
 800e1de:	3e01      	subs	r6, #1
 800e1e0:	e799      	b.n	800e116 <__multiply+0x60>
	...

0800e1e4 <__pow5mult>:
 800e1e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e1e8:	4615      	mov	r5, r2
 800e1ea:	f012 0203 	ands.w	r2, r2, #3
 800e1ee:	4606      	mov	r6, r0
 800e1f0:	460f      	mov	r7, r1
 800e1f2:	d007      	beq.n	800e204 <__pow5mult+0x20>
 800e1f4:	3a01      	subs	r2, #1
 800e1f6:	4c21      	ldr	r4, [pc, #132]	; (800e27c <__pow5mult+0x98>)
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e1fe:	f7ff fe8a 	bl	800df16 <__multadd>
 800e202:	4607      	mov	r7, r0
 800e204:	10ad      	asrs	r5, r5, #2
 800e206:	d035      	beq.n	800e274 <__pow5mult+0x90>
 800e208:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e20a:	b93c      	cbnz	r4, 800e21c <__pow5mult+0x38>
 800e20c:	2010      	movs	r0, #16
 800e20e:	f7ff fe1d 	bl	800de4c <malloc>
 800e212:	6270      	str	r0, [r6, #36]	; 0x24
 800e214:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e218:	6004      	str	r4, [r0, #0]
 800e21a:	60c4      	str	r4, [r0, #12]
 800e21c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e220:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e224:	b94c      	cbnz	r4, 800e23a <__pow5mult+0x56>
 800e226:	f240 2171 	movw	r1, #625	; 0x271
 800e22a:	4630      	mov	r0, r6
 800e22c:	f7ff ff3a 	bl	800e0a4 <__i2b>
 800e230:	2300      	movs	r3, #0
 800e232:	f8c8 0008 	str.w	r0, [r8, #8]
 800e236:	4604      	mov	r4, r0
 800e238:	6003      	str	r3, [r0, #0]
 800e23a:	f04f 0800 	mov.w	r8, #0
 800e23e:	07eb      	lsls	r3, r5, #31
 800e240:	d50a      	bpl.n	800e258 <__pow5mult+0x74>
 800e242:	4639      	mov	r1, r7
 800e244:	4622      	mov	r2, r4
 800e246:	4630      	mov	r0, r6
 800e248:	f7ff ff35 	bl	800e0b6 <__multiply>
 800e24c:	4639      	mov	r1, r7
 800e24e:	4681      	mov	r9, r0
 800e250:	4630      	mov	r0, r6
 800e252:	f7ff fe49 	bl	800dee8 <_Bfree>
 800e256:	464f      	mov	r7, r9
 800e258:	106d      	asrs	r5, r5, #1
 800e25a:	d00b      	beq.n	800e274 <__pow5mult+0x90>
 800e25c:	6820      	ldr	r0, [r4, #0]
 800e25e:	b938      	cbnz	r0, 800e270 <__pow5mult+0x8c>
 800e260:	4622      	mov	r2, r4
 800e262:	4621      	mov	r1, r4
 800e264:	4630      	mov	r0, r6
 800e266:	f7ff ff26 	bl	800e0b6 <__multiply>
 800e26a:	6020      	str	r0, [r4, #0]
 800e26c:	f8c0 8000 	str.w	r8, [r0]
 800e270:	4604      	mov	r4, r0
 800e272:	e7e4      	b.n	800e23e <__pow5mult+0x5a>
 800e274:	4638      	mov	r0, r7
 800e276:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e27a:	bf00      	nop
 800e27c:	0800efd8 	.word	0x0800efd8

0800e280 <__lshift>:
 800e280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e284:	460c      	mov	r4, r1
 800e286:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e28a:	6923      	ldr	r3, [r4, #16]
 800e28c:	6849      	ldr	r1, [r1, #4]
 800e28e:	eb0a 0903 	add.w	r9, sl, r3
 800e292:	68a3      	ldr	r3, [r4, #8]
 800e294:	4607      	mov	r7, r0
 800e296:	4616      	mov	r6, r2
 800e298:	f109 0501 	add.w	r5, r9, #1
 800e29c:	42ab      	cmp	r3, r5
 800e29e:	db32      	blt.n	800e306 <__lshift+0x86>
 800e2a0:	4638      	mov	r0, r7
 800e2a2:	f7ff fded 	bl	800de80 <_Balloc>
 800e2a6:	2300      	movs	r3, #0
 800e2a8:	4680      	mov	r8, r0
 800e2aa:	f100 0114 	add.w	r1, r0, #20
 800e2ae:	461a      	mov	r2, r3
 800e2b0:	4553      	cmp	r3, sl
 800e2b2:	db2b      	blt.n	800e30c <__lshift+0x8c>
 800e2b4:	6920      	ldr	r0, [r4, #16]
 800e2b6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e2ba:	f104 0314 	add.w	r3, r4, #20
 800e2be:	f016 021f 	ands.w	r2, r6, #31
 800e2c2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e2c6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e2ca:	d025      	beq.n	800e318 <__lshift+0x98>
 800e2cc:	f1c2 0e20 	rsb	lr, r2, #32
 800e2d0:	2000      	movs	r0, #0
 800e2d2:	681e      	ldr	r6, [r3, #0]
 800e2d4:	468a      	mov	sl, r1
 800e2d6:	4096      	lsls	r6, r2
 800e2d8:	4330      	orrs	r0, r6
 800e2da:	f84a 0b04 	str.w	r0, [sl], #4
 800e2de:	f853 0b04 	ldr.w	r0, [r3], #4
 800e2e2:	459c      	cmp	ip, r3
 800e2e4:	fa20 f00e 	lsr.w	r0, r0, lr
 800e2e8:	d814      	bhi.n	800e314 <__lshift+0x94>
 800e2ea:	6048      	str	r0, [r1, #4]
 800e2ec:	b108      	cbz	r0, 800e2f2 <__lshift+0x72>
 800e2ee:	f109 0502 	add.w	r5, r9, #2
 800e2f2:	3d01      	subs	r5, #1
 800e2f4:	4638      	mov	r0, r7
 800e2f6:	f8c8 5010 	str.w	r5, [r8, #16]
 800e2fa:	4621      	mov	r1, r4
 800e2fc:	f7ff fdf4 	bl	800dee8 <_Bfree>
 800e300:	4640      	mov	r0, r8
 800e302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e306:	3101      	adds	r1, #1
 800e308:	005b      	lsls	r3, r3, #1
 800e30a:	e7c7      	b.n	800e29c <__lshift+0x1c>
 800e30c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800e310:	3301      	adds	r3, #1
 800e312:	e7cd      	b.n	800e2b0 <__lshift+0x30>
 800e314:	4651      	mov	r1, sl
 800e316:	e7dc      	b.n	800e2d2 <__lshift+0x52>
 800e318:	3904      	subs	r1, #4
 800e31a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e31e:	f841 2f04 	str.w	r2, [r1, #4]!
 800e322:	459c      	cmp	ip, r3
 800e324:	d8f9      	bhi.n	800e31a <__lshift+0x9a>
 800e326:	e7e4      	b.n	800e2f2 <__lshift+0x72>

0800e328 <__mcmp>:
 800e328:	6903      	ldr	r3, [r0, #16]
 800e32a:	690a      	ldr	r2, [r1, #16]
 800e32c:	1a9b      	subs	r3, r3, r2
 800e32e:	b530      	push	{r4, r5, lr}
 800e330:	d10c      	bne.n	800e34c <__mcmp+0x24>
 800e332:	0092      	lsls	r2, r2, #2
 800e334:	3014      	adds	r0, #20
 800e336:	3114      	adds	r1, #20
 800e338:	1884      	adds	r4, r0, r2
 800e33a:	4411      	add	r1, r2
 800e33c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e340:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e344:	4295      	cmp	r5, r2
 800e346:	d003      	beq.n	800e350 <__mcmp+0x28>
 800e348:	d305      	bcc.n	800e356 <__mcmp+0x2e>
 800e34a:	2301      	movs	r3, #1
 800e34c:	4618      	mov	r0, r3
 800e34e:	bd30      	pop	{r4, r5, pc}
 800e350:	42a0      	cmp	r0, r4
 800e352:	d3f3      	bcc.n	800e33c <__mcmp+0x14>
 800e354:	e7fa      	b.n	800e34c <__mcmp+0x24>
 800e356:	f04f 33ff 	mov.w	r3, #4294967295
 800e35a:	e7f7      	b.n	800e34c <__mcmp+0x24>

0800e35c <__mdiff>:
 800e35c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e360:	460d      	mov	r5, r1
 800e362:	4607      	mov	r7, r0
 800e364:	4611      	mov	r1, r2
 800e366:	4628      	mov	r0, r5
 800e368:	4614      	mov	r4, r2
 800e36a:	f7ff ffdd 	bl	800e328 <__mcmp>
 800e36e:	1e06      	subs	r6, r0, #0
 800e370:	d108      	bne.n	800e384 <__mdiff+0x28>
 800e372:	4631      	mov	r1, r6
 800e374:	4638      	mov	r0, r7
 800e376:	f7ff fd83 	bl	800de80 <_Balloc>
 800e37a:	2301      	movs	r3, #1
 800e37c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800e380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e384:	bfa4      	itt	ge
 800e386:	4623      	movge	r3, r4
 800e388:	462c      	movge	r4, r5
 800e38a:	4638      	mov	r0, r7
 800e38c:	6861      	ldr	r1, [r4, #4]
 800e38e:	bfa6      	itte	ge
 800e390:	461d      	movge	r5, r3
 800e392:	2600      	movge	r6, #0
 800e394:	2601      	movlt	r6, #1
 800e396:	f7ff fd73 	bl	800de80 <_Balloc>
 800e39a:	692b      	ldr	r3, [r5, #16]
 800e39c:	60c6      	str	r6, [r0, #12]
 800e39e:	6926      	ldr	r6, [r4, #16]
 800e3a0:	f105 0914 	add.w	r9, r5, #20
 800e3a4:	f104 0214 	add.w	r2, r4, #20
 800e3a8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800e3ac:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800e3b0:	f100 0514 	add.w	r5, r0, #20
 800e3b4:	f04f 0e00 	mov.w	lr, #0
 800e3b8:	f852 ab04 	ldr.w	sl, [r2], #4
 800e3bc:	f859 4b04 	ldr.w	r4, [r9], #4
 800e3c0:	fa1e f18a 	uxtah	r1, lr, sl
 800e3c4:	b2a3      	uxth	r3, r4
 800e3c6:	1ac9      	subs	r1, r1, r3
 800e3c8:	0c23      	lsrs	r3, r4, #16
 800e3ca:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800e3ce:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800e3d2:	b289      	uxth	r1, r1
 800e3d4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800e3d8:	45c8      	cmp	r8, r9
 800e3da:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800e3de:	4694      	mov	ip, r2
 800e3e0:	f845 3b04 	str.w	r3, [r5], #4
 800e3e4:	d8e8      	bhi.n	800e3b8 <__mdiff+0x5c>
 800e3e6:	45bc      	cmp	ip, r7
 800e3e8:	d304      	bcc.n	800e3f4 <__mdiff+0x98>
 800e3ea:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800e3ee:	b183      	cbz	r3, 800e412 <__mdiff+0xb6>
 800e3f0:	6106      	str	r6, [r0, #16]
 800e3f2:	e7c5      	b.n	800e380 <__mdiff+0x24>
 800e3f4:	f85c 1b04 	ldr.w	r1, [ip], #4
 800e3f8:	fa1e f381 	uxtah	r3, lr, r1
 800e3fc:	141a      	asrs	r2, r3, #16
 800e3fe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e402:	b29b      	uxth	r3, r3
 800e404:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e408:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800e40c:	f845 3b04 	str.w	r3, [r5], #4
 800e410:	e7e9      	b.n	800e3e6 <__mdiff+0x8a>
 800e412:	3e01      	subs	r6, #1
 800e414:	e7e9      	b.n	800e3ea <__mdiff+0x8e>
	...

0800e418 <__ulp>:
 800e418:	4b12      	ldr	r3, [pc, #72]	; (800e464 <__ulp+0x4c>)
 800e41a:	ee10 2a90 	vmov	r2, s1
 800e41e:	401a      	ands	r2, r3
 800e420:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800e424:	2b00      	cmp	r3, #0
 800e426:	dd04      	ble.n	800e432 <__ulp+0x1a>
 800e428:	2000      	movs	r0, #0
 800e42a:	4619      	mov	r1, r3
 800e42c:	ec41 0b10 	vmov	d0, r0, r1
 800e430:	4770      	bx	lr
 800e432:	425b      	negs	r3, r3
 800e434:	151b      	asrs	r3, r3, #20
 800e436:	2b13      	cmp	r3, #19
 800e438:	f04f 0000 	mov.w	r0, #0
 800e43c:	f04f 0100 	mov.w	r1, #0
 800e440:	dc04      	bgt.n	800e44c <__ulp+0x34>
 800e442:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800e446:	fa42 f103 	asr.w	r1, r2, r3
 800e44a:	e7ef      	b.n	800e42c <__ulp+0x14>
 800e44c:	3b14      	subs	r3, #20
 800e44e:	2b1e      	cmp	r3, #30
 800e450:	f04f 0201 	mov.w	r2, #1
 800e454:	bfda      	itte	le
 800e456:	f1c3 031f 	rsble	r3, r3, #31
 800e45a:	fa02 f303 	lslle.w	r3, r2, r3
 800e45e:	4613      	movgt	r3, r2
 800e460:	4618      	mov	r0, r3
 800e462:	e7e3      	b.n	800e42c <__ulp+0x14>
 800e464:	7ff00000 	.word	0x7ff00000

0800e468 <__b2d>:
 800e468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e46a:	6905      	ldr	r5, [r0, #16]
 800e46c:	f100 0714 	add.w	r7, r0, #20
 800e470:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800e474:	1f2e      	subs	r6, r5, #4
 800e476:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800e47a:	4620      	mov	r0, r4
 800e47c:	f7ff fdc4 	bl	800e008 <__hi0bits>
 800e480:	f1c0 0320 	rsb	r3, r0, #32
 800e484:	280a      	cmp	r0, #10
 800e486:	600b      	str	r3, [r1, #0]
 800e488:	f8df c074 	ldr.w	ip, [pc, #116]	; 800e500 <__b2d+0x98>
 800e48c:	dc14      	bgt.n	800e4b8 <__b2d+0x50>
 800e48e:	f1c0 0e0b 	rsb	lr, r0, #11
 800e492:	fa24 f10e 	lsr.w	r1, r4, lr
 800e496:	42b7      	cmp	r7, r6
 800e498:	ea41 030c 	orr.w	r3, r1, ip
 800e49c:	bf34      	ite	cc
 800e49e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e4a2:	2100      	movcs	r1, #0
 800e4a4:	3015      	adds	r0, #21
 800e4a6:	fa04 f000 	lsl.w	r0, r4, r0
 800e4aa:	fa21 f10e 	lsr.w	r1, r1, lr
 800e4ae:	ea40 0201 	orr.w	r2, r0, r1
 800e4b2:	ec43 2b10 	vmov	d0, r2, r3
 800e4b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e4b8:	42b7      	cmp	r7, r6
 800e4ba:	bf3a      	itte	cc
 800e4bc:	f1a5 0608 	subcc.w	r6, r5, #8
 800e4c0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e4c4:	2100      	movcs	r1, #0
 800e4c6:	380b      	subs	r0, #11
 800e4c8:	d015      	beq.n	800e4f6 <__b2d+0x8e>
 800e4ca:	4084      	lsls	r4, r0
 800e4cc:	f1c0 0520 	rsb	r5, r0, #32
 800e4d0:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800e4d4:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800e4d8:	42be      	cmp	r6, r7
 800e4da:	fa21 fc05 	lsr.w	ip, r1, r5
 800e4de:	ea44 030c 	orr.w	r3, r4, ip
 800e4e2:	bf8c      	ite	hi
 800e4e4:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800e4e8:	2400      	movls	r4, #0
 800e4ea:	fa01 f000 	lsl.w	r0, r1, r0
 800e4ee:	40ec      	lsrs	r4, r5
 800e4f0:	ea40 0204 	orr.w	r2, r0, r4
 800e4f4:	e7dd      	b.n	800e4b2 <__b2d+0x4a>
 800e4f6:	ea44 030c 	orr.w	r3, r4, ip
 800e4fa:	460a      	mov	r2, r1
 800e4fc:	e7d9      	b.n	800e4b2 <__b2d+0x4a>
 800e4fe:	bf00      	nop
 800e500:	3ff00000 	.word	0x3ff00000

0800e504 <__d2b>:
 800e504:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e508:	460e      	mov	r6, r1
 800e50a:	2101      	movs	r1, #1
 800e50c:	ec59 8b10 	vmov	r8, r9, d0
 800e510:	4615      	mov	r5, r2
 800e512:	f7ff fcb5 	bl	800de80 <_Balloc>
 800e516:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800e51a:	4607      	mov	r7, r0
 800e51c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e520:	bb34      	cbnz	r4, 800e570 <__d2b+0x6c>
 800e522:	9301      	str	r3, [sp, #4]
 800e524:	f1b8 0300 	subs.w	r3, r8, #0
 800e528:	d027      	beq.n	800e57a <__d2b+0x76>
 800e52a:	a802      	add	r0, sp, #8
 800e52c:	f840 3d08 	str.w	r3, [r0, #-8]!
 800e530:	f7ff fd89 	bl	800e046 <__lo0bits>
 800e534:	9900      	ldr	r1, [sp, #0]
 800e536:	b1f0      	cbz	r0, 800e576 <__d2b+0x72>
 800e538:	9a01      	ldr	r2, [sp, #4]
 800e53a:	f1c0 0320 	rsb	r3, r0, #32
 800e53e:	fa02 f303 	lsl.w	r3, r2, r3
 800e542:	430b      	orrs	r3, r1
 800e544:	40c2      	lsrs	r2, r0
 800e546:	617b      	str	r3, [r7, #20]
 800e548:	9201      	str	r2, [sp, #4]
 800e54a:	9b01      	ldr	r3, [sp, #4]
 800e54c:	61bb      	str	r3, [r7, #24]
 800e54e:	2b00      	cmp	r3, #0
 800e550:	bf14      	ite	ne
 800e552:	2102      	movne	r1, #2
 800e554:	2101      	moveq	r1, #1
 800e556:	6139      	str	r1, [r7, #16]
 800e558:	b1c4      	cbz	r4, 800e58c <__d2b+0x88>
 800e55a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800e55e:	4404      	add	r4, r0
 800e560:	6034      	str	r4, [r6, #0]
 800e562:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e566:	6028      	str	r0, [r5, #0]
 800e568:	4638      	mov	r0, r7
 800e56a:	b003      	add	sp, #12
 800e56c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e570:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e574:	e7d5      	b.n	800e522 <__d2b+0x1e>
 800e576:	6179      	str	r1, [r7, #20]
 800e578:	e7e7      	b.n	800e54a <__d2b+0x46>
 800e57a:	a801      	add	r0, sp, #4
 800e57c:	f7ff fd63 	bl	800e046 <__lo0bits>
 800e580:	9b01      	ldr	r3, [sp, #4]
 800e582:	617b      	str	r3, [r7, #20]
 800e584:	2101      	movs	r1, #1
 800e586:	6139      	str	r1, [r7, #16]
 800e588:	3020      	adds	r0, #32
 800e58a:	e7e5      	b.n	800e558 <__d2b+0x54>
 800e58c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800e590:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e594:	6030      	str	r0, [r6, #0]
 800e596:	6918      	ldr	r0, [r3, #16]
 800e598:	f7ff fd36 	bl	800e008 <__hi0bits>
 800e59c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800e5a0:	e7e1      	b.n	800e566 <__d2b+0x62>

0800e5a2 <__ratio>:
 800e5a2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5a6:	4688      	mov	r8, r1
 800e5a8:	4669      	mov	r1, sp
 800e5aa:	4681      	mov	r9, r0
 800e5ac:	f7ff ff5c 	bl	800e468 <__b2d>
 800e5b0:	a901      	add	r1, sp, #4
 800e5b2:	4640      	mov	r0, r8
 800e5b4:	ec57 6b10 	vmov	r6, r7, d0
 800e5b8:	f7ff ff56 	bl	800e468 <__b2d>
 800e5bc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e5c0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e5c4:	eba3 0c02 	sub.w	ip, r3, r2
 800e5c8:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e5cc:	1a9b      	subs	r3, r3, r2
 800e5ce:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800e5d2:	ec5b ab10 	vmov	sl, fp, d0
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	bfce      	itee	gt
 800e5da:	463a      	movgt	r2, r7
 800e5dc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e5e0:	465a      	movle	r2, fp
 800e5e2:	4659      	mov	r1, fp
 800e5e4:	463d      	mov	r5, r7
 800e5e6:	bfd4      	ite	le
 800e5e8:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800e5ec:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800e5f0:	4630      	mov	r0, r6
 800e5f2:	ee10 2a10 	vmov	r2, s0
 800e5f6:	460b      	mov	r3, r1
 800e5f8:	4629      	mov	r1, r5
 800e5fa:	f7f2 f927 	bl	800084c <__aeabi_ddiv>
 800e5fe:	ec41 0b10 	vmov	d0, r0, r1
 800e602:	b003      	add	sp, #12
 800e604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e608 <__copybits>:
 800e608:	3901      	subs	r1, #1
 800e60a:	b510      	push	{r4, lr}
 800e60c:	1149      	asrs	r1, r1, #5
 800e60e:	6914      	ldr	r4, [r2, #16]
 800e610:	3101      	adds	r1, #1
 800e612:	f102 0314 	add.w	r3, r2, #20
 800e616:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e61a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e61e:	42a3      	cmp	r3, r4
 800e620:	4602      	mov	r2, r0
 800e622:	d303      	bcc.n	800e62c <__copybits+0x24>
 800e624:	2300      	movs	r3, #0
 800e626:	428a      	cmp	r2, r1
 800e628:	d305      	bcc.n	800e636 <__copybits+0x2e>
 800e62a:	bd10      	pop	{r4, pc}
 800e62c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e630:	f840 2b04 	str.w	r2, [r0], #4
 800e634:	e7f3      	b.n	800e61e <__copybits+0x16>
 800e636:	f842 3b04 	str.w	r3, [r2], #4
 800e63a:	e7f4      	b.n	800e626 <__copybits+0x1e>

0800e63c <__any_on>:
 800e63c:	f100 0214 	add.w	r2, r0, #20
 800e640:	6900      	ldr	r0, [r0, #16]
 800e642:	114b      	asrs	r3, r1, #5
 800e644:	4298      	cmp	r0, r3
 800e646:	b510      	push	{r4, lr}
 800e648:	db11      	blt.n	800e66e <__any_on+0x32>
 800e64a:	dd0a      	ble.n	800e662 <__any_on+0x26>
 800e64c:	f011 011f 	ands.w	r1, r1, #31
 800e650:	d007      	beq.n	800e662 <__any_on+0x26>
 800e652:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e656:	fa24 f001 	lsr.w	r0, r4, r1
 800e65a:	fa00 f101 	lsl.w	r1, r0, r1
 800e65e:	428c      	cmp	r4, r1
 800e660:	d10b      	bne.n	800e67a <__any_on+0x3e>
 800e662:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e666:	4293      	cmp	r3, r2
 800e668:	d803      	bhi.n	800e672 <__any_on+0x36>
 800e66a:	2000      	movs	r0, #0
 800e66c:	bd10      	pop	{r4, pc}
 800e66e:	4603      	mov	r3, r0
 800e670:	e7f7      	b.n	800e662 <__any_on+0x26>
 800e672:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e676:	2900      	cmp	r1, #0
 800e678:	d0f5      	beq.n	800e666 <__any_on+0x2a>
 800e67a:	2001      	movs	r0, #1
 800e67c:	e7f6      	b.n	800e66c <__any_on+0x30>

0800e67e <_calloc_r>:
 800e67e:	b538      	push	{r3, r4, r5, lr}
 800e680:	fb02 f401 	mul.w	r4, r2, r1
 800e684:	4621      	mov	r1, r4
 800e686:	f000 f857 	bl	800e738 <_malloc_r>
 800e68a:	4605      	mov	r5, r0
 800e68c:	b118      	cbz	r0, 800e696 <_calloc_r+0x18>
 800e68e:	4622      	mov	r2, r4
 800e690:	2100      	movs	r1, #0
 800e692:	f7fc fd2c 	bl	800b0ee <memset>
 800e696:	4628      	mov	r0, r5
 800e698:	bd38      	pop	{r3, r4, r5, pc}
	...

0800e69c <_free_r>:
 800e69c:	b538      	push	{r3, r4, r5, lr}
 800e69e:	4605      	mov	r5, r0
 800e6a0:	2900      	cmp	r1, #0
 800e6a2:	d045      	beq.n	800e730 <_free_r+0x94>
 800e6a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e6a8:	1f0c      	subs	r4, r1, #4
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	bfb8      	it	lt
 800e6ae:	18e4      	addlt	r4, r4, r3
 800e6b0:	f000 fa36 	bl	800eb20 <__malloc_lock>
 800e6b4:	4a1f      	ldr	r2, [pc, #124]	; (800e734 <_free_r+0x98>)
 800e6b6:	6813      	ldr	r3, [r2, #0]
 800e6b8:	4610      	mov	r0, r2
 800e6ba:	b933      	cbnz	r3, 800e6ca <_free_r+0x2e>
 800e6bc:	6063      	str	r3, [r4, #4]
 800e6be:	6014      	str	r4, [r2, #0]
 800e6c0:	4628      	mov	r0, r5
 800e6c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e6c6:	f000 ba2c 	b.w	800eb22 <__malloc_unlock>
 800e6ca:	42a3      	cmp	r3, r4
 800e6cc:	d90c      	bls.n	800e6e8 <_free_r+0x4c>
 800e6ce:	6821      	ldr	r1, [r4, #0]
 800e6d0:	1862      	adds	r2, r4, r1
 800e6d2:	4293      	cmp	r3, r2
 800e6d4:	bf04      	itt	eq
 800e6d6:	681a      	ldreq	r2, [r3, #0]
 800e6d8:	685b      	ldreq	r3, [r3, #4]
 800e6da:	6063      	str	r3, [r4, #4]
 800e6dc:	bf04      	itt	eq
 800e6de:	1852      	addeq	r2, r2, r1
 800e6e0:	6022      	streq	r2, [r4, #0]
 800e6e2:	6004      	str	r4, [r0, #0]
 800e6e4:	e7ec      	b.n	800e6c0 <_free_r+0x24>
 800e6e6:	4613      	mov	r3, r2
 800e6e8:	685a      	ldr	r2, [r3, #4]
 800e6ea:	b10a      	cbz	r2, 800e6f0 <_free_r+0x54>
 800e6ec:	42a2      	cmp	r2, r4
 800e6ee:	d9fa      	bls.n	800e6e6 <_free_r+0x4a>
 800e6f0:	6819      	ldr	r1, [r3, #0]
 800e6f2:	1858      	adds	r0, r3, r1
 800e6f4:	42a0      	cmp	r0, r4
 800e6f6:	d10b      	bne.n	800e710 <_free_r+0x74>
 800e6f8:	6820      	ldr	r0, [r4, #0]
 800e6fa:	4401      	add	r1, r0
 800e6fc:	1858      	adds	r0, r3, r1
 800e6fe:	4282      	cmp	r2, r0
 800e700:	6019      	str	r1, [r3, #0]
 800e702:	d1dd      	bne.n	800e6c0 <_free_r+0x24>
 800e704:	6810      	ldr	r0, [r2, #0]
 800e706:	6852      	ldr	r2, [r2, #4]
 800e708:	605a      	str	r2, [r3, #4]
 800e70a:	4401      	add	r1, r0
 800e70c:	6019      	str	r1, [r3, #0]
 800e70e:	e7d7      	b.n	800e6c0 <_free_r+0x24>
 800e710:	d902      	bls.n	800e718 <_free_r+0x7c>
 800e712:	230c      	movs	r3, #12
 800e714:	602b      	str	r3, [r5, #0]
 800e716:	e7d3      	b.n	800e6c0 <_free_r+0x24>
 800e718:	6820      	ldr	r0, [r4, #0]
 800e71a:	1821      	adds	r1, r4, r0
 800e71c:	428a      	cmp	r2, r1
 800e71e:	bf04      	itt	eq
 800e720:	6811      	ldreq	r1, [r2, #0]
 800e722:	6852      	ldreq	r2, [r2, #4]
 800e724:	6062      	str	r2, [r4, #4]
 800e726:	bf04      	itt	eq
 800e728:	1809      	addeq	r1, r1, r0
 800e72a:	6021      	streq	r1, [r4, #0]
 800e72c:	605c      	str	r4, [r3, #4]
 800e72e:	e7c7      	b.n	800e6c0 <_free_r+0x24>
 800e730:	bd38      	pop	{r3, r4, r5, pc}
 800e732:	bf00      	nop
 800e734:	20004b1c 	.word	0x20004b1c

0800e738 <_malloc_r>:
 800e738:	b570      	push	{r4, r5, r6, lr}
 800e73a:	1ccd      	adds	r5, r1, #3
 800e73c:	f025 0503 	bic.w	r5, r5, #3
 800e740:	3508      	adds	r5, #8
 800e742:	2d0c      	cmp	r5, #12
 800e744:	bf38      	it	cc
 800e746:	250c      	movcc	r5, #12
 800e748:	2d00      	cmp	r5, #0
 800e74a:	4606      	mov	r6, r0
 800e74c:	db01      	blt.n	800e752 <_malloc_r+0x1a>
 800e74e:	42a9      	cmp	r1, r5
 800e750:	d903      	bls.n	800e75a <_malloc_r+0x22>
 800e752:	230c      	movs	r3, #12
 800e754:	6033      	str	r3, [r6, #0]
 800e756:	2000      	movs	r0, #0
 800e758:	bd70      	pop	{r4, r5, r6, pc}
 800e75a:	f000 f9e1 	bl	800eb20 <__malloc_lock>
 800e75e:	4a21      	ldr	r2, [pc, #132]	; (800e7e4 <_malloc_r+0xac>)
 800e760:	6814      	ldr	r4, [r2, #0]
 800e762:	4621      	mov	r1, r4
 800e764:	b991      	cbnz	r1, 800e78c <_malloc_r+0x54>
 800e766:	4c20      	ldr	r4, [pc, #128]	; (800e7e8 <_malloc_r+0xb0>)
 800e768:	6823      	ldr	r3, [r4, #0]
 800e76a:	b91b      	cbnz	r3, 800e774 <_malloc_r+0x3c>
 800e76c:	4630      	mov	r0, r6
 800e76e:	f000 f98f 	bl	800ea90 <_sbrk_r>
 800e772:	6020      	str	r0, [r4, #0]
 800e774:	4629      	mov	r1, r5
 800e776:	4630      	mov	r0, r6
 800e778:	f000 f98a 	bl	800ea90 <_sbrk_r>
 800e77c:	1c43      	adds	r3, r0, #1
 800e77e:	d124      	bne.n	800e7ca <_malloc_r+0x92>
 800e780:	230c      	movs	r3, #12
 800e782:	6033      	str	r3, [r6, #0]
 800e784:	4630      	mov	r0, r6
 800e786:	f000 f9cc 	bl	800eb22 <__malloc_unlock>
 800e78a:	e7e4      	b.n	800e756 <_malloc_r+0x1e>
 800e78c:	680b      	ldr	r3, [r1, #0]
 800e78e:	1b5b      	subs	r3, r3, r5
 800e790:	d418      	bmi.n	800e7c4 <_malloc_r+0x8c>
 800e792:	2b0b      	cmp	r3, #11
 800e794:	d90f      	bls.n	800e7b6 <_malloc_r+0x7e>
 800e796:	600b      	str	r3, [r1, #0]
 800e798:	50cd      	str	r5, [r1, r3]
 800e79a:	18cc      	adds	r4, r1, r3
 800e79c:	4630      	mov	r0, r6
 800e79e:	f000 f9c0 	bl	800eb22 <__malloc_unlock>
 800e7a2:	f104 000b 	add.w	r0, r4, #11
 800e7a6:	1d23      	adds	r3, r4, #4
 800e7a8:	f020 0007 	bic.w	r0, r0, #7
 800e7ac:	1ac3      	subs	r3, r0, r3
 800e7ae:	d0d3      	beq.n	800e758 <_malloc_r+0x20>
 800e7b0:	425a      	negs	r2, r3
 800e7b2:	50e2      	str	r2, [r4, r3]
 800e7b4:	e7d0      	b.n	800e758 <_malloc_r+0x20>
 800e7b6:	428c      	cmp	r4, r1
 800e7b8:	684b      	ldr	r3, [r1, #4]
 800e7ba:	bf16      	itet	ne
 800e7bc:	6063      	strne	r3, [r4, #4]
 800e7be:	6013      	streq	r3, [r2, #0]
 800e7c0:	460c      	movne	r4, r1
 800e7c2:	e7eb      	b.n	800e79c <_malloc_r+0x64>
 800e7c4:	460c      	mov	r4, r1
 800e7c6:	6849      	ldr	r1, [r1, #4]
 800e7c8:	e7cc      	b.n	800e764 <_malloc_r+0x2c>
 800e7ca:	1cc4      	adds	r4, r0, #3
 800e7cc:	f024 0403 	bic.w	r4, r4, #3
 800e7d0:	42a0      	cmp	r0, r4
 800e7d2:	d005      	beq.n	800e7e0 <_malloc_r+0xa8>
 800e7d4:	1a21      	subs	r1, r4, r0
 800e7d6:	4630      	mov	r0, r6
 800e7d8:	f000 f95a 	bl	800ea90 <_sbrk_r>
 800e7dc:	3001      	adds	r0, #1
 800e7de:	d0cf      	beq.n	800e780 <_malloc_r+0x48>
 800e7e0:	6025      	str	r5, [r4, #0]
 800e7e2:	e7db      	b.n	800e79c <_malloc_r+0x64>
 800e7e4:	20004b1c 	.word	0x20004b1c
 800e7e8:	20004b20 	.word	0x20004b20

0800e7ec <__ssputs_r>:
 800e7ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e7f0:	688e      	ldr	r6, [r1, #8]
 800e7f2:	429e      	cmp	r6, r3
 800e7f4:	4682      	mov	sl, r0
 800e7f6:	460c      	mov	r4, r1
 800e7f8:	4690      	mov	r8, r2
 800e7fa:	4699      	mov	r9, r3
 800e7fc:	d837      	bhi.n	800e86e <__ssputs_r+0x82>
 800e7fe:	898a      	ldrh	r2, [r1, #12]
 800e800:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e804:	d031      	beq.n	800e86a <__ssputs_r+0x7e>
 800e806:	6825      	ldr	r5, [r4, #0]
 800e808:	6909      	ldr	r1, [r1, #16]
 800e80a:	1a6f      	subs	r7, r5, r1
 800e80c:	6965      	ldr	r5, [r4, #20]
 800e80e:	2302      	movs	r3, #2
 800e810:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e814:	fb95 f5f3 	sdiv	r5, r5, r3
 800e818:	f109 0301 	add.w	r3, r9, #1
 800e81c:	443b      	add	r3, r7
 800e81e:	429d      	cmp	r5, r3
 800e820:	bf38      	it	cc
 800e822:	461d      	movcc	r5, r3
 800e824:	0553      	lsls	r3, r2, #21
 800e826:	d530      	bpl.n	800e88a <__ssputs_r+0x9e>
 800e828:	4629      	mov	r1, r5
 800e82a:	f7ff ff85 	bl	800e738 <_malloc_r>
 800e82e:	4606      	mov	r6, r0
 800e830:	b950      	cbnz	r0, 800e848 <__ssputs_r+0x5c>
 800e832:	230c      	movs	r3, #12
 800e834:	f8ca 3000 	str.w	r3, [sl]
 800e838:	89a3      	ldrh	r3, [r4, #12]
 800e83a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e83e:	81a3      	strh	r3, [r4, #12]
 800e840:	f04f 30ff 	mov.w	r0, #4294967295
 800e844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e848:	463a      	mov	r2, r7
 800e84a:	6921      	ldr	r1, [r4, #16]
 800e84c:	f7fc fc44 	bl	800b0d8 <memcpy>
 800e850:	89a3      	ldrh	r3, [r4, #12]
 800e852:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e856:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e85a:	81a3      	strh	r3, [r4, #12]
 800e85c:	6126      	str	r6, [r4, #16]
 800e85e:	6165      	str	r5, [r4, #20]
 800e860:	443e      	add	r6, r7
 800e862:	1bed      	subs	r5, r5, r7
 800e864:	6026      	str	r6, [r4, #0]
 800e866:	60a5      	str	r5, [r4, #8]
 800e868:	464e      	mov	r6, r9
 800e86a:	454e      	cmp	r6, r9
 800e86c:	d900      	bls.n	800e870 <__ssputs_r+0x84>
 800e86e:	464e      	mov	r6, r9
 800e870:	4632      	mov	r2, r6
 800e872:	4641      	mov	r1, r8
 800e874:	6820      	ldr	r0, [r4, #0]
 800e876:	f000 f93a 	bl	800eaee <memmove>
 800e87a:	68a3      	ldr	r3, [r4, #8]
 800e87c:	1b9b      	subs	r3, r3, r6
 800e87e:	60a3      	str	r3, [r4, #8]
 800e880:	6823      	ldr	r3, [r4, #0]
 800e882:	441e      	add	r6, r3
 800e884:	6026      	str	r6, [r4, #0]
 800e886:	2000      	movs	r0, #0
 800e888:	e7dc      	b.n	800e844 <__ssputs_r+0x58>
 800e88a:	462a      	mov	r2, r5
 800e88c:	f000 f94a 	bl	800eb24 <_realloc_r>
 800e890:	4606      	mov	r6, r0
 800e892:	2800      	cmp	r0, #0
 800e894:	d1e2      	bne.n	800e85c <__ssputs_r+0x70>
 800e896:	6921      	ldr	r1, [r4, #16]
 800e898:	4650      	mov	r0, sl
 800e89a:	f7ff feff 	bl	800e69c <_free_r>
 800e89e:	e7c8      	b.n	800e832 <__ssputs_r+0x46>

0800e8a0 <_svfiprintf_r>:
 800e8a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8a4:	461d      	mov	r5, r3
 800e8a6:	898b      	ldrh	r3, [r1, #12]
 800e8a8:	061f      	lsls	r7, r3, #24
 800e8aa:	b09d      	sub	sp, #116	; 0x74
 800e8ac:	4680      	mov	r8, r0
 800e8ae:	460c      	mov	r4, r1
 800e8b0:	4616      	mov	r6, r2
 800e8b2:	d50f      	bpl.n	800e8d4 <_svfiprintf_r+0x34>
 800e8b4:	690b      	ldr	r3, [r1, #16]
 800e8b6:	b96b      	cbnz	r3, 800e8d4 <_svfiprintf_r+0x34>
 800e8b8:	2140      	movs	r1, #64	; 0x40
 800e8ba:	f7ff ff3d 	bl	800e738 <_malloc_r>
 800e8be:	6020      	str	r0, [r4, #0]
 800e8c0:	6120      	str	r0, [r4, #16]
 800e8c2:	b928      	cbnz	r0, 800e8d0 <_svfiprintf_r+0x30>
 800e8c4:	230c      	movs	r3, #12
 800e8c6:	f8c8 3000 	str.w	r3, [r8]
 800e8ca:	f04f 30ff 	mov.w	r0, #4294967295
 800e8ce:	e0c8      	b.n	800ea62 <_svfiprintf_r+0x1c2>
 800e8d0:	2340      	movs	r3, #64	; 0x40
 800e8d2:	6163      	str	r3, [r4, #20]
 800e8d4:	2300      	movs	r3, #0
 800e8d6:	9309      	str	r3, [sp, #36]	; 0x24
 800e8d8:	2320      	movs	r3, #32
 800e8da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e8de:	2330      	movs	r3, #48	; 0x30
 800e8e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e8e4:	9503      	str	r5, [sp, #12]
 800e8e6:	f04f 0b01 	mov.w	fp, #1
 800e8ea:	4637      	mov	r7, r6
 800e8ec:	463d      	mov	r5, r7
 800e8ee:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e8f2:	b10b      	cbz	r3, 800e8f8 <_svfiprintf_r+0x58>
 800e8f4:	2b25      	cmp	r3, #37	; 0x25
 800e8f6:	d13e      	bne.n	800e976 <_svfiprintf_r+0xd6>
 800e8f8:	ebb7 0a06 	subs.w	sl, r7, r6
 800e8fc:	d00b      	beq.n	800e916 <_svfiprintf_r+0x76>
 800e8fe:	4653      	mov	r3, sl
 800e900:	4632      	mov	r2, r6
 800e902:	4621      	mov	r1, r4
 800e904:	4640      	mov	r0, r8
 800e906:	f7ff ff71 	bl	800e7ec <__ssputs_r>
 800e90a:	3001      	adds	r0, #1
 800e90c:	f000 80a4 	beq.w	800ea58 <_svfiprintf_r+0x1b8>
 800e910:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e912:	4453      	add	r3, sl
 800e914:	9309      	str	r3, [sp, #36]	; 0x24
 800e916:	783b      	ldrb	r3, [r7, #0]
 800e918:	2b00      	cmp	r3, #0
 800e91a:	f000 809d 	beq.w	800ea58 <_svfiprintf_r+0x1b8>
 800e91e:	2300      	movs	r3, #0
 800e920:	f04f 32ff 	mov.w	r2, #4294967295
 800e924:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e928:	9304      	str	r3, [sp, #16]
 800e92a:	9307      	str	r3, [sp, #28]
 800e92c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e930:	931a      	str	r3, [sp, #104]	; 0x68
 800e932:	462f      	mov	r7, r5
 800e934:	2205      	movs	r2, #5
 800e936:	f817 1b01 	ldrb.w	r1, [r7], #1
 800e93a:	4850      	ldr	r0, [pc, #320]	; (800ea7c <_svfiprintf_r+0x1dc>)
 800e93c:	f7f1 fc50 	bl	80001e0 <memchr>
 800e940:	9b04      	ldr	r3, [sp, #16]
 800e942:	b9d0      	cbnz	r0, 800e97a <_svfiprintf_r+0xda>
 800e944:	06d9      	lsls	r1, r3, #27
 800e946:	bf44      	itt	mi
 800e948:	2220      	movmi	r2, #32
 800e94a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e94e:	071a      	lsls	r2, r3, #28
 800e950:	bf44      	itt	mi
 800e952:	222b      	movmi	r2, #43	; 0x2b
 800e954:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e958:	782a      	ldrb	r2, [r5, #0]
 800e95a:	2a2a      	cmp	r2, #42	; 0x2a
 800e95c:	d015      	beq.n	800e98a <_svfiprintf_r+0xea>
 800e95e:	9a07      	ldr	r2, [sp, #28]
 800e960:	462f      	mov	r7, r5
 800e962:	2000      	movs	r0, #0
 800e964:	250a      	movs	r5, #10
 800e966:	4639      	mov	r1, r7
 800e968:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e96c:	3b30      	subs	r3, #48	; 0x30
 800e96e:	2b09      	cmp	r3, #9
 800e970:	d94d      	bls.n	800ea0e <_svfiprintf_r+0x16e>
 800e972:	b1b8      	cbz	r0, 800e9a4 <_svfiprintf_r+0x104>
 800e974:	e00f      	b.n	800e996 <_svfiprintf_r+0xf6>
 800e976:	462f      	mov	r7, r5
 800e978:	e7b8      	b.n	800e8ec <_svfiprintf_r+0x4c>
 800e97a:	4a40      	ldr	r2, [pc, #256]	; (800ea7c <_svfiprintf_r+0x1dc>)
 800e97c:	1a80      	subs	r0, r0, r2
 800e97e:	fa0b f000 	lsl.w	r0, fp, r0
 800e982:	4318      	orrs	r0, r3
 800e984:	9004      	str	r0, [sp, #16]
 800e986:	463d      	mov	r5, r7
 800e988:	e7d3      	b.n	800e932 <_svfiprintf_r+0x92>
 800e98a:	9a03      	ldr	r2, [sp, #12]
 800e98c:	1d11      	adds	r1, r2, #4
 800e98e:	6812      	ldr	r2, [r2, #0]
 800e990:	9103      	str	r1, [sp, #12]
 800e992:	2a00      	cmp	r2, #0
 800e994:	db01      	blt.n	800e99a <_svfiprintf_r+0xfa>
 800e996:	9207      	str	r2, [sp, #28]
 800e998:	e004      	b.n	800e9a4 <_svfiprintf_r+0x104>
 800e99a:	4252      	negs	r2, r2
 800e99c:	f043 0302 	orr.w	r3, r3, #2
 800e9a0:	9207      	str	r2, [sp, #28]
 800e9a2:	9304      	str	r3, [sp, #16]
 800e9a4:	783b      	ldrb	r3, [r7, #0]
 800e9a6:	2b2e      	cmp	r3, #46	; 0x2e
 800e9a8:	d10c      	bne.n	800e9c4 <_svfiprintf_r+0x124>
 800e9aa:	787b      	ldrb	r3, [r7, #1]
 800e9ac:	2b2a      	cmp	r3, #42	; 0x2a
 800e9ae:	d133      	bne.n	800ea18 <_svfiprintf_r+0x178>
 800e9b0:	9b03      	ldr	r3, [sp, #12]
 800e9b2:	1d1a      	adds	r2, r3, #4
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	9203      	str	r2, [sp, #12]
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	bfb8      	it	lt
 800e9bc:	f04f 33ff 	movlt.w	r3, #4294967295
 800e9c0:	3702      	adds	r7, #2
 800e9c2:	9305      	str	r3, [sp, #20]
 800e9c4:	4d2e      	ldr	r5, [pc, #184]	; (800ea80 <_svfiprintf_r+0x1e0>)
 800e9c6:	7839      	ldrb	r1, [r7, #0]
 800e9c8:	2203      	movs	r2, #3
 800e9ca:	4628      	mov	r0, r5
 800e9cc:	f7f1 fc08 	bl	80001e0 <memchr>
 800e9d0:	b138      	cbz	r0, 800e9e2 <_svfiprintf_r+0x142>
 800e9d2:	2340      	movs	r3, #64	; 0x40
 800e9d4:	1b40      	subs	r0, r0, r5
 800e9d6:	fa03 f000 	lsl.w	r0, r3, r0
 800e9da:	9b04      	ldr	r3, [sp, #16]
 800e9dc:	4303      	orrs	r3, r0
 800e9de:	3701      	adds	r7, #1
 800e9e0:	9304      	str	r3, [sp, #16]
 800e9e2:	7839      	ldrb	r1, [r7, #0]
 800e9e4:	4827      	ldr	r0, [pc, #156]	; (800ea84 <_svfiprintf_r+0x1e4>)
 800e9e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e9ea:	2206      	movs	r2, #6
 800e9ec:	1c7e      	adds	r6, r7, #1
 800e9ee:	f7f1 fbf7 	bl	80001e0 <memchr>
 800e9f2:	2800      	cmp	r0, #0
 800e9f4:	d038      	beq.n	800ea68 <_svfiprintf_r+0x1c8>
 800e9f6:	4b24      	ldr	r3, [pc, #144]	; (800ea88 <_svfiprintf_r+0x1e8>)
 800e9f8:	bb13      	cbnz	r3, 800ea40 <_svfiprintf_r+0x1a0>
 800e9fa:	9b03      	ldr	r3, [sp, #12]
 800e9fc:	3307      	adds	r3, #7
 800e9fe:	f023 0307 	bic.w	r3, r3, #7
 800ea02:	3308      	adds	r3, #8
 800ea04:	9303      	str	r3, [sp, #12]
 800ea06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea08:	444b      	add	r3, r9
 800ea0a:	9309      	str	r3, [sp, #36]	; 0x24
 800ea0c:	e76d      	b.n	800e8ea <_svfiprintf_r+0x4a>
 800ea0e:	fb05 3202 	mla	r2, r5, r2, r3
 800ea12:	2001      	movs	r0, #1
 800ea14:	460f      	mov	r7, r1
 800ea16:	e7a6      	b.n	800e966 <_svfiprintf_r+0xc6>
 800ea18:	2300      	movs	r3, #0
 800ea1a:	3701      	adds	r7, #1
 800ea1c:	9305      	str	r3, [sp, #20]
 800ea1e:	4619      	mov	r1, r3
 800ea20:	250a      	movs	r5, #10
 800ea22:	4638      	mov	r0, r7
 800ea24:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ea28:	3a30      	subs	r2, #48	; 0x30
 800ea2a:	2a09      	cmp	r2, #9
 800ea2c:	d903      	bls.n	800ea36 <_svfiprintf_r+0x196>
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d0c8      	beq.n	800e9c4 <_svfiprintf_r+0x124>
 800ea32:	9105      	str	r1, [sp, #20]
 800ea34:	e7c6      	b.n	800e9c4 <_svfiprintf_r+0x124>
 800ea36:	fb05 2101 	mla	r1, r5, r1, r2
 800ea3a:	2301      	movs	r3, #1
 800ea3c:	4607      	mov	r7, r0
 800ea3e:	e7f0      	b.n	800ea22 <_svfiprintf_r+0x182>
 800ea40:	ab03      	add	r3, sp, #12
 800ea42:	9300      	str	r3, [sp, #0]
 800ea44:	4622      	mov	r2, r4
 800ea46:	4b11      	ldr	r3, [pc, #68]	; (800ea8c <_svfiprintf_r+0x1ec>)
 800ea48:	a904      	add	r1, sp, #16
 800ea4a:	4640      	mov	r0, r8
 800ea4c:	f7fc fbec 	bl	800b228 <_printf_float>
 800ea50:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ea54:	4681      	mov	r9, r0
 800ea56:	d1d6      	bne.n	800ea06 <_svfiprintf_r+0x166>
 800ea58:	89a3      	ldrh	r3, [r4, #12]
 800ea5a:	065b      	lsls	r3, r3, #25
 800ea5c:	f53f af35 	bmi.w	800e8ca <_svfiprintf_r+0x2a>
 800ea60:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ea62:	b01d      	add	sp, #116	; 0x74
 800ea64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea68:	ab03      	add	r3, sp, #12
 800ea6a:	9300      	str	r3, [sp, #0]
 800ea6c:	4622      	mov	r2, r4
 800ea6e:	4b07      	ldr	r3, [pc, #28]	; (800ea8c <_svfiprintf_r+0x1ec>)
 800ea70:	a904      	add	r1, sp, #16
 800ea72:	4640      	mov	r0, r8
 800ea74:	f7fc fe8e 	bl	800b794 <_printf_i>
 800ea78:	e7ea      	b.n	800ea50 <_svfiprintf_r+0x1b0>
 800ea7a:	bf00      	nop
 800ea7c:	0800efe4 	.word	0x0800efe4
 800ea80:	0800efea 	.word	0x0800efea
 800ea84:	0800efee 	.word	0x0800efee
 800ea88:	0800b229 	.word	0x0800b229
 800ea8c:	0800e7ed 	.word	0x0800e7ed

0800ea90 <_sbrk_r>:
 800ea90:	b538      	push	{r3, r4, r5, lr}
 800ea92:	4c06      	ldr	r4, [pc, #24]	; (800eaac <_sbrk_r+0x1c>)
 800ea94:	2300      	movs	r3, #0
 800ea96:	4605      	mov	r5, r0
 800ea98:	4608      	mov	r0, r1
 800ea9a:	6023      	str	r3, [r4, #0]
 800ea9c:	f7f4 f84e 	bl	8002b3c <_sbrk>
 800eaa0:	1c43      	adds	r3, r0, #1
 800eaa2:	d102      	bne.n	800eaaa <_sbrk_r+0x1a>
 800eaa4:	6823      	ldr	r3, [r4, #0]
 800eaa6:	b103      	cbz	r3, 800eaaa <_sbrk_r+0x1a>
 800eaa8:	602b      	str	r3, [r5, #0]
 800eaaa:	bd38      	pop	{r3, r4, r5, pc}
 800eaac:	20006404 	.word	0x20006404

0800eab0 <strncmp>:
 800eab0:	b510      	push	{r4, lr}
 800eab2:	b16a      	cbz	r2, 800ead0 <strncmp+0x20>
 800eab4:	3901      	subs	r1, #1
 800eab6:	1884      	adds	r4, r0, r2
 800eab8:	f810 3b01 	ldrb.w	r3, [r0], #1
 800eabc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800eac0:	4293      	cmp	r3, r2
 800eac2:	d103      	bne.n	800eacc <strncmp+0x1c>
 800eac4:	42a0      	cmp	r0, r4
 800eac6:	d001      	beq.n	800eacc <strncmp+0x1c>
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d1f5      	bne.n	800eab8 <strncmp+0x8>
 800eacc:	1a98      	subs	r0, r3, r2
 800eace:	bd10      	pop	{r4, pc}
 800ead0:	4610      	mov	r0, r2
 800ead2:	e7fc      	b.n	800eace <strncmp+0x1e>

0800ead4 <__ascii_wctomb>:
 800ead4:	b149      	cbz	r1, 800eaea <__ascii_wctomb+0x16>
 800ead6:	2aff      	cmp	r2, #255	; 0xff
 800ead8:	bf85      	ittet	hi
 800eada:	238a      	movhi	r3, #138	; 0x8a
 800eadc:	6003      	strhi	r3, [r0, #0]
 800eade:	700a      	strbls	r2, [r1, #0]
 800eae0:	f04f 30ff 	movhi.w	r0, #4294967295
 800eae4:	bf98      	it	ls
 800eae6:	2001      	movls	r0, #1
 800eae8:	4770      	bx	lr
 800eaea:	4608      	mov	r0, r1
 800eaec:	4770      	bx	lr

0800eaee <memmove>:
 800eaee:	4288      	cmp	r0, r1
 800eaf0:	b510      	push	{r4, lr}
 800eaf2:	eb01 0302 	add.w	r3, r1, r2
 800eaf6:	d807      	bhi.n	800eb08 <memmove+0x1a>
 800eaf8:	1e42      	subs	r2, r0, #1
 800eafa:	4299      	cmp	r1, r3
 800eafc:	d00a      	beq.n	800eb14 <memmove+0x26>
 800eafe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eb02:	f802 4f01 	strb.w	r4, [r2, #1]!
 800eb06:	e7f8      	b.n	800eafa <memmove+0xc>
 800eb08:	4283      	cmp	r3, r0
 800eb0a:	d9f5      	bls.n	800eaf8 <memmove+0xa>
 800eb0c:	1881      	adds	r1, r0, r2
 800eb0e:	1ad2      	subs	r2, r2, r3
 800eb10:	42d3      	cmn	r3, r2
 800eb12:	d100      	bne.n	800eb16 <memmove+0x28>
 800eb14:	bd10      	pop	{r4, pc}
 800eb16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800eb1a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800eb1e:	e7f7      	b.n	800eb10 <memmove+0x22>

0800eb20 <__malloc_lock>:
 800eb20:	4770      	bx	lr

0800eb22 <__malloc_unlock>:
 800eb22:	4770      	bx	lr

0800eb24 <_realloc_r>:
 800eb24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb26:	4607      	mov	r7, r0
 800eb28:	4614      	mov	r4, r2
 800eb2a:	460e      	mov	r6, r1
 800eb2c:	b921      	cbnz	r1, 800eb38 <_realloc_r+0x14>
 800eb2e:	4611      	mov	r1, r2
 800eb30:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800eb34:	f7ff be00 	b.w	800e738 <_malloc_r>
 800eb38:	b922      	cbnz	r2, 800eb44 <_realloc_r+0x20>
 800eb3a:	f7ff fdaf 	bl	800e69c <_free_r>
 800eb3e:	4625      	mov	r5, r4
 800eb40:	4628      	mov	r0, r5
 800eb42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eb44:	f000 f814 	bl	800eb70 <_malloc_usable_size_r>
 800eb48:	42a0      	cmp	r0, r4
 800eb4a:	d20f      	bcs.n	800eb6c <_realloc_r+0x48>
 800eb4c:	4621      	mov	r1, r4
 800eb4e:	4638      	mov	r0, r7
 800eb50:	f7ff fdf2 	bl	800e738 <_malloc_r>
 800eb54:	4605      	mov	r5, r0
 800eb56:	2800      	cmp	r0, #0
 800eb58:	d0f2      	beq.n	800eb40 <_realloc_r+0x1c>
 800eb5a:	4631      	mov	r1, r6
 800eb5c:	4622      	mov	r2, r4
 800eb5e:	f7fc fabb 	bl	800b0d8 <memcpy>
 800eb62:	4631      	mov	r1, r6
 800eb64:	4638      	mov	r0, r7
 800eb66:	f7ff fd99 	bl	800e69c <_free_r>
 800eb6a:	e7e9      	b.n	800eb40 <_realloc_r+0x1c>
 800eb6c:	4635      	mov	r5, r6
 800eb6e:	e7e7      	b.n	800eb40 <_realloc_r+0x1c>

0800eb70 <_malloc_usable_size_r>:
 800eb70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eb74:	1f18      	subs	r0, r3, #4
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	bfbc      	itt	lt
 800eb7a:	580b      	ldrlt	r3, [r1, r0]
 800eb7c:	18c0      	addlt	r0, r0, r3
 800eb7e:	4770      	bx	lr

0800eb80 <_init>:
 800eb80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb82:	bf00      	nop
 800eb84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb86:	bc08      	pop	{r3}
 800eb88:	469e      	mov	lr, r3
 800eb8a:	4770      	bx	lr

0800eb8c <_fini>:
 800eb8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb8e:	bf00      	nop
 800eb90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb92:	bc08      	pop	{r3}
 800eb94:	469e      	mov	lr, r3
 800eb96:	4770      	bx	lr
